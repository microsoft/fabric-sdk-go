// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package digitaltwinbuilder

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateDigitalTwinBuilder - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create digitaltwinbuilder with definition, refer to DigitalTwinBuilder definition [/rest/api/fabric/articles/item-management/definitions/digital-twin-builder-definition].
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilder.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a digitaltwinbuilder the workspace must be on a supported Fabric capacity. For more information see: Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createDigitalTwinBuilderRequest - Create item request payload.
//   - options - ItemsClientBeginCreateDigitalTwinBuilderOptions contains the optional parameters for the ItemsClient.BeginCreateDigitalTwinBuilder
//     method.
func (client *ItemsClient) BeginCreateDigitalTwinBuilder(ctx context.Context, workspaceID string, createDigitalTwinBuilderRequest CreateDigitalTwinBuilderRequest, options *ItemsClientBeginCreateDigitalTwinBuilderOptions) (*runtime.Poller[ItemsClientCreateDigitalTwinBuilderResponse], error) {
	return client.beginCreateDigitalTwinBuilder(ctx, workspaceID, createDigitalTwinBuilderRequest, options)
}

// CreateDigitalTwinBuilder - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create digitaltwinbuilder with definition, refer to DigitalTwinBuilder definition [/rest/api/fabric/articles/item-management/definitions/digital-twin-builder-definition].
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilder.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a digitaltwinbuilder the workspace must be on a supported Fabric capacity. For more information see: Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createDigitalTwinBuilder(ctx context.Context, workspaceID string, createDigitalTwinBuilderRequest CreateDigitalTwinBuilderRequest, options *ItemsClientBeginCreateDigitalTwinBuilderOptions) (*http.Response, error) {
	var err error
	const operationName = "digitaltwinbuilder.ItemsClient.BeginCreateDigitalTwinBuilder"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createDigitalTwinBuilderCreateRequest(ctx, workspaceID, createDigitalTwinBuilderRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createDigitalTwinBuilderCreateRequest creates the CreateDigitalTwinBuilder request.
func (client *ItemsClient) createDigitalTwinBuilderCreateRequest(ctx context.Context, workspaceID string, createDigitalTwinBuilderRequest CreateDigitalTwinBuilderRequest, _ *ItemsClientBeginCreateDigitalTwinBuilderOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/digitaltwinbuilders"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createDigitalTwinBuilderRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteDigitalTwinBuilder - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilder.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitaltwinbuilderID - The digitaltwinbuilder ID.
//   - options - ItemsClientDeleteDigitalTwinBuilderOptions contains the optional parameters for the ItemsClient.DeleteDigitalTwinBuilder
//     method.
func (client *ItemsClient) DeleteDigitalTwinBuilder(ctx context.Context, workspaceID string, digitaltwinbuilderID string, options *ItemsClientDeleteDigitalTwinBuilderOptions) (ItemsClientDeleteDigitalTwinBuilderResponse, error) {
	var err error
	const operationName = "digitaltwinbuilder.ItemsClient.DeleteDigitalTwinBuilder"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteDigitalTwinBuilderCreateRequest(ctx, workspaceID, digitaltwinbuilderID, options)
	if err != nil {
		return ItemsClientDeleteDigitalTwinBuilderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteDigitalTwinBuilderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteDigitalTwinBuilderResponse{}, err
	}
	return ItemsClientDeleteDigitalTwinBuilderResponse{}, nil
}

// deleteDigitalTwinBuilderCreateRequest creates the DeleteDigitalTwinBuilder request.
func (client *ItemsClient) deleteDigitalTwinBuilderCreateRequest(ctx context.Context, workspaceID string, digitaltwinbuilderID string, _ *ItemsClientDeleteDigitalTwinBuilderOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/digitaltwinbuilders/{digitaltwinbuilderId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if digitaltwinbuilderID == "" {
		return nil, errors.New("parameter digitaltwinbuilderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{digitaltwinbuilderId}", url.PathEscape(digitaltwinbuilderID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetDigitalTwinBuilder - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilder.Read.All or DigitalTwinBuilder.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitaltwinbuilderID - The digitaltwinbuilder ID.
//   - options - ItemsClientGetDigitalTwinBuilderOptions contains the optional parameters for the ItemsClient.GetDigitalTwinBuilder
//     method.
func (client *ItemsClient) GetDigitalTwinBuilder(ctx context.Context, workspaceID string, digitaltwinbuilderID string, options *ItemsClientGetDigitalTwinBuilderOptions) (ItemsClientGetDigitalTwinBuilderResponse, error) {
	var err error
	const operationName = "digitaltwinbuilder.ItemsClient.GetDigitalTwinBuilder"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDigitalTwinBuilderCreateRequest(ctx, workspaceID, digitaltwinbuilderID, options)
	if err != nil {
		return ItemsClientGetDigitalTwinBuilderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetDigitalTwinBuilderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetDigitalTwinBuilderResponse{}, err
	}
	resp, err := client.getDigitalTwinBuilderHandleResponse(httpResp)
	return resp, err
}

// getDigitalTwinBuilderCreateRequest creates the GetDigitalTwinBuilder request.
func (client *ItemsClient) getDigitalTwinBuilderCreateRequest(ctx context.Context, workspaceID string, digitaltwinbuilderID string, _ *ItemsClientGetDigitalTwinBuilderOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/digitaltwinbuilders/{digitaltwinbuilderId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if digitaltwinbuilderID == "" {
		return nil, errors.New("parameter digitaltwinbuilderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{digitaltwinbuilderId}", url.PathEscape(digitaltwinbuilderID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDigitalTwinBuilderHandleResponse handles the GetDigitalTwinBuilder response.
func (client *ItemsClient) getDigitalTwinBuilderHandleResponse(resp *http.Response) (ItemsClientGetDigitalTwinBuilderResponse, error) {
	result := ItemsClientGetDigitalTwinBuilderResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DigitalTwinBuilder); err != nil {
		return ItemsClientGetDigitalTwinBuilderResponse{}, err
	}
	return result, nil
}

// BeginGetDigitalTwinBuilderDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a digitaltwinbuilder public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilder.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS This API is blocked for a digitaltwinbuilder with an encrypted sensitivity label.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitaltwinbuilderID - The digitaltwinbuilder ID.
//   - options - ItemsClientBeginGetDigitalTwinBuilderDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetDigitalTwinBuilderDefinition
//     method.
func (client *ItemsClient) BeginGetDigitalTwinBuilderDefinition(ctx context.Context, workspaceID string, digitaltwinbuilderID string, options *ItemsClientBeginGetDigitalTwinBuilderDefinitionOptions) (*runtime.Poller[ItemsClientGetDigitalTwinBuilderDefinitionResponse], error) {
	return client.beginGetDigitalTwinBuilderDefinition(ctx, workspaceID, digitaltwinbuilderID, options)
}

// GetDigitalTwinBuilderDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a digitaltwinbuilder public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilder.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS This API is blocked for a digitaltwinbuilder with an encrypted sensitivity label.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getDigitalTwinBuilderDefinition(ctx context.Context, workspaceID string, digitaltwinbuilderID string, options *ItemsClientBeginGetDigitalTwinBuilderDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "digitaltwinbuilder.ItemsClient.BeginGetDigitalTwinBuilderDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDigitalTwinBuilderDefinitionCreateRequest(ctx, workspaceID, digitaltwinbuilderID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getDigitalTwinBuilderDefinitionCreateRequest creates the GetDigitalTwinBuilderDefinition request.
func (client *ItemsClient) getDigitalTwinBuilderDefinitionCreateRequest(ctx context.Context, workspaceID string, digitaltwinbuilderID string, options *ItemsClientBeginGetDigitalTwinBuilderDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/digitaltwinbuilders/{digitaltwinbuilderId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if digitaltwinbuilderID == "" {
		return nil, errors.New("parameter digitaltwinbuilderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{digitaltwinbuilderId}", url.PathEscape(digitaltwinbuilderID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("format", *options.Format)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListDigitalTwinBuildersPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListDigitalTwinBuildersOptions contains the optional parameters for the ItemsClient.NewListDigitalTwinBuildersPager
//     method.
func (client *ItemsClient) NewListDigitalTwinBuildersPager(workspaceID string, options *ItemsClientListDigitalTwinBuildersOptions) *runtime.Pager[ItemsClientListDigitalTwinBuildersResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListDigitalTwinBuildersResponse]{
		More: func(page ItemsClientListDigitalTwinBuildersResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListDigitalTwinBuildersResponse) (ItemsClientListDigitalTwinBuildersResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "digitaltwinbuilder.ItemsClient.NewListDigitalTwinBuildersPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listDigitalTwinBuildersCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListDigitalTwinBuildersResponse{}, err
			}
			return client.listDigitalTwinBuildersHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listDigitalTwinBuildersCreateRequest creates the ListDigitalTwinBuilders request.
func (client *ItemsClient) listDigitalTwinBuildersCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListDigitalTwinBuildersOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/digitaltwinbuilders"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listDigitalTwinBuildersHandleResponse handles the ListDigitalTwinBuilders response.
func (client *ItemsClient) listDigitalTwinBuildersHandleResponse(resp *http.Response) (ItemsClientListDigitalTwinBuildersResponse, error) {
	result := ItemsClientListDigitalTwinBuildersResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DigitalTwinBuilders); err != nil {
		return ItemsClientListDigitalTwinBuildersResponse{}, err
	}
	return result, nil
}

// UpdateDigitalTwinBuilder - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilder.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitaltwinbuilderID - The digitaltwinbuilder ID.
//   - updateDigitalTwinBuilderRequest - Update digitaltwinbuilder request payload.
//   - options - ItemsClientUpdateDigitalTwinBuilderOptions contains the optional parameters for the ItemsClient.UpdateDigitalTwinBuilder
//     method.
func (client *ItemsClient) UpdateDigitalTwinBuilder(ctx context.Context, workspaceID string, digitaltwinbuilderID string, updateDigitalTwinBuilderRequest UpdateDigitalTwinBuilderRequest, options *ItemsClientUpdateDigitalTwinBuilderOptions) (ItemsClientUpdateDigitalTwinBuilderResponse, error) {
	var err error
	const operationName = "digitaltwinbuilder.ItemsClient.UpdateDigitalTwinBuilder"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateDigitalTwinBuilderCreateRequest(ctx, workspaceID, digitaltwinbuilderID, updateDigitalTwinBuilderRequest, options)
	if err != nil {
		return ItemsClientUpdateDigitalTwinBuilderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateDigitalTwinBuilderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateDigitalTwinBuilderResponse{}, err
	}
	resp, err := client.updateDigitalTwinBuilderHandleResponse(httpResp)
	return resp, err
}

// updateDigitalTwinBuilderCreateRequest creates the UpdateDigitalTwinBuilder request.
func (client *ItemsClient) updateDigitalTwinBuilderCreateRequest(ctx context.Context, workspaceID string, digitaltwinbuilderID string, updateDigitalTwinBuilderRequest UpdateDigitalTwinBuilderRequest, _ *ItemsClientUpdateDigitalTwinBuilderOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/digitaltwinbuilders/{digitaltwinbuilderId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if digitaltwinbuilderID == "" {
		return nil, errors.New("parameter digitaltwinbuilderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{digitaltwinbuilderId}", url.PathEscape(digitaltwinbuilderID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateDigitalTwinBuilderRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateDigitalTwinBuilderHandleResponse handles the UpdateDigitalTwinBuilder response.
func (client *ItemsClient) updateDigitalTwinBuilderHandleResponse(resp *http.Response) (ItemsClientUpdateDigitalTwinBuilderResponse, error) {
	result := ItemsClientUpdateDigitalTwinBuilderResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DigitalTwinBuilder); err != nil {
		return ItemsClientUpdateDigitalTwinBuilderResponse{}, err
	}
	return result, nil
}

// BeginUpdateDigitalTwinBuilderDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the digitaltwinbuilder definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilder.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitaltwinbuilderID - The digitaltwinbuilder ID.
//   - updateDigitalTwinBuilderDefinitionRequest - Update digitaltwinbuilder definition request payload.
//   - options - ItemsClientBeginUpdateDigitalTwinBuilderDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateDigitalTwinBuilderDefinition
//     method.
func (client *ItemsClient) BeginUpdateDigitalTwinBuilderDefinition(ctx context.Context, workspaceID string, digitaltwinbuilderID string, updateDigitalTwinBuilderDefinitionRequest UpdateDigitalTwinBuilderDefinitionRequest, options *ItemsClientBeginUpdateDigitalTwinBuilderDefinitionOptions) (*runtime.Poller[ItemsClientUpdateDigitalTwinBuilderDefinitionResponse], error) {
	return client.beginUpdateDigitalTwinBuilderDefinition(ctx, workspaceID, digitaltwinbuilderID, updateDigitalTwinBuilderDefinitionRequest, options)
}

// UpdateDigitalTwinBuilderDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the digitaltwinbuilder definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilder.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateDigitalTwinBuilderDefinition(ctx context.Context, workspaceID string, digitaltwinbuilderID string, updateDigitalTwinBuilderDefinitionRequest UpdateDigitalTwinBuilderDefinitionRequest, options *ItemsClientBeginUpdateDigitalTwinBuilderDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "digitaltwinbuilder.ItemsClient.BeginUpdateDigitalTwinBuilderDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateDigitalTwinBuilderDefinitionCreateRequest(ctx, workspaceID, digitaltwinbuilderID, updateDigitalTwinBuilderDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateDigitalTwinBuilderDefinitionCreateRequest creates the UpdateDigitalTwinBuilderDefinition request.
func (client *ItemsClient) updateDigitalTwinBuilderDefinitionCreateRequest(ctx context.Context, workspaceID string, digitaltwinbuilderID string, updateDigitalTwinBuilderDefinitionRequest UpdateDigitalTwinBuilderDefinitionRequest, options *ItemsClientBeginUpdateDigitalTwinBuilderDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/digitaltwinbuilders/{digitaltwinbuilderId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if digitaltwinbuilderID == "" {
		return nil, errors.New("parameter digitaltwinbuilderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{digitaltwinbuilderId}", url.PathEscape(digitaltwinbuilderID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateDigitalTwinBuilderDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateDigitalTwinBuilder - returns ItemsClientCreateDigitalTwinBuilderResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// To create digitaltwinbuilder with definition, refer to DigitalTwinBuilder definition [/rest/api/fabric/articles/item-management/definitions/digital-twin-builder-definition].
//
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilder.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a digitaltwinbuilder the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types
//     [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createDigitalTwinBuilderRequest - Create item request payload.
//   - options - ItemsClientBeginCreateDigitalTwinBuilderOptions contains the optional parameters for the ItemsClient.BeginCreateDigitalTwinBuilder method.
func (client *ItemsClient) CreateDigitalTwinBuilder(ctx context.Context, workspaceID string, createDigitalTwinBuilderRequest CreateDigitalTwinBuilderRequest, options *ItemsClientBeginCreateDigitalTwinBuilderOptions) (ItemsClientCreateDigitalTwinBuilderResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateDigitalTwinBuilder(ctx, workspaceID, createDigitalTwinBuilderRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateDigitalTwinBuilderResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateDigitalTwinBuilderResponse{}, err
	}
	return result, err
}

// beginCreateDigitalTwinBuilder creates the createDigitalTwinBuilder request.
func (client *ItemsClient) beginCreateDigitalTwinBuilder(ctx context.Context, workspaceID string, createDigitalTwinBuilderRequest CreateDigitalTwinBuilderRequest, options *ItemsClientBeginCreateDigitalTwinBuilderOptions) (*runtime.Poller[ItemsClientCreateDigitalTwinBuilderResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createDigitalTwinBuilder(ctx, workspaceID, createDigitalTwinBuilderRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateDigitalTwinBuilderResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateDigitalTwinBuilderResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateDigitalTwinBuilderResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateDigitalTwinBuilderResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetDigitalTwinBuilderDefinition - returns ItemsClientGetDigitalTwinBuilderDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// When you get a digitaltwinbuilder public definition, the sensitivity label is not a part of the definition.
//
// PERMISSIONS The caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES DigitalTwinBuilder.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS This API is blocked for a digitaltwinbuilder with an encrypted sensitivity label.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitaltwinbuilderID - The digitaltwinbuilder ID.
//   - options - ItemsClientBeginGetDigitalTwinBuilderDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetDigitalTwinBuilderDefinition method.
func (client *ItemsClient) GetDigitalTwinBuilderDefinition(ctx context.Context, workspaceID string, digitaltwinbuilderID string, options *ItemsClientBeginGetDigitalTwinBuilderDefinitionOptions) (ItemsClientGetDigitalTwinBuilderDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetDigitalTwinBuilderDefinition(ctx, workspaceID, digitaltwinbuilderID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetDigitalTwinBuilderDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetDigitalTwinBuilderDefinitionResponse{}, err
	}
	return result, err
}

// beginGetDigitalTwinBuilderDefinition creates the getDigitalTwinBuilderDefinition request.
func (client *ItemsClient) beginGetDigitalTwinBuilderDefinition(ctx context.Context, workspaceID string, digitaltwinbuilderID string, options *ItemsClientBeginGetDigitalTwinBuilderDefinitionOptions) (*runtime.Poller[ItemsClientGetDigitalTwinBuilderDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getDigitalTwinBuilderDefinition(ctx, workspaceID, digitaltwinbuilderID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetDigitalTwinBuilderDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetDigitalTwinBuilderDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetDigitalTwinBuilderDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetDigitalTwinBuilderDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateDigitalTwinBuilderDefinition - returns ItemsClientUpdateDigitalTwinBuilderDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// Updating the digitaltwinbuilder definition, does not affect its sensitivity label.
//
// PERMISSIONS The API caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES DigitalTwinBuilder.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitaltwinbuilderID - The digitaltwinbuilder ID.
//   - updateDigitalTwinBuilderDefinitionRequest - Update digitaltwinbuilder definition request payload.
//   - options - ItemsClientBeginUpdateDigitalTwinBuilderDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateDigitalTwinBuilderDefinition method.
func (client *ItemsClient) UpdateDigitalTwinBuilderDefinition(ctx context.Context, workspaceID string, digitaltwinbuilderID string, updateDigitalTwinBuilderDefinitionRequest UpdateDigitalTwinBuilderDefinitionRequest, options *ItemsClientBeginUpdateDigitalTwinBuilderDefinitionOptions) (ItemsClientUpdateDigitalTwinBuilderDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateDigitalTwinBuilderDefinition(ctx, workspaceID, digitaltwinbuilderID, updateDigitalTwinBuilderDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateDigitalTwinBuilderDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateDigitalTwinBuilderDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateDigitalTwinBuilderDefinition creates the updateDigitalTwinBuilderDefinition request.
func (client *ItemsClient) beginUpdateDigitalTwinBuilderDefinition(ctx context.Context, workspaceID string, digitaltwinbuilderID string, updateDigitalTwinBuilderDefinitionRequest UpdateDigitalTwinBuilderDefinitionRequest, options *ItemsClientBeginUpdateDigitalTwinBuilderDefinitionOptions) (*runtime.Poller[ItemsClientUpdateDigitalTwinBuilderDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateDigitalTwinBuilderDefinition(ctx, workspaceID, digitaltwinbuilderID, updateDigitalTwinBuilderDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateDigitalTwinBuilderDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateDigitalTwinBuilderDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateDigitalTwinBuilderDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateDigitalTwinBuilderDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListDigitalTwinBuilders - returns array of DigitalTwinBuilder from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListDigitalTwinBuildersOptions contains the optional parameters for the ItemsClient.NewListDigitalTwinBuildersPager method.
func (client *ItemsClient) ListDigitalTwinBuilders(ctx context.Context, workspaceID string, options *ItemsClientListDigitalTwinBuildersOptions) ([]DigitalTwinBuilder, error) {
	pager := client.NewListDigitalTwinBuildersPager(workspaceID, options)
	mapper := func(resp ItemsClientListDigitalTwinBuildersResponse) []DigitalTwinBuilder {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []DigitalTwinBuilder{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []DigitalTwinBuilder{}, err
	}
	return list, nil
}
