// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package digitaltwinbuilder_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/digitaltwinbuilder"
	"github.com/microsoft/fabric-sdk-go/fabric/digitaltwinbuilder/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *digitaltwinbuilder.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = digitaltwinbuilder.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListDigitalTwinBuilders() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List digitaltwinbuilders in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := digitaltwinbuilder.DigitalTwinBuilders{
		Value: []digitaltwinbuilder.DigitalTwinBuilder{
			{
				Type:        to.Ptr(digitaltwinbuilder.ItemTypeDigitalTwinBuilder),
				Description: to.Ptr("A digitaltwinbuilder description."),
				DisplayName: to.Ptr("DigitalTwinBuilder Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(digitaltwinbuilder.ItemTypeDigitalTwinBuilder),
				Description: to.Ptr("A digitaltwinbuilder description."),
				DisplayName: to.Ptr("DigitalTwinBuilder Name 2"),
				ID:          to.Ptr("f697fb63-abd4-4399-9548-be7e3c3c0dac"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListDigitalTwinBuildersPager = func(workspaceID string, options *digitaltwinbuilder.ItemsClientListDigitalTwinBuildersOptions) (resp azfake.PagerResponder[digitaltwinbuilder.ItemsClientListDigitalTwinBuildersResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[digitaltwinbuilder.ItemsClientListDigitalTwinBuildersResponse]{}
		resp.AddPage(http.StatusOK, digitaltwinbuilder.ItemsClientListDigitalTwinBuildersResponse{DigitalTwinBuilders: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListDigitalTwinBuildersPager(exampleWorkspaceID, &digitaltwinbuilder.ItemsClientListDigitalTwinBuildersOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DigitalTwinBuilders))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateDigitalTwinBuilder() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a digitaltwinbuilder example"},
	})
	var exampleWorkspaceID string
	var exampleCreateDigitalTwinBuilderRequest digitaltwinbuilder.CreateDigitalTwinBuilderRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateDigitalTwinBuilderRequest = digitaltwinbuilder.CreateDigitalTwinBuilderRequest{
		Description: to.Ptr("A digitaltwinbuilder description."),
		DisplayName: to.Ptr("DigitalTwinBuilder 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateDigitalTwinBuilder = func(ctx context.Context, workspaceID string, createDigitalTwinBuilderRequest digitaltwinbuilder.CreateDigitalTwinBuilderRequest, options *digitaltwinbuilder.ItemsClientBeginCreateDigitalTwinBuilderOptions) (resp azfake.PollerResponder[digitaltwinbuilder.ItemsClientCreateDigitalTwinBuilderResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateDigitalTwinBuilderRequest, createDigitalTwinBuilderRequest))
		resp = azfake.PollerResponder[digitaltwinbuilder.ItemsClientCreateDigitalTwinBuilderResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, digitaltwinbuilder.ItemsClientCreateDigitalTwinBuilderResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateDigitalTwinBuilder(ctx, exampleWorkspaceID, exampleCreateDigitalTwinBuilderRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a digitaltwinbuilder with public definition example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateDigitalTwinBuilderRequest = digitaltwinbuilder.CreateDigitalTwinBuilderRequest{
		Description: to.Ptr("An digitaltwinbuilder description."),
		Definition: &digitaltwinbuilder.Definition{
			Parts: []digitaltwinbuilder.DefinitionPart{
				{
					Path:        to.Ptr("definition.json"),
					Payload:     to.Ptr("ew0KICAibGFrZWhvdXNlSWQiOiAiYjliNWQzNmYtNDQ0NS00MDNiLWFjODctMDE2YjFjZDIwMjExIg0KfQ=="),
					PayloadType: to.Ptr(digitaltwinbuilder.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(digitaltwinbuilder.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("DigitalTwinBuilder_1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateDigitalTwinBuilder = func(ctx context.Context, workspaceID string, createDigitalTwinBuilderRequest digitaltwinbuilder.CreateDigitalTwinBuilderRequest, options *digitaltwinbuilder.ItemsClientBeginCreateDigitalTwinBuilderOptions) (resp azfake.PollerResponder[digitaltwinbuilder.ItemsClientCreateDigitalTwinBuilderResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateDigitalTwinBuilderRequest, createDigitalTwinBuilderRequest))
		resp = azfake.PollerResponder[digitaltwinbuilder.ItemsClientCreateDigitalTwinBuilderResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, digitaltwinbuilder.ItemsClientCreateDigitalTwinBuilderResponse{}, nil)
		return
	}

	poller, err = client.BeginCreateDigitalTwinBuilder(ctx, exampleWorkspaceID, exampleCreateDigitalTwinBuilderRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetDigitalTwinBuilder() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a digitaltwinbuilder example"},
	})
	var exampleWorkspaceID string
	var exampleDigitaltwinbuilderID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleDigitaltwinbuilderID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := digitaltwinbuilder.DigitalTwinBuilder{
		Type:        to.Ptr(digitaltwinbuilder.ItemTypeDigitalTwinBuilder),
		Description: to.Ptr("A digitaltwinbuilder description."),
		DisplayName: to.Ptr("DigitalTwinBuilder 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetDigitalTwinBuilder = func(ctx context.Context, workspaceID string, digitaltwinbuilderID string, options *digitaltwinbuilder.ItemsClientGetDigitalTwinBuilderOptions) (resp azfake.Responder[digitaltwinbuilder.ItemsClientGetDigitalTwinBuilderResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDigitaltwinbuilderID, digitaltwinbuilderID)
		resp = azfake.Responder[digitaltwinbuilder.ItemsClientGetDigitalTwinBuilderResponse]{}
		resp.SetResponse(http.StatusOK, digitaltwinbuilder.ItemsClientGetDigitalTwinBuilderResponse{DigitalTwinBuilder: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetDigitalTwinBuilder(ctx, exampleWorkspaceID, exampleDigitaltwinbuilderID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DigitalTwinBuilder))
}

func (testsuite *FakeTestSuite) TestItems_UpdateDigitalTwinBuilder() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a digitaltwinbuilder example"},
	})
	var exampleWorkspaceID string
	var exampleDigitaltwinbuilderID string
	var exampleUpdateDigitalTwinBuilderRequest digitaltwinbuilder.UpdateDigitalTwinBuilderRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleDigitaltwinbuilderID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateDigitalTwinBuilderRequest = digitaltwinbuilder.UpdateDigitalTwinBuilderRequest{
		Description: to.Ptr("A new description for digitaltwinbuilder."),
		DisplayName: to.Ptr("DigitalTwinBuilder_New_Name"),
	}

	exampleRes := digitaltwinbuilder.DigitalTwinBuilder{
		Type:        to.Ptr(digitaltwinbuilder.ItemTypeDigitalTwinBuilder),
		Description: to.Ptr("A new description for digitaltwinbuilder."),
		DisplayName: to.Ptr("DigitalTwinBuilder_New_Name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateDigitalTwinBuilder = func(ctx context.Context, workspaceID string, digitaltwinbuilderID string, updateDigitalTwinBuilderRequest digitaltwinbuilder.UpdateDigitalTwinBuilderRequest, options *digitaltwinbuilder.ItemsClientUpdateDigitalTwinBuilderOptions) (resp azfake.Responder[digitaltwinbuilder.ItemsClientUpdateDigitalTwinBuilderResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDigitaltwinbuilderID, digitaltwinbuilderID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateDigitalTwinBuilderRequest, updateDigitalTwinBuilderRequest))
		resp = azfake.Responder[digitaltwinbuilder.ItemsClientUpdateDigitalTwinBuilderResponse]{}
		resp.SetResponse(http.StatusOK, digitaltwinbuilder.ItemsClientUpdateDigitalTwinBuilderResponse{DigitalTwinBuilder: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateDigitalTwinBuilder(ctx, exampleWorkspaceID, exampleDigitaltwinbuilderID, exampleUpdateDigitalTwinBuilderRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DigitalTwinBuilder))
}

func (testsuite *FakeTestSuite) TestItems_DeleteDigitalTwinBuilder() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a digitaltwinbuilder example"},
	})
	var exampleWorkspaceID string
	var exampleDigitaltwinbuilderID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleDigitaltwinbuilderID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteDigitalTwinBuilder = func(ctx context.Context, workspaceID string, digitaltwinbuilderID string, options *digitaltwinbuilder.ItemsClientDeleteDigitalTwinBuilderOptions) (resp azfake.Responder[digitaltwinbuilder.ItemsClientDeleteDigitalTwinBuilderResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDigitaltwinbuilderID, digitaltwinbuilderID)
		resp = azfake.Responder[digitaltwinbuilder.ItemsClientDeleteDigitalTwinBuilderResponse]{}
		resp.SetResponse(http.StatusOK, digitaltwinbuilder.ItemsClientDeleteDigitalTwinBuilderResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteDigitalTwinBuilder(ctx, exampleWorkspaceID, exampleDigitaltwinbuilderID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetDigitalTwinBuilderDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a digitaltwinbuilder definition example"},
	})
	var exampleWorkspaceID string
	var exampleDigitaltwinbuilderID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleDigitaltwinbuilderID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := digitaltwinbuilder.DefinitionResponse{
		Definition: &digitaltwinbuilder.Definition{
			Parts: []digitaltwinbuilder.DefinitionPart{
				{
					Path:        to.Ptr("definition.json"),
					Payload:     to.Ptr("ew0KICAibGFrZWhvdXNlSWQiOiAiYjliNWQzNmYtNDQ0NS00MDNiLWFjODctMDE2YjFjZDIwMjExIg0KfQ=="),
					PayloadType: to.Ptr(digitaltwinbuilder.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(digitaltwinbuilder.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetDigitalTwinBuilderDefinition = func(ctx context.Context, workspaceID string, digitaltwinbuilderID string, options *digitaltwinbuilder.ItemsClientBeginGetDigitalTwinBuilderDefinitionOptions) (resp azfake.PollerResponder[digitaltwinbuilder.ItemsClientGetDigitalTwinBuilderDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDigitaltwinbuilderID, digitaltwinbuilderID)
		resp = azfake.PollerResponder[digitaltwinbuilder.ItemsClientGetDigitalTwinBuilderDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, digitaltwinbuilder.ItemsClientGetDigitalTwinBuilderDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetDigitalTwinBuilderDefinition(ctx, exampleWorkspaceID, exampleDigitaltwinbuilderID, &digitaltwinbuilder.ItemsClientBeginGetDigitalTwinBuilderDefinitionOptions{Format: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateDigitalTwinBuilderDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a digitaltwinbuilder definition example"},
	})
	var exampleWorkspaceID string
	var exampleDigitaltwinbuilderID string
	var exampleUpdateDigitalTwinBuilderDefinitionRequest digitaltwinbuilder.UpdateDigitalTwinBuilderDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleDigitaltwinbuilderID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateDigitalTwinBuilderDefinitionRequest = digitaltwinbuilder.UpdateDigitalTwinBuilderDefinitionRequest{
		Definition: &digitaltwinbuilder.Definition{
			Parts: []digitaltwinbuilder.DefinitionPart{
				{
					Path:        to.Ptr("definition.json"),
					Payload:     to.Ptr("ew0KICAibGFrZWhvdXNlSWQiOiAiYjliNWQzNmYtNDQ0NS00MDNiLWFjODctMDE2YjFjZDIwMjExIg0KfQ=="),
					PayloadType: to.Ptr(digitaltwinbuilder.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(digitaltwinbuilder.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateDigitalTwinBuilderDefinition = func(ctx context.Context, workspaceID string, digitaltwinbuilderID string, updateDigitalTwinBuilderDefinitionRequest digitaltwinbuilder.UpdateDigitalTwinBuilderDefinitionRequest, options *digitaltwinbuilder.ItemsClientBeginUpdateDigitalTwinBuilderDefinitionOptions) (resp azfake.PollerResponder[digitaltwinbuilder.ItemsClientUpdateDigitalTwinBuilderDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDigitaltwinbuilderID, digitaltwinbuilderID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateDigitalTwinBuilderDefinitionRequest, updateDigitalTwinBuilderDefinitionRequest))
		resp = azfake.PollerResponder[digitaltwinbuilder.ItemsClientUpdateDigitalTwinBuilderDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, digitaltwinbuilder.ItemsClientUpdateDigitalTwinBuilderDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateDigitalTwinBuilderDefinition(ctx, exampleWorkspaceID, exampleDigitaltwinbuilderID, exampleUpdateDigitalTwinBuilderDefinitionRequest, &digitaltwinbuilder.ItemsClientBeginUpdateDigitalTwinBuilderDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}
