// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/apacheairflowjob"
)

// ItemsServer is a fake server for instances of the apacheairflowjob.ItemsClient type.
type ItemsServer struct {
	// BeginCreateApacheAirflowJob is the fake for method ItemsClient.BeginCreateApacheAirflowJob
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateApacheAirflowJob func(ctx context.Context, workspaceID string, createApacheAirflowJobRequest apacheairflowjob.CreateApacheAirflowJobRequest, options *apacheairflowjob.ItemsClientBeginCreateApacheAirflowJobOptions) (resp azfake.PollerResponder[apacheairflowjob.ItemsClientCreateApacheAirflowJobResponse], errResp azfake.ErrorResponder)

	// DeleteApacheAirflowJob is the fake for method ItemsClient.DeleteApacheAirflowJob
	// HTTP status codes to indicate success: http.StatusOK
	DeleteApacheAirflowJob func(ctx context.Context, workspaceID string, apacheAirflowJobID string, options *apacheairflowjob.ItemsClientDeleteApacheAirflowJobOptions) (resp azfake.Responder[apacheairflowjob.ItemsClientDeleteApacheAirflowJobResponse], errResp azfake.ErrorResponder)

	// GetApacheAirflowJob is the fake for method ItemsClient.GetApacheAirflowJob
	// HTTP status codes to indicate success: http.StatusOK
	GetApacheAirflowJob func(ctx context.Context, workspaceID string, apacheAirflowJobID string, options *apacheairflowjob.ItemsClientGetApacheAirflowJobOptions) (resp azfake.Responder[apacheairflowjob.ItemsClientGetApacheAirflowJobResponse], errResp azfake.ErrorResponder)

	// BeginGetApacheAirflowJobDefinition is the fake for method ItemsClient.BeginGetApacheAirflowJobDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetApacheAirflowJobDefinition func(ctx context.Context, workspaceID string, apacheAirflowJobID string, options *apacheairflowjob.ItemsClientBeginGetApacheAirflowJobDefinitionOptions) (resp azfake.PollerResponder[apacheairflowjob.ItemsClientGetApacheAirflowJobDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListApacheAirflowJobsPager is the fake for method ItemsClient.NewListApacheAirflowJobsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListApacheAirflowJobsPager func(workspaceID string, options *apacheairflowjob.ItemsClientListApacheAirflowJobsOptions) (resp azfake.PagerResponder[apacheairflowjob.ItemsClientListApacheAirflowJobsResponse])

	// UpdateApacheAirflowJob is the fake for method ItemsClient.UpdateApacheAirflowJob
	// HTTP status codes to indicate success: http.StatusOK
	UpdateApacheAirflowJob func(ctx context.Context, workspaceID string, apacheAirflowJobID string, updateApacheAirflowJobRequest apacheairflowjob.UpdateApacheAirflowJobRequest, options *apacheairflowjob.ItemsClientUpdateApacheAirflowJobOptions) (resp azfake.Responder[apacheairflowjob.ItemsClientUpdateApacheAirflowJobResponse], errResp azfake.ErrorResponder)

	// BeginUpdateApacheAirflowJobDefinition is the fake for method ItemsClient.BeginUpdateApacheAirflowJobDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateApacheAirflowJobDefinition func(ctx context.Context, workspaceID string, apacheAirflowJobID string, updateApacheAirflowJobDefinitionRequest apacheairflowjob.UpdateApacheAirflowJobDefinitionRequest, options *apacheairflowjob.ItemsClientBeginUpdateApacheAirflowJobDefinitionOptions) (resp azfake.PollerResponder[apacheairflowjob.ItemsClientUpdateApacheAirflowJobDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of apacheairflowjob.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                                   srv,
		beginCreateApacheAirflowJob:           newTracker[azfake.PollerResponder[apacheairflowjob.ItemsClientCreateApacheAirflowJobResponse]](),
		beginGetApacheAirflowJobDefinition:    newTracker[azfake.PollerResponder[apacheairflowjob.ItemsClientGetApacheAirflowJobDefinitionResponse]](),
		newListApacheAirflowJobsPager:         newTracker[azfake.PagerResponder[apacheairflowjob.ItemsClientListApacheAirflowJobsResponse]](),
		beginUpdateApacheAirflowJobDefinition: newTracker[azfake.PollerResponder[apacheairflowjob.ItemsClientUpdateApacheAirflowJobDefinitionResponse]](),
	}
}

// ItemsServerTransport connects instances of apacheairflowjob.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                                   *ItemsServer
	beginCreateApacheAirflowJob           *tracker[azfake.PollerResponder[apacheairflowjob.ItemsClientCreateApacheAirflowJobResponse]]
	beginGetApacheAirflowJobDefinition    *tracker[azfake.PollerResponder[apacheairflowjob.ItemsClientGetApacheAirflowJobDefinitionResponse]]
	newListApacheAirflowJobsPager         *tracker[azfake.PagerResponder[apacheairflowjob.ItemsClientListApacheAirflowJobsResponse]]
	beginUpdateApacheAirflowJobDefinition *tracker[azfake.PollerResponder[apacheairflowjob.ItemsClientUpdateApacheAirflowJobDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateApacheAirflowJob":
				res.resp, res.err = i.dispatchBeginCreateApacheAirflowJob(req)
			case "ItemsClient.DeleteApacheAirflowJob":
				res.resp, res.err = i.dispatchDeleteApacheAirflowJob(req)
			case "ItemsClient.GetApacheAirflowJob":
				res.resp, res.err = i.dispatchGetApacheAirflowJob(req)
			case "ItemsClient.BeginGetApacheAirflowJobDefinition":
				res.resp, res.err = i.dispatchBeginGetApacheAirflowJobDefinition(req)
			case "ItemsClient.NewListApacheAirflowJobsPager":
				res.resp, res.err = i.dispatchNewListApacheAirflowJobsPager(req)
			case "ItemsClient.UpdateApacheAirflowJob":
				res.resp, res.err = i.dispatchUpdateApacheAirflowJob(req)
			case "ItemsClient.BeginUpdateApacheAirflowJobDefinition":
				res.resp, res.err = i.dispatchBeginUpdateApacheAirflowJobDefinition(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateApacheAirflowJob(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateApacheAirflowJob == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateApacheAirflowJob not implemented")}
	}
	beginCreateApacheAirflowJob := i.beginCreateApacheAirflowJob.get(req)
	if beginCreateApacheAirflowJob == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/ApacheAirflowJobs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[apacheairflowjob.CreateApacheAirflowJobRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateApacheAirflowJob(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateApacheAirflowJob = &respr
		i.beginCreateApacheAirflowJob.add(req, beginCreateApacheAirflowJob)
	}

	resp, err := server.PollerResponderNext(beginCreateApacheAirflowJob, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateApacheAirflowJob.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateApacheAirflowJob) {
		i.beginCreateApacheAirflowJob.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteApacheAirflowJob(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteApacheAirflowJob == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteApacheAirflowJob not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/ApacheAirflowJobs/(?P<ApacheAirflowJobId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	apacheAirflowJobIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("ApacheAirflowJobId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteApacheAirflowJob(req.Context(), workspaceIDParam, apacheAirflowJobIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetApacheAirflowJob(req *http.Request) (*http.Response, error) {
	if i.srv.GetApacheAirflowJob == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetApacheAirflowJob not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/ApacheAirflowJobs/(?P<ApacheAirflowJobId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	apacheAirflowJobIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("ApacheAirflowJobId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetApacheAirflowJob(req.Context(), workspaceIDParam, apacheAirflowJobIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ApacheAirflowJob, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginGetApacheAirflowJobDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginGetApacheAirflowJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetApacheAirflowJobDefinition not implemented")}
	}
	beginGetApacheAirflowJobDefinition := i.beginGetApacheAirflowJobDefinition.get(req)
	if beginGetApacheAirflowJobDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/ApacheAirflowJobs/(?P<ApacheAirflowJobId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		apacheAirflowJobIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("ApacheAirflowJobId")])
		if err != nil {
			return nil, err
		}
		formatUnescaped, err := url.QueryUnescape(qp.Get("format"))
		if err != nil {
			return nil, err
		}
		formatParam := getOptional(formatUnescaped)
		var options *apacheairflowjob.ItemsClientBeginGetApacheAirflowJobDefinitionOptions
		if formatParam != nil {
			options = &apacheairflowjob.ItemsClientBeginGetApacheAirflowJobDefinitionOptions{
				Format: formatParam,
			}
		}
		respr, errRespr := i.srv.BeginGetApacheAirflowJobDefinition(req.Context(), workspaceIDParam, apacheAirflowJobIDParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetApacheAirflowJobDefinition = &respr
		i.beginGetApacheAirflowJobDefinition.add(req, beginGetApacheAirflowJobDefinition)
	}

	resp, err := server.PollerResponderNext(beginGetApacheAirflowJobDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginGetApacheAirflowJobDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetApacheAirflowJobDefinition) {
		i.beginGetApacheAirflowJobDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListApacheAirflowJobsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListApacheAirflowJobsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListApacheAirflowJobsPager not implemented")}
	}
	newListApacheAirflowJobsPager := i.newListApacheAirflowJobsPager.get(req)
	if newListApacheAirflowJobsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/ApacheAirflowJobs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *apacheairflowjob.ItemsClientListApacheAirflowJobsOptions
		if continuationTokenParam != nil {
			options = &apacheairflowjob.ItemsClientListApacheAirflowJobsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListApacheAirflowJobsPager(workspaceIDParam, options)
		newListApacheAirflowJobsPager = &resp
		i.newListApacheAirflowJobsPager.add(req, newListApacheAirflowJobsPager)
		server.PagerResponderInjectNextLinks(newListApacheAirflowJobsPager, req, func(page *apacheairflowjob.ItemsClientListApacheAirflowJobsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListApacheAirflowJobsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListApacheAirflowJobsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListApacheAirflowJobsPager) {
		i.newListApacheAirflowJobsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateApacheAirflowJob(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateApacheAirflowJob == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateApacheAirflowJob not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/ApacheAirflowJobs/(?P<ApacheAirflowJobId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[apacheairflowjob.UpdateApacheAirflowJobRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	apacheAirflowJobIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("ApacheAirflowJobId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateApacheAirflowJob(req.Context(), workspaceIDParam, apacheAirflowJobIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ApacheAirflowJob, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginUpdateApacheAirflowJobDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateApacheAirflowJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateApacheAirflowJobDefinition not implemented")}
	}
	beginUpdateApacheAirflowJobDefinition := i.beginUpdateApacheAirflowJobDefinition.get(req)
	if beginUpdateApacheAirflowJobDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/ApacheAirflowJobs/(?P<ApacheAirflowJobId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[apacheairflowjob.UpdateApacheAirflowJobDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		apacheAirflowJobIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("ApacheAirflowJobId")])
		if err != nil {
			return nil, err
		}
		updateMetadataUnescaped, err := url.QueryUnescape(qp.Get("updateMetadata"))
		if err != nil {
			return nil, err
		}
		updateMetadataParam, err := parseOptional(updateMetadataUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *apacheairflowjob.ItemsClientBeginUpdateApacheAirflowJobDefinitionOptions
		if updateMetadataParam != nil {
			options = &apacheairflowjob.ItemsClientBeginUpdateApacheAirflowJobDefinitionOptions{
				UpdateMetadata: updateMetadataParam,
			}
		}
		respr, errRespr := i.srv.BeginUpdateApacheAirflowJobDefinition(req.Context(), workspaceIDParam, apacheAirflowJobIDParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateApacheAirflowJobDefinition = &respr
		i.beginUpdateApacheAirflowJobDefinition.add(req, beginUpdateApacheAirflowJobDefinition)
	}

	resp, err := server.PollerResponderNext(beginUpdateApacheAirflowJobDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginUpdateApacheAirflowJobDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateApacheAirflowJobDefinition) {
		i.beginUpdateApacheAirflowJobDefinition.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
