// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package apacheairflowjob

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateApacheAirflowJob - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create Apache Airflow job with a public definition, refer to [/rest/api/fabric/articles/item-management/definitions/public-facing-name]
// article.
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES ApacheAirflowJob.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create an Apache Airflow job the workspace must be on a supported Fabric capacity. For more information see: Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createApacheAirflowJobRequest - Create item request payload.
//   - options - ItemsClientBeginCreateApacheAirflowJobOptions contains the optional parameters for the ItemsClient.BeginCreateApacheAirflowJob
//     method.
func (client *ItemsClient) BeginCreateApacheAirflowJob(ctx context.Context, workspaceID string, createApacheAirflowJobRequest CreateApacheAirflowJobRequest, options *ItemsClientBeginCreateApacheAirflowJobOptions) (*runtime.Poller[ItemsClientCreateApacheAirflowJobResponse], error) {
	return client.beginCreateApacheAirflowJob(ctx, workspaceID, createApacheAirflowJobRequest, options)
}

// CreateApacheAirflowJob - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create Apache Airflow job with a public definition, refer to [/rest/api/fabric/articles/item-management/definitions/public-facing-name]
// article.
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES ApacheAirflowJob.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create an Apache Airflow job the workspace must be on a supported Fabric capacity. For more information see: Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createApacheAirflowJob(ctx context.Context, workspaceID string, createApacheAirflowJobRequest CreateApacheAirflowJobRequest, options *ItemsClientBeginCreateApacheAirflowJobOptions) (*http.Response, error) {
	var err error
	const operationName = "apacheairflowjob.ItemsClient.BeginCreateApacheAirflowJob"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createApacheAirflowJobCreateRequest(ctx, workspaceID, createApacheAirflowJobRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createApacheAirflowJobCreateRequest creates the CreateApacheAirflowJob request.
func (client *ItemsClient) createApacheAirflowJobCreateRequest(ctx context.Context, workspaceID string, createApacheAirflowJobRequest CreateApacheAirflowJobRequest, _ *ItemsClientBeginCreateApacheAirflowJobOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/ApacheAirflowJobs"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createApacheAirflowJobRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteApacheAirflowJob - PERMISSIONS The caller must have write permissions for the apache airflow job.
// REQUIRED DELEGATED SCOPES ApacheAirflowJob.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - apacheAirflowJobID - The Apache Airflow job ID.
//   - options - ItemsClientDeleteApacheAirflowJobOptions contains the optional parameters for the ItemsClient.DeleteApacheAirflowJob
//     method.
func (client *ItemsClient) DeleteApacheAirflowJob(ctx context.Context, workspaceID string, apacheAirflowJobID string, options *ItemsClientDeleteApacheAirflowJobOptions) (ItemsClientDeleteApacheAirflowJobResponse, error) {
	var err error
	const operationName = "apacheairflowjob.ItemsClient.DeleteApacheAirflowJob"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteApacheAirflowJobCreateRequest(ctx, workspaceID, apacheAirflowJobID, options)
	if err != nil {
		return ItemsClientDeleteApacheAirflowJobResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteApacheAirflowJobResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteApacheAirflowJobResponse{}, err
	}
	return ItemsClientDeleteApacheAirflowJobResponse{}, nil
}

// deleteApacheAirflowJobCreateRequest creates the DeleteApacheAirflowJob request.
func (client *ItemsClient) deleteApacheAirflowJobCreateRequest(ctx context.Context, workspaceID string, apacheAirflowJobID string, _ *ItemsClientDeleteApacheAirflowJobOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/ApacheAirflowJobs/{ApacheAirflowJobId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if apacheAirflowJobID == "" {
		return nil, errors.New("parameter apacheAirflowJobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ApacheAirflowJobId}", url.PathEscape(apacheAirflowJobID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetApacheAirflowJob - PERMISSIONS The caller must have read permissions for the apache airflow job.
// REQUIRED DELEGATED SCOPES ApacheAirflowJob.Read.All or ApacheAirflowJob.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - apacheAirflowJobID - The Apache Airflow job ID.
//   - options - ItemsClientGetApacheAirflowJobOptions contains the optional parameters for the ItemsClient.GetApacheAirflowJob
//     method.
func (client *ItemsClient) GetApacheAirflowJob(ctx context.Context, workspaceID string, apacheAirflowJobID string, options *ItemsClientGetApacheAirflowJobOptions) (ItemsClientGetApacheAirflowJobResponse, error) {
	var err error
	const operationName = "apacheairflowjob.ItemsClient.GetApacheAirflowJob"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getApacheAirflowJobCreateRequest(ctx, workspaceID, apacheAirflowJobID, options)
	if err != nil {
		return ItemsClientGetApacheAirflowJobResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetApacheAirflowJobResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetApacheAirflowJobResponse{}, err
	}
	resp, err := client.getApacheAirflowJobHandleResponse(httpResp)
	return resp, err
}

// getApacheAirflowJobCreateRequest creates the GetApacheAirflowJob request.
func (client *ItemsClient) getApacheAirflowJobCreateRequest(ctx context.Context, workspaceID string, apacheAirflowJobID string, _ *ItemsClientGetApacheAirflowJobOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/ApacheAirflowJobs/{ApacheAirflowJobId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if apacheAirflowJobID == "" {
		return nil, errors.New("parameter apacheAirflowJobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ApacheAirflowJobId}", url.PathEscape(apacheAirflowJobID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getApacheAirflowJobHandleResponse handles the GetApacheAirflowJob response.
func (client *ItemsClient) getApacheAirflowJobHandleResponse(resp *http.Response) (ItemsClientGetApacheAirflowJobResponse, error) {
	result := ItemsClientGetApacheAirflowJobResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ApacheAirflowJob); err != nil {
		return ItemsClientGetApacheAirflowJobResponse{}, err
	}
	return result, nil
}

// BeginGetApacheAirflowJobDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a 's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have read and write permissions for the apache airflow job.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - apacheAirflowJobID - The Apache Airflow job ID.
//   - options - ItemsClientBeginGetApacheAirflowJobDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetApacheAirflowJobDefinition
//     method.
func (client *ItemsClient) BeginGetApacheAirflowJobDefinition(ctx context.Context, workspaceID string, apacheAirflowJobID string, options *ItemsClientBeginGetApacheAirflowJobDefinitionOptions) (*runtime.Poller[ItemsClientGetApacheAirflowJobDefinitionResponse], error) {
	return client.beginGetApacheAirflowJobDefinition(ctx, workspaceID, apacheAirflowJobID, options)
}

// GetApacheAirflowJobDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a 's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have read and write permissions for the apache airflow job.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getApacheAirflowJobDefinition(ctx context.Context, workspaceID string, apacheAirflowJobID string, options *ItemsClientBeginGetApacheAirflowJobDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "apacheairflowjob.ItemsClient.BeginGetApacheAirflowJobDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getApacheAirflowJobDefinitionCreateRequest(ctx, workspaceID, apacheAirflowJobID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getApacheAirflowJobDefinitionCreateRequest creates the GetApacheAirflowJobDefinition request.
func (client *ItemsClient) getApacheAirflowJobDefinitionCreateRequest(ctx context.Context, workspaceID string, apacheAirflowJobID string, options *ItemsClientBeginGetApacheAirflowJobDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/ApacheAirflowJobs/{ApacheAirflowJobId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if apacheAirflowJobID == "" {
		return nil, errors.New("parameter apacheAirflowJobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ApacheAirflowJobId}", url.PathEscape(apacheAirflowJobID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("format", *options.Format)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListApacheAirflowJobsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have a viewer workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListApacheAirflowJobsOptions contains the optional parameters for the ItemsClient.NewListApacheAirflowJobsPager
//     method.
func (client *ItemsClient) NewListApacheAirflowJobsPager(workspaceID string, options *ItemsClientListApacheAirflowJobsOptions) *runtime.Pager[ItemsClientListApacheAirflowJobsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListApacheAirflowJobsResponse]{
		More: func(page ItemsClientListApacheAirflowJobsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListApacheAirflowJobsResponse) (ItemsClientListApacheAirflowJobsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "apacheairflowjob.ItemsClient.NewListApacheAirflowJobsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listApacheAirflowJobsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListApacheAirflowJobsResponse{}, err
			}
			return client.listApacheAirflowJobsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listApacheAirflowJobsCreateRequest creates the ListApacheAirflowJobs request.
func (client *ItemsClient) listApacheAirflowJobsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListApacheAirflowJobsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/ApacheAirflowJobs"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listApacheAirflowJobsHandleResponse handles the ListApacheAirflowJobs response.
func (client *ItemsClient) listApacheAirflowJobsHandleResponse(resp *http.Response) (ItemsClientListApacheAirflowJobsResponse, error) {
	result := ItemsClientListApacheAirflowJobsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ApacheAirflowJobs); err != nil {
		return ItemsClientListApacheAirflowJobsResponse{}, err
	}
	return result, nil
}

// UpdateApacheAirflowJob - PERMISSIONS The caller must have read and write permissions for the apache airflow job.
// REQUIRED DELEGATED SCOPES ApacheAirflowJob.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - apacheAirflowJobID - The Apache Airflow job ID.
//   - updateApacheAirflowJobRequest - Update Apache Airflow job request payload.
//   - options - ItemsClientUpdateApacheAirflowJobOptions contains the optional parameters for the ItemsClient.UpdateApacheAirflowJob
//     method.
func (client *ItemsClient) UpdateApacheAirflowJob(ctx context.Context, workspaceID string, apacheAirflowJobID string, updateApacheAirflowJobRequest UpdateApacheAirflowJobRequest, options *ItemsClientUpdateApacheAirflowJobOptions) (ItemsClientUpdateApacheAirflowJobResponse, error) {
	var err error
	const operationName = "apacheairflowjob.ItemsClient.UpdateApacheAirflowJob"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateApacheAirflowJobCreateRequest(ctx, workspaceID, apacheAirflowJobID, updateApacheAirflowJobRequest, options)
	if err != nil {
		return ItemsClientUpdateApacheAirflowJobResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateApacheAirflowJobResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateApacheAirflowJobResponse{}, err
	}
	resp, err := client.updateApacheAirflowJobHandleResponse(httpResp)
	return resp, err
}

// updateApacheAirflowJobCreateRequest creates the UpdateApacheAirflowJob request.
func (client *ItemsClient) updateApacheAirflowJobCreateRequest(ctx context.Context, workspaceID string, apacheAirflowJobID string, updateApacheAirflowJobRequest UpdateApacheAirflowJobRequest, _ *ItemsClientUpdateApacheAirflowJobOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/ApacheAirflowJobs/{ApacheAirflowJobId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if apacheAirflowJobID == "" {
		return nil, errors.New("parameter apacheAirflowJobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ApacheAirflowJobId}", url.PathEscape(apacheAirflowJobID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateApacheAirflowJobRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateApacheAirflowJobHandleResponse handles the UpdateApacheAirflowJob response.
func (client *ItemsClient) updateApacheAirflowJobHandleResponse(resp *http.Response) (ItemsClientUpdateApacheAirflowJobResponse, error) {
	result := ItemsClientUpdateApacheAirflowJobResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ApacheAirflowJob); err != nil {
		return ItemsClientUpdateApacheAirflowJobResponse{}, err
	}
	return result, nil
}

// BeginUpdateApacheAirflowJobDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the 's definition, does not affect its sensitivity label.
// PERMISSIONS The caller must have read and write permissions for the apache airflow job.
// REQUIRED DELEGATED SCOPES ApacheAirflowJob.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - apacheAirflowJobID - The Apache Airflow job ID.
//   - updateApacheAirflowJobDefinitionRequest - Update Apache Airflow job definition request payload.
//   - options - ItemsClientBeginUpdateApacheAirflowJobDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateApacheAirflowJobDefinition
//     method.
func (client *ItemsClient) BeginUpdateApacheAirflowJobDefinition(ctx context.Context, workspaceID string, apacheAirflowJobID string, updateApacheAirflowJobDefinitionRequest UpdateApacheAirflowJobDefinitionRequest, options *ItemsClientBeginUpdateApacheAirflowJobDefinitionOptions) (*runtime.Poller[ItemsClientUpdateApacheAirflowJobDefinitionResponse], error) {
	return client.beginUpdateApacheAirflowJobDefinition(ctx, workspaceID, apacheAirflowJobID, updateApacheAirflowJobDefinitionRequest, options)
}

// UpdateApacheAirflowJobDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the 's definition, does not affect its sensitivity label.
// PERMISSIONS The caller must have read and write permissions for the apache airflow job.
// REQUIRED DELEGATED SCOPES ApacheAirflowJob.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateApacheAirflowJobDefinition(ctx context.Context, workspaceID string, apacheAirflowJobID string, updateApacheAirflowJobDefinitionRequest UpdateApacheAirflowJobDefinitionRequest, options *ItemsClientBeginUpdateApacheAirflowJobDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "apacheairflowjob.ItemsClient.BeginUpdateApacheAirflowJobDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateApacheAirflowJobDefinitionCreateRequest(ctx, workspaceID, apacheAirflowJobID, updateApacheAirflowJobDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateApacheAirflowJobDefinitionCreateRequest creates the UpdateApacheAirflowJobDefinition request.
func (client *ItemsClient) updateApacheAirflowJobDefinitionCreateRequest(ctx context.Context, workspaceID string, apacheAirflowJobID string, updateApacheAirflowJobDefinitionRequest UpdateApacheAirflowJobDefinitionRequest, options *ItemsClientBeginUpdateApacheAirflowJobDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/ApacheAirflowJobs/{ApacheAirflowJobId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if apacheAirflowJobID == "" {
		return nil, errors.New("parameter apacheAirflowJobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ApacheAirflowJobId}", url.PathEscape(apacheAirflowJobID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateApacheAirflowJobDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateApacheAirflowJob - returns ItemsClientCreateApacheAirflowJobResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// To create Apache Airflow job with a public definition, refer to [/rest/api/fabric/articles/item-management/definitions/public-facing-name] article.
//
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES ApacheAirflowJob.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create an Apache Airflow job the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types
//     [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createApacheAirflowJobRequest - Create item request payload.
//   - options - ItemsClientBeginCreateApacheAirflowJobOptions contains the optional parameters for the ItemsClient.BeginCreateApacheAirflowJob method.
func (client *ItemsClient) CreateApacheAirflowJob(ctx context.Context, workspaceID string, createApacheAirflowJobRequest CreateApacheAirflowJobRequest, options *ItemsClientBeginCreateApacheAirflowJobOptions) (ItemsClientCreateApacheAirflowJobResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateApacheAirflowJob(ctx, workspaceID, createApacheAirflowJobRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateApacheAirflowJobResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateApacheAirflowJobResponse{}, err
	}
	return result, err
}

// beginCreateApacheAirflowJob creates the createApacheAirflowJob request.
func (client *ItemsClient) beginCreateApacheAirflowJob(ctx context.Context, workspaceID string, createApacheAirflowJobRequest CreateApacheAirflowJobRequest, options *ItemsClientBeginCreateApacheAirflowJobOptions) (*runtime.Poller[ItemsClientCreateApacheAirflowJobResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createApacheAirflowJob(ctx, workspaceID, createApacheAirflowJobRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateApacheAirflowJobResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateApacheAirflowJobResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateApacheAirflowJobResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateApacheAirflowJobResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetApacheAirflowJobDefinition - returns ItemsClientGetApacheAirflowJobDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// When you get a 's public definition, the sensitivity label is not a part of the definition.
//
// PERMISSIONS The caller must have read and write permissions for the apache airflow job.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - apacheAirflowJobID - The Apache Airflow job ID.
//   - options - ItemsClientBeginGetApacheAirflowJobDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetApacheAirflowJobDefinition method.
func (client *ItemsClient) GetApacheAirflowJobDefinition(ctx context.Context, workspaceID string, apacheAirflowJobID string, options *ItemsClientBeginGetApacheAirflowJobDefinitionOptions) (ItemsClientGetApacheAirflowJobDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetApacheAirflowJobDefinition(ctx, workspaceID, apacheAirflowJobID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetApacheAirflowJobDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetApacheAirflowJobDefinitionResponse{}, err
	}
	return result, err
}

// beginGetApacheAirflowJobDefinition creates the getApacheAirflowJobDefinition request.
func (client *ItemsClient) beginGetApacheAirflowJobDefinition(ctx context.Context, workspaceID string, apacheAirflowJobID string, options *ItemsClientBeginGetApacheAirflowJobDefinitionOptions) (*runtime.Poller[ItemsClientGetApacheAirflowJobDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getApacheAirflowJobDefinition(ctx, workspaceID, apacheAirflowJobID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetApacheAirflowJobDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetApacheAirflowJobDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetApacheAirflowJobDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetApacheAirflowJobDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateApacheAirflowJobDefinition - returns ItemsClientUpdateApacheAirflowJobDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// Updating the 's definition, does not affect its sensitivity label.
//
// PERMISSIONS The caller must have read and write permissions for the apache airflow job.
//
// # REQUIRED DELEGATED SCOPES ApacheAirflowJob.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - apacheAirflowJobID - The Apache Airflow job ID.
//   - updateApacheAirflowJobDefinitionRequest - Update Apache Airflow job definition request payload.
//   - options - ItemsClientBeginUpdateApacheAirflowJobDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateApacheAirflowJobDefinition method.
func (client *ItemsClient) UpdateApacheAirflowJobDefinition(ctx context.Context, workspaceID string, apacheAirflowJobID string, updateApacheAirflowJobDefinitionRequest UpdateApacheAirflowJobDefinitionRequest, options *ItemsClientBeginUpdateApacheAirflowJobDefinitionOptions) (ItemsClientUpdateApacheAirflowJobDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateApacheAirflowJobDefinition(ctx, workspaceID, apacheAirflowJobID, updateApacheAirflowJobDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateApacheAirflowJobDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateApacheAirflowJobDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateApacheAirflowJobDefinition creates the updateApacheAirflowJobDefinition request.
func (client *ItemsClient) beginUpdateApacheAirflowJobDefinition(ctx context.Context, workspaceID string, apacheAirflowJobID string, updateApacheAirflowJobDefinitionRequest UpdateApacheAirflowJobDefinitionRequest, options *ItemsClientBeginUpdateApacheAirflowJobDefinitionOptions) (*runtime.Poller[ItemsClientUpdateApacheAirflowJobDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateApacheAirflowJobDefinition(ctx, workspaceID, apacheAirflowJobID, updateApacheAirflowJobDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateApacheAirflowJobDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateApacheAirflowJobDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateApacheAirflowJobDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateApacheAirflowJobDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListApacheAirflowJobs - returns array of ApacheAirflowJob from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have a viewer workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListApacheAirflowJobsOptions contains the optional parameters for the ItemsClient.NewListApacheAirflowJobsPager method.
func (client *ItemsClient) ListApacheAirflowJobs(ctx context.Context, workspaceID string, options *ItemsClientListApacheAirflowJobsOptions) ([]ApacheAirflowJob, error) {
	pager := client.NewListApacheAirflowJobsPager(workspaceID, options)
	mapper := func(resp ItemsClientListApacheAirflowJobsResponse) []ApacheAirflowJob {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []ApacheAirflowJob{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []ApacheAirflowJob{}, err
	}
	return list, nil
}
