// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/copyjob"
)

// ItemsServer is a fake server for instances of the copyjob.ItemsClient type.
type ItemsServer struct {
	// BeginCreateCopyJob is the fake for method ItemsClient.BeginCreateCopyJob
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateCopyJob func(ctx context.Context, workspaceID string, createCopyJobRequest copyjob.CreateCopyJobRequest, options *copyjob.ItemsClientBeginCreateCopyJobOptions) (resp azfake.PollerResponder[copyjob.ItemsClientCreateCopyJobResponse], errResp azfake.ErrorResponder)

	// DeleteCopyJob is the fake for method ItemsClient.DeleteCopyJob
	// HTTP status codes to indicate success: http.StatusOK
	DeleteCopyJob func(ctx context.Context, workspaceID string, copyJobID string, options *copyjob.ItemsClientDeleteCopyJobOptions) (resp azfake.Responder[copyjob.ItemsClientDeleteCopyJobResponse], errResp azfake.ErrorResponder)

	// GetCopyJob is the fake for method ItemsClient.GetCopyJob
	// HTTP status codes to indicate success: http.StatusOK
	GetCopyJob func(ctx context.Context, workspaceID string, copyJobID string, options *copyjob.ItemsClientGetCopyJobOptions) (resp azfake.Responder[copyjob.ItemsClientGetCopyJobResponse], errResp azfake.ErrorResponder)

	// BeginGetCopyJobDefinition is the fake for method ItemsClient.BeginGetCopyJobDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetCopyJobDefinition func(ctx context.Context, workspaceID string, copyJobID string, options *copyjob.ItemsClientBeginGetCopyJobDefinitionOptions) (resp azfake.PollerResponder[copyjob.ItemsClientGetCopyJobDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListCopyJobsPager is the fake for method ItemsClient.NewListCopyJobsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListCopyJobsPager func(workspaceID string, options *copyjob.ItemsClientListCopyJobsOptions) (resp azfake.PagerResponder[copyjob.ItemsClientListCopyJobsResponse])

	// UpdateCopyJob is the fake for method ItemsClient.UpdateCopyJob
	// HTTP status codes to indicate success: http.StatusOK
	UpdateCopyJob func(ctx context.Context, workspaceID string, copyJobID string, updateCopyJobRequest copyjob.UpdateCopyJobRequest, options *copyjob.ItemsClientUpdateCopyJobOptions) (resp azfake.Responder[copyjob.ItemsClientUpdateCopyJobResponse], errResp azfake.ErrorResponder)

	// BeginUpdateCopyJobDefinition is the fake for method ItemsClient.BeginUpdateCopyJobDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateCopyJobDefinition func(ctx context.Context, workspaceID string, copyJobID string, updateCopyJobDefinitionRequest copyjob.UpdateCopyJobDefinitionRequest, options *copyjob.ItemsClientBeginUpdateCopyJobDefinitionOptions) (resp azfake.PollerResponder[copyjob.ItemsClientUpdateCopyJobDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of copyjob.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                          srv,
		beginCreateCopyJob:           newTracker[azfake.PollerResponder[copyjob.ItemsClientCreateCopyJobResponse]](),
		beginGetCopyJobDefinition:    newTracker[azfake.PollerResponder[copyjob.ItemsClientGetCopyJobDefinitionResponse]](),
		newListCopyJobsPager:         newTracker[azfake.PagerResponder[copyjob.ItemsClientListCopyJobsResponse]](),
		beginUpdateCopyJobDefinition: newTracker[azfake.PollerResponder[copyjob.ItemsClientUpdateCopyJobDefinitionResponse]](),
	}
}

// ItemsServerTransport connects instances of copyjob.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                          *ItemsServer
	beginCreateCopyJob           *tracker[azfake.PollerResponder[copyjob.ItemsClientCreateCopyJobResponse]]
	beginGetCopyJobDefinition    *tracker[azfake.PollerResponder[copyjob.ItemsClientGetCopyJobDefinitionResponse]]
	newListCopyJobsPager         *tracker[azfake.PagerResponder[copyjob.ItemsClientListCopyJobsResponse]]
	beginUpdateCopyJobDefinition *tracker[azfake.PollerResponder[copyjob.ItemsClientUpdateCopyJobDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateCopyJob":
				res.resp, res.err = i.dispatchBeginCreateCopyJob(req)
			case "ItemsClient.DeleteCopyJob":
				res.resp, res.err = i.dispatchDeleteCopyJob(req)
			case "ItemsClient.GetCopyJob":
				res.resp, res.err = i.dispatchGetCopyJob(req)
			case "ItemsClient.BeginGetCopyJobDefinition":
				res.resp, res.err = i.dispatchBeginGetCopyJobDefinition(req)
			case "ItemsClient.NewListCopyJobsPager":
				res.resp, res.err = i.dispatchNewListCopyJobsPager(req)
			case "ItemsClient.UpdateCopyJob":
				res.resp, res.err = i.dispatchUpdateCopyJob(req)
			case "ItemsClient.BeginUpdateCopyJobDefinition":
				res.resp, res.err = i.dispatchBeginUpdateCopyJobDefinition(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateCopyJob(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateCopyJob == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateCopyJob not implemented")}
	}
	beginCreateCopyJob := i.beginCreateCopyJob.get(req)
	if beginCreateCopyJob == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/copyJobs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[copyjob.CreateCopyJobRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateCopyJob(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateCopyJob = &respr
		i.beginCreateCopyJob.add(req, beginCreateCopyJob)
	}

	resp, err := server.PollerResponderNext(beginCreateCopyJob, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateCopyJob.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateCopyJob) {
		i.beginCreateCopyJob.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteCopyJob(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteCopyJob == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteCopyJob not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/copyJobs/(?P<copyJobId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	copyJobIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("copyJobId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteCopyJob(req.Context(), workspaceIDParam, copyJobIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetCopyJob(req *http.Request) (*http.Response, error) {
	if i.srv.GetCopyJob == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetCopyJob not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/copyJobs/(?P<copyJobId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	copyJobIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("copyJobId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetCopyJob(req.Context(), workspaceIDParam, copyJobIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CopyJob, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginGetCopyJobDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginGetCopyJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetCopyJobDefinition not implemented")}
	}
	beginGetCopyJobDefinition := i.beginGetCopyJobDefinition.get(req)
	if beginGetCopyJobDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/copyJobs/(?P<copyJobId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		copyJobIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("copyJobId")])
		if err != nil {
			return nil, err
		}
		formatUnescaped, err := url.QueryUnescape(qp.Get("format"))
		if err != nil {
			return nil, err
		}
		formatParam := getOptional(formatUnescaped)
		var options *copyjob.ItemsClientBeginGetCopyJobDefinitionOptions
		if formatParam != nil {
			options = &copyjob.ItemsClientBeginGetCopyJobDefinitionOptions{
				Format: formatParam,
			}
		}
		respr, errRespr := i.srv.BeginGetCopyJobDefinition(req.Context(), workspaceIDParam, copyJobIDParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetCopyJobDefinition = &respr
		i.beginGetCopyJobDefinition.add(req, beginGetCopyJobDefinition)
	}

	resp, err := server.PollerResponderNext(beginGetCopyJobDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginGetCopyJobDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetCopyJobDefinition) {
		i.beginGetCopyJobDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListCopyJobsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListCopyJobsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListCopyJobsPager not implemented")}
	}
	newListCopyJobsPager := i.newListCopyJobsPager.get(req)
	if newListCopyJobsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/copyJobs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *copyjob.ItemsClientListCopyJobsOptions
		if continuationTokenParam != nil {
			options = &copyjob.ItemsClientListCopyJobsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListCopyJobsPager(workspaceIDParam, options)
		newListCopyJobsPager = &resp
		i.newListCopyJobsPager.add(req, newListCopyJobsPager)
		server.PagerResponderInjectNextLinks(newListCopyJobsPager, req, func(page *copyjob.ItemsClientListCopyJobsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListCopyJobsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListCopyJobsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListCopyJobsPager) {
		i.newListCopyJobsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateCopyJob(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateCopyJob == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateCopyJob not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/copyJobs/(?P<copyJobId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[copyjob.UpdateCopyJobRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	copyJobIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("copyJobId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateCopyJob(req.Context(), workspaceIDParam, copyJobIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CopyJob, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginUpdateCopyJobDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateCopyJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateCopyJobDefinition not implemented")}
	}
	beginUpdateCopyJobDefinition := i.beginUpdateCopyJobDefinition.get(req)
	if beginUpdateCopyJobDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/copyJobs/(?P<copyJobId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[copyjob.UpdateCopyJobDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		copyJobIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("copyJobId")])
		if err != nil {
			return nil, err
		}
		updateMetadataUnescaped, err := url.QueryUnescape(qp.Get("updateMetadata"))
		if err != nil {
			return nil, err
		}
		updateMetadataParam, err := parseOptional(updateMetadataUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *copyjob.ItemsClientBeginUpdateCopyJobDefinitionOptions
		if updateMetadataParam != nil {
			options = &copyjob.ItemsClientBeginUpdateCopyJobDefinitionOptions{
				UpdateMetadata: updateMetadataParam,
			}
		}
		respr, errRespr := i.srv.BeginUpdateCopyJobDefinition(req.Context(), workspaceIDParam, copyJobIDParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateCopyJobDefinition = &respr
		i.beginUpdateCopyJobDefinition.add(req, beginUpdateCopyJobDefinition)
	}

	resp, err := server.PollerResponderNext(beginUpdateCopyJobDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginUpdateCopyJobDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateCopyJobDefinition) {
		i.beginUpdateCopyJobDefinition.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
