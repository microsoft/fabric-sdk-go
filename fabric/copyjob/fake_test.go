// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package copyjob_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/copyjob"
	"github.com/microsoft/fabric-sdk-go/fabric/copyjob/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *copyjob.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = copyjob.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListCopyJobs() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List CopyJobs in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := copyjob.CopyJobs{
		Value: []copyjob.CopyJob{
			{
				Type:        to.Ptr(copyjob.ItemTypeCopyJob),
				Description: to.Ptr("A Copy job description."),
				DisplayName: to.Ptr("CopyJob Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(copyjob.ItemTypeCopyJob),
				Description: to.Ptr("A Copy job description."),
				DisplayName: to.Ptr("CopyJob Name 2"),
				ID:          to.Ptr("f697fb63-abd4-4399-9548-be7e3c3c0dac"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListCopyJobsPager = func(workspaceID string, options *copyjob.ItemsClientListCopyJobsOptions) (resp azfake.PagerResponder[copyjob.ItemsClientListCopyJobsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[copyjob.ItemsClientListCopyJobsResponse]{}
		resp.AddPage(http.StatusOK, copyjob.ItemsClientListCopyJobsResponse{CopyJobs: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListCopyJobsPager(exampleWorkspaceID, &copyjob.ItemsClientListCopyJobsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CopyJobs))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateCopyJob() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a CopyJob example"},
	})
	var exampleWorkspaceID string
	var exampleCreateCopyJobRequest copyjob.CreateCopyJobRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateCopyJobRequest = copyjob.CreateCopyJobRequest{
		Description: to.Ptr("A Copy job description."),
		DisplayName: to.Ptr("CopyJob 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateCopyJob = func(ctx context.Context, workspaceID string, createCopyJobRequest copyjob.CreateCopyJobRequest, options *copyjob.ItemsClientBeginCreateCopyJobOptions) (resp azfake.PollerResponder[copyjob.ItemsClientCreateCopyJobResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateCopyJobRequest, createCopyJobRequest))
		resp = azfake.PollerResponder[copyjob.ItemsClientCreateCopyJobResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, copyjob.ItemsClientCreateCopyJobResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateCopyJob(ctx, exampleWorkspaceID, exampleCreateCopyJobRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a CopyJob with public definition example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateCopyJobRequest = copyjob.CreateCopyJobRequest{
		Description: to.Ptr("A Copy job description."),
		Definition: &copyjob.Definition{
			Parts: []copyjob.DefinitionPart{
				{
					Path:        to.Ptr("copyjob-content.json"),
					Payload:     to.Ptr("ewogICJwcm9wZXJ0aWVzIjogewogICAgImpvYk1vZGUiOiAiQmF0Y2giCiAgfSwKICAiYWN0aXZpdGllcyI6IFtdCn0="),
					PayloadType: to.Ptr(copyjob.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(copyjob.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("CopyJob 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateCopyJob = func(ctx context.Context, workspaceID string, createCopyJobRequest copyjob.CreateCopyJobRequest, options *copyjob.ItemsClientBeginCreateCopyJobOptions) (resp azfake.PollerResponder[copyjob.ItemsClientCreateCopyJobResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateCopyJobRequest, createCopyJobRequest))
		resp = azfake.PollerResponder[copyjob.ItemsClientCreateCopyJobResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, copyjob.ItemsClientCreateCopyJobResponse{}, nil)
		return
	}

	poller, err = client.BeginCreateCopyJob(ctx, exampleWorkspaceID, exampleCreateCopyJobRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetCopyJob() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a CopyJob example"},
	})
	var exampleWorkspaceID string
	var exampleCopyJobID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleCopyJobID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := copyjob.CopyJob{
		Type:        to.Ptr(copyjob.ItemTypeCopyJob),
		Description: to.Ptr("A Copy job description."),
		DisplayName: to.Ptr("CopyJob 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetCopyJob = func(ctx context.Context, workspaceID string, copyJobID string, options *copyjob.ItemsClientGetCopyJobOptions) (resp azfake.Responder[copyjob.ItemsClientGetCopyJobResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleCopyJobID, copyJobID)
		resp = azfake.Responder[copyjob.ItemsClientGetCopyJobResponse]{}
		resp.SetResponse(http.StatusOK, copyjob.ItemsClientGetCopyJobResponse{CopyJob: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetCopyJob(ctx, exampleWorkspaceID, exampleCopyJobID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CopyJob))
}

func (testsuite *FakeTestSuite) TestItems_UpdateCopyJob() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a CopyJob example"},
	})
	var exampleWorkspaceID string
	var exampleCopyJobID string
	var exampleUpdateCopyJobRequest copyjob.UpdateCopyJobRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCopyJobID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateCopyJobRequest = copyjob.UpdateCopyJobRequest{
		Description: to.Ptr("CopyJob's New description"),
		DisplayName: to.Ptr("CopyJob's New name"),
	}

	exampleRes := copyjob.CopyJob{
		Type:        to.Ptr(copyjob.ItemTypeCopyJob),
		Description: to.Ptr("CopyJob's New description"),
		DisplayName: to.Ptr("CopyJob's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateCopyJob = func(ctx context.Context, workspaceID string, copyJobID string, updateCopyJobRequest copyjob.UpdateCopyJobRequest, options *copyjob.ItemsClientUpdateCopyJobOptions) (resp azfake.Responder[copyjob.ItemsClientUpdateCopyJobResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleCopyJobID, copyJobID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateCopyJobRequest, updateCopyJobRequest))
		resp = azfake.Responder[copyjob.ItemsClientUpdateCopyJobResponse]{}
		resp.SetResponse(http.StatusOK, copyjob.ItemsClientUpdateCopyJobResponse{CopyJob: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateCopyJob(ctx, exampleWorkspaceID, exampleCopyJobID, exampleUpdateCopyJobRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CopyJob))
}

func (testsuite *FakeTestSuite) TestItems_DeleteCopyJob() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a CopyJob example"},
	})
	var exampleWorkspaceID string
	var exampleCopyJobID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCopyJobID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteCopyJob = func(ctx context.Context, workspaceID string, copyJobID string, options *copyjob.ItemsClientDeleteCopyJobOptions) (resp azfake.Responder[copyjob.ItemsClientDeleteCopyJobResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleCopyJobID, copyJobID)
		resp = azfake.Responder[copyjob.ItemsClientDeleteCopyJobResponse]{}
		resp.SetResponse(http.StatusOK, copyjob.ItemsClientDeleteCopyJobResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteCopyJob(ctx, exampleWorkspaceID, exampleCopyJobID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetCopyJobDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a CopyJob public definition example"},
	})
	var exampleWorkspaceID string
	var exampleCopyJobID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleCopyJobID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := copyjob.DefinitionResponse{
		Definition: &copyjob.Definition{
			Parts: []copyjob.DefinitionPart{
				{
					Path:        to.Ptr("copyjob-content.json"),
					Payload:     to.Ptr("ewogICJwcm9wZXJ0aWVzIjogewogICAgImpvYk1vZGUiOiAiQmF0Y2giCiAgfSwKICAiYWN0aXZpdGllcyI6IFtdCn0="),
					PayloadType: to.Ptr(copyjob.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(copyjob.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetCopyJobDefinition = func(ctx context.Context, workspaceID string, copyJobID string, options *copyjob.ItemsClientBeginGetCopyJobDefinitionOptions) (resp azfake.PollerResponder[copyjob.ItemsClientGetCopyJobDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleCopyJobID, copyJobID)
		resp = azfake.PollerResponder[copyjob.ItemsClientGetCopyJobDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, copyjob.ItemsClientGetCopyJobDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetCopyJobDefinition(ctx, exampleWorkspaceID, exampleCopyJobID, &copyjob.ItemsClientBeginGetCopyJobDefinitionOptions{Format: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateCopyJobDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a CopyJob public definition example"},
	})
	var exampleWorkspaceID string
	var exampleCopyJobID string
	var exampleUpdateCopyJobDefinitionRequest copyjob.UpdateCopyJobDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCopyJobID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateCopyJobDefinitionRequest = copyjob.UpdateCopyJobDefinitionRequest{
		Definition: &copyjob.Definition{
			Parts: []copyjob.DefinitionPart{
				{
					Path:        to.Ptr("copyjob-content.json"),
					Payload:     to.Ptr("ewogICJwcm9wZXJ0aWVzIjogewogICAgImpvYk1vZGUiOiAiQ0RDIgogIH0sCiAgImFjdGl2aXRpZXMiOiBbXQp9"),
					PayloadType: to.Ptr(copyjob.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(copyjob.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateCopyJobDefinition = func(ctx context.Context, workspaceID string, copyJobID string, updateCopyJobDefinitionRequest copyjob.UpdateCopyJobDefinitionRequest, options *copyjob.ItemsClientBeginUpdateCopyJobDefinitionOptions) (resp azfake.PollerResponder[copyjob.ItemsClientUpdateCopyJobDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleCopyJobID, copyJobID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateCopyJobDefinitionRequest, updateCopyJobDefinitionRequest))
		resp = azfake.PollerResponder[copyjob.ItemsClientUpdateCopyJobDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, copyjob.ItemsClientUpdateCopyJobDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateCopyJobDefinition(ctx, exampleWorkspaceID, exampleCopyJobID, exampleUpdateCopyJobDefinitionRequest, &copyjob.ItemsClientBeginUpdateCopyJobDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}
