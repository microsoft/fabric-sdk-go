// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package copyjob

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateCopyJob - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create CopyJob with a public definition, refer to CopyJob [/rest/api/fabric/articles/item-management/definitions/CopyJob].
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES CopyJob.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a CopyJob the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createCopyJobRequest - Create item request payload.
//   - options - ItemsClientBeginCreateCopyJobOptions contains the optional parameters for the ItemsClient.BeginCreateCopyJob
//     method.
func (client *ItemsClient) BeginCreateCopyJob(ctx context.Context, workspaceID string, createCopyJobRequest CreateCopyJobRequest, options *ItemsClientBeginCreateCopyJobOptions) (*runtime.Poller[ItemsClientCreateCopyJobResponse], error) {
	return client.beginCreateCopyJob(ctx, workspaceID, createCopyJobRequest, options)
}

// CreateCopyJob - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create CopyJob with a public definition, refer to CopyJob [/rest/api/fabric/articles/item-management/definitions/CopyJob].
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES CopyJob.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a CopyJob the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createCopyJob(ctx context.Context, workspaceID string, createCopyJobRequest CreateCopyJobRequest, options *ItemsClientBeginCreateCopyJobOptions) (*http.Response, error) {
	var err error
	const operationName = "copyjob.ItemsClient.BeginCreateCopyJob"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCopyJobCreateRequest(ctx, workspaceID, createCopyJobRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCopyJobCreateRequest creates the CreateCopyJob request.
func (client *ItemsClient) createCopyJobCreateRequest(ctx context.Context, workspaceID string, createCopyJobRequest CreateCopyJobRequest, _ *ItemsClientBeginCreateCopyJobOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/copyJobs"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createCopyJobRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteCopyJob - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES CopyJob.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - copyJobID - The CopyJob ID.
//   - options - ItemsClientDeleteCopyJobOptions contains the optional parameters for the ItemsClient.DeleteCopyJob method.
func (client *ItemsClient) DeleteCopyJob(ctx context.Context, workspaceID string, copyJobID string, options *ItemsClientDeleteCopyJobOptions) (ItemsClientDeleteCopyJobResponse, error) {
	var err error
	const operationName = "copyjob.ItemsClient.DeleteCopyJob"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCopyJobCreateRequest(ctx, workspaceID, copyJobID, options)
	if err != nil {
		return ItemsClientDeleteCopyJobResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteCopyJobResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteCopyJobResponse{}, err
	}
	return ItemsClientDeleteCopyJobResponse{}, nil
}

// deleteCopyJobCreateRequest creates the DeleteCopyJob request.
func (client *ItemsClient) deleteCopyJobCreateRequest(ctx context.Context, workspaceID string, copyJobID string, _ *ItemsClientDeleteCopyJobOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/copyJobs/{copyJobId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if copyJobID == "" {
		return nil, errors.New("parameter copyJobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{copyJobId}", url.PathEscape(copyJobID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetCopyJob - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES CopyJob.Read.All or CopyJob.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - copyJobID - The CopyJob ID.
//   - options - ItemsClientGetCopyJobOptions contains the optional parameters for the ItemsClient.GetCopyJob method.
func (client *ItemsClient) GetCopyJob(ctx context.Context, workspaceID string, copyJobID string, options *ItemsClientGetCopyJobOptions) (ItemsClientGetCopyJobResponse, error) {
	var err error
	const operationName = "copyjob.ItemsClient.GetCopyJob"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCopyJobCreateRequest(ctx, workspaceID, copyJobID, options)
	if err != nil {
		return ItemsClientGetCopyJobResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetCopyJobResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetCopyJobResponse{}, err
	}
	resp, err := client.getCopyJobHandleResponse(httpResp)
	return resp, err
}

// getCopyJobCreateRequest creates the GetCopyJob request.
func (client *ItemsClient) getCopyJobCreateRequest(ctx context.Context, workspaceID string, copyJobID string, _ *ItemsClientGetCopyJobOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/copyJobs/{copyJobId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if copyJobID == "" {
		return nil, errors.New("parameter copyJobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{copyJobId}", url.PathEscape(copyJobID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getCopyJobHandleResponse handles the GetCopyJob response.
func (client *ItemsClient) getCopyJobHandleResponse(resp *http.Response) (ItemsClientGetCopyJobResponse, error) {
	result := ItemsClientGetCopyJobResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CopyJob); err != nil {
		return ItemsClientGetCopyJobResponse{}, err
	}
	return result, nil
}

// BeginGetCopyJobDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a CopyJob's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - copyJobID - The CopyJob ID.
//   - options - ItemsClientBeginGetCopyJobDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetCopyJobDefinition
//     method.
func (client *ItemsClient) BeginGetCopyJobDefinition(ctx context.Context, workspaceID string, copyJobID string, options *ItemsClientBeginGetCopyJobDefinitionOptions) (*runtime.Poller[ItemsClientGetCopyJobDefinitionResponse], error) {
	return client.beginGetCopyJobDefinition(ctx, workspaceID, copyJobID, options)
}

// GetCopyJobDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a CopyJob's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getCopyJobDefinition(ctx context.Context, workspaceID string, copyJobID string, options *ItemsClientBeginGetCopyJobDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "copyjob.ItemsClient.BeginGetCopyJobDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCopyJobDefinitionCreateRequest(ctx, workspaceID, copyJobID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getCopyJobDefinitionCreateRequest creates the GetCopyJobDefinition request.
func (client *ItemsClient) getCopyJobDefinitionCreateRequest(ctx context.Context, workspaceID string, copyJobID string, options *ItemsClientBeginGetCopyJobDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/copyJobs/{copyJobId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if copyJobID == "" {
		return nil, errors.New("parameter copyJobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{copyJobId}", url.PathEscape(copyJobID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("format", *options.Format)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListCopyJobsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListCopyJobsOptions contains the optional parameters for the ItemsClient.NewListCopyJobsPager method.
func (client *ItemsClient) NewListCopyJobsPager(workspaceID string, options *ItemsClientListCopyJobsOptions) *runtime.Pager[ItemsClientListCopyJobsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListCopyJobsResponse]{
		More: func(page ItemsClientListCopyJobsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListCopyJobsResponse) (ItemsClientListCopyJobsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "copyjob.ItemsClient.NewListCopyJobsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCopyJobsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListCopyJobsResponse{}, err
			}
			return client.listCopyJobsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCopyJobsCreateRequest creates the ListCopyJobs request.
func (client *ItemsClient) listCopyJobsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListCopyJobsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/copyJobs"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listCopyJobsHandleResponse handles the ListCopyJobs response.
func (client *ItemsClient) listCopyJobsHandleResponse(resp *http.Response) (ItemsClientListCopyJobsResponse, error) {
	result := ItemsClientListCopyJobsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CopyJobs); err != nil {
		return ItemsClientListCopyJobsResponse{}, err
	}
	return result, nil
}

// UpdateCopyJob - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES CopyJob.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - copyJobID - The CopyJob ID.
//   - updateCopyJobRequest - Update CopyJob request payload.
//   - options - ItemsClientUpdateCopyJobOptions contains the optional parameters for the ItemsClient.UpdateCopyJob method.
func (client *ItemsClient) UpdateCopyJob(ctx context.Context, workspaceID string, copyJobID string, updateCopyJobRequest UpdateCopyJobRequest, options *ItemsClientUpdateCopyJobOptions) (ItemsClientUpdateCopyJobResponse, error) {
	var err error
	const operationName = "copyjob.ItemsClient.UpdateCopyJob"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCopyJobCreateRequest(ctx, workspaceID, copyJobID, updateCopyJobRequest, options)
	if err != nil {
		return ItemsClientUpdateCopyJobResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateCopyJobResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateCopyJobResponse{}, err
	}
	resp, err := client.updateCopyJobHandleResponse(httpResp)
	return resp, err
}

// updateCopyJobCreateRequest creates the UpdateCopyJob request.
func (client *ItemsClient) updateCopyJobCreateRequest(ctx context.Context, workspaceID string, copyJobID string, updateCopyJobRequest UpdateCopyJobRequest, _ *ItemsClientUpdateCopyJobOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/copyJobs/{copyJobId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if copyJobID == "" {
		return nil, errors.New("parameter copyJobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{copyJobId}", url.PathEscape(copyJobID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateCopyJobRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateCopyJobHandleResponse handles the UpdateCopyJob response.
func (client *ItemsClient) updateCopyJobHandleResponse(resp *http.Response) (ItemsClientUpdateCopyJobResponse, error) {
	result := ItemsClientUpdateCopyJobResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CopyJob); err != nil {
		return ItemsClientUpdateCopyJobResponse{}, err
	}
	return result, nil
}

// BeginUpdateCopyJobDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the CopyJob's definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES CopyJob.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - copyJobID - The CopyJob ID.
//   - updateCopyJobDefinitionRequest - Update CopyJob definition request payload.
//   - options - ItemsClientBeginUpdateCopyJobDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateCopyJobDefinition
//     method.
func (client *ItemsClient) BeginUpdateCopyJobDefinition(ctx context.Context, workspaceID string, copyJobID string, updateCopyJobDefinitionRequest UpdateCopyJobDefinitionRequest, options *ItemsClientBeginUpdateCopyJobDefinitionOptions) (*runtime.Poller[ItemsClientUpdateCopyJobDefinitionResponse], error) {
	return client.beginUpdateCopyJobDefinition(ctx, workspaceID, copyJobID, updateCopyJobDefinitionRequest, options)
}

// UpdateCopyJobDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the CopyJob's definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES CopyJob.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateCopyJobDefinition(ctx context.Context, workspaceID string, copyJobID string, updateCopyJobDefinitionRequest UpdateCopyJobDefinitionRequest, options *ItemsClientBeginUpdateCopyJobDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "copyjob.ItemsClient.BeginUpdateCopyJobDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCopyJobDefinitionCreateRequest(ctx, workspaceID, copyJobID, updateCopyJobDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCopyJobDefinitionCreateRequest creates the UpdateCopyJobDefinition request.
func (client *ItemsClient) updateCopyJobDefinitionCreateRequest(ctx context.Context, workspaceID string, copyJobID string, updateCopyJobDefinitionRequest UpdateCopyJobDefinitionRequest, options *ItemsClientBeginUpdateCopyJobDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/copyJobs/{copyJobId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if copyJobID == "" {
		return nil, errors.New("parameter copyJobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{copyJobId}", url.PathEscape(copyJobID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateCopyJobDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateCopyJob - returns ItemsClientCreateCopyJobResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// To create CopyJob with a public definition, refer to CopyJob [/rest/api/fabric/articles/item-management/definitions/CopyJob].
//
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES CopyJob.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a CopyJob the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createCopyJobRequest - Create item request payload.
//   - options - ItemsClientBeginCreateCopyJobOptions contains the optional parameters for the ItemsClient.BeginCreateCopyJob method.
func (client *ItemsClient) CreateCopyJob(ctx context.Context, workspaceID string, createCopyJobRequest CreateCopyJobRequest, options *ItemsClientBeginCreateCopyJobOptions) (ItemsClientCreateCopyJobResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateCopyJob(ctx, workspaceID, createCopyJobRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateCopyJobResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateCopyJobResponse{}, err
	}
	return result, err
}

// beginCreateCopyJob creates the createCopyJob request.
func (client *ItemsClient) beginCreateCopyJob(ctx context.Context, workspaceID string, createCopyJobRequest CreateCopyJobRequest, options *ItemsClientBeginCreateCopyJobOptions) (*runtime.Poller[ItemsClientCreateCopyJobResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createCopyJob(ctx, workspaceID, createCopyJobRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateCopyJobResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateCopyJobResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateCopyJobResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateCopyJobResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetCopyJobDefinition - returns ItemsClientGetCopyJobDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// When you get a CopyJob's public definition, the sensitivity label is not a part of the definition.
//
// PERMISSIONS The caller must have contributor or higher workspace role.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - copyJobID - The CopyJob ID.
//   - options - ItemsClientBeginGetCopyJobDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetCopyJobDefinition method.
func (client *ItemsClient) GetCopyJobDefinition(ctx context.Context, workspaceID string, copyJobID string, options *ItemsClientBeginGetCopyJobDefinitionOptions) (ItemsClientGetCopyJobDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetCopyJobDefinition(ctx, workspaceID, copyJobID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetCopyJobDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetCopyJobDefinitionResponse{}, err
	}
	return result, err
}

// beginGetCopyJobDefinition creates the getCopyJobDefinition request.
func (client *ItemsClient) beginGetCopyJobDefinition(ctx context.Context, workspaceID string, copyJobID string, options *ItemsClientBeginGetCopyJobDefinitionOptions) (*runtime.Poller[ItemsClientGetCopyJobDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getCopyJobDefinition(ctx, workspaceID, copyJobID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetCopyJobDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetCopyJobDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetCopyJobDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetCopyJobDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateCopyJobDefinition - returns ItemsClientUpdateCopyJobDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// Updating the CopyJob's definition, does not affect its sensitivity label.
//
// PERMISSIONS The API caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES CopyJob.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - copyJobID - The CopyJob ID.
//   - updateCopyJobDefinitionRequest - Update CopyJob definition request payload.
//   - options - ItemsClientBeginUpdateCopyJobDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateCopyJobDefinition method.
func (client *ItemsClient) UpdateCopyJobDefinition(ctx context.Context, workspaceID string, copyJobID string, updateCopyJobDefinitionRequest UpdateCopyJobDefinitionRequest, options *ItemsClientBeginUpdateCopyJobDefinitionOptions) (ItemsClientUpdateCopyJobDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateCopyJobDefinition(ctx, workspaceID, copyJobID, updateCopyJobDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateCopyJobDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateCopyJobDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateCopyJobDefinition creates the updateCopyJobDefinition request.
func (client *ItemsClient) beginUpdateCopyJobDefinition(ctx context.Context, workspaceID string, copyJobID string, updateCopyJobDefinitionRequest UpdateCopyJobDefinitionRequest, options *ItemsClientBeginUpdateCopyJobDefinitionOptions) (*runtime.Poller[ItemsClientUpdateCopyJobDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateCopyJobDefinition(ctx, workspaceID, copyJobID, updateCopyJobDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateCopyJobDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateCopyJobDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateCopyJobDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateCopyJobDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListCopyJobs - returns array of CopyJob from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListCopyJobsOptions contains the optional parameters for the ItemsClient.NewListCopyJobsPager method.
func (client *ItemsClient) ListCopyJobs(ctx context.Context, workspaceID string, options *ItemsClientListCopyJobsOptions) ([]CopyJob, error) {
	pager := client.NewListCopyJobsPager(workspaceID, options)
	mapper := func(resp ItemsClientListCopyJobsResponse) []CopyJob {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []CopyJob{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []CopyJob{}, err
	}
	return list, nil
}
