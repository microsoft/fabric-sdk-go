// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package mlexperiment

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateMLExperiment - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API does not support create an machine learning experiment with definition.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES MLExperiment.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a machine learning experiment the workspace must be on a supported Fabric capacity. For more information see:
// Microsoft Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createMLExperimentRequest - Create item request payload.
//   - options - ItemsClientBeginCreateMLExperimentOptions contains the optional parameters for the ItemsClient.BeginCreateMLExperiment
//     method.
func (client *ItemsClient) BeginCreateMLExperiment(ctx context.Context, workspaceID string, createMLExperimentRequest CreateMLExperimentRequest, options *ItemsClientBeginCreateMLExperimentOptions) (*runtime.Poller[ItemsClientCreateMLExperimentResponse], error) {
	return client.beginCreateMLExperiment(ctx, workspaceID, createMLExperimentRequest, options)
}

// CreateMLExperiment - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API does not support create an machine learning experiment with definition.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES MLExperiment.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a machine learning experiment the workspace must be on a supported Fabric capacity. For more information see:
// Microsoft Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createMLExperiment(ctx context.Context, workspaceID string, createMLExperimentRequest CreateMLExperimentRequest, options *ItemsClientBeginCreateMLExperimentOptions) (*http.Response, error) {
	var err error
	const operationName = "mlexperiment.ItemsClient.BeginCreateMLExperiment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createMLExperimentCreateRequest(ctx, workspaceID, createMLExperimentRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createMLExperimentCreateRequest creates the CreateMLExperiment request.
func (client *ItemsClient) createMLExperimentCreateRequest(ctx context.Context, workspaceID string, createMLExperimentRequest CreateMLExperimentRequest, _ *ItemsClientBeginCreateMLExperimentOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mlExperiments"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createMLExperimentRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteMLExperiment - PERMISSIONS The caller must have contributor or higher role on the workspace.
// REQUIRED DELEGATED SCOPES MLExperiment.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mlExperimentID - The machine learning experiment ID.
//   - options - ItemsClientDeleteMLExperimentOptions contains the optional parameters for the ItemsClient.DeleteMLExperiment
//     method.
func (client *ItemsClient) DeleteMLExperiment(ctx context.Context, workspaceID string, mlExperimentID string, options *ItemsClientDeleteMLExperimentOptions) (ItemsClientDeleteMLExperimentResponse, error) {
	var err error
	const operationName = "mlexperiment.ItemsClient.DeleteMLExperiment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteMLExperimentCreateRequest(ctx, workspaceID, mlExperimentID, options)
	if err != nil {
		return ItemsClientDeleteMLExperimentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteMLExperimentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteMLExperimentResponse{}, err
	}
	return ItemsClientDeleteMLExperimentResponse{}, nil
}

// deleteMLExperimentCreateRequest creates the DeleteMLExperiment request.
func (client *ItemsClient) deleteMLExperimentCreateRequest(ctx context.Context, workspaceID string, mlExperimentID string, _ *ItemsClientDeleteMLExperimentOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mlExperiments/{mlExperimentId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mlExperimentID == "" {
		return nil, errors.New("parameter mlExperimentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mlExperimentId}", url.PathEscape(mlExperimentID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetMLExperiment - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES MLExperiment.Read.All or MLExperiment.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mlExperimentID - The machine learning experiment ID.
//   - options - ItemsClientGetMLExperimentOptions contains the optional parameters for the ItemsClient.GetMLExperiment method.
func (client *ItemsClient) GetMLExperiment(ctx context.Context, workspaceID string, mlExperimentID string, options *ItemsClientGetMLExperimentOptions) (ItemsClientGetMLExperimentResponse, error) {
	var err error
	const operationName = "mlexperiment.ItemsClient.GetMLExperiment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getMLExperimentCreateRequest(ctx, workspaceID, mlExperimentID, options)
	if err != nil {
		return ItemsClientGetMLExperimentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetMLExperimentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetMLExperimentResponse{}, err
	}
	resp, err := client.getMLExperimentHandleResponse(httpResp)
	return resp, err
}

// getMLExperimentCreateRequest creates the GetMLExperiment request.
func (client *ItemsClient) getMLExperimentCreateRequest(ctx context.Context, workspaceID string, mlExperimentID string, _ *ItemsClientGetMLExperimentOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mlExperiments/{mlExperimentId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mlExperimentID == "" {
		return nil, errors.New("parameter mlExperimentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mlExperimentId}", url.PathEscape(mlExperimentID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMLExperimentHandleResponse handles the GetMLExperiment response.
func (client *ItemsClient) getMLExperimentHandleResponse(resp *http.Response) (ItemsClientGetMLExperimentResponse, error) {
	result := ItemsClientGetMLExperimentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MLExperiment); err != nil {
		return ItemsClientGetMLExperimentResponse{}, err
	}
	return result, nil
}

// NewListMLExperimentsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListMLExperimentsOptions contains the optional parameters for the ItemsClient.NewListMLExperimentsPager
//     method.
func (client *ItemsClient) NewListMLExperimentsPager(workspaceID string, options *ItemsClientListMLExperimentsOptions) *runtime.Pager[ItemsClientListMLExperimentsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListMLExperimentsResponse]{
		More: func(page ItemsClientListMLExperimentsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListMLExperimentsResponse) (ItemsClientListMLExperimentsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "mlexperiment.ItemsClient.NewListMLExperimentsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listMLExperimentsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListMLExperimentsResponse{}, err
			}
			return client.listMLExperimentsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listMLExperimentsCreateRequest creates the ListMLExperiments request.
func (client *ItemsClient) listMLExperimentsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListMLExperimentsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mlExperiments"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listMLExperimentsHandleResponse handles the ListMLExperiments response.
func (client *ItemsClient) listMLExperimentsHandleResponse(resp *http.Response) (ItemsClientListMLExperimentsResponse, error) {
	result := ItemsClientListMLExperimentsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MLExperiments); err != nil {
		return ItemsClientListMLExperimentsResponse{}, err
	}
	return result, nil
}

// UpdateMLExperiment - PERMISSIONS The caller must have contributor or higher role on the workspace.
// REQUIRED DELEGATED SCOPES MLExperiment.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mlExperimentID - The machine learning experiment ID.
//   - updateMLExperimentRequest - Update machine learning experiment request payload.
//   - options - ItemsClientUpdateMLExperimentOptions contains the optional parameters for the ItemsClient.UpdateMLExperiment
//     method.
func (client *ItemsClient) UpdateMLExperiment(ctx context.Context, workspaceID string, mlExperimentID string, updateMLExperimentRequest UpdateMLExperimentRequest, options *ItemsClientUpdateMLExperimentOptions) (ItemsClientUpdateMLExperimentResponse, error) {
	var err error
	const operationName = "mlexperiment.ItemsClient.UpdateMLExperiment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateMLExperimentCreateRequest(ctx, workspaceID, mlExperimentID, updateMLExperimentRequest, options)
	if err != nil {
		return ItemsClientUpdateMLExperimentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateMLExperimentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateMLExperimentResponse{}, err
	}
	resp, err := client.updateMLExperimentHandleResponse(httpResp)
	return resp, err
}

// updateMLExperimentCreateRequest creates the UpdateMLExperiment request.
func (client *ItemsClient) updateMLExperimentCreateRequest(ctx context.Context, workspaceID string, mlExperimentID string, updateMLExperimentRequest UpdateMLExperimentRequest, _ *ItemsClientUpdateMLExperimentOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mlExperiments/{mlExperimentId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mlExperimentID == "" {
		return nil, errors.New("parameter mlExperimentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mlExperimentId}", url.PathEscape(mlExperimentID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateMLExperimentRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateMLExperimentHandleResponse handles the UpdateMLExperiment response.
func (client *ItemsClient) updateMLExperimentHandleResponse(resp *http.Response) (ItemsClientUpdateMLExperimentResponse, error) {
	result := ItemsClientUpdateMLExperimentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MLExperiment); err != nil {
		return ItemsClientUpdateMLExperimentResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// CreateMLExperiment - returns ItemsClientCreateMLExperimentResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// This API does not support create an machine learning experiment with definition.
//
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES MLExperiment.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a machine learning experiment the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types
//     [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createMLExperimentRequest - Create item request payload.
//   - options - ItemsClientBeginCreateMLExperimentOptions contains the optional parameters for the ItemsClient.BeginCreateMLExperiment method.
func (client *ItemsClient) CreateMLExperiment(ctx context.Context, workspaceID string, createMLExperimentRequest CreateMLExperimentRequest, options *ItemsClientBeginCreateMLExperimentOptions) (ItemsClientCreateMLExperimentResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateMLExperiment(ctx, workspaceID, createMLExperimentRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateMLExperimentResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateMLExperimentResponse{}, err
	}
	return result, err
}

// beginCreateMLExperiment creates the createMLExperiment request.
func (client *ItemsClient) beginCreateMLExperiment(ctx context.Context, workspaceID string, createMLExperimentRequest CreateMLExperimentRequest, options *ItemsClientBeginCreateMLExperimentOptions) (*runtime.Poller[ItemsClientCreateMLExperimentResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createMLExperiment(ctx, workspaceID, createMLExperimentRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateMLExperimentResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateMLExperimentResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateMLExperimentResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateMLExperimentResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListMLExperiments - returns array of MLExperiment from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListMLExperimentsOptions contains the optional parameters for the ItemsClient.NewListMLExperimentsPager method.
func (client *ItemsClient) ListMLExperiments(ctx context.Context, workspaceID string, options *ItemsClientListMLExperimentsOptions) ([]MLExperiment, error) {
	pager := client.NewListMLExperimentsPager(workspaceID, options)
	mapper := func(resp ItemsClientListMLExperimentsResponse) []MLExperiment {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []MLExperiment{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []MLExperiment{}, err
	}
	return list, nil
}
