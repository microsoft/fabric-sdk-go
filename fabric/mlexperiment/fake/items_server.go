// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/mlexperiment"
)

// ItemsServer is a fake server for instances of the mlexperiment.ItemsClient type.
type ItemsServer struct {
	// BeginCreateMLExperiment is the fake for method ItemsClient.BeginCreateMLExperiment
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateMLExperiment func(ctx context.Context, workspaceID string, createMLExperimentRequest mlexperiment.CreateMLExperimentRequest, options *mlexperiment.ItemsClientBeginCreateMLExperimentOptions) (resp azfake.PollerResponder[mlexperiment.ItemsClientCreateMLExperimentResponse], errResp azfake.ErrorResponder)

	// DeleteMLExperiment is the fake for method ItemsClient.DeleteMLExperiment
	// HTTP status codes to indicate success: http.StatusOK
	DeleteMLExperiment func(ctx context.Context, workspaceID string, mlExperimentID string, options *mlexperiment.ItemsClientDeleteMLExperimentOptions) (resp azfake.Responder[mlexperiment.ItemsClientDeleteMLExperimentResponse], errResp azfake.ErrorResponder)

	// GetMLExperiment is the fake for method ItemsClient.GetMLExperiment
	// HTTP status codes to indicate success: http.StatusOK
	GetMLExperiment func(ctx context.Context, workspaceID string, mlExperimentID string, options *mlexperiment.ItemsClientGetMLExperimentOptions) (resp azfake.Responder[mlexperiment.ItemsClientGetMLExperimentResponse], errResp azfake.ErrorResponder)

	// NewListMLExperimentsPager is the fake for method ItemsClient.NewListMLExperimentsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListMLExperimentsPager func(workspaceID string, options *mlexperiment.ItemsClientListMLExperimentsOptions) (resp azfake.PagerResponder[mlexperiment.ItemsClientListMLExperimentsResponse])

	// UpdateMLExperiment is the fake for method ItemsClient.UpdateMLExperiment
	// HTTP status codes to indicate success: http.StatusOK
	UpdateMLExperiment func(ctx context.Context, workspaceID string, mlExperimentID string, updateMLExperimentRequest mlexperiment.UpdateMLExperimentRequest, options *mlexperiment.ItemsClientUpdateMLExperimentOptions) (resp azfake.Responder[mlexperiment.ItemsClientUpdateMLExperimentResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of mlexperiment.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                       srv,
		beginCreateMLExperiment:   newTracker[azfake.PollerResponder[mlexperiment.ItemsClientCreateMLExperimentResponse]](),
		newListMLExperimentsPager: newTracker[azfake.PagerResponder[mlexperiment.ItemsClientListMLExperimentsResponse]](),
	}
}

// ItemsServerTransport connects instances of mlexperiment.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                       *ItemsServer
	beginCreateMLExperiment   *tracker[azfake.PollerResponder[mlexperiment.ItemsClientCreateMLExperimentResponse]]
	newListMLExperimentsPager *tracker[azfake.PagerResponder[mlexperiment.ItemsClientListMLExperimentsResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateMLExperiment":
				res.resp, res.err = i.dispatchBeginCreateMLExperiment(req)
			case "ItemsClient.DeleteMLExperiment":
				res.resp, res.err = i.dispatchDeleteMLExperiment(req)
			case "ItemsClient.GetMLExperiment":
				res.resp, res.err = i.dispatchGetMLExperiment(req)
			case "ItemsClient.NewListMLExperimentsPager":
				res.resp, res.err = i.dispatchNewListMLExperimentsPager(req)
			case "ItemsClient.UpdateMLExperiment":
				res.resp, res.err = i.dispatchUpdateMLExperiment(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateMLExperiment(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateMLExperiment == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateMLExperiment not implemented")}
	}
	beginCreateMLExperiment := i.beginCreateMLExperiment.get(req)
	if beginCreateMLExperiment == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlExperiments`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[mlexperiment.CreateMLExperimentRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateMLExperiment(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateMLExperiment = &respr
		i.beginCreateMLExperiment.add(req, beginCreateMLExperiment)
	}

	resp, err := server.PollerResponderNext(beginCreateMLExperiment, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateMLExperiment.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateMLExperiment) {
		i.beginCreateMLExperiment.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteMLExperiment(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteMLExperiment == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteMLExperiment not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlExperiments/(?P<mlExperimentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mlExperimentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mlExperimentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteMLExperiment(req.Context(), workspaceIDParam, mlExperimentIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetMLExperiment(req *http.Request) (*http.Response, error) {
	if i.srv.GetMLExperiment == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMLExperiment not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlExperiments/(?P<mlExperimentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mlExperimentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mlExperimentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetMLExperiment(req.Context(), workspaceIDParam, mlExperimentIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MLExperiment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListMLExperimentsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListMLExperimentsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListMLExperimentsPager not implemented")}
	}
	newListMLExperimentsPager := i.newListMLExperimentsPager.get(req)
	if newListMLExperimentsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlExperiments`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *mlexperiment.ItemsClientListMLExperimentsOptions
		if continuationTokenParam != nil {
			options = &mlexperiment.ItemsClientListMLExperimentsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListMLExperimentsPager(workspaceIDParam, options)
		newListMLExperimentsPager = &resp
		i.newListMLExperimentsPager.add(req, newListMLExperimentsPager)
		server.PagerResponderInjectNextLinks(newListMLExperimentsPager, req, func(page *mlexperiment.ItemsClientListMLExperimentsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListMLExperimentsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListMLExperimentsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListMLExperimentsPager) {
		i.newListMLExperimentsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateMLExperiment(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateMLExperiment == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateMLExperiment not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlExperiments/(?P<mlExperimentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[mlexperiment.UpdateMLExperimentRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mlExperimentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mlExperimentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateMLExperiment(req.Context(), workspaceIDParam, mlExperimentIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MLExperiment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
