// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package paginatedreport

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// NewListPaginatedReportsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have a viewer workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListPaginatedReportsOptions contains the optional parameters for the ItemsClient.NewListPaginatedReportsPager
//     method.
func (client *ItemsClient) NewListPaginatedReportsPager(workspaceID string, options *ItemsClientListPaginatedReportsOptions) *runtime.Pager[ItemsClientListPaginatedReportsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListPaginatedReportsResponse]{
		More: func(page ItemsClientListPaginatedReportsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListPaginatedReportsResponse) (ItemsClientListPaginatedReportsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "paginatedreport.ItemsClient.NewListPaginatedReportsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listPaginatedReportsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListPaginatedReportsResponse{}, err
			}
			return client.listPaginatedReportsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listPaginatedReportsCreateRequest creates the ListPaginatedReports request.
func (client *ItemsClient) listPaginatedReportsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListPaginatedReportsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/paginatedReports"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listPaginatedReportsHandleResponse handles the ListPaginatedReports response.
func (client *ItemsClient) listPaginatedReportsHandleResponse(resp *http.Response) (ItemsClientListPaginatedReportsResponse, error) {
	result := ItemsClientListPaginatedReportsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PaginatedReports); err != nil {
		return ItemsClientListPaginatedReportsResponse{}, err
	}
	return result, nil
}

// UpdatePaginatedReport - PERMISSIONS The caller must have read and write permissions for the paginated report.
// REQUIRED DELEGATED SCOPES PaginatedReport.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - paginatedReportID - The paginated report ID.
//   - updatePaginatedReportRequest - Update paginated report request payload.
//   - options - ItemsClientUpdatePaginatedReportOptions contains the optional parameters for the ItemsClient.UpdatePaginatedReport
//     method.
func (client *ItemsClient) UpdatePaginatedReport(ctx context.Context, workspaceID string, paginatedReportID string, updatePaginatedReportRequest UpdatePaginatedReportRequest, options *ItemsClientUpdatePaginatedReportOptions) (ItemsClientUpdatePaginatedReportResponse, error) {
	var err error
	const operationName = "paginatedreport.ItemsClient.UpdatePaginatedReport"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updatePaginatedReportCreateRequest(ctx, workspaceID, paginatedReportID, updatePaginatedReportRequest, options)
	if err != nil {
		return ItemsClientUpdatePaginatedReportResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdatePaginatedReportResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdatePaginatedReportResponse{}, err
	}
	resp, err := client.updatePaginatedReportHandleResponse(httpResp)
	return resp, err
}

// updatePaginatedReportCreateRequest creates the UpdatePaginatedReport request.
func (client *ItemsClient) updatePaginatedReportCreateRequest(ctx context.Context, workspaceID string, paginatedReportID string, updatePaginatedReportRequest UpdatePaginatedReportRequest, _ *ItemsClientUpdatePaginatedReportOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/paginatedReports/{paginatedReportId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if paginatedReportID == "" {
		return nil, errors.New("parameter paginatedReportID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{paginatedReportId}", url.PathEscape(paginatedReportID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updatePaginatedReportRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updatePaginatedReportHandleResponse handles the UpdatePaginatedReport response.
func (client *ItemsClient) updatePaginatedReportHandleResponse(resp *http.Response) (ItemsClientUpdatePaginatedReportResponse, error) {
	result := ItemsClientUpdatePaginatedReportResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PaginatedReport); err != nil {
		return ItemsClientUpdatePaginatedReportResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// ListPaginatedReports - returns array of PaginatedReport from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have a viewer workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListPaginatedReportsOptions contains the optional parameters for the ItemsClient.NewListPaginatedReportsPager method.
func (client *ItemsClient) ListPaginatedReports(ctx context.Context, workspaceID string, options *ItemsClientListPaginatedReportsOptions) ([]PaginatedReport, error) {
	pager := client.NewListPaginatedReportsPager(workspaceID, options)
	mapper := func(resp ItemsClientListPaginatedReportsResponse) []PaginatedReport {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []PaginatedReport{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []PaginatedReport{}, err
	}
	return list, nil
}
