// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/warehouse"
)

// Server is a fake server for instances of the warehouse.Client type.
type Server struct {
	// GetSQLAuditSettings is the fake for method Client.GetSQLAuditSettings
	// HTTP status codes to indicate success: http.StatusOK
	GetSQLAuditSettings func(ctx context.Context, workspaceID string, itemID string, options *warehouse.ClientGetSQLAuditSettingsOptions) (resp azfake.Responder[warehouse.ClientGetSQLAuditSettingsResponse], errResp azfake.ErrorResponder)

	// SetAuditActionsAndGroups is the fake for method Client.SetAuditActionsAndGroups
	// HTTP status codes to indicate success: http.StatusOK
	SetAuditActionsAndGroups func(ctx context.Context, workspaceID string, itemID string, setAuditActionsAndGroupsRequest []string, options *warehouse.ClientSetAuditActionsAndGroupsOptions) (resp azfake.Responder[warehouse.ClientSetAuditActionsAndGroupsResponse], errResp azfake.ErrorResponder)

	// UpdateSQLAuditSettings is the fake for method Client.UpdateSQLAuditSettings
	// HTTP status codes to indicate success: http.StatusOK
	UpdateSQLAuditSettings func(ctx context.Context, workspaceID string, itemID string, updateAuditSettingsRequest warehouse.SQLAuditSettingsUpdate, options *warehouse.ClientUpdateSQLAuditSettingsOptions) (resp azfake.Responder[warehouse.ClientUpdateSQLAuditSettingsResponse], errResp azfake.ErrorResponder)
}

// NewServerTransport creates a new instance of ServerTransport with the provided implementation.
// The returned ServerTransport instance is connected to an instance of warehouse.Client via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerTransport(srv *Server) *ServerTransport {
	return &ServerTransport{srv: srv}
}

// ServerTransport connects instances of warehouse.Client to instances of Server.
// Don't use this type directly, use NewServerTransport instead.
type ServerTransport struct {
	srv *Server
}

// Do implements the policy.Transporter interface for ServerTransport.
func (s *ServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return s.dispatchToMethodFake(req, method)
}

func (s *ServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if serverTransportInterceptor != nil {
			res.resp, res.err, intercepted = serverTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "Client.GetSQLAuditSettings":
				res.resp, res.err = s.dispatchGetSQLAuditSettings(req)
			case "Client.SetAuditActionsAndGroups":
				res.resp, res.err = s.dispatchSetAuditActionsAndGroups(req)
			case "Client.UpdateSQLAuditSettings":
				res.resp, res.err = s.dispatchUpdateSQLAuditSettings(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *ServerTransport) dispatchGetSQLAuditSettings(req *http.Request) (*http.Response, error) {
	if s.srv.GetSQLAuditSettings == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetSQLAuditSettings not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehouses/(?P<itemId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/settings/sqlAudit`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	itemIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("itemId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.GetSQLAuditSettings(req.Context(), workspaceIDParam, itemIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLAuditSettings, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerTransport) dispatchSetAuditActionsAndGroups(req *http.Request) (*http.Response, error) {
	if s.srv.SetAuditActionsAndGroups == nil {
		return nil, &nonRetriableError{errors.New("fake for method SetAuditActionsAndGroups not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehouses/(?P<itemId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/settings/sqlAudit/setAuditActionsAndGroups`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[[]string](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	itemIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("itemId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.SetAuditActionsAndGroups(req.Context(), workspaceIDParam, itemIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerTransport) dispatchUpdateSQLAuditSettings(req *http.Request) (*http.Response, error) {
	if s.srv.UpdateSQLAuditSettings == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateSQLAuditSettings not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehouses/(?P<itemId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/settings/sqlAudit`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[warehouse.SQLAuditSettingsUpdate](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	itemIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("itemId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.UpdateSQLAuditSettings(req.Context(), workspaceIDParam, itemIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLAuditSettings, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ServerTransport
var serverTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
