// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/warehouse"
)

// RestorePointsServer is a fake server for instances of the warehouse.RestorePointsClient type.
type RestorePointsServer struct {
	// BeginCreateRestorePoint is the fake for method RestorePointsClient.BeginCreateRestorePoint
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateRestorePoint func(ctx context.Context, workspaceID string, warehouseID string, createRestorePointRequest warehouse.CreateRestorePointRequest, options *warehouse.RestorePointsClientBeginCreateRestorePointOptions) (resp azfake.PollerResponder[warehouse.RestorePointsClientCreateRestorePointResponse], errResp azfake.ErrorResponder)

	// DeleteRestorePoint is the fake for method RestorePointsClient.DeleteRestorePoint
	// HTTP status codes to indicate success: http.StatusOK
	DeleteRestorePoint func(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, options *warehouse.RestorePointsClientDeleteRestorePointOptions) (resp azfake.Responder[warehouse.RestorePointsClientDeleteRestorePointResponse], errResp azfake.ErrorResponder)

	// GetRestorePoint is the fake for method RestorePointsClient.GetRestorePoint
	// HTTP status codes to indicate success: http.StatusOK
	GetRestorePoint func(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, options *warehouse.RestorePointsClientGetRestorePointOptions) (resp azfake.Responder[warehouse.RestorePointsClientGetRestorePointResponse], errResp azfake.ErrorResponder)

	// NewListRestorePointsPager is the fake for method RestorePointsClient.NewListRestorePointsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListRestorePointsPager func(workspaceID string, warehouseID string, options *warehouse.RestorePointsClientListRestorePointsOptions) (resp azfake.PagerResponder[warehouse.RestorePointsClientListRestorePointsResponse])

	// BeginRestoreToRestorePoint is the fake for method RestorePointsClient.BeginRestoreToRestorePoint
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginRestoreToRestorePoint func(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, options *warehouse.RestorePointsClientBeginRestoreToRestorePointOptions) (resp azfake.PollerResponder[warehouse.RestorePointsClientRestoreToRestorePointResponse], errResp azfake.ErrorResponder)

	// UpdateRestorePoint is the fake for method RestorePointsClient.UpdateRestorePoint
	// HTTP status codes to indicate success: http.StatusOK
	UpdateRestorePoint func(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, updateRestorePointRequest warehouse.UpdateRestorePointRequest, options *warehouse.RestorePointsClientUpdateRestorePointOptions) (resp azfake.Responder[warehouse.RestorePointsClientUpdateRestorePointResponse], errResp azfake.ErrorResponder)
}

// NewRestorePointsServerTransport creates a new instance of RestorePointsServerTransport with the provided implementation.
// The returned RestorePointsServerTransport instance is connected to an instance of warehouse.RestorePointsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewRestorePointsServerTransport(srv *RestorePointsServer) *RestorePointsServerTransport {
	return &RestorePointsServerTransport{
		srv:                        srv,
		beginCreateRestorePoint:    newTracker[azfake.PollerResponder[warehouse.RestorePointsClientCreateRestorePointResponse]](),
		newListRestorePointsPager:  newTracker[azfake.PagerResponder[warehouse.RestorePointsClientListRestorePointsResponse]](),
		beginRestoreToRestorePoint: newTracker[azfake.PollerResponder[warehouse.RestorePointsClientRestoreToRestorePointResponse]](),
	}
}

// RestorePointsServerTransport connects instances of warehouse.RestorePointsClient to instances of RestorePointsServer.
// Don't use this type directly, use NewRestorePointsServerTransport instead.
type RestorePointsServerTransport struct {
	srv                        *RestorePointsServer
	beginCreateRestorePoint    *tracker[azfake.PollerResponder[warehouse.RestorePointsClientCreateRestorePointResponse]]
	newListRestorePointsPager  *tracker[azfake.PagerResponder[warehouse.RestorePointsClientListRestorePointsResponse]]
	beginRestoreToRestorePoint *tracker[azfake.PollerResponder[warehouse.RestorePointsClientRestoreToRestorePointResponse]]
}

// Do implements the policy.Transporter interface for RestorePointsServerTransport.
func (r *RestorePointsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return r.dispatchToMethodFake(req, method)
}

func (r *RestorePointsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if restorePointsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = restorePointsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "RestorePointsClient.BeginCreateRestorePoint":
				res.resp, res.err = r.dispatchBeginCreateRestorePoint(req)
			case "RestorePointsClient.DeleteRestorePoint":
				res.resp, res.err = r.dispatchDeleteRestorePoint(req)
			case "RestorePointsClient.GetRestorePoint":
				res.resp, res.err = r.dispatchGetRestorePoint(req)
			case "RestorePointsClient.NewListRestorePointsPager":
				res.resp, res.err = r.dispatchNewListRestorePointsPager(req)
			case "RestorePointsClient.BeginRestoreToRestorePoint":
				res.resp, res.err = r.dispatchBeginRestoreToRestorePoint(req)
			case "RestorePointsClient.UpdateRestorePoint":
				res.resp, res.err = r.dispatchUpdateRestorePoint(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (r *RestorePointsServerTransport) dispatchBeginCreateRestorePoint(req *http.Request) (*http.Response, error) {
	if r.srv.BeginCreateRestorePoint == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateRestorePoint not implemented")}
	}
	beginCreateRestorePoint := r.beginCreateRestorePoint.get(req)
	if beginCreateRestorePoint == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehouses/(?P<warehouseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/restorePoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[warehouse.CreateRestorePointRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		warehouseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("warehouseId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := r.srv.BeginCreateRestorePoint(req.Context(), workspaceIDParam, warehouseIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateRestorePoint = &respr
		r.beginCreateRestorePoint.add(req, beginCreateRestorePoint)
	}

	resp, err := server.PollerResponderNext(beginCreateRestorePoint, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		r.beginCreateRestorePoint.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateRestorePoint) {
		r.beginCreateRestorePoint.remove(req)
	}

	return resp, nil
}

func (r *RestorePointsServerTransport) dispatchDeleteRestorePoint(req *http.Request) (*http.Response, error) {
	if r.srv.DeleteRestorePoint == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteRestorePoint not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehouses/(?P<warehouseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/restorePoints/(?P<restorePointId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	warehouseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("warehouseId")])
	if err != nil {
		return nil, err
	}
	restorePointIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("restorePointId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.DeleteRestorePoint(req.Context(), workspaceIDParam, warehouseIDParam, restorePointIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RestorePointsServerTransport) dispatchGetRestorePoint(req *http.Request) (*http.Response, error) {
	if r.srv.GetRestorePoint == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetRestorePoint not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehouses/(?P<warehouseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/restorePoints/(?P<restorePointId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	warehouseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("warehouseId")])
	if err != nil {
		return nil, err
	}
	restorePointIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("restorePointId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.GetRestorePoint(req.Context(), workspaceIDParam, warehouseIDParam, restorePointIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RestorePoint, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RestorePointsServerTransport) dispatchNewListRestorePointsPager(req *http.Request) (*http.Response, error) {
	if r.srv.NewListRestorePointsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListRestorePointsPager not implemented")}
	}
	newListRestorePointsPager := r.newListRestorePointsPager.get(req)
	if newListRestorePointsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehouses/(?P<warehouseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/restorePoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		warehouseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("warehouseId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *warehouse.RestorePointsClientListRestorePointsOptions
		if continuationTokenParam != nil {
			options = &warehouse.RestorePointsClientListRestorePointsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := r.srv.NewListRestorePointsPager(workspaceIDParam, warehouseIDParam, options)
		newListRestorePointsPager = &resp
		r.newListRestorePointsPager.add(req, newListRestorePointsPager)
		server.PagerResponderInjectNextLinks(newListRestorePointsPager, req, func(page *warehouse.RestorePointsClientListRestorePointsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListRestorePointsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		r.newListRestorePointsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListRestorePointsPager) {
		r.newListRestorePointsPager.remove(req)
	}
	return resp, nil
}

func (r *RestorePointsServerTransport) dispatchBeginRestoreToRestorePoint(req *http.Request) (*http.Response, error) {
	if r.srv.BeginRestoreToRestorePoint == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginRestoreToRestorePoint not implemented")}
	}
	beginRestoreToRestorePoint := r.beginRestoreToRestorePoint.get(req)
	if beginRestoreToRestorePoint == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehouses/(?P<warehouseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/restorePoints/(?P<restorePointId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/restore`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		warehouseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("warehouseId")])
		if err != nil {
			return nil, err
		}
		restorePointIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("restorePointId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := r.srv.BeginRestoreToRestorePoint(req.Context(), workspaceIDParam, warehouseIDParam, restorePointIDParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginRestoreToRestorePoint = &respr
		r.beginRestoreToRestorePoint.add(req, beginRestoreToRestorePoint)
	}

	resp, err := server.PollerResponderNext(beginRestoreToRestorePoint, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		r.beginRestoreToRestorePoint.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginRestoreToRestorePoint) {
		r.beginRestoreToRestorePoint.remove(req)
	}

	return resp, nil
}

func (r *RestorePointsServerTransport) dispatchUpdateRestorePoint(req *http.Request) (*http.Response, error) {
	if r.srv.UpdateRestorePoint == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateRestorePoint not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehouses/(?P<warehouseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/restorePoints/(?P<restorePointId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[warehouse.UpdateRestorePointRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	warehouseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("warehouseId")])
	if err != nil {
		return nil, err
	}
	restorePointIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("restorePointId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.UpdateRestorePoint(req.Context(), workspaceIDParam, warehouseIDParam, restorePointIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RestorePoint, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to RestorePointsServerTransport
var restorePointsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
