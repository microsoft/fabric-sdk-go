// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package warehouse_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"
	"time"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/warehouse"
	"github.com/microsoft/fabric-sdk-go/fabric/warehouse/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *warehouse.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = warehouse.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListWarehouses() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List warehouses in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := warehouse.Warehouses{
		Value: []warehouse.Warehouse{
			{
				Type:        to.Ptr(warehouse.ItemTypeWarehouse),
				Description: to.Ptr("A warehouse description."),
				DisplayName: to.Ptr("Warehouse Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &warehouse.Properties{
					CollationType:    to.Ptr(warehouse.CollationTypeLatin1General100CIASKSWSSCUTF8),
					ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
					CreatedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-09-28T22:52:13.780Z"); return t }()),
					LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-10-04T22:56:33.283Z"); return t }()),
				},
			},
			{
				Type:        to.Ptr(warehouse.ItemTypeWarehouse),
				Description: to.Ptr("A warehouse description."),
				DisplayName: to.Ptr("Warehouse Name 2"),
				ID:          to.Ptr("6281bf94-81b9-46b2-b8d3-79bb868fc822"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &warehouse.Properties{
					CollationType:    to.Ptr(warehouse.CollationTypeLatin1General100BIN2UTF8),
					ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
					CreatedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-11-21T13:14:30.540Z"); return t }()),
					LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-12-04T20:03:43.110Z"); return t }()),
				},
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListWarehousesPager = func(workspaceID string, options *warehouse.ItemsClientListWarehousesOptions) (resp azfake.PagerResponder[warehouse.ItemsClientListWarehousesResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[warehouse.ItemsClientListWarehousesResponse]{}
		resp.AddPage(http.StatusOK, warehouse.ItemsClientListWarehousesResponse{Warehouses: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListWarehousesPager(exampleWorkspaceID, &warehouse.ItemsClientListWarehousesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Warehouses))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateWarehouse() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a warehouse example"},
	})
	var exampleWorkspaceID string
	var exampleCreateWarehouseRequest warehouse.CreateWarehouseRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateWarehouseRequest = warehouse.CreateWarehouseRequest{
		Description: to.Ptr("A warehouse description."),
		DisplayName: to.Ptr("Warehouse 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateWarehouse = func(ctx context.Context, workspaceID string, createWarehouseRequest warehouse.CreateWarehouseRequest, options *warehouse.ItemsClientBeginCreateWarehouseOptions) (resp azfake.PollerResponder[warehouse.ItemsClientCreateWarehouseResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateWarehouseRequest, createWarehouseRequest))
		resp = azfake.PollerResponder[warehouse.ItemsClientCreateWarehouseResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, warehouse.ItemsClientCreateWarehouseResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateWarehouse(ctx, exampleWorkspaceID, exampleCreateWarehouseRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a warehouse example with payload"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateWarehouseRequest = warehouse.CreateWarehouseRequest{
		Description: to.Ptr("A warehouse description."),
		CreationPayload: &warehouse.CreationPayload{
			CollationType: to.Ptr(warehouse.CollationTypeLatin1General100CIASKSWSSCUTF8),
		},
		DisplayName: to.Ptr("Warehouse 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateWarehouse = func(ctx context.Context, workspaceID string, createWarehouseRequest warehouse.CreateWarehouseRequest, options *warehouse.ItemsClientBeginCreateWarehouseOptions) (resp azfake.PollerResponder[warehouse.ItemsClientCreateWarehouseResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateWarehouseRequest, createWarehouseRequest))
		resp = azfake.PollerResponder[warehouse.ItemsClientCreateWarehouseResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, warehouse.ItemsClientCreateWarehouseResponse{}, nil)
		return
	}

	poller, err = client.BeginCreateWarehouse(ctx, exampleWorkspaceID, exampleCreateWarehouseRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetWarehouse() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a warehouse example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleWarehouseID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := warehouse.Warehouse{
		Type:        to.Ptr(warehouse.ItemTypeWarehouse),
		Description: to.Ptr("A warehouse description."),
		DisplayName: to.Ptr("Warehouse 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		Properties: &warehouse.Properties{
			CollationType:    to.Ptr(warehouse.CollationTypeLatin1General100BIN2UTF8),
			ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
			CreatedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-09-28T22:52:13.780Z"); return t }()),
			LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-10-04T22:56:33.283Z"); return t }()),
		},
	}

	testsuite.serverFactory.ItemsServer.GetWarehouse = func(ctx context.Context, workspaceID string, warehouseID string, options *warehouse.ItemsClientGetWarehouseOptions) (resp azfake.Responder[warehouse.ItemsClientGetWarehouseResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseID, warehouseID)
		resp = azfake.Responder[warehouse.ItemsClientGetWarehouseResponse]{}
		resp.SetResponse(http.StatusOK, warehouse.ItemsClientGetWarehouseResponse{Warehouse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetWarehouse(ctx, exampleWorkspaceID, exampleWarehouseID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Warehouse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateWarehouse() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a warehouse example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseID string
	var exampleUpdateWarehouseRequest warehouse.UpdateWarehouseRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleWarehouseID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateWarehouseRequest = warehouse.UpdateWarehouseRequest{
		Description: to.Ptr("A new description for warehouse."),
		DisplayName: to.Ptr("Warehouse's New name"),
	}

	exampleRes := warehouse.Warehouse{
		Type:        to.Ptr(warehouse.ItemTypeWarehouse),
		Description: to.Ptr("A new description for warehouse."),
		DisplayName: to.Ptr("Warehouse's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		Properties: &warehouse.Properties{
			CollationType:    to.Ptr(warehouse.CollationTypeLatin1General100BIN2UTF8),
			ConnectionString: to.Ptr("x6eps4xrq2xudenlfv6naeo3i4-ro6aurrmwwpujdbmljjuqvyisi.msit-datawarehouse.fabric.microsoft.com"),
			CreatedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-04T18:20:39.526Z"); return t }()),
			LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-05T17:23:03.348Z"); return t }()),
		},
	}

	testsuite.serverFactory.ItemsServer.UpdateWarehouse = func(ctx context.Context, workspaceID string, warehouseID string, updateWarehouseRequest warehouse.UpdateWarehouseRequest, options *warehouse.ItemsClientUpdateWarehouseOptions) (resp azfake.Responder[warehouse.ItemsClientUpdateWarehouseResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseID, warehouseID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateWarehouseRequest, updateWarehouseRequest))
		resp = azfake.Responder[warehouse.ItemsClientUpdateWarehouseResponse]{}
		resp.SetResponse(http.StatusOK, warehouse.ItemsClientUpdateWarehouseResponse{Warehouse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateWarehouse(ctx, exampleWorkspaceID, exampleWarehouseID, exampleUpdateWarehouseRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Warehouse))
}

func (testsuite *FakeTestSuite) TestItems_DeleteWarehouse() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a warehouse example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleWarehouseID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteWarehouse = func(ctx context.Context, workspaceID string, warehouseID string, options *warehouse.ItemsClientDeleteWarehouseOptions) (resp azfake.Responder[warehouse.ItemsClientDeleteWarehouseResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseID, warehouseID)
		resp = azfake.Responder[warehouse.ItemsClientDeleteWarehouseResponse]{}
		resp.SetResponse(http.StatusOK, warehouse.ItemsClientDeleteWarehouseResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteWarehouse(ctx, exampleWorkspaceID, exampleWarehouseID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetConnectionString() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get connection string example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleWarehouseID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := warehouse.ConnectionStringResponse{
		ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m-jh0bi.zcf.datawarehouse.fabric.microsoft.com"),
	}

	testsuite.serverFactory.ItemsServer.GetConnectionString = func(ctx context.Context, workspaceID string, warehouseID string, options *warehouse.ItemsClientGetConnectionStringOptions) (resp azfake.Responder[warehouse.ItemsClientGetConnectionStringResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseID, warehouseID)
		resp = azfake.Responder[warehouse.ItemsClientGetConnectionStringResponse]{}
		resp.SetResponse(http.StatusOK, warehouse.ItemsClientGetConnectionStringResponse{ConnectionStringResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetConnectionString(ctx, exampleWorkspaceID, exampleWarehouseID, &warehouse.ItemsClientGetConnectionStringOptions{GuestTenantID: to.Ptr("6e335e92-a2a2-4b5a-970a-bd6a89fbb765"),
		PrivateLinkType: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ConnectionStringResponse))
}

func (testsuite *FakeTestSuite) TestWarehouse_UpdateSQLAuditSettings() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update SQL Audit Settings"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleUpdateAuditSettingsRequest warehouse.SQLAuditSettingsUpdate
	exampleWorkspaceID = "a97f3e88-9f0a-4183-b1d9-31e6eb00e778"
	exampleItemID = "70bcc992-a346-4f21-afe5-8b9ed1596a2b"
	exampleUpdateAuditSettingsRequest = warehouse.SQLAuditSettingsUpdate{
		RetentionDays: to.Ptr[int32](10),
		State:         to.Ptr(warehouse.AuditSettingsStateEnabled),
	}

	exampleRes := warehouse.SQLAuditSettings{
		AuditActionsAndGroups: []string{
			"SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"},
		RetentionDays: to.Ptr[int32](10),
		State:         to.Ptr(warehouse.AuditSettingsStateEnabled),
	}

	testsuite.serverFactory.Server.UpdateSQLAuditSettings = func(ctx context.Context, workspaceID string, itemID string, updateAuditSettingsRequest warehouse.SQLAuditSettingsUpdate, options *warehouse.ClientUpdateSQLAuditSettingsOptions) (resp azfake.Responder[warehouse.ClientUpdateSQLAuditSettingsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateAuditSettingsRequest, updateAuditSettingsRequest))
		resp = azfake.Responder[warehouse.ClientUpdateSQLAuditSettingsResponse]{}
		resp.SetResponse(http.StatusOK, warehouse.ClientUpdateSQLAuditSettingsResponse{SQLAuditSettings: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewClient()
	res, err := client.UpdateSQLAuditSettings(ctx, exampleWorkspaceID, exampleItemID, exampleUpdateAuditSettingsRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SQLAuditSettings))
}

func (testsuite *FakeTestSuite) TestWarehouse_GetSQLAuditSettings() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get SQL Audit Settings"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	exampleWorkspaceID = "a97f3e88-9f0a-4183-b1d9-31e6eb00e778"
	exampleItemID = "70bcc992-a346-4f21-afe5-8b9ed1596a2b"

	exampleRes := warehouse.SQLAuditSettings{
		AuditActionsAndGroups: []string{
			"SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"},
		RetentionDays: to.Ptr[int32](10),
		State:         to.Ptr(warehouse.AuditSettingsStateEnabled),
	}

	testsuite.serverFactory.Server.GetSQLAuditSettings = func(ctx context.Context, workspaceID string, itemID string, options *warehouse.ClientGetSQLAuditSettingsOptions) (resp azfake.Responder[warehouse.ClientGetSQLAuditSettingsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.Responder[warehouse.ClientGetSQLAuditSettingsResponse]{}
		resp.SetResponse(http.StatusOK, warehouse.ClientGetSQLAuditSettingsResponse{SQLAuditSettings: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewClient()
	res, err := client.GetSQLAuditSettings(ctx, exampleWorkspaceID, exampleItemID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SQLAuditSettings))
}

func (testsuite *FakeTestSuite) TestWarehouse_SetAuditActionsAndGroups() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Set SQL Audit Groups"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleSetAuditActionsAndGroupsRequest []string
	exampleWorkspaceID = "a97f3e88-9f0a-4183-b1d9-31e6eb00e778"
	exampleItemID = "70bcc992-a346-4f21-afe5-8b9ed1596a2b"
	exampleSetAuditActionsAndGroupsRequest = []string{
		"SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
		"FAILED_DATABASE_AUTHENTICATION_GROUP",
		"BATCH_COMPLETED_GROUP"}

	testsuite.serverFactory.Server.SetAuditActionsAndGroups = func(ctx context.Context, workspaceID string, itemID string, setAuditActionsAndGroupsRequest []string, options *warehouse.ClientSetAuditActionsAndGroupsOptions) (resp azfake.Responder[warehouse.ClientSetAuditActionsAndGroupsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleSetAuditActionsAndGroupsRequest, setAuditActionsAndGroupsRequest)
		resp = azfake.Responder[warehouse.ClientSetAuditActionsAndGroupsResponse]{}
		resp.SetResponse(http.StatusOK, warehouse.ClientSetAuditActionsAndGroupsResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewClient()
	_, err = client.SetAuditActionsAndGroups(ctx, exampleWorkspaceID, exampleItemID, exampleSetAuditActionsAndGroupsRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestRestorePoints_ListRestorePoints() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List restore points in a warehouse example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleWarehouseID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := warehouse.RestorePoints{
		Value: []warehouse.RestorePoint{
			{
				Description: to.Ptr("Restore point 1 description."),
				CreationDetails: &warehouse.RestorePointEventDetails{
					EventDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-10-18T22:17:09.000Z"); return t }()),
					EventInitiator: &warehouse.Principal{
						Type:        to.Ptr(warehouse.PrincipalTypeUser),
						DisplayName: to.Ptr("Jacob Hancock"),
						ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
						UserDetails: &warehouse.PrincipalUserDetails{
							UserPrincipalName: to.Ptr("jacob@contoso.com"),
						},
					},
				},
				CreationMode: to.Ptr(warehouse.CreationModeTypeUserDefined),
				DisplayName:  to.Ptr("Restore point 1"),
				ID:           to.Ptr("1726617378000"),
			},
			{
				Description: to.Ptr(""),
				CreationDetails: &warehouse.RestorePointEventDetails{
					EventDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-10-18T22:17:09.000Z"); return t }()),
				},
				CreationMode: to.Ptr(warehouse.CreationModeTypeSystemCreated),
				DisplayName:  to.Ptr("Restore point"),
				ID:           to.Ptr("1726617379000"),
			}},
	}

	testsuite.serverFactory.RestorePointsServer.NewListRestorePointsPager = func(workspaceID string, warehouseID string, options *warehouse.RestorePointsClientListRestorePointsOptions) (resp azfake.PagerResponder[warehouse.RestorePointsClientListRestorePointsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseID, warehouseID)
		resp = azfake.PagerResponder[warehouse.RestorePointsClientListRestorePointsResponse]{}
		resp.AddPage(http.StatusOK, warehouse.RestorePointsClientListRestorePointsResponse{RestorePoints: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewRestorePointsClient()
	pager := client.NewListRestorePointsPager(exampleWorkspaceID, exampleWarehouseID, &warehouse.RestorePointsClientListRestorePointsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.RestorePoints))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestRestorePoints_CreateRestorePoint() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a restore point example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseID string
	var exampleCreateRestorePointRequest warehouse.CreateRestorePointRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleWarehouseID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleCreateRestorePointRequest = warehouse.CreateRestorePointRequest{
		Description: to.Ptr("Restore point 1 description."),
		DisplayName: to.Ptr("Restore point 1"),
	}

	testsuite.serverFactory.RestorePointsServer.BeginCreateRestorePoint = func(ctx context.Context, workspaceID string, warehouseID string, createRestorePointRequest warehouse.CreateRestorePointRequest, options *warehouse.RestorePointsClientBeginCreateRestorePointOptions) (resp azfake.PollerResponder[warehouse.RestorePointsClientCreateRestorePointResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseID, warehouseID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateRestorePointRequest, createRestorePointRequest))
		resp = azfake.PollerResponder[warehouse.RestorePointsClientCreateRestorePointResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, warehouse.RestorePointsClientCreateRestorePointResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewRestorePointsClient()
	poller, err := client.BeginCreateRestorePoint(ctx, exampleWorkspaceID, exampleWarehouseID, exampleCreateRestorePointRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestRestorePoints_GetRestorePoint() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a restore point example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseID string
	var exampleRestorePointID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleWarehouseID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleRestorePointID = "1726617378000"

	exampleRes := warehouse.RestorePoint{
		Description: to.Ptr("Restore point 1 description."),
		CreationDetails: &warehouse.RestorePointEventDetails{
			EventDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-10-18T22:17:09.000Z"); return t }()),
			EventInitiator: &warehouse.Principal{
				Type:        to.Ptr(warehouse.PrincipalTypeUser),
				DisplayName: to.Ptr("Jacob Hancock"),
				ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
				UserDetails: &warehouse.PrincipalUserDetails{
					UserPrincipalName: to.Ptr("jacob@contoso.com"),
				},
			},
		},
		CreationMode: to.Ptr(warehouse.CreationModeTypeUserDefined),
		DisplayName:  to.Ptr("Restore point 1"),
		ID:           to.Ptr("1726617378000"),
	}

	testsuite.serverFactory.RestorePointsServer.GetRestorePoint = func(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, options *warehouse.RestorePointsClientGetRestorePointOptions) (resp azfake.Responder[warehouse.RestorePointsClientGetRestorePointResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseID, warehouseID)
		testsuite.Require().Equal(exampleRestorePointID, restorePointID)
		resp = azfake.Responder[warehouse.RestorePointsClientGetRestorePointResponse]{}
		resp.SetResponse(http.StatusOK, warehouse.RestorePointsClientGetRestorePointResponse{RestorePoint: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewRestorePointsClient()
	res, err := client.GetRestorePoint(ctx, exampleWorkspaceID, exampleWarehouseID, exampleRestorePointID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePoint))
}

func (testsuite *FakeTestSuite) TestRestorePoints_DeleteRestorePoint() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a restore point example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseID string
	var exampleRestorePointID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleWarehouseID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleRestorePointID = "1726617378000"

	testsuite.serverFactory.RestorePointsServer.DeleteRestorePoint = func(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, options *warehouse.RestorePointsClientDeleteRestorePointOptions) (resp azfake.Responder[warehouse.RestorePointsClientDeleteRestorePointResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseID, warehouseID)
		testsuite.Require().Equal(exampleRestorePointID, restorePointID)
		resp = azfake.Responder[warehouse.RestorePointsClientDeleteRestorePointResponse]{}
		resp.SetResponse(http.StatusOK, warehouse.RestorePointsClientDeleteRestorePointResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewRestorePointsClient()
	_, err = client.DeleteRestorePoint(ctx, exampleWorkspaceID, exampleWarehouseID, exampleRestorePointID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestRestorePoints_UpdateRestorePoint() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a restore point example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseID string
	var exampleRestorePointID string
	var exampleUpdateRestorePointRequest warehouse.UpdateRestorePointRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleWarehouseID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleRestorePointID = "1726617378000"
	exampleUpdateRestorePointRequest = warehouse.UpdateRestorePointRequest{
		Description: to.Ptr("Restore point 3 description."),
		DisplayName: to.Ptr("Restore point 3"),
	}

	exampleRes := warehouse.RestorePoint{
		Description: to.Ptr("Restore point 3 description."),
		CreationDetails: &warehouse.RestorePointEventDetails{
			EventDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-10-18T22:17:09.000Z"); return t }()),
			EventInitiator: &warehouse.Principal{
				Type:        to.Ptr(warehouse.PrincipalTypeUser),
				DisplayName: to.Ptr("Jacob Hancock"),
				ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
				UserDetails: &warehouse.PrincipalUserDetails{
					UserPrincipalName: to.Ptr("jacob@contoso.com"),
				},
			},
		},
		CreationMode: to.Ptr(warehouse.CreationModeTypeUserDefined),
		DisplayName:  to.Ptr("Restore point 3"),
		ID:           to.Ptr("1726617378000"),
	}

	testsuite.serverFactory.RestorePointsServer.UpdateRestorePoint = func(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, updateRestorePointRequest warehouse.UpdateRestorePointRequest, options *warehouse.RestorePointsClientUpdateRestorePointOptions) (resp azfake.Responder[warehouse.RestorePointsClientUpdateRestorePointResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseID, warehouseID)
		testsuite.Require().Equal(exampleRestorePointID, restorePointID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateRestorePointRequest, updateRestorePointRequest))
		resp = azfake.Responder[warehouse.RestorePointsClientUpdateRestorePointResponse]{}
		resp.SetResponse(http.StatusOK, warehouse.RestorePointsClientUpdateRestorePointResponse{RestorePoint: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewRestorePointsClient()
	res, err := client.UpdateRestorePoint(ctx, exampleWorkspaceID, exampleWarehouseID, exampleRestorePointID, exampleUpdateRestorePointRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePoint))
}

func (testsuite *FakeTestSuite) TestRestorePoints_RestoreToRestorePoint() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a warehouse example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseID string
	var exampleRestorePointID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleWarehouseID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleRestorePointID = "1726617378000"

	testsuite.serverFactory.RestorePointsServer.BeginRestoreToRestorePoint = func(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, options *warehouse.RestorePointsClientBeginRestoreToRestorePointOptions) (resp azfake.PollerResponder[warehouse.RestorePointsClientRestoreToRestorePointResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseID, warehouseID)
		testsuite.Require().Equal(exampleRestorePointID, restorePointID)
		resp = azfake.PollerResponder[warehouse.RestorePointsClientRestoreToRestorePointResponse]{}
		resp.SetTerminalResponse(http.StatusOK, warehouse.RestorePointsClientRestoreToRestorePointResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewRestorePointsClient()
	poller, err := client.BeginRestoreToRestorePoint(ctx, exampleWorkspaceID, exampleWarehouseID, exampleRestorePointID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}
