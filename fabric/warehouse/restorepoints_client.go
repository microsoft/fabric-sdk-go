// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package warehouse

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// RestorePointsClient contains the methods for the RestorePoints group.
// Don't use this type directly, use a constructor function instead.
type RestorePointsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateRestorePoint - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS
// The caller must have write warehouse permission.
// REQUIRED DELEGATED SCOPES Warehouse.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS Warehouse deletes both the system-created and user-defined restore point at the expiry of the 30 calendar day
// retention period.
// A restore point cannot be created if there is already a restore point creation already in-progress or during warehouse
// creation, deletion or rename.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - createRestorePointRequest - Create restore point payload.
//   - options - RestorePointsClientBeginCreateRestorePointOptions contains the optional parameters for the RestorePointsClient.BeginCreateRestorePoint
//     method.
func (client *RestorePointsClient) BeginCreateRestorePoint(ctx context.Context, workspaceID string, warehouseID string, createRestorePointRequest CreateRestorePointRequest, options *RestorePointsClientBeginCreateRestorePointOptions) (*runtime.Poller[RestorePointsClientCreateRestorePointResponse], error) {
	return client.beginCreateRestorePoint(ctx, workspaceID, warehouseID, createRestorePointRequest, options)
}

// CreateRestorePoint - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS
// The caller must have write warehouse permission.
// REQUIRED DELEGATED SCOPES Warehouse.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS Warehouse deletes both the system-created and user-defined restore point at the expiry of the 30 calendar day
// retention period.
// A restore point cannot be created if there is already a restore point creation already in-progress or during warehouse
// creation, deletion or rename.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *RestorePointsClient) createRestorePoint(ctx context.Context, workspaceID string, warehouseID string, createRestorePointRequest CreateRestorePointRequest, options *RestorePointsClientBeginCreateRestorePointOptions) (*http.Response, error) {
	var err error
	const operationName = "warehouse.RestorePointsClient.BeginCreateRestorePoint"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createRestorePointCreateRequest(ctx, workspaceID, warehouseID, createRestorePointRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createRestorePointCreateRequest creates the CreateRestorePoint request.
func (client *RestorePointsClient) createRestorePointCreateRequest(ctx context.Context, workspaceID string, warehouseID string, createRestorePointRequest CreateRestorePointRequest, _ *RestorePointsClientBeginCreateRestorePointOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehouses/{warehouseId}/restorePoints"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseID == "" {
		return nil, errors.New("parameter warehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseId}", url.PathEscape(warehouseID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createRestorePointRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteRestorePoint - PERMISSIONS The caller must have write warehouse permission.
// REQUIRED DELEGATED SCOPES Warehouse.ReadWrite.All or Item.ReadWrite.Alll
// LIMITATIONS You can delete user-defined restore points, but system-created restore points cannot be deleted.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - restorePointID - The restore point ID.
//   - options - RestorePointsClientDeleteRestorePointOptions contains the optional parameters for the RestorePointsClient.DeleteRestorePoint
//     method.
func (client *RestorePointsClient) DeleteRestorePoint(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, options *RestorePointsClientDeleteRestorePointOptions) (RestorePointsClientDeleteRestorePointResponse, error) {
	var err error
	const operationName = "warehouse.RestorePointsClient.DeleteRestorePoint"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteRestorePointCreateRequest(ctx, workspaceID, warehouseID, restorePointID, options)
	if err != nil {
		return RestorePointsClientDeleteRestorePointResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RestorePointsClientDeleteRestorePointResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return RestorePointsClientDeleteRestorePointResponse{}, err
	}
	return RestorePointsClientDeleteRestorePointResponse{}, nil
}

// deleteRestorePointCreateRequest creates the DeleteRestorePoint request.
func (client *RestorePointsClient) deleteRestorePointCreateRequest(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, _ *RestorePointsClientDeleteRestorePointOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehouses/{warehouseId}/restorePoints/{restorePointId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseID == "" {
		return nil, errors.New("parameter warehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseId}", url.PathEscape(warehouseID))
	if restorePointID == "" {
		return nil, errors.New("parameter restorePointID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{restorePointId}", url.PathEscape(restorePointID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetRestorePoint - PERMISSIONS The caller must have read or write warehouse permission.
// REQUIRED DELEGATED SCOPES Warehouse.Read.All or Warehouse.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - restorePointID - The restore point ID.
//   - options - RestorePointsClientGetRestorePointOptions contains the optional parameters for the RestorePointsClient.GetRestorePoint
//     method.
func (client *RestorePointsClient) GetRestorePoint(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, options *RestorePointsClientGetRestorePointOptions) (RestorePointsClientGetRestorePointResponse, error) {
	var err error
	const operationName = "warehouse.RestorePointsClient.GetRestorePoint"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getRestorePointCreateRequest(ctx, workspaceID, warehouseID, restorePointID, options)
	if err != nil {
		return RestorePointsClientGetRestorePointResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RestorePointsClientGetRestorePointResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return RestorePointsClientGetRestorePointResponse{}, err
	}
	resp, err := client.getRestorePointHandleResponse(httpResp)
	return resp, err
}

// getRestorePointCreateRequest creates the GetRestorePoint request.
func (client *RestorePointsClient) getRestorePointCreateRequest(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, _ *RestorePointsClientGetRestorePointOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehouses/{warehouseId}/restorePoints/{restorePointId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseID == "" {
		return nil, errors.New("parameter warehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseId}", url.PathEscape(warehouseID))
	if restorePointID == "" {
		return nil, errors.New("parameter restorePointID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{restorePointId}", url.PathEscape(restorePointID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getRestorePointHandleResponse handles the GetRestorePoint response.
func (client *RestorePointsClient) getRestorePointHandleResponse(resp *http.Response) (RestorePointsClientGetRestorePointResponse, error) {
	result := RestorePointsClientGetRestorePointResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RestorePoint); err != nil {
		return RestorePointsClientGetRestorePointResponse{}, err
	}
	return result, nil
}

// NewListRestorePointsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have read or write warehouse permission.
// REQUIRED DELEGATED SCOPES Warehouse.Read.All or Warehouse.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - options - RestorePointsClientListRestorePointsOptions contains the optional parameters for the RestorePointsClient.NewListRestorePointsPager
//     method.
func (client *RestorePointsClient) NewListRestorePointsPager(workspaceID string, warehouseID string, options *RestorePointsClientListRestorePointsOptions) *runtime.Pager[RestorePointsClientListRestorePointsResponse] {
	return runtime.NewPager(runtime.PagingHandler[RestorePointsClientListRestorePointsResponse]{
		More: func(page RestorePointsClientListRestorePointsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *RestorePointsClientListRestorePointsResponse) (RestorePointsClientListRestorePointsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "warehouse.RestorePointsClient.NewListRestorePointsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listRestorePointsCreateRequest(ctx, workspaceID, warehouseID, options)
			}, nil)
			if err != nil {
				return RestorePointsClientListRestorePointsResponse{}, err
			}
			return client.listRestorePointsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listRestorePointsCreateRequest creates the ListRestorePoints request.
func (client *RestorePointsClient) listRestorePointsCreateRequest(ctx context.Context, workspaceID string, warehouseID string, options *RestorePointsClientListRestorePointsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehouses/{warehouseId}/restorePoints"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseID == "" {
		return nil, errors.New("parameter warehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseId}", url.PathEscape(warehouseID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listRestorePointsHandleResponse handles the ListRestorePoints response.
func (client *RestorePointsClient) listRestorePointsHandleResponse(resp *http.Response) (RestorePointsClientListRestorePointsResponse, error) {
	result := RestorePointsClientListRestorePointsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RestorePoints); err != nil {
		return RestorePointsClientListRestorePointsResponse{}, err
	}
	return result, nil
}

// BeginRestoreToRestorePoint - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS
// The caller must have restore warehouse permission.
// REQUIRED DELEGATED SCOPES Warehouse.Restore.All
// LIMITATIONS A restore point cannot be restored if there is another restore point restoration already in-progress.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - restorePointID - The restore point ID.
//   - options - RestorePointsClientBeginRestoreToRestorePointOptions contains the optional parameters for the RestorePointsClient.BeginRestoreToRestorePoint
//     method.
func (client *RestorePointsClient) BeginRestoreToRestorePoint(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, options *RestorePointsClientBeginRestoreToRestorePointOptions) (*runtime.Poller[RestorePointsClientRestoreToRestorePointResponse], error) {
	return client.beginRestoreToRestorePoint(ctx, workspaceID, warehouseID, restorePointID, options)
}

// RestoreToRestorePoint - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS
// The caller must have restore warehouse permission.
// REQUIRED DELEGATED SCOPES Warehouse.Restore.All
// LIMITATIONS A restore point cannot be restored if there is another restore point restoration already in-progress.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *RestorePointsClient) restoreToRestorePoint(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, options *RestorePointsClientBeginRestoreToRestorePointOptions) (*http.Response, error) {
	var err error
	const operationName = "warehouse.RestorePointsClient.BeginRestoreToRestorePoint"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.restoreToRestorePointCreateRequest(ctx, workspaceID, warehouseID, restorePointID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// restoreToRestorePointCreateRequest creates the RestoreToRestorePoint request.
func (client *RestorePointsClient) restoreToRestorePointCreateRequest(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, _ *RestorePointsClientBeginRestoreToRestorePointOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehouses/{warehouseId}/restorePoints/{restorePointId}/restore"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseID == "" {
		return nil, errors.New("parameter warehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseId}", url.PathEscape(warehouseID))
	if restorePointID == "" {
		return nil, errors.New("parameter restorePointID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{restorePointId}", url.PathEscape(restorePointID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// UpdateRestorePoint - PERMISSIONS The caller must have write warehouse permission.
// REQUIRED DELEGATED SCOPES Warehouse.ReadWrite.All or Item.ReadWrite.Alll
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - restorePointID - The restore point ID.
//   - updateRestorePointRequest - Update restore point payload.
//   - options - RestorePointsClientUpdateRestorePointOptions contains the optional parameters for the RestorePointsClient.UpdateRestorePoint
//     method.
func (client *RestorePointsClient) UpdateRestorePoint(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, updateRestorePointRequest UpdateRestorePointRequest, options *RestorePointsClientUpdateRestorePointOptions) (RestorePointsClientUpdateRestorePointResponse, error) {
	var err error
	const operationName = "warehouse.RestorePointsClient.UpdateRestorePoint"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateRestorePointCreateRequest(ctx, workspaceID, warehouseID, restorePointID, updateRestorePointRequest, options)
	if err != nil {
		return RestorePointsClientUpdateRestorePointResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RestorePointsClientUpdateRestorePointResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return RestorePointsClientUpdateRestorePointResponse{}, err
	}
	resp, err := client.updateRestorePointHandleResponse(httpResp)
	return resp, err
}

// updateRestorePointCreateRequest creates the UpdateRestorePoint request.
func (client *RestorePointsClient) updateRestorePointCreateRequest(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, updateRestorePointRequest UpdateRestorePointRequest, _ *RestorePointsClientUpdateRestorePointOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehouses/{warehouseId}/restorePoints/{restorePointId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseID == "" {
		return nil, errors.New("parameter warehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseId}", url.PathEscape(warehouseID))
	if restorePointID == "" {
		return nil, errors.New("parameter restorePointID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{restorePointId}", url.PathEscape(restorePointID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateRestorePointRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateRestorePointHandleResponse handles the UpdateRestorePoint response.
func (client *RestorePointsClient) updateRestorePointHandleResponse(resp *http.Response) (RestorePointsClientUpdateRestorePointResponse, error) {
	result := RestorePointsClientUpdateRestorePointResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RestorePoint); err != nil {
		return RestorePointsClientUpdateRestorePointResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// CreateRestorePoint - returns RestorePointsClientCreateRestorePointResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS
// The caller must have write warehouse permission.
//
// # REQUIRED DELEGATED SCOPES Warehouse.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS Warehouse deletes both the system-created and user-defined restore point at the expiry of the 30 calendar day retention period.
//
// A restore point cannot be created if there is already a restore point creation already in-progress or during warehouse creation, deletion or rename.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - createRestorePointRequest - Create restore point payload.
//   - options - RestorePointsClientBeginCreateRestorePointOptions contains the optional parameters for the RestorePointsClient.BeginCreateRestorePoint method.
func (client *RestorePointsClient) CreateRestorePoint(ctx context.Context, workspaceID string, warehouseID string, createRestorePointRequest CreateRestorePointRequest, options *RestorePointsClientBeginCreateRestorePointOptions) (RestorePointsClientCreateRestorePointResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateRestorePoint(ctx, workspaceID, warehouseID, createRestorePointRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return RestorePointsClientCreateRestorePointResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return RestorePointsClientCreateRestorePointResponse{}, err
	}
	return result, err
}

// beginCreateRestorePoint creates the createRestorePoint request.
func (client *RestorePointsClient) beginCreateRestorePoint(ctx context.Context, workspaceID string, warehouseID string, createRestorePointRequest CreateRestorePointRequest, options *RestorePointsClientBeginCreateRestorePointOptions) (*runtime.Poller[RestorePointsClientCreateRestorePointResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createRestorePoint(ctx, workspaceID, warehouseID, createRestorePointRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[RestorePointsClientCreateRestorePointResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[RestorePointsClientCreateRestorePointResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[RestorePointsClientCreateRestorePointResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[RestorePointsClientCreateRestorePointResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// RestoreToRestorePoint - returns RestorePointsClientRestoreToRestorePointResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS
// The caller must have restore warehouse permission.
//
// # REQUIRED DELEGATED SCOPES Warehouse.Restore.All
//
// LIMITATIONS A restore point cannot be restored if there is another restore point restoration already in-progress.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - restorePointID - The restore point ID.
//   - options - RestorePointsClientBeginRestoreToRestorePointOptions contains the optional parameters for the RestorePointsClient.BeginRestoreToRestorePoint method.
func (client *RestorePointsClient) RestoreToRestorePoint(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, options *RestorePointsClientBeginRestoreToRestorePointOptions) (RestorePointsClientRestoreToRestorePointResponse, error) {
	result, err := iruntime.NewLRO(client.BeginRestoreToRestorePoint(ctx, workspaceID, warehouseID, restorePointID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return RestorePointsClientRestoreToRestorePointResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return RestorePointsClientRestoreToRestorePointResponse{}, err
	}
	return result, err
}

// beginRestoreToRestorePoint creates the restoreToRestorePoint request.
func (client *RestorePointsClient) beginRestoreToRestorePoint(ctx context.Context, workspaceID string, warehouseID string, restorePointID string, options *RestorePointsClientBeginRestoreToRestorePointOptions) (*runtime.Poller[RestorePointsClientRestoreToRestorePointResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.restoreToRestorePoint(ctx, workspaceID, warehouseID, restorePointID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[RestorePointsClientRestoreToRestorePointResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[RestorePointsClientRestoreToRestorePointResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[RestorePointsClientRestoreToRestorePointResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[RestorePointsClientRestoreToRestorePointResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListRestorePoints - returns array of RestorePoint from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have read or write warehouse permission.
//
// # REQUIRED DELEGATED SCOPES Warehouse.Read.All or Warehouse.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - options - RestorePointsClientListRestorePointsOptions contains the optional parameters for the RestorePointsClient.NewListRestorePointsPager method.
func (client *RestorePointsClient) ListRestorePoints(ctx context.Context, workspaceID string, warehouseID string, options *RestorePointsClientListRestorePointsOptions) ([]RestorePoint, error) {
	pager := client.NewListRestorePointsPager(workspaceID, warehouseID, options)
	mapper := func(resp RestorePointsClientListRestorePointsResponse) []RestorePoint {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []RestorePoint{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []RestorePoint{}, err
	}
	return list, nil
}
