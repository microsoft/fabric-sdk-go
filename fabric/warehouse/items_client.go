// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package warehouse

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateWarehouse - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API does not support create a warehouse with definition.
// PERMISSIONS The caller must have a contributor workspace role.
// REQUIRED DELEGATED SCOPES Warehouse.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a warehouse the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createWarehouseRequest - Create item request payload.
//   - options - ItemsClientBeginCreateWarehouseOptions contains the optional parameters for the ItemsClient.BeginCreateWarehouse
//     method.
func (client *ItemsClient) BeginCreateWarehouse(ctx context.Context, workspaceID string, createWarehouseRequest CreateWarehouseRequest, options *ItemsClientBeginCreateWarehouseOptions) (*runtime.Poller[ItemsClientCreateWarehouseResponse], error) {
	return client.beginCreateWarehouse(ctx, workspaceID, createWarehouseRequest, options)
}

// CreateWarehouse - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API does not support create a warehouse with definition.
// PERMISSIONS The caller must have a contributor workspace role.
// REQUIRED DELEGATED SCOPES Warehouse.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a warehouse the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createWarehouse(ctx context.Context, workspaceID string, createWarehouseRequest CreateWarehouseRequest, options *ItemsClientBeginCreateWarehouseOptions) (*http.Response, error) {
	var err error
	const operationName = "warehouse.ItemsClient.BeginCreateWarehouse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createWarehouseCreateRequest(ctx, workspaceID, createWarehouseRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createWarehouseCreateRequest creates the CreateWarehouse request.
func (client *ItemsClient) createWarehouseCreateRequest(ctx context.Context, workspaceID string, createWarehouseRequest CreateWarehouseRequest, _ *ItemsClientBeginCreateWarehouseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehouses"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createWarehouseRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteWarehouse - PERMISSIONS The caller must have write permissions for the warehouse.
// REQUIRED DELEGATED SCOPES Warehouse.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - options - ItemsClientDeleteWarehouseOptions contains the optional parameters for the ItemsClient.DeleteWarehouse method.
func (client *ItemsClient) DeleteWarehouse(ctx context.Context, workspaceID string, warehouseID string, options *ItemsClientDeleteWarehouseOptions) (ItemsClientDeleteWarehouseResponse, error) {
	var err error
	const operationName = "warehouse.ItemsClient.DeleteWarehouse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteWarehouseCreateRequest(ctx, workspaceID, warehouseID, options)
	if err != nil {
		return ItemsClientDeleteWarehouseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteWarehouseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteWarehouseResponse{}, err
	}
	return ItemsClientDeleteWarehouseResponse{}, nil
}

// deleteWarehouseCreateRequest creates the DeleteWarehouse request.
func (client *ItemsClient) deleteWarehouseCreateRequest(ctx context.Context, workspaceID string, warehouseID string, _ *ItemsClientDeleteWarehouseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehouses/{warehouseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseID == "" {
		return nil, errors.New("parameter warehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseId}", url.PathEscape(warehouseID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetConnectionString - PERMISSIONS The caller must have read permissions for the warehouse. The caller must have viewer
// or higher workspace role.
// REQUIRED DELEGATED SCOPES Warehouse.Read.All or Warehouse.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - options - ItemsClientGetConnectionStringOptions contains the optional parameters for the ItemsClient.GetConnectionString
//     method.
func (client *ItemsClient) GetConnectionString(ctx context.Context, workspaceID string, warehouseID string, options *ItemsClientGetConnectionStringOptions) (ItemsClientGetConnectionStringResponse, error) {
	var err error
	const operationName = "warehouse.ItemsClient.GetConnectionString"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getConnectionStringCreateRequest(ctx, workspaceID, warehouseID, options)
	if err != nil {
		return ItemsClientGetConnectionStringResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetConnectionStringResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetConnectionStringResponse{}, err
	}
	resp, err := client.getConnectionStringHandleResponse(httpResp)
	return resp, err
}

// getConnectionStringCreateRequest creates the GetConnectionString request.
func (client *ItemsClient) getConnectionStringCreateRequest(ctx context.Context, workspaceID string, warehouseID string, options *ItemsClientGetConnectionStringOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehouses/{warehouseId}/connectionString"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseID == "" {
		return nil, errors.New("parameter warehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseId}", url.PathEscape(warehouseID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.GuestTenantID != nil {
		reqQP.Set("guestTenantId", *options.GuestTenantID)
	}
	if options != nil && options.PrivateLinkType != nil {
		reqQP.Set("privateLinkType", string(*options.PrivateLinkType))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getConnectionStringHandleResponse handles the GetConnectionString response.
func (client *ItemsClient) getConnectionStringHandleResponse(resp *http.Response) (ItemsClientGetConnectionStringResponse, error) {
	result := ItemsClientGetConnectionStringResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConnectionStringResponse); err != nil {
		return ItemsClientGetConnectionStringResponse{}, err
	}
	return result, nil
}

// GetWarehouse - PERMISSIONS The caller must have read permissions for the warehouse.
// REQUIRED DELEGATED SCOPES Warehouse.Read.All or Warehouse.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - options - ItemsClientGetWarehouseOptions contains the optional parameters for the ItemsClient.GetWarehouse method.
func (client *ItemsClient) GetWarehouse(ctx context.Context, workspaceID string, warehouseID string, options *ItemsClientGetWarehouseOptions) (ItemsClientGetWarehouseResponse, error) {
	var err error
	const operationName = "warehouse.ItemsClient.GetWarehouse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getWarehouseCreateRequest(ctx, workspaceID, warehouseID, options)
	if err != nil {
		return ItemsClientGetWarehouseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetWarehouseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetWarehouseResponse{}, err
	}
	resp, err := client.getWarehouseHandleResponse(httpResp)
	return resp, err
}

// getWarehouseCreateRequest creates the GetWarehouse request.
func (client *ItemsClient) getWarehouseCreateRequest(ctx context.Context, workspaceID string, warehouseID string, _ *ItemsClientGetWarehouseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehouses/{warehouseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseID == "" {
		return nil, errors.New("parameter warehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseId}", url.PathEscape(warehouseID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getWarehouseHandleResponse handles the GetWarehouse response.
func (client *ItemsClient) getWarehouseHandleResponse(resp *http.Response) (ItemsClientGetWarehouseResponse, error) {
	result := ItemsClientGetWarehouseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Warehouse); err != nil {
		return ItemsClientGetWarehouseResponse{}, err
	}
	return result, nil
}

// NewListWarehousesPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have a viewer workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListWarehousesOptions contains the optional parameters for the ItemsClient.NewListWarehousesPager
//     method.
func (client *ItemsClient) NewListWarehousesPager(workspaceID string, options *ItemsClientListWarehousesOptions) *runtime.Pager[ItemsClientListWarehousesResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListWarehousesResponse]{
		More: func(page ItemsClientListWarehousesResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListWarehousesResponse) (ItemsClientListWarehousesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "warehouse.ItemsClient.NewListWarehousesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listWarehousesCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListWarehousesResponse{}, err
			}
			return client.listWarehousesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWarehousesCreateRequest creates the ListWarehouses request.
func (client *ItemsClient) listWarehousesCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListWarehousesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehouses"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWarehousesHandleResponse handles the ListWarehouses response.
func (client *ItemsClient) listWarehousesHandleResponse(resp *http.Response) (ItemsClientListWarehousesResponse, error) {
	result := ItemsClientListWarehousesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Warehouses); err != nil {
		return ItemsClientListWarehousesResponse{}, err
	}
	return result, nil
}

// UpdateWarehouse - PERMISSIONS The caller must have read and write permissions for the warehouse.
// REQUIRED DELEGATED SCOPES Warehouse.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseID - The warehouse ID.
//   - updateWarehouseRequest - Update warehouse request payload.
//   - options - ItemsClientUpdateWarehouseOptions contains the optional parameters for the ItemsClient.UpdateWarehouse method.
func (client *ItemsClient) UpdateWarehouse(ctx context.Context, workspaceID string, warehouseID string, updateWarehouseRequest UpdateWarehouseRequest, options *ItemsClientUpdateWarehouseOptions) (ItemsClientUpdateWarehouseResponse, error) {
	var err error
	const operationName = "warehouse.ItemsClient.UpdateWarehouse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateWarehouseCreateRequest(ctx, workspaceID, warehouseID, updateWarehouseRequest, options)
	if err != nil {
		return ItemsClientUpdateWarehouseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateWarehouseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateWarehouseResponse{}, err
	}
	resp, err := client.updateWarehouseHandleResponse(httpResp)
	return resp, err
}

// updateWarehouseCreateRequest creates the UpdateWarehouse request.
func (client *ItemsClient) updateWarehouseCreateRequest(ctx context.Context, workspaceID string, warehouseID string, updateWarehouseRequest UpdateWarehouseRequest, _ *ItemsClientUpdateWarehouseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehouses/{warehouseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseID == "" {
		return nil, errors.New("parameter warehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseId}", url.PathEscape(warehouseID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateWarehouseRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateWarehouseHandleResponse handles the UpdateWarehouse response.
func (client *ItemsClient) updateWarehouseHandleResponse(resp *http.Response) (ItemsClientUpdateWarehouseResponse, error) {
	result := ItemsClientUpdateWarehouseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Warehouse); err != nil {
		return ItemsClientUpdateWarehouseResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// CreateWarehouse - returns ItemsClientCreateWarehouseResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// This API does not support create a warehouse with definition.
//
// PERMISSIONS The caller must have a contributor workspace role.
//
// # REQUIRED DELEGATED SCOPES Warehouse.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a warehouse the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createWarehouseRequest - Create item request payload.
//   - options - ItemsClientBeginCreateWarehouseOptions contains the optional parameters for the ItemsClient.BeginCreateWarehouse method.
func (client *ItemsClient) CreateWarehouse(ctx context.Context, workspaceID string, createWarehouseRequest CreateWarehouseRequest, options *ItemsClientBeginCreateWarehouseOptions) (ItemsClientCreateWarehouseResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateWarehouse(ctx, workspaceID, createWarehouseRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateWarehouseResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateWarehouseResponse{}, err
	}
	return result, err
}

// beginCreateWarehouse creates the createWarehouse request.
func (client *ItemsClient) beginCreateWarehouse(ctx context.Context, workspaceID string, createWarehouseRequest CreateWarehouseRequest, options *ItemsClientBeginCreateWarehouseOptions) (*runtime.Poller[ItemsClientCreateWarehouseResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createWarehouse(ctx, workspaceID, createWarehouseRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateWarehouseResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateWarehouseResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateWarehouseResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateWarehouseResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListWarehouses - returns array of Warehouse from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have a viewer workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListWarehousesOptions contains the optional parameters for the ItemsClient.NewListWarehousesPager method.
func (client *ItemsClient) ListWarehouses(ctx context.Context, workspaceID string, options *ItemsClientListWarehousesOptions) ([]Warehouse, error) {
	pager := client.NewListWarehousesPager(workspaceID, options)
	mapper := func(resp ItemsClientListWarehousesResponse) []Warehouse {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Warehouse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []Warehouse{}, err
	}
	return list, nil
}
