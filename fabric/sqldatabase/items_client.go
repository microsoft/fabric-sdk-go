// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package sqldatabase

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateSQLDatabase - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API does not support create a SQL database with definition.
// PERMISSIONS The caller must have a contributor workspace role.
// REQUIRED DELEGATED SCOPES SQLDatabase.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a SQL database the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createSQLDatabaseRequest - Create item request payload.
//   - options - ItemsClientBeginCreateSQLDatabaseOptions contains the optional parameters for the ItemsClient.BeginCreateSQLDatabase
//     method.
func (client *ItemsClient) BeginCreateSQLDatabase(ctx context.Context, workspaceID string, createSQLDatabaseRequest CreateSQLDatabaseRequest, options *ItemsClientBeginCreateSQLDatabaseOptions) (*runtime.Poller[ItemsClientCreateSQLDatabaseResponse], error) {
	return client.beginCreateSQLDatabase(ctx, workspaceID, createSQLDatabaseRequest, options)
}

// CreateSQLDatabase - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API does not support create a SQL database with definition.
// PERMISSIONS The caller must have a contributor workspace role.
// REQUIRED DELEGATED SCOPES SQLDatabase.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a SQL database the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createSQLDatabase(ctx context.Context, workspaceID string, createSQLDatabaseRequest CreateSQLDatabaseRequest, options *ItemsClientBeginCreateSQLDatabaseOptions) (*http.Response, error) {
	var err error
	const operationName = "sqldatabase.ItemsClient.BeginCreateSQLDatabase"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createSQLDatabaseCreateRequest(ctx, workspaceID, createSQLDatabaseRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createSQLDatabaseCreateRequest creates the CreateSQLDatabase request.
func (client *ItemsClient) createSQLDatabaseCreateRequest(ctx context.Context, workspaceID string, createSQLDatabaseRequest CreateSQLDatabaseRequest, _ *ItemsClientBeginCreateSQLDatabaseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/sqlDatabases"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createSQLDatabaseRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteSQLDatabase - PERMISSIONS The caller must have write permissions for the SQL database.
// REQUIRED DELEGATED SCOPES SQLDatabase.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - sqlDatabaseID - The SQL database ID.
//   - options - ItemsClientDeleteSQLDatabaseOptions contains the optional parameters for the ItemsClient.DeleteSQLDatabase method.
func (client *ItemsClient) DeleteSQLDatabase(ctx context.Context, workspaceID string, sqlDatabaseID string, options *ItemsClientDeleteSQLDatabaseOptions) (ItemsClientDeleteSQLDatabaseResponse, error) {
	var err error
	const operationName = "sqldatabase.ItemsClient.DeleteSQLDatabase"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteSQLDatabaseCreateRequest(ctx, workspaceID, sqlDatabaseID, options)
	if err != nil {
		return ItemsClientDeleteSQLDatabaseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteSQLDatabaseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteSQLDatabaseResponse{}, err
	}
	return ItemsClientDeleteSQLDatabaseResponse{}, nil
}

// deleteSQLDatabaseCreateRequest creates the DeleteSQLDatabase request.
func (client *ItemsClient) deleteSQLDatabaseCreateRequest(ctx context.Context, workspaceID string, sqlDatabaseID string, _ *ItemsClientDeleteSQLDatabaseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/sqlDatabases/{SQLDatabaseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if sqlDatabaseID == "" {
		return nil, errors.New("parameter sqlDatabaseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{SQLDatabaseId}", url.PathEscape(sqlDatabaseID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetSQLDatabase - PERMISSIONS The caller must have read permissions for the SQL database.
// REQUIRED DELEGATED SCOPES SQLDatabase.Read.All or SQLDatabase.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - sqlDatabaseID - The SQL database ID.
//   - options - ItemsClientGetSQLDatabaseOptions contains the optional parameters for the ItemsClient.GetSQLDatabase method.
func (client *ItemsClient) GetSQLDatabase(ctx context.Context, workspaceID string, sqlDatabaseID string, options *ItemsClientGetSQLDatabaseOptions) (ItemsClientGetSQLDatabaseResponse, error) {
	var err error
	const operationName = "sqldatabase.ItemsClient.GetSQLDatabase"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getSQLDatabaseCreateRequest(ctx, workspaceID, sqlDatabaseID, options)
	if err != nil {
		return ItemsClientGetSQLDatabaseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetSQLDatabaseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetSQLDatabaseResponse{}, err
	}
	resp, err := client.getSQLDatabaseHandleResponse(httpResp)
	return resp, err
}

// getSQLDatabaseCreateRequest creates the GetSQLDatabase request.
func (client *ItemsClient) getSQLDatabaseCreateRequest(ctx context.Context, workspaceID string, sqlDatabaseID string, _ *ItemsClientGetSQLDatabaseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/sqlDatabases/{SQLDatabaseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if sqlDatabaseID == "" {
		return nil, errors.New("parameter sqlDatabaseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{SQLDatabaseId}", url.PathEscape(sqlDatabaseID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSQLDatabaseHandleResponse handles the GetSQLDatabase response.
func (client *ItemsClient) getSQLDatabaseHandleResponse(resp *http.Response) (ItemsClientGetSQLDatabaseResponse, error) {
	result := ItemsClientGetSQLDatabaseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLDatabase); err != nil {
		return ItemsClientGetSQLDatabaseResponse{}, err
	}
	return result, nil
}

// NewListSQLDatabasesPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have a viewer workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListSQLDatabasesOptions contains the optional parameters for the ItemsClient.NewListSQLDatabasesPager
//     method.
func (client *ItemsClient) NewListSQLDatabasesPager(workspaceID string, options *ItemsClientListSQLDatabasesOptions) *runtime.Pager[ItemsClientListSQLDatabasesResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListSQLDatabasesResponse]{
		More: func(page ItemsClientListSQLDatabasesResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListSQLDatabasesResponse) (ItemsClientListSQLDatabasesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "sqldatabase.ItemsClient.NewListSQLDatabasesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listSQLDatabasesCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListSQLDatabasesResponse{}, err
			}
			return client.listSQLDatabasesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listSQLDatabasesCreateRequest creates the ListSQLDatabases request.
func (client *ItemsClient) listSQLDatabasesCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListSQLDatabasesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/sqlDatabases"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listSQLDatabasesHandleResponse handles the ListSQLDatabases response.
func (client *ItemsClient) listSQLDatabasesHandleResponse(resp *http.Response) (ItemsClientListSQLDatabasesResponse, error) {
	result := ItemsClientListSQLDatabasesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLDatabases); err != nil {
		return ItemsClientListSQLDatabasesResponse{}, err
	}
	return result, nil
}

// UpdateSQLDatabase - PERMISSIONS The caller must have read and write permissions for the SQL database.
// REQUIRED DELEGATED SCOPES SQLDatabase.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - sqlDatabaseID - The SQL database ID.
//   - updateSQLDatabaseRequest - Update SQL database request payload.
//   - options - ItemsClientUpdateSQLDatabaseOptions contains the optional parameters for the ItemsClient.UpdateSQLDatabase method.
func (client *ItemsClient) UpdateSQLDatabase(ctx context.Context, workspaceID string, sqlDatabaseID string, updateSQLDatabaseRequest UpdateSQLDatabaseRequest, options *ItemsClientUpdateSQLDatabaseOptions) (ItemsClientUpdateSQLDatabaseResponse, error) {
	var err error
	const operationName = "sqldatabase.ItemsClient.UpdateSQLDatabase"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateSQLDatabaseCreateRequest(ctx, workspaceID, sqlDatabaseID, updateSQLDatabaseRequest, options)
	if err != nil {
		return ItemsClientUpdateSQLDatabaseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateSQLDatabaseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateSQLDatabaseResponse{}, err
	}
	resp, err := client.updateSQLDatabaseHandleResponse(httpResp)
	return resp, err
}

// updateSQLDatabaseCreateRequest creates the UpdateSQLDatabase request.
func (client *ItemsClient) updateSQLDatabaseCreateRequest(ctx context.Context, workspaceID string, sqlDatabaseID string, updateSQLDatabaseRequest UpdateSQLDatabaseRequest, _ *ItemsClientUpdateSQLDatabaseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/sqlDatabases/{SQLDatabaseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if sqlDatabaseID == "" {
		return nil, errors.New("parameter sqlDatabaseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{SQLDatabaseId}", url.PathEscape(sqlDatabaseID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateSQLDatabaseRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateSQLDatabaseHandleResponse handles the UpdateSQLDatabase response.
func (client *ItemsClient) updateSQLDatabaseHandleResponse(resp *http.Response) (ItemsClientUpdateSQLDatabaseResponse, error) {
	result := ItemsClientUpdateSQLDatabaseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLDatabase); err != nil {
		return ItemsClientUpdateSQLDatabaseResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// CreateSQLDatabase - returns ItemsClientCreateSQLDatabaseResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// This API does not support create a SQL database with definition.
//
// PERMISSIONS The caller must have a contributor workspace role.
//
// # REQUIRED DELEGATED SCOPES SQLDatabase.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a SQL database the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createSQLDatabaseRequest - Create item request payload.
//   - options - ItemsClientBeginCreateSQLDatabaseOptions contains the optional parameters for the ItemsClient.BeginCreateSQLDatabase method.
func (client *ItemsClient) CreateSQLDatabase(ctx context.Context, workspaceID string, createSQLDatabaseRequest CreateSQLDatabaseRequest, options *ItemsClientBeginCreateSQLDatabaseOptions) (ItemsClientCreateSQLDatabaseResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateSQLDatabase(ctx, workspaceID, createSQLDatabaseRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateSQLDatabaseResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateSQLDatabaseResponse{}, err
	}
	return result, err
}

// beginCreateSQLDatabase creates the createSQLDatabase request.
func (client *ItemsClient) beginCreateSQLDatabase(ctx context.Context, workspaceID string, createSQLDatabaseRequest CreateSQLDatabaseRequest, options *ItemsClientBeginCreateSQLDatabaseOptions) (*runtime.Poller[ItemsClientCreateSQLDatabaseResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createSQLDatabase(ctx, workspaceID, createSQLDatabaseRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateSQLDatabaseResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateSQLDatabaseResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateSQLDatabaseResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateSQLDatabaseResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListSQLDatabases - returns array of SQLDatabase from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have a viewer workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListSQLDatabasesOptions contains the optional parameters for the ItemsClient.NewListSQLDatabasesPager method.
func (client *ItemsClient) ListSQLDatabases(ctx context.Context, workspaceID string, options *ItemsClientListSQLDatabasesOptions) ([]SQLDatabase, error) {
	pager := client.NewListSQLDatabasesPager(workspaceID, options)
	mapper := func(resp ItemsClientListSQLDatabasesResponse) []SQLDatabase {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []SQLDatabase{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []SQLDatabase{}, err
	}
	return list, nil
}
