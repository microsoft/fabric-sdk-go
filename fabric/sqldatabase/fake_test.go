// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package sqldatabase_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/sqldatabase"
	"github.com/microsoft/fabric-sdk-go/fabric/sqldatabase/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *sqldatabase.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = sqldatabase.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListSQLDatabases() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List SQLDatabases in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := sqldatabase.SQLDatabases{
		Value: []sqldatabase.SQLDatabase{
			{
				Type:        to.Ptr(sqldatabase.ItemTypeSQLDatabase),
				Description: to.Ptr("A SQLDatabase description."),
				DisplayName: to.Ptr("SQLDatabase Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(sqldatabase.ItemTypeSQLDatabase),
				Description: to.Ptr("A SQLDatabase description."),
				DisplayName: to.Ptr("SQLDatabase Name 2"),
				ID:          to.Ptr("f697fb63-abd4-4399-9548-be7e3c3c0dac"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListSQLDatabasesPager = func(workspaceID string, options *sqldatabase.ItemsClientListSQLDatabasesOptions) (resp azfake.PagerResponder[sqldatabase.ItemsClientListSQLDatabasesResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[sqldatabase.ItemsClientListSQLDatabasesResponse]{}
		resp.AddPage(http.StatusOK, sqldatabase.ItemsClientListSQLDatabasesResponse{SQLDatabases: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListSQLDatabasesPager(exampleWorkspaceID, &sqldatabase.ItemsClientListSQLDatabasesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SQLDatabases))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateSQLDatabase() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a SQLDatabase example"},
	})
	var exampleWorkspaceID string
	var exampleCreateSQLDatabaseRequest sqldatabase.CreateSQLDatabaseRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateSQLDatabaseRequest = sqldatabase.CreateSQLDatabaseRequest{
		Description: to.Ptr("A SQLDatabase description."),
		DisplayName: to.Ptr("SQLDatabase 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateSQLDatabase = func(ctx context.Context, workspaceID string, createSQLDatabaseRequest sqldatabase.CreateSQLDatabaseRequest, options *sqldatabase.ItemsClientBeginCreateSQLDatabaseOptions) (resp azfake.PollerResponder[sqldatabase.ItemsClientCreateSQLDatabaseResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateSQLDatabaseRequest, createSQLDatabaseRequest))
		resp = azfake.PollerResponder[sqldatabase.ItemsClientCreateSQLDatabaseResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, sqldatabase.ItemsClientCreateSQLDatabaseResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateSQLDatabase(ctx, exampleWorkspaceID, exampleCreateSQLDatabaseRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetSQLDatabase() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a SQLDatabase example"},
	})
	var exampleWorkspaceID string
	var exampleSqlDatabaseID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleSqlDatabaseID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := sqldatabase.SQLDatabase{
		Type:        to.Ptr(sqldatabase.ItemTypeSQLDatabase),
		Description: to.Ptr("A SQLDatabase description."),
		DisplayName: to.Ptr("SQLDatabase 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetSQLDatabase = func(ctx context.Context, workspaceID string, sqlDatabaseID string, options *sqldatabase.ItemsClientGetSQLDatabaseOptions) (resp azfake.Responder[sqldatabase.ItemsClientGetSQLDatabaseResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSqlDatabaseID, sqlDatabaseID)
		resp = azfake.Responder[sqldatabase.ItemsClientGetSQLDatabaseResponse]{}
		resp.SetResponse(http.StatusOK, sqldatabase.ItemsClientGetSQLDatabaseResponse{SQLDatabase: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetSQLDatabase(ctx, exampleWorkspaceID, exampleSqlDatabaseID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SQLDatabase))
}

func (testsuite *FakeTestSuite) TestItems_UpdateSQLDatabase() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a SQLDatabase example"},
	})
	var exampleWorkspaceID string
	var exampleSqlDatabaseID string
	var exampleUpdateSQLDatabaseRequest sqldatabase.UpdateSQLDatabaseRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleSqlDatabaseID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateSQLDatabaseRequest = sqldatabase.UpdateSQLDatabaseRequest{
		Description: to.Ptr("SQLDatabase's New description"),
	}

	exampleRes := sqldatabase.SQLDatabase{
		Type:        to.Ptr(sqldatabase.ItemTypeSQLDatabase),
		Description: to.Ptr("SQLDatabase's New description"),
		DisplayName: to.Ptr("SQLDatabase's name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateSQLDatabase = func(ctx context.Context, workspaceID string, sqlDatabaseID string, updateSQLDatabaseRequest sqldatabase.UpdateSQLDatabaseRequest, options *sqldatabase.ItemsClientUpdateSQLDatabaseOptions) (resp azfake.Responder[sqldatabase.ItemsClientUpdateSQLDatabaseResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSqlDatabaseID, sqlDatabaseID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateSQLDatabaseRequest, updateSQLDatabaseRequest))
		resp = azfake.Responder[sqldatabase.ItemsClientUpdateSQLDatabaseResponse]{}
		resp.SetResponse(http.StatusOK, sqldatabase.ItemsClientUpdateSQLDatabaseResponse{SQLDatabase: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateSQLDatabase(ctx, exampleWorkspaceID, exampleSqlDatabaseID, exampleUpdateSQLDatabaseRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SQLDatabase))
}

func (testsuite *FakeTestSuite) TestItems_DeleteSQLDatabase() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a SQLDatabase example"},
	})
	var exampleWorkspaceID string
	var exampleSqlDatabaseID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleSqlDatabaseID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteSQLDatabase = func(ctx context.Context, workspaceID string, sqlDatabaseID string, options *sqldatabase.ItemsClientDeleteSQLDatabaseOptions) (resp azfake.Responder[sqldatabase.ItemsClientDeleteSQLDatabaseResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSqlDatabaseID, sqlDatabaseID)
		resp = azfake.Responder[sqldatabase.ItemsClientDeleteSQLDatabaseResponse]{}
		resp.SetResponse(http.StatusOK, sqldatabase.ItemsClientDeleteSQLDatabaseResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteSQLDatabase(ctx, exampleWorkspaceID, exampleSqlDatabaseID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}
