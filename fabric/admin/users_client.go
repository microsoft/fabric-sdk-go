// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package admin

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
)

// UsersClient contains the methods for the Users group.
// Don't use this type directly, use a constructor function instead.
type UsersClient struct {
	internal *azcore.Client
	endpoint string
}

// NewListAccessEntitiesPager - This API supports pagination [/rest/api/fabric/articles/pagination]. A maximum of 10,000 records
// can be returned per request. With the continuous token provided in the response, you can get the next
// 10,000 records.
// Page order:
// 1. Fabric items
// 2. Datamarts
// 3. Reports
// 4. Dashboards
// 5. SemanticModels
// 6. Apps
// 7. Dataflows
// PERMISSIONS The caller must have administrator rights (such as Office 365 Global administrator or Fabric administrator)
// or authenticate using a service principal.
// REQUIRED DELEGATED SCOPES Tenant.Read.All or Tenant.ReadWrite.All
// LIMITATIONS Maximum 200 requests per hour.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - userID - The user graph ID or User Principal Name (UPN).
//   - options - UsersClientListAccessEntitiesOptions contains the optional parameters for the UsersClient.NewListAccessEntitiesPager
//     method.
func (client *UsersClient) NewListAccessEntitiesPager(userID string, options *UsersClientListAccessEntitiesOptions) *runtime.Pager[UsersClientListAccessEntitiesResponse] {
	return runtime.NewPager(runtime.PagingHandler[UsersClientListAccessEntitiesResponse]{
		More: func(page UsersClientListAccessEntitiesResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *UsersClientListAccessEntitiesResponse) (UsersClientListAccessEntitiesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "admin.UsersClient.NewListAccessEntitiesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listAccessEntitiesCreateRequest(ctx, userID, options)
			}, nil)
			if err != nil {
				return UsersClientListAccessEntitiesResponse{}, err
			}
			return client.listAccessEntitiesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listAccessEntitiesCreateRequest creates the ListAccessEntities request.
func (client *UsersClient) listAccessEntitiesCreateRequest(ctx context.Context, userID string, options *UsersClientListAccessEntitiesOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/users/{userId}/access"
	if userID == "" {
		return nil, errors.New("parameter userID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{userId}", url.PathEscape(userID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	if options != nil && options.Type != nil {
		reqQP.Set("type", *options.Type)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listAccessEntitiesHandleResponse handles the ListAccessEntities response.
func (client *UsersClient) listAccessEntitiesHandleResponse(resp *http.Response) (UsersClientListAccessEntitiesResponse, error) {
	result := UsersClientListAccessEntitiesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccessEntityResponse); err != nil {
		return UsersClientListAccessEntitiesResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// ListAccessEntities - returns array of AccessEntity from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination]. A maximum of 10,000 records can be returned per request. With the continuous token provided in the response, you can get the next
// 10,000 records.
//
// Page order:
//
//  1. Fabric items
//  2. Datamarts
//  3. Reports
//  4. Dashboards
//  5. SemanticModels
//  6. Apps
//  7. Dataflows
//
// PERMISSIONS The caller must have administrator rights (such as Office 365 Global administrator or Fabric administrator) or authenticate using a service principal.
//
// # REQUIRED DELEGATED SCOPES Tenant.Read.All or Tenant.ReadWrite.All
//
// LIMITATIONS Maximum 200 requests per hour.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - userID - The user graph ID or User Principal Name (UPN).
//   - options - UsersClientListAccessEntitiesOptions contains the optional parameters for the UsersClient.NewListAccessEntitiesPager method.
func (client *UsersClient) ListAccessEntities(ctx context.Context, userID string, options *UsersClientListAccessEntitiesOptions) ([]AccessEntity, error) {
	pager := client.NewListAccessEntitiesPager(userID, options)
	mapper := func(resp UsersClientListAccessEntitiesResponse) []AccessEntity {
		return resp.AccessEntities
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []AccessEntity{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []AccessEntity{}, err
	}
	return list, nil
}
