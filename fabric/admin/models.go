// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package admin

import "time"

// AccessEntity - Access details for the given user.
type AccessEntity struct {
	// Entity category such as item.
	Category *Category

	// Entity name.
	DisplayName *string

	// Item permissions.
	ItemAccessDetails *ItemAccessDetail

	// Entity type.
	Type *string

	// READ-ONLY; The object ID of the entity.
	ID *string
}

// AccessEntityResponse - A list of entities and permissions.
type AccessEntityResponse struct {
	// A list of users with access to an entity.
	AccessEntities []AccessEntity

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// AssignDomainWorkspacesByCapacitiesRequest - The request payload for assigning workspaces to a domain by capacity.
type AssignDomainWorkspacesByCapacitiesRequest struct {
	// The capacity IDs.
	CapacitiesIDs []string
}

// AssignDomainWorkspacesByIDsRequest - The request payload for assigning workspaces to a domain by workspace ID.
type AssignDomainWorkspacesByIDsRequest struct {
	WorkspacesIDs []string
}

// AssignDomainWorkspacesByPrincipalsRequest - The request payload for assigning workspaces to a domain by principal.
type AssignDomainWorkspacesByPrincipalsRequest struct {
	Principals []Principal
}

// CreateDomainRequest - The request payload for creating a domain or subdomain.
type CreateDomainRequest struct {
	// REQUIRED; The domain display name. The display name cannot contain more than 40 characters.
	DisplayName *string

	// The domain description. The description cannot contain more than 256 characters.
	Description *string

	// The domain parent object ID.
	ParentDomainID *string
}

// Domain - Represents a domain or subdomain.
type Domain struct {
	// REQUIRED; The domain contributors scope.
	ContributorsScope *ContributorsScopeType

	// REQUIRED; The name of the domain.
	DisplayName *string

	// REQUIRED; The domain object ID.
	ID *string

	// The description of the domain.
	Description *string

	// The domain parent object ID.
	ParentDomainID *string
}

// DomainRoleAssignmentRequest - The request payload for assigning domain members for a domain by principal.
type DomainRoleAssignmentRequest struct {
	// REQUIRED; The update request type.
	Type       *DomainRole
	Principals []Principal
}

// DomainRoleUnassignmentRequest - The request payload for unassigning domain members by principal.
type DomainRoleUnassignmentRequest struct {
	// REQUIRED; The update request type.
	Type       *DomainRole
	Principals []Principal
}

// DomainWorkspace - Represents a workspace in a domain.
type DomainWorkspace struct {
	// REQUIRED; The name of the workspace.
	DisplayName *string

	// REQUIRED; The workspace ID.
	ID *string
}

// DomainWorkspaces - A response wrapper for a list of all the workspaces assigned to a domain with a continuous token.
type DomainWorkspaces struct {
	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string

	// The list of all the workspaces assigned to the domain.
	Value []DomainWorkspace
}

// DomainsResponse - This is a response wrapper for a list of all domains.
type DomainsResponse struct {
	// The list of domains.
	Domains []Domain
}

// ExternalDataShare - An external data share object.
type ExternalDataShare struct {
	// READ-ONLY; The principal that created the external data share.
	CreatorPrincipal *Principal

	// READ-ONLY; The external data share ID.
	ID *string

	// READ-ONLY; The item ID.
	ItemID *string

	// READ-ONLY; The path or list of paths that are externally shared.
	Paths []string

	// READ-ONLY; The recipient who was invited to accept the external data share.
	Recipient *ExternalDataShareRecipient

	// READ-ONLY; The status of the external data share.
	Status *ExternalDataShareStatus

	// READ-ONLY; The workspace ID.
	WorkspaceID *string

	// READ-ONLY; The tenant ID in which the external data share was accepted.
	AcceptedByTenantID *string

	// READ-ONLY; The expiration date and time (UTC) of the invitation to the external data share.
	ExpirationTimeUTC *time.Time

	// READ-ONLY; The URL for accepting the invitation to the external data share.
	InvitationURL *string
}

// ExternalDataShareRecipient - A representation of the the external data share recipient.
type ExternalDataShareRecipient struct {
	// REQUIRED; The recipient's email address.
	UserPrincipalName *string

	// The recipient's tenant ID.
	TenantID *string
}

// ExternalDataShares - A list of external data shares with a continuation token.
type ExternalDataShares struct {
	// READ-ONLY; A list of external data shares.
	Value []ExternalDataShare

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// Item details.
type Item struct {
	// READ-ONLY; The item ID.
	ID *string

	// Item details including item type and item usage.
	Description *string

	// The last updated date and time.
	LastUpdatedDate *time.Time

	// The item name.
	Name *string

	// READ-ONLY; The capacity ID of the workspace.
	CapacityID *string

	// READ-ONLY; The item's owner.
	CreatorPrincipal *Principal

	// READ-ONLY; The item status.
	State *ItemState

	// READ-ONLY; The item type. Includes values such as Synapse, Notebook, Kqldatabase and SynapseWorkbook.
	Type *ItemType

	// READ-ONLY; The workspace ID of item.
	WorkspaceID *string
}

// ItemAccessDetail - Item permission details such as read and reshare.
type ItemAccessDetail struct {
	// Workload permissions such as readAll and viewOutput.
	AdditionalPermissions []string

	// Item permissions such as read and reshare.
	Permissions []ItemPermissions

	// Entity type.
	Type *ItemType
}

// ItemAccessDetails - User access details for an item.
type ItemAccessDetails struct {
	// READ-ONLY; Item permissions for the user.
	ItemAccessDetails *ItemAccessDetail

	// READ-ONLY; Information regarding the user who has access to the entity.
	Principal *Principal
}

// ItemAccessDetailsResponse - A list of users with access to a given entity.
type ItemAccessDetailsResponse struct {
	// A list of users with access to an entity.
	AccessDetails []ItemAccessDetails
}

// ItemChangeLabelStatus - The unique ID and information protection label change status of a Fabric item
type ItemChangeLabelStatus struct {
	// READ-ONLY; The unique ID of a Fabric item. The ID is in UUID format.
	ID *string

	// READ-ONLY; The status of an information protection label change operation. Additional tenant setting property types may
	// be added over time.
	Status *Status

	// READ-ONLY; The Fabric item type.
	Type *ItemType
}

// ItemInfo - The item information, including item ID and type.
type ItemInfo struct {
	// REQUIRED; An ID in UUID format.
	ID *string

	// REQUIRED; The item type.
	Type *ItemType
}

// Items - A list of items.
type Items struct {
	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string

	// The list of items for a given tenant.
	ItemEntities []Item
}

// ItemsChangeLabelResponse - A list of the unique IDs and information protection label change status of the Fabric items
// in the label change request.
type ItemsChangeLabelResponse struct {
	// A list of items change label status.
	ItemsChangeLabelStatus []ItemChangeLabelStatus
}

type Principal struct {
	// REQUIRED; The principal's ID.
	ID *string

	// REQUIRED; The type of the principal. Additional principal types may be added over time.
	Type *PrincipalType

	// Group specific details. Applicable when the principal type is Group.
	GroupDetails *PrincipalGroupDetails

	// Service principal profile details. Applicable when the principal type is ServicePrincipalProfile.
	ServicePrincipalProfileDetails *PrincipalServicePrincipalProfileDetails

	// READ-ONLY; The principal's display name.
	DisplayName *string

	// READ-ONLY; Service principal specific details. Applicable when the principal type is ServicePrincipal.
	ServicePrincipalDetails *PrincipalServicePrincipalDetails

	// READ-ONLY; User principal specific details. Applicable when the principal type is User.
	UserDetails *PrincipalUserDetails
}

// PrincipalGroupDetails - Group specific details. Applicable when the principal type is Group.
type PrincipalGroupDetails struct {
	// The type of the group. Additional group types may be added over time.
	GroupType *GroupType
}

// PrincipalServicePrincipalDetails - Service principal specific details. Applicable when the principal type is ServicePrincipal.
type PrincipalServicePrincipalDetails struct {
	// READ-ONLY; The service principal's Microsoft Entra AppId.
	AADAppID *string
}

// PrincipalServicePrincipalProfileDetails - Service principal profile details. Applicable when the principal type is ServicePrincipalProfile.
type PrincipalServicePrincipalProfileDetails struct {
	// The service principal profile's parent principal.
	ParentPrincipal *Principal
}

// PrincipalUserDetails - User principal specific details. Applicable when the principal type is User.
type PrincipalUserDetails struct {
	// READ-ONLY; The user principal name.
	UserPrincipalName *string
}

// RemoveLabelsRequest - A list of items requiring an information protection label update. Each item in the list includes
// the item ID and Fabric item type.
type RemoveLabelsRequest struct {
	// A list of items.
	Items []ItemInfo
}

// SetLabelsRequest - A composite of label information required to update an information protection label.
type SetLabelsRequest struct {
	// REQUIRED; A list of items. The list includes item ID and type.
	Items []ItemInfo

	// REQUIRED; The label ID, which must be in the user's label policy.
	LabelID *string

	// Specifies whether the assigned label was set by an automated process or manually. Additional tenant setting property types
	// may be added over time.
	AssignmentMethod *AssignmentMethod

	// Delegated user details. A delegated user is a user within an organization whose admin sets a label on behalf of the user.
	// Although the admin sets the label, the delegated user is marked as the label
	// issuer. Only principals of type 'User' are supported.
	DelegatedPrincipal *Principal
}

// TenantSetting - Tenant setting details.
type TenantSetting struct {
	// REQUIRED; Indicates if the tenant setting is enabled for a security group. 0 - The tenant setting is enabled for the entire
	// organization. 1 - The tenant setting is enabled for security groups.
	CanSpecifySecurityGroups *bool

	// REQUIRED; The status of the tenant setting. 0 - Disabled, 1- Enabled.
	Enabled *bool

	// REQUIRED; The name of the tenant setting.
	SettingName *string

	// REQUIRED; The title of the tenant setting.
	Title *string

	// Indicates whether the tenant setting can be delegated to a workspace admin. False - Workspace admin cannot override the
	// tenant setting. True - Workspace admin can override the tenant setting.
	DelegateToWorkspace *bool

	// Tenant setting delegated from tenant, capacity or domain.
	DelegatedFrom *DelegatedFrom

	// A list of enabled security groups.
	EnabledSecurityGroups []TenantSettingSecurityGroup

	// A list of excluded security groups.
	ExcludedSecurityGroups []TenantSettingSecurityGroup

	// Tenant setting properties.
	Properties []TenantSettingProperty

	// Tenant setting group name.
	TenantSettingGroup *string
}

// TenantSettingOverride - A workspace, capacity or domain admin can override the tenant setting.
type TenantSettingOverride struct {
	// The ID of a capacity, domain or workspace.
	ID *string

	// A list of tenant settings.
	TenantSettings []TenantSetting
}

// TenantSettingOverrides - A list of tenant settings overrides.
type TenantSettingOverrides struct {
	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string

	// A list of tenant settings that were overridden by a workspace, capacity or domain admin.
	Overrides []TenantSettingOverride
}

// TenantSettingProperty - Tenant setting property.
type TenantSettingProperty struct {
	// The name of the property.
	Name *string

	// The type of the property.
	Type *TenantSettingPropertyType

	// The value of the property.
	Value *string
}

// TenantSettingSecurityGroup - Tenant setting security group.
type TenantSettingSecurityGroup struct {
	// REQUIRED; The graph ID of the security group.
	GraphID *string

	// REQUIRED; The name of the security group.
	Name *string
}

// TenantSettings - A list of tenant settings.
type TenantSettings struct {
	// A list of tenant settings.
	TenantSettings []TenantSetting
}

// UnassignDomainWorkspacesByIDsRequest - The request payload for unassigning workspaces from a domain by workspace ID.
type UnassignDomainWorkspacesByIDsRequest struct {
	WorkspacesIDs []string
}

// UpdateDomainRequest - The request payload for updating a domain.
type UpdateDomainRequest struct {
	// The domain contributors scope.
	ContributorsScope *ContributorsScopeType

	// The domain description. The description cannot contain more than 256 characters.
	Description *string

	// The domain display name. The display name cannot contain more than 40 characters.
	DisplayName *string
}

// Workspace.
type Workspace struct {
	// REQUIRED; The workspace name.
	Name *string

	// READ-ONLY; The workspace ID.
	ID *string

	// READ-ONLY; The workspace state.
	State *WorkspaceState

	// READ-ONLY; The workspace type.
	Type *WorkspaceType

	// READ-ONLY; The capacity ID of the workspace.
	CapacityID *string
}

// WorkspaceAccessDetail - Workspace permission details.
type WorkspaceAccessDetail struct {
	// The workspace role.
	WorkspaceRole *WorkspaceRole

	// READ-ONLY; Workspace type.
	Type *WorkspaceType
}

// WorkspaceAccessDetails - User access details for the workspace.
type WorkspaceAccessDetails struct {
	// READ-ONLY; Information regarding the user who has access to the entity.
	Principal *Principal

	// READ-ONLY; Workspace permissions for the user.
	WorkspaceAccessDetails *WorkspaceAccessDetail
}

// WorkspaceAccessDetailsResponse - A list of users with access to a given entity.
type WorkspaceAccessDetailsResponse struct {
	// A list of users with access to an entity.
	AccessDetails []WorkspaceAccessDetails
}

// Workspaces - A list of workspaces.
type Workspaces struct {
	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string

	// The list of fabric workspaces.
	Workspaces []Workspace
}
