// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/admin"
)

// TenantsServer is a fake server for instances of the admin.TenantsClient type.
type TenantsServer struct {
	// NewListCapacitiesTenantSettingsOverridesPager is the fake for method TenantsClient.NewListCapacitiesTenantSettingsOverridesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListCapacitiesTenantSettingsOverridesPager func(options *admin.TenantsClientListCapacitiesTenantSettingsOverridesOptions) (resp azfake.PagerResponder[admin.TenantsClientListCapacitiesTenantSettingsOverridesResponse])

	// ListTenantSettings is the fake for method TenantsClient.ListTenantSettings
	// HTTP status codes to indicate success: http.StatusOK
	ListTenantSettings func(ctx context.Context, options *admin.TenantsClientListTenantSettingsOptions) (resp azfake.Responder[admin.TenantsClientListTenantSettingsResponse], errResp azfake.ErrorResponder)
}

// NewTenantsServerTransport creates a new instance of TenantsServerTransport with the provided implementation.
// The returned TenantsServerTransport instance is connected to an instance of admin.TenantsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewTenantsServerTransport(srv *TenantsServer) *TenantsServerTransport {
	return &TenantsServerTransport{
		srv: srv,
		newListCapacitiesTenantSettingsOverridesPager: newTracker[azfake.PagerResponder[admin.TenantsClientListCapacitiesTenantSettingsOverridesResponse]](),
	}
}

// TenantsServerTransport connects instances of admin.TenantsClient to instances of TenantsServer.
// Don't use this type directly, use NewTenantsServerTransport instead.
type TenantsServerTransport struct {
	srv                                           *TenantsServer
	newListCapacitiesTenantSettingsOverridesPager *tracker[azfake.PagerResponder[admin.TenantsClientListCapacitiesTenantSettingsOverridesResponse]]
}

// Do implements the policy.Transporter interface for TenantsServerTransport.
func (t *TenantsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return t.dispatchToMethodFake(req, method)
}

func (t *TenantsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if tenantsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = tenantsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "TenantsClient.NewListCapacitiesTenantSettingsOverridesPager":
				res.resp, res.err = t.dispatchNewListCapacitiesTenantSettingsOverridesPager(req)
			case "TenantsClient.ListTenantSettings":
				res.resp, res.err = t.dispatchListTenantSettings(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (t *TenantsServerTransport) dispatchNewListCapacitiesTenantSettingsOverridesPager(req *http.Request) (*http.Response, error) {
	if t.srv.NewListCapacitiesTenantSettingsOverridesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListCapacitiesTenantSettingsOverridesPager not implemented")}
	}
	newListCapacitiesTenantSettingsOverridesPager := t.newListCapacitiesTenantSettingsOverridesPager.get(req)
	if newListCapacitiesTenantSettingsOverridesPager == nil {
		qp := req.URL.Query()
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *admin.TenantsClientListCapacitiesTenantSettingsOverridesOptions
		if continuationTokenParam != nil {
			options = &admin.TenantsClientListCapacitiesTenantSettingsOverridesOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := t.srv.NewListCapacitiesTenantSettingsOverridesPager(options)
		newListCapacitiesTenantSettingsOverridesPager = &resp
		t.newListCapacitiesTenantSettingsOverridesPager.add(req, newListCapacitiesTenantSettingsOverridesPager)
		server.PagerResponderInjectNextLinks(newListCapacitiesTenantSettingsOverridesPager, req, func(page *admin.TenantsClientListCapacitiesTenantSettingsOverridesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListCapacitiesTenantSettingsOverridesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		t.newListCapacitiesTenantSettingsOverridesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListCapacitiesTenantSettingsOverridesPager) {
		t.newListCapacitiesTenantSettingsOverridesPager.remove(req)
	}
	return resp, nil
}

func (t *TenantsServerTransport) dispatchListTenantSettings(req *http.Request) (*http.Response, error) {
	if t.srv.ListTenantSettings == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListTenantSettings not implemented")}
	}
	respr, errRespr := t.srv.ListTenantSettings(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TenantSettings, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to TenantsServerTransport
var tenantsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
