// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/admin"
)

// WorkspacesServer is a fake server for instances of the admin.WorkspacesClient type.
type WorkspacesServer struct {
	// GetWorkspace is the fake for method WorkspacesClient.GetWorkspace
	// HTTP status codes to indicate success: http.StatusOK
	GetWorkspace func(ctx context.Context, workspaceID string, options *admin.WorkspacesClientGetWorkspaceOptions) (resp azfake.Responder[admin.WorkspacesClientGetWorkspaceResponse], errResp azfake.ErrorResponder)

	// NewListGitConnectionsPager is the fake for method WorkspacesClient.NewListGitConnectionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListGitConnectionsPager func(options *admin.WorkspacesClientListGitConnectionsOptions) (resp azfake.PagerResponder[admin.WorkspacesClientListGitConnectionsResponse])

	// ListWorkspaceAccessDetails is the fake for method WorkspacesClient.ListWorkspaceAccessDetails
	// HTTP status codes to indicate success: http.StatusOK
	ListWorkspaceAccessDetails func(ctx context.Context, workspaceID string, options *admin.WorkspacesClientListWorkspaceAccessDetailsOptions) (resp azfake.Responder[admin.WorkspacesClientListWorkspaceAccessDetailsResponse], errResp azfake.ErrorResponder)

	// NewListWorkspacesPager is the fake for method WorkspacesClient.NewListWorkspacesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListWorkspacesPager func(options *admin.WorkspacesClientListWorkspacesOptions) (resp azfake.PagerResponder[admin.WorkspacesClientListWorkspacesResponse])
}

// NewWorkspacesServerTransport creates a new instance of WorkspacesServerTransport with the provided implementation.
// The returned WorkspacesServerTransport instance is connected to an instance of admin.WorkspacesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewWorkspacesServerTransport(srv *WorkspacesServer) *WorkspacesServerTransport {
	return &WorkspacesServerTransport{
		srv:                        srv,
		newListGitConnectionsPager: newTracker[azfake.PagerResponder[admin.WorkspacesClientListGitConnectionsResponse]](),
		newListWorkspacesPager:     newTracker[azfake.PagerResponder[admin.WorkspacesClientListWorkspacesResponse]](),
	}
}

// WorkspacesServerTransport connects instances of admin.WorkspacesClient to instances of WorkspacesServer.
// Don't use this type directly, use NewWorkspacesServerTransport instead.
type WorkspacesServerTransport struct {
	srv                        *WorkspacesServer
	newListGitConnectionsPager *tracker[azfake.PagerResponder[admin.WorkspacesClientListGitConnectionsResponse]]
	newListWorkspacesPager     *tracker[azfake.PagerResponder[admin.WorkspacesClientListWorkspacesResponse]]
}

// Do implements the policy.Transporter interface for WorkspacesServerTransport.
func (w *WorkspacesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return w.dispatchToMethodFake(req, method)
}

func (w *WorkspacesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "WorkspacesClient.GetWorkspace":
		resp, err = w.dispatchGetWorkspace(req)
	case "WorkspacesClient.NewListGitConnectionsPager":
		resp, err = w.dispatchNewListGitConnectionsPager(req)
	case "WorkspacesClient.ListWorkspaceAccessDetails":
		resp, err = w.dispatchListWorkspaceAccessDetails(req)
	case "WorkspacesClient.NewListWorkspacesPager":
		resp, err = w.dispatchNewListWorkspacesPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (w *WorkspacesServerTransport) dispatchGetWorkspace(req *http.Request) (*http.Response, error) {
	if w.srv.GetWorkspace == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetWorkspace not implemented")}
	}
	const regexStr = `/v1/admin/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.GetWorkspace(req.Context(), workspaceIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Workspace, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchNewListGitConnectionsPager(req *http.Request) (*http.Response, error) {
	if w.srv.NewListGitConnectionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListGitConnectionsPager not implemented")}
	}
	newListGitConnectionsPager := w.newListGitConnectionsPager.get(req)
	if newListGitConnectionsPager == nil {
		qp := req.URL.Query()
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *admin.WorkspacesClientListGitConnectionsOptions
		if continuationTokenParam != nil {
			options = &admin.WorkspacesClientListGitConnectionsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := w.srv.NewListGitConnectionsPager(options)
		newListGitConnectionsPager = &resp
		w.newListGitConnectionsPager.add(req, newListGitConnectionsPager)
		server.PagerResponderInjectNextLinks(newListGitConnectionsPager, req, func(page *admin.WorkspacesClientListGitConnectionsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListGitConnectionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		w.newListGitConnectionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListGitConnectionsPager) {
		w.newListGitConnectionsPager.remove(req)
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchListWorkspaceAccessDetails(req *http.Request) (*http.Response, error) {
	if w.srv.ListWorkspaceAccessDetails == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListWorkspaceAccessDetails not implemented")}
	}
	const regexStr = `/v1/admin/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/users`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.ListWorkspaceAccessDetails(req.Context(), workspaceIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WorkspaceAccessDetailsResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchNewListWorkspacesPager(req *http.Request) (*http.Response, error) {
	if w.srv.NewListWorkspacesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListWorkspacesPager not implemented")}
	}
	newListWorkspacesPager := w.newListWorkspacesPager.get(req)
	if newListWorkspacesPager == nil {
		qp := req.URL.Query()
		typeUnescaped, err := url.QueryUnescape(qp.Get("type"))
		if err != nil {
			return nil, err
		}
		typeParam := getOptional(typeUnescaped)
		capacityIDUnescaped, err := url.QueryUnescape(qp.Get("capacityId"))
		if err != nil {
			return nil, err
		}
		capacityIDParam := getOptional(capacityIDUnescaped)
		nameUnescaped, err := url.QueryUnescape(qp.Get("name"))
		if err != nil {
			return nil, err
		}
		nameParam := getOptional(nameUnescaped)
		stateUnescaped, err := url.QueryUnescape(qp.Get("state"))
		if err != nil {
			return nil, err
		}
		stateParam := getOptional(stateUnescaped)
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *admin.WorkspacesClientListWorkspacesOptions
		if typeParam != nil || capacityIDParam != nil || nameParam != nil || stateParam != nil || continuationTokenParam != nil {
			options = &admin.WorkspacesClientListWorkspacesOptions{
				Type:              typeParam,
				CapacityID:        capacityIDParam,
				Name:              nameParam,
				State:             stateParam,
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := w.srv.NewListWorkspacesPager(options)
		newListWorkspacesPager = &resp
		w.newListWorkspacesPager.add(req, newListWorkspacesPager)
		server.PagerResponderInjectNextLinks(newListWorkspacesPager, req, func(page *admin.WorkspacesClientListWorkspacesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListWorkspacesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		w.newListWorkspacesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListWorkspacesPager) {
		w.newListWorkspacesPager.remove(req)
	}
	return resp, nil
}
