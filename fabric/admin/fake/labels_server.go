// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/admin"
)

// LabelsServer is a fake server for instances of the admin.LabelsClient type.
type LabelsServer struct {
	// BulkRemoveLabels is the fake for method LabelsClient.BulkRemoveLabels
	// HTTP status codes to indicate success: http.StatusOK
	BulkRemoveLabels func(ctx context.Context, removeLabelsRequest admin.RemoveLabelsRequest, options *admin.LabelsClientBulkRemoveLabelsOptions) (resp azfake.Responder[admin.LabelsClientBulkRemoveLabelsResponse], errResp azfake.ErrorResponder)

	// BulkSetLabels is the fake for method LabelsClient.BulkSetLabels
	// HTTP status codes to indicate success: http.StatusOK
	BulkSetLabels func(ctx context.Context, setLabelsRequest admin.SetLabelsRequest, options *admin.LabelsClientBulkSetLabelsOptions) (resp azfake.Responder[admin.LabelsClientBulkSetLabelsResponse], errResp azfake.ErrorResponder)
}

// NewLabelsServerTransport creates a new instance of LabelsServerTransport with the provided implementation.
// The returned LabelsServerTransport instance is connected to an instance of admin.LabelsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewLabelsServerTransport(srv *LabelsServer) *LabelsServerTransport {
	return &LabelsServerTransport{srv: srv}
}

// LabelsServerTransport connects instances of admin.LabelsClient to instances of LabelsServer.
// Don't use this type directly, use NewLabelsServerTransport instead.
type LabelsServerTransport struct {
	srv *LabelsServer
}

// Do implements the policy.Transporter interface for LabelsServerTransport.
func (l *LabelsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return l.dispatchToMethodFake(req, method)
}

func (l *LabelsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "LabelsClient.BulkRemoveLabels":
			res.resp, res.err = l.dispatchBulkRemoveLabels(req)
		case "LabelsClient.BulkSetLabels":
			res.resp, res.err = l.dispatchBulkSetLabels(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (l *LabelsServerTransport) dispatchBulkRemoveLabels(req *http.Request) (*http.Response, error) {
	if l.srv.BulkRemoveLabels == nil {
		return nil, &nonRetriableError{errors.New("fake for method BulkRemoveLabels not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[admin.RemoveLabelsRequest](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.BulkRemoveLabels(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ItemsChangeLabelResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LabelsServerTransport) dispatchBulkSetLabels(req *http.Request) (*http.Response, error) {
	if l.srv.BulkSetLabels == nil {
		return nil, &nonRetriableError{errors.New("fake for method BulkSetLabels not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[admin.SetLabelsRequest](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.BulkSetLabels(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ItemsChangeLabelResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
