// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/admin"
)

// UsersServer is a fake server for instances of the admin.UsersClient type.
type UsersServer struct {
	// NewListAccessEntitiesPager is the fake for method UsersClient.NewListAccessEntitiesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListAccessEntitiesPager func(userID string, options *admin.UsersClientListAccessEntitiesOptions) (resp azfake.PagerResponder[admin.UsersClientListAccessEntitiesResponse])
}

// NewUsersServerTransport creates a new instance of UsersServerTransport with the provided implementation.
// The returned UsersServerTransport instance is connected to an instance of admin.UsersClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewUsersServerTransport(srv *UsersServer) *UsersServerTransport {
	return &UsersServerTransport{
		srv:                        srv,
		newListAccessEntitiesPager: newTracker[azfake.PagerResponder[admin.UsersClientListAccessEntitiesResponse]](),
	}
}

// UsersServerTransport connects instances of admin.UsersClient to instances of UsersServer.
// Don't use this type directly, use NewUsersServerTransport instead.
type UsersServerTransport struct {
	srv                        *UsersServer
	newListAccessEntitiesPager *tracker[azfake.PagerResponder[admin.UsersClientListAccessEntitiesResponse]]
}

// Do implements the policy.Transporter interface for UsersServerTransport.
func (u *UsersServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return u.dispatchToMethodFake(req, method)
}

func (u *UsersServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if usersServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = usersServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "UsersClient.NewListAccessEntitiesPager":
				res.resp, res.err = u.dispatchNewListAccessEntitiesPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (u *UsersServerTransport) dispatchNewListAccessEntitiesPager(req *http.Request) (*http.Response, error) {
	if u.srv.NewListAccessEntitiesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListAccessEntitiesPager not implemented")}
	}
	newListAccessEntitiesPager := u.newListAccessEntitiesPager.get(req)
	if newListAccessEntitiesPager == nil {
		const regexStr = `/v1/admin/users/(?P<userId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/access`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		userIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("userId")])
		if err != nil {
			return nil, err
		}
		typeUnescaped, err := url.QueryUnescape(qp.Get("type"))
		if err != nil {
			return nil, err
		}
		typeParam := getOptional(typeUnescaped)
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *admin.UsersClientListAccessEntitiesOptions
		if typeParam != nil || continuationTokenParam != nil {
			options = &admin.UsersClientListAccessEntitiesOptions{
				Type:              typeParam,
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := u.srv.NewListAccessEntitiesPager(userIDParam, options)
		newListAccessEntitiesPager = &resp
		u.newListAccessEntitiesPager.add(req, newListAccessEntitiesPager)
		server.PagerResponderInjectNextLinks(newListAccessEntitiesPager, req, func(page *admin.UsersClientListAccessEntitiesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListAccessEntitiesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		u.newListAccessEntitiesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListAccessEntitiesPager) {
		u.newListAccessEntitiesPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to UsersServerTransport
var usersServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
