// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/admin"
)

// ItemsServer is a fake server for instances of the admin.ItemsClient type.
type ItemsServer struct {
	// GetItem is the fake for method ItemsClient.GetItem
	// HTTP status codes to indicate success: http.StatusOK
	GetItem func(ctx context.Context, workspaceID string, itemID string, options *admin.ItemsClientGetItemOptions) (resp azfake.Responder[admin.ItemsClientGetItemResponse], errResp azfake.ErrorResponder)

	// ListItemAccessDetails is the fake for method ItemsClient.ListItemAccessDetails
	// HTTP status codes to indicate success: http.StatusOK
	ListItemAccessDetails func(ctx context.Context, workspaceID string, itemID string, options *admin.ItemsClientListItemAccessDetailsOptions) (resp azfake.Responder[admin.ItemsClientListItemAccessDetailsResponse], errResp azfake.ErrorResponder)

	// NewListItemsPager is the fake for method ItemsClient.NewListItemsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListItemsPager func(options *admin.ItemsClientListItemsOptions) (resp azfake.PagerResponder[admin.ItemsClientListItemsResponse])
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of admin.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:               srv,
		newListItemsPager: newTracker[azfake.PagerResponder[admin.ItemsClientListItemsResponse]](),
	}
}

// ItemsServerTransport connects instances of admin.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv               *ItemsServer
	newListItemsPager *tracker[azfake.PagerResponder[admin.ItemsClientListItemsResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ItemsClient.GetItem":
		resp, err = i.dispatchGetItem(req)
	case "ItemsClient.ListItemAccessDetails":
		resp, err = i.dispatchListItemAccessDetails(req)
	case "ItemsClient.NewListItemsPager":
		resp, err = i.dispatchNewListItemsPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (i *ItemsServerTransport) dispatchGetItem(req *http.Request) (*http.Response, error) {
	if i.srv.GetItem == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetItem not implemented")}
	}
	const regexStr = `/v1/admin/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/items/(?P<itemId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	itemIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("itemId")])
	if err != nil {
		return nil, err
	}
	typeUnescaped, err := url.QueryUnescape(qp.Get("type"))
	if err != nil {
		return nil, err
	}
	typeParam := getOptional(typeUnescaped)
	var options *admin.ItemsClientGetItemOptions
	if typeParam != nil {
		options = &admin.ItemsClientGetItemOptions{
			Type: typeParam,
		}
	}
	respr, errRespr := i.srv.GetItem(req.Context(), workspaceIDParam, itemIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Item, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchListItemAccessDetails(req *http.Request) (*http.Response, error) {
	if i.srv.ListItemAccessDetails == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListItemAccessDetails not implemented")}
	}
	const regexStr = `/v1/admin/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/items/(?P<itemId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/users`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	itemIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("itemId")])
	if err != nil {
		return nil, err
	}
	typeUnescaped, err := url.QueryUnescape(qp.Get("type"))
	if err != nil {
		return nil, err
	}
	typeParam := getOptional(typeUnescaped)
	var options *admin.ItemsClientListItemAccessDetailsOptions
	if typeParam != nil {
		options = &admin.ItemsClientListItemAccessDetailsOptions{
			Type: typeParam,
		}
	}
	respr, errRespr := i.srv.ListItemAccessDetails(req.Context(), workspaceIDParam, itemIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ItemAccessDetailsResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListItemsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListItemsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListItemsPager not implemented")}
	}
	newListItemsPager := i.newListItemsPager.get(req)
	if newListItemsPager == nil {
		qp := req.URL.Query()
		workspaceIDUnescaped, err := url.QueryUnescape(qp.Get("workspaceId"))
		if err != nil {
			return nil, err
		}
		workspaceIDParam := getOptional(workspaceIDUnescaped)
		capacityIDUnescaped, err := url.QueryUnescape(qp.Get("capacityId"))
		if err != nil {
			return nil, err
		}
		capacityIDParam := getOptional(capacityIDUnescaped)
		stateUnescaped, err := url.QueryUnescape(qp.Get("state"))
		if err != nil {
			return nil, err
		}
		stateParam := getOptional(stateUnescaped)
		typeUnescaped, err := url.QueryUnescape(qp.Get("type"))
		if err != nil {
			return nil, err
		}
		typeParam := getOptional(typeUnescaped)
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *admin.ItemsClientListItemsOptions
		if workspaceIDParam != nil || capacityIDParam != nil || stateParam != nil || typeParam != nil || continuationTokenParam != nil {
			options = &admin.ItemsClientListItemsOptions{
				WorkspaceID:       workspaceIDParam,
				CapacityID:        capacityIDParam,
				State:             stateParam,
				Type:              typeParam,
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListItemsPager(options)
		newListItemsPager = &resp
		i.newListItemsPager.add(req, newListItemsPager)
		server.PagerResponderInjectNextLinks(newListItemsPager, req, func(page *admin.ItemsClientListItemsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListItemsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListItemsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListItemsPager) {
		i.newListItemsPager.remove(req)
	}
	return resp, nil
}
