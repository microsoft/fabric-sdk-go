// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/admin"
)

// ExternalDataSharesProviderServer is a fake server for instances of the admin.ExternalDataSharesProviderClient type.
type ExternalDataSharesProviderServer struct {
	// NewListExternalDataSharesPager is the fake for method ExternalDataSharesProviderClient.NewListExternalDataSharesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListExternalDataSharesPager func(options *admin.ExternalDataSharesProviderClientListExternalDataSharesOptions) (resp azfake.PagerResponder[admin.ExternalDataSharesProviderClientListExternalDataSharesResponse])

	// RevokeExternalDataShare is the fake for method ExternalDataSharesProviderClient.RevokeExternalDataShare
	// HTTP status codes to indicate success: http.StatusOK
	RevokeExternalDataShare func(ctx context.Context, workspaceID string, itemID string, externalDataShareID string, options *admin.ExternalDataSharesProviderClientRevokeExternalDataShareOptions) (resp azfake.Responder[admin.ExternalDataSharesProviderClientRevokeExternalDataShareResponse], errResp azfake.ErrorResponder)
}

// NewExternalDataSharesProviderServerTransport creates a new instance of ExternalDataSharesProviderServerTransport with the provided implementation.
// The returned ExternalDataSharesProviderServerTransport instance is connected to an instance of admin.ExternalDataSharesProviderClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewExternalDataSharesProviderServerTransport(srv *ExternalDataSharesProviderServer) *ExternalDataSharesProviderServerTransport {
	return &ExternalDataSharesProviderServerTransport{
		srv:                            srv,
		newListExternalDataSharesPager: newTracker[azfake.PagerResponder[admin.ExternalDataSharesProviderClientListExternalDataSharesResponse]](),
	}
}

// ExternalDataSharesProviderServerTransport connects instances of admin.ExternalDataSharesProviderClient to instances of ExternalDataSharesProviderServer.
// Don't use this type directly, use NewExternalDataSharesProviderServerTransport instead.
type ExternalDataSharesProviderServerTransport struct {
	srv                            *ExternalDataSharesProviderServer
	newListExternalDataSharesPager *tracker[azfake.PagerResponder[admin.ExternalDataSharesProviderClientListExternalDataSharesResponse]]
}

// Do implements the policy.Transporter interface for ExternalDataSharesProviderServerTransport.
func (e *ExternalDataSharesProviderServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return e.dispatchToMethodFake(req, method)
}

func (e *ExternalDataSharesProviderServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if externalDataSharesProviderServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = externalDataSharesProviderServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ExternalDataSharesProviderClient.NewListExternalDataSharesPager":
				res.resp, res.err = e.dispatchNewListExternalDataSharesPager(req)
			case "ExternalDataSharesProviderClient.RevokeExternalDataShare":
				res.resp, res.err = e.dispatchRevokeExternalDataShare(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (e *ExternalDataSharesProviderServerTransport) dispatchNewListExternalDataSharesPager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListExternalDataSharesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListExternalDataSharesPager not implemented")}
	}
	newListExternalDataSharesPager := e.newListExternalDataSharesPager.get(req)
	if newListExternalDataSharesPager == nil {
		qp := req.URL.Query()
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *admin.ExternalDataSharesProviderClientListExternalDataSharesOptions
		if continuationTokenParam != nil {
			options = &admin.ExternalDataSharesProviderClientListExternalDataSharesOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := e.srv.NewListExternalDataSharesPager(options)
		newListExternalDataSharesPager = &resp
		e.newListExternalDataSharesPager.add(req, newListExternalDataSharesPager)
		server.PagerResponderInjectNextLinks(newListExternalDataSharesPager, req, func(page *admin.ExternalDataSharesProviderClientListExternalDataSharesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListExternalDataSharesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		e.newListExternalDataSharesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListExternalDataSharesPager) {
		e.newListExternalDataSharesPager.remove(req)
	}
	return resp, nil
}

func (e *ExternalDataSharesProviderServerTransport) dispatchRevokeExternalDataShare(req *http.Request) (*http.Response, error) {
	if e.srv.RevokeExternalDataShare == nil {
		return nil, &nonRetriableError{errors.New("fake for method RevokeExternalDataShare not implemented")}
	}
	const regexStr = `/v1/admin/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/items/(?P<itemId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/externalDataShares/(?P<externalDataShareId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/revoke`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	itemIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("itemId")])
	if err != nil {
		return nil, err
	}
	externalDataShareIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("externalDataShareId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.RevokeExternalDataShare(req.Context(), workspaceIDParam, itemIDParam, externalDataShareIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ExternalDataSharesProviderServerTransport
var externalDataSharesProviderServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
