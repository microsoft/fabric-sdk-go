// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/admin"
)

// SharingLinksServer is a fake server for instances of the admin.SharingLinksClient type.
type SharingLinksServer struct {
	// BeginBulkRemoveSharingLinks is the fake for method SharingLinksClient.BeginBulkRemoveSharingLinks
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginBulkRemoveSharingLinks func(ctx context.Context, bulkRemoveSharingLinksRequest admin.BulkRemoveSharingLinksRequest, options *admin.SharingLinksClientBeginBulkRemoveSharingLinksOptions) (resp azfake.PollerResponder[admin.SharingLinksClientBulkRemoveSharingLinksResponse], errResp azfake.ErrorResponder)

	// BeginRemoveAllSharingLinks is the fake for method SharingLinksClient.BeginRemoveAllSharingLinks
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginRemoveAllSharingLinks func(ctx context.Context, removeAllSharingLinksRequest admin.RemoveAllSharingLinksRequest, options *admin.SharingLinksClientBeginRemoveAllSharingLinksOptions) (resp azfake.PollerResponder[admin.SharingLinksClientRemoveAllSharingLinksResponse], errResp azfake.ErrorResponder)
}

// NewSharingLinksServerTransport creates a new instance of SharingLinksServerTransport with the provided implementation.
// The returned SharingLinksServerTransport instance is connected to an instance of admin.SharingLinksClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSharingLinksServerTransport(srv *SharingLinksServer) *SharingLinksServerTransport {
	return &SharingLinksServerTransport{
		srv:                         srv,
		beginBulkRemoveSharingLinks: newTracker[azfake.PollerResponder[admin.SharingLinksClientBulkRemoveSharingLinksResponse]](),
		beginRemoveAllSharingLinks:  newTracker[azfake.PollerResponder[admin.SharingLinksClientRemoveAllSharingLinksResponse]](),
	}
}

// SharingLinksServerTransport connects instances of admin.SharingLinksClient to instances of SharingLinksServer.
// Don't use this type directly, use NewSharingLinksServerTransport instead.
type SharingLinksServerTransport struct {
	srv                         *SharingLinksServer
	beginBulkRemoveSharingLinks *tracker[azfake.PollerResponder[admin.SharingLinksClientBulkRemoveSharingLinksResponse]]
	beginRemoveAllSharingLinks  *tracker[azfake.PollerResponder[admin.SharingLinksClientRemoveAllSharingLinksResponse]]
}

// Do implements the policy.Transporter interface for SharingLinksServerTransport.
func (s *SharingLinksServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return s.dispatchToMethodFake(req, method)
}

func (s *SharingLinksServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if sharingLinksServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = sharingLinksServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "SharingLinksClient.BeginBulkRemoveSharingLinks":
				res.resp, res.err = s.dispatchBeginBulkRemoveSharingLinks(req)
			case "SharingLinksClient.BeginRemoveAllSharingLinks":
				res.resp, res.err = s.dispatchBeginRemoveAllSharingLinks(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SharingLinksServerTransport) dispatchBeginBulkRemoveSharingLinks(req *http.Request) (*http.Response, error) {
	if s.srv.BeginBulkRemoveSharingLinks == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginBulkRemoveSharingLinks not implemented")}
	}
	beginBulkRemoveSharingLinks := s.beginBulkRemoveSharingLinks.get(req)
	if beginBulkRemoveSharingLinks == nil {
		body, err := server.UnmarshalRequestAsJSON[admin.BulkRemoveSharingLinksRequest](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginBulkRemoveSharingLinks(req.Context(), body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginBulkRemoveSharingLinks = &respr
		s.beginBulkRemoveSharingLinks.add(req, beginBulkRemoveSharingLinks)
	}

	resp, err := server.PollerResponderNext(beginBulkRemoveSharingLinks, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		s.beginBulkRemoveSharingLinks.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginBulkRemoveSharingLinks) {
		s.beginBulkRemoveSharingLinks.remove(req)
	}

	return resp, nil
}

func (s *SharingLinksServerTransport) dispatchBeginRemoveAllSharingLinks(req *http.Request) (*http.Response, error) {
	if s.srv.BeginRemoveAllSharingLinks == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginRemoveAllSharingLinks not implemented")}
	}
	beginRemoveAllSharingLinks := s.beginRemoveAllSharingLinks.get(req)
	if beginRemoveAllSharingLinks == nil {
		body, err := server.UnmarshalRequestAsJSON[admin.RemoveAllSharingLinksRequest](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginRemoveAllSharingLinks(req.Context(), body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginRemoveAllSharingLinks = &respr
		s.beginRemoveAllSharingLinks.add(req, beginRemoveAllSharingLinks)
	}

	resp, err := server.PollerResponderNext(beginRemoveAllSharingLinks, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		s.beginRemoveAllSharingLinks.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginRemoveAllSharingLinks) {
		s.beginRemoveAllSharingLinks.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to SharingLinksServerTransport
var sharingLinksServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
