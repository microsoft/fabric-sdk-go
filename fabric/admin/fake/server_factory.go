// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"errors"
	"fmt"
	"net/http"
	"strings"
	"sync"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// ServerFactory is a fake server for instances of the admin.ClientFactory type.
type ServerFactory struct {
	DomainsServer            DomainsServer
	ExternalDataSharesServer ExternalDataSharesServer
	ItemsServer              ItemsServer
	LabelsServer             LabelsServer
	TagsServer               TagsServer
	TenantsServer            TenantsServer
	UsersServer              UsersServer
	WorkspacesServer         WorkspacesServer
}

// ServerFactoryTransport connects instances of admin.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                        *ServerFactory
	trMu                       sync.Mutex
	trDomainsServer            *DomainsServerTransport
	trExternalDataSharesServer *ExternalDataSharesServerTransport
	trItemsServer              *ItemsServerTransport
	trLabelsServer             *LabelsServerTransport
	trTagsServer               *TagsServerTransport
	trTenantsServer            *TenantsServerTransport
	trUsersServer              *UsersServerTransport
	trWorkspacesServer         *WorkspacesServerTransport
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of admin.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	// client := method[:strings.Index(method, ".")]
	client := strings.Split(method, ".")[1]
	var resp *http.Response
	var err error

	switch client {
	case "DomainsClient":
		initServer(s, &s.trDomainsServer, func() *DomainsServerTransport { return NewDomainsServerTransport(&s.srv.DomainsServer) })
		resp, err = s.trDomainsServer.Do(req)
	case "ExternalDataSharesClient":
		initServer(s, &s.trExternalDataSharesServer, func() *ExternalDataSharesServerTransport {
			return NewExternalDataSharesServerTransport(&s.srv.ExternalDataSharesServer)
		})
		resp, err = s.trExternalDataSharesServer.Do(req)
	case "ItemsClient":
		initServer(s, &s.trItemsServer, func() *ItemsServerTransport { return NewItemsServerTransport(&s.srv.ItemsServer) })
		resp, err = s.trItemsServer.Do(req)
	case "LabelsClient":
		initServer(s, &s.trLabelsServer, func() *LabelsServerTransport { return NewLabelsServerTransport(&s.srv.LabelsServer) })
		resp, err = s.trLabelsServer.Do(req)
	case "TagsClient":
		initServer(s, &s.trTagsServer, func() *TagsServerTransport { return NewTagsServerTransport(&s.srv.TagsServer) })
		resp, err = s.trTagsServer.Do(req)
	case "TenantsClient":
		initServer(s, &s.trTenantsServer, func() *TenantsServerTransport { return NewTenantsServerTransport(&s.srv.TenantsServer) })
		resp, err = s.trTenantsServer.Do(req)
	case "UsersClient":
		initServer(s, &s.trUsersServer, func() *UsersServerTransport { return NewUsersServerTransport(&s.srv.UsersServer) })
		resp, err = s.trUsersServer.Do(req)
	case "WorkspacesClient":
		initServer(s, &s.trWorkspacesServer, func() *WorkspacesServerTransport { return NewWorkspacesServerTransport(&s.srv.WorkspacesServer) })
		resp, err = s.trWorkspacesServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
