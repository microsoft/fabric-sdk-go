// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package admin

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// DomainsClient contains the methods for the Domains group.
// Don't use this type directly, use a constructor function instead.
type DomainsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginAssignDomainWorkspacesByCapacities - Preexisting domain assignments will be overridden unless bulk reassignment is
// blocked by domain management tenant settings.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
// LIMITATIONS Maximum 10 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - domainID - The domain ID.
//   - assignDomainWorkspacesByCapacitiesRequest - The request payload for assigning workspaces to the domain by capacity.
//   - options - DomainsClientBeginAssignDomainWorkspacesByCapacitiesOptions contains the optional parameters for the DomainsClient.BeginAssignDomainWorkspacesByCapacities
//     method.
func (client *DomainsClient) BeginAssignDomainWorkspacesByCapacities(ctx context.Context, domainID string, assignDomainWorkspacesByCapacitiesRequest AssignDomainWorkspacesByCapacitiesRequest, options *DomainsClientBeginAssignDomainWorkspacesByCapacitiesOptions) (*runtime.Poller[DomainsClientAssignDomainWorkspacesByCapacitiesResponse], error) {
	return client.beginAssignDomainWorkspacesByCapacities(ctx, domainID, assignDomainWorkspacesByCapacitiesRequest, options)
}

// AssignDomainWorkspacesByCapacities - Preexisting domain assignments will be overridden unless bulk reassignment is blocked
// by domain management tenant settings.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
// LIMITATIONS Maximum 10 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *DomainsClient) assignDomainWorkspacesByCapacities(ctx context.Context, domainID string, assignDomainWorkspacesByCapacitiesRequest AssignDomainWorkspacesByCapacitiesRequest, options *DomainsClientBeginAssignDomainWorkspacesByCapacitiesOptions) (*http.Response, error) {
	var err error
	const operationName = "admin.DomainsClient.BeginAssignDomainWorkspacesByCapacities"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.assignDomainWorkspacesByCapacitiesCreateRequest(ctx, domainID, assignDomainWorkspacesByCapacitiesRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// assignDomainWorkspacesByCapacitiesCreateRequest creates the AssignDomainWorkspacesByCapacities request.
func (client *DomainsClient) assignDomainWorkspacesByCapacitiesCreateRequest(ctx context.Context, domainID string, assignDomainWorkspacesByCapacitiesRequest AssignDomainWorkspacesByCapacitiesRequest, _ *DomainsClientBeginAssignDomainWorkspacesByCapacitiesOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains/{domainId}/assignWorkspacesByCapacities"
	if domainID == "" {
		return nil, errors.New("parameter domainID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{domainId}", url.PathEscape(domainID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, assignDomainWorkspacesByCapacitiesRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// AssignDomainWorkspacesByIDs - Preexisting domain assignments will be overridden unless bulk reassignment is blocked by
// domain management tenant settings.
// PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
// LIMITATIONS Maximum 10 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - domainID - The domain ID.
//   - assignDomainWorkspacesByIDsRequest - The request payload for assigning workspaces to the domain by workspace ID.
//   - options - DomainsClientAssignDomainWorkspacesByIDsOptions contains the optional parameters for the DomainsClient.AssignDomainWorkspacesByIDs
//     method.
func (client *DomainsClient) AssignDomainWorkspacesByIDs(ctx context.Context, domainID string, assignDomainWorkspacesByIDsRequest AssignDomainWorkspacesByIDsRequest, options *DomainsClientAssignDomainWorkspacesByIDsOptions) (DomainsClientAssignDomainWorkspacesByIDsResponse, error) {
	var err error
	const operationName = "admin.DomainsClient.AssignDomainWorkspacesByIDs"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.assignDomainWorkspacesByIDsCreateRequest(ctx, domainID, assignDomainWorkspacesByIDsRequest, options)
	if err != nil {
		return DomainsClientAssignDomainWorkspacesByIDsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DomainsClientAssignDomainWorkspacesByIDsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return DomainsClientAssignDomainWorkspacesByIDsResponse{}, err
	}
	return DomainsClientAssignDomainWorkspacesByIDsResponse{}, nil
}

// assignDomainWorkspacesByIDsCreateRequest creates the AssignDomainWorkspacesByIDs request.
func (client *DomainsClient) assignDomainWorkspacesByIDsCreateRequest(ctx context.Context, domainID string, assignDomainWorkspacesByIDsRequest AssignDomainWorkspacesByIDsRequest, _ *DomainsClientAssignDomainWorkspacesByIDsOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains/{domainId}/assignWorkspaces"
	if domainID == "" {
		return nil, errors.New("parameter domainID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{domainId}", url.PathEscape(domainID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, assignDomainWorkspacesByIDsRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginAssignDomainWorkspacesByPrincipals - Preexisting domain assignments will be overridden unless bulk reassignment is
// blocked by domain management tenant settings.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
// LIMITATIONS Maximum 10 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - domainID - The domain ID.
//   - assignDomainWorkspacesByPrincipalsRequest - The request payload for assigning workspaces to the domain by principal.
//   - options - DomainsClientBeginAssignDomainWorkspacesByPrincipalsOptions contains the optional parameters for the DomainsClient.BeginAssignDomainWorkspacesByPrincipals
//     method.
func (client *DomainsClient) BeginAssignDomainWorkspacesByPrincipals(ctx context.Context, domainID string, assignDomainWorkspacesByPrincipalsRequest AssignDomainWorkspacesByPrincipalsRequest, options *DomainsClientBeginAssignDomainWorkspacesByPrincipalsOptions) (*runtime.Poller[DomainsClientAssignDomainWorkspacesByPrincipalsResponse], error) {
	return client.beginAssignDomainWorkspacesByPrincipals(ctx, domainID, assignDomainWorkspacesByPrincipalsRequest, options)
}

// AssignDomainWorkspacesByPrincipals - Preexisting domain assignments will be overridden unless bulk reassignment is blocked
// by domain management tenant settings.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
// LIMITATIONS Maximum 10 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *DomainsClient) assignDomainWorkspacesByPrincipals(ctx context.Context, domainID string, assignDomainWorkspacesByPrincipalsRequest AssignDomainWorkspacesByPrincipalsRequest, options *DomainsClientBeginAssignDomainWorkspacesByPrincipalsOptions) (*http.Response, error) {
	var err error
	const operationName = "admin.DomainsClient.BeginAssignDomainWorkspacesByPrincipals"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.assignDomainWorkspacesByPrincipalsCreateRequest(ctx, domainID, assignDomainWorkspacesByPrincipalsRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// assignDomainWorkspacesByPrincipalsCreateRequest creates the AssignDomainWorkspacesByPrincipals request.
func (client *DomainsClient) assignDomainWorkspacesByPrincipalsCreateRequest(ctx context.Context, domainID string, assignDomainWorkspacesByPrincipalsRequest AssignDomainWorkspacesByPrincipalsRequest, _ *DomainsClientBeginAssignDomainWorkspacesByPrincipalsOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains/{domainId}/assignWorkspacesByPrincipals"
	if domainID == "" {
		return nil, errors.New("parameter domainID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{domainId}", url.PathEscape(domainID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, assignDomainWorkspacesByPrincipalsRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// CreateDomain - PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
// LIMITATIONS Maximum 25 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - createDomainRequest - The request payload for creating the domain.
//   - options - DomainsClientCreateDomainOptions contains the optional parameters for the DomainsClient.CreateDomain method.
func (client *DomainsClient) CreateDomain(ctx context.Context, createDomainRequest CreateDomainRequest, options *DomainsClientCreateDomainOptions) (DomainsClientCreateDomainResponse, error) {
	var err error
	const operationName = "admin.DomainsClient.CreateDomain"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createDomainCreateRequest(ctx, createDomainRequest, options)
	if err != nil {
		return DomainsClientCreateDomainResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DomainsClientCreateDomainResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = core.NewResponseError(httpResp)
		return DomainsClientCreateDomainResponse{}, err
	}
	resp, err := client.createDomainHandleResponse(httpResp)
	return resp, err
}

// createDomainCreateRequest creates the CreateDomain request.
func (client *DomainsClient) createDomainCreateRequest(ctx context.Context, createDomainRequest CreateDomainRequest, _ *DomainsClientCreateDomainOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createDomainRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// createDomainHandleResponse handles the CreateDomain response.
func (client *DomainsClient) createDomainHandleResponse(resp *http.Response) (DomainsClientCreateDomainResponse, error) {
	result := DomainsClientCreateDomainResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Domain); err != nil {
		return DomainsClientCreateDomainResponse{}, err
	}
	return result, nil
}

// DeleteDomain - PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
// LIMITATIONS Maximum 25 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - domainID - The domain ID.
//   - options - DomainsClientDeleteDomainOptions contains the optional parameters for the DomainsClient.DeleteDomain method.
func (client *DomainsClient) DeleteDomain(ctx context.Context, domainID string, options *DomainsClientDeleteDomainOptions) (DomainsClientDeleteDomainResponse, error) {
	var err error
	const operationName = "admin.DomainsClient.DeleteDomain"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteDomainCreateRequest(ctx, domainID, options)
	if err != nil {
		return DomainsClientDeleteDomainResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DomainsClientDeleteDomainResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return DomainsClientDeleteDomainResponse{}, err
	}
	return DomainsClientDeleteDomainResponse{}, nil
}

// deleteDomainCreateRequest creates the DeleteDomain request.
func (client *DomainsClient) deleteDomainCreateRequest(ctx context.Context, domainID string, _ *DomainsClientDeleteDomainOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains/{domainId}"
	if domainID == "" {
		return nil, errors.New("parameter domainID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{domainId}", url.PathEscape(domainID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetDomain - PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.Read.All or Tenant.ReadWrite.All.
// LIMITATIONS Maximum 25 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - domainID - The domain ID.
//   - options - DomainsClientGetDomainOptions contains the optional parameters for the DomainsClient.GetDomain method.
func (client *DomainsClient) GetDomain(ctx context.Context, domainID string, options *DomainsClientGetDomainOptions) (DomainsClientGetDomainResponse, error) {
	var err error
	const operationName = "admin.DomainsClient.GetDomain"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDomainCreateRequest(ctx, domainID, options)
	if err != nil {
		return DomainsClientGetDomainResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DomainsClientGetDomainResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return DomainsClientGetDomainResponse{}, err
	}
	resp, err := client.getDomainHandleResponse(httpResp)
	return resp, err
}

// getDomainCreateRequest creates the GetDomain request.
func (client *DomainsClient) getDomainCreateRequest(ctx context.Context, domainID string, _ *DomainsClientGetDomainOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains/{domainId}"
	if domainID == "" {
		return nil, errors.New("parameter domainID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{domainId}", url.PathEscape(domainID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDomainHandleResponse handles the GetDomain response.
func (client *DomainsClient) getDomainHandleResponse(resp *http.Response) (DomainsClientGetDomainResponse, error) {
	result := DomainsClientGetDomainResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Domain); err != nil {
		return DomainsClientGetDomainResponse{}, err
	}
	return result, nil
}

// NewListDomainWorkspacesPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.Read.All or Tenant.ReadWrite.All.
// LIMITATIONS Maximum 25 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - domainID - The domain ID.
//   - options - DomainsClientListDomainWorkspacesOptions contains the optional parameters for the DomainsClient.NewListDomainWorkspacesPager
//     method.
func (client *DomainsClient) NewListDomainWorkspacesPager(domainID string, options *DomainsClientListDomainWorkspacesOptions) *runtime.Pager[DomainsClientListDomainWorkspacesResponse] {
	return runtime.NewPager(runtime.PagingHandler[DomainsClientListDomainWorkspacesResponse]{
		More: func(page DomainsClientListDomainWorkspacesResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *DomainsClientListDomainWorkspacesResponse) (DomainsClientListDomainWorkspacesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "admin.DomainsClient.NewListDomainWorkspacesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listDomainWorkspacesCreateRequest(ctx, domainID, options)
			}, nil)
			if err != nil {
				return DomainsClientListDomainWorkspacesResponse{}, err
			}
			return client.listDomainWorkspacesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listDomainWorkspacesCreateRequest creates the ListDomainWorkspaces request.
func (client *DomainsClient) listDomainWorkspacesCreateRequest(ctx context.Context, domainID string, options *DomainsClientListDomainWorkspacesOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains/{domainId}/workspaces"
	if domainID == "" {
		return nil, errors.New("parameter domainID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{domainId}", url.PathEscape(domainID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listDomainWorkspacesHandleResponse handles the ListDomainWorkspaces response.
func (client *DomainsClient) listDomainWorkspacesHandleResponse(resp *http.Response) (DomainsClientListDomainWorkspacesResponse, error) {
	result := DomainsClientListDomainWorkspacesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DomainWorkspaces); err != nil {
		return DomainsClientListDomainWorkspacesResponse{}, err
	}
	return result, nil
}

// ListDomains - PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.Read.All or Tenant.ReadWrite.All.
// LIMITATIONS Maximum 25 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - options - DomainsClientListDomainsOptions contains the optional parameters for the DomainsClient.ListDomains method.
func (client *DomainsClient) ListDomains(ctx context.Context, options *DomainsClientListDomainsOptions) (DomainsClientListDomainsResponse, error) {
	var err error
	const operationName = "admin.DomainsClient.ListDomains"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listDomainsCreateRequest(ctx, options)
	if err != nil {
		return DomainsClientListDomainsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DomainsClientListDomainsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return DomainsClientListDomainsResponse{}, err
	}
	resp, err := client.listDomainsHandleResponse(httpResp)
	return resp, err
}

// listDomainsCreateRequest creates the ListDomains request.
func (client *DomainsClient) listDomainsCreateRequest(ctx context.Context, options *DomainsClientListDomainsOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.NonEmptyOnly != nil {
		reqQP.Set("nonEmptyOnly", strconv.FormatBool(*options.NonEmptyOnly))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listDomainsHandleResponse handles the ListDomains response.
func (client *DomainsClient) listDomainsHandleResponse(resp *http.Response) (DomainsClientListDomainsResponse, error) {
	result := DomainsClientListDomainsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DomainsResponse); err != nil {
		return DomainsClientListDomainsResponse{}, err
	}
	return result, nil
}

// RoleAssignmentsBulkAssign - PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
// LIMITATIONS Maximum 25 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - domainID - The domain ID.
//   - domainRoleAssignmentRequest - The request payload for assigning domain members to the domain by principal.
//   - options - DomainsClientRoleAssignmentsBulkAssignOptions contains the optional parameters for the DomainsClient.RoleAssignmentsBulkAssign
//     method.
func (client *DomainsClient) RoleAssignmentsBulkAssign(ctx context.Context, domainID string, domainRoleAssignmentRequest DomainRoleAssignmentRequest, options *DomainsClientRoleAssignmentsBulkAssignOptions) (DomainsClientRoleAssignmentsBulkAssignResponse, error) {
	var err error
	const operationName = "admin.DomainsClient.RoleAssignmentsBulkAssign"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.roleAssignmentsBulkAssignCreateRequest(ctx, domainID, domainRoleAssignmentRequest, options)
	if err != nil {
		return DomainsClientRoleAssignmentsBulkAssignResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DomainsClientRoleAssignmentsBulkAssignResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return DomainsClientRoleAssignmentsBulkAssignResponse{}, err
	}
	return DomainsClientRoleAssignmentsBulkAssignResponse{}, nil
}

// roleAssignmentsBulkAssignCreateRequest creates the RoleAssignmentsBulkAssign request.
func (client *DomainsClient) roleAssignmentsBulkAssignCreateRequest(ctx context.Context, domainID string, domainRoleAssignmentRequest DomainRoleAssignmentRequest, _ *DomainsClientRoleAssignmentsBulkAssignOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains/{domainId}/roleAssignments/bulkAssign"
	if domainID == "" {
		return nil, errors.New("parameter domainID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{domainId}", url.PathEscape(domainID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, domainRoleAssignmentRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// RoleAssignmentsBulkUnassign - PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
// LIMITATIONS Maximum 25 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - domainID - The domain ID.
//   - domainRoleUnassignmentRequest - The request payload for unassigning domain members from the domain by principal.
//   - options - DomainsClientRoleAssignmentsBulkUnassignOptions contains the optional parameters for the DomainsClient.RoleAssignmentsBulkUnassign
//     method.
func (client *DomainsClient) RoleAssignmentsBulkUnassign(ctx context.Context, domainID string, domainRoleUnassignmentRequest DomainRoleUnassignmentRequest, options *DomainsClientRoleAssignmentsBulkUnassignOptions) (DomainsClientRoleAssignmentsBulkUnassignResponse, error) {
	var err error
	const operationName = "admin.DomainsClient.RoleAssignmentsBulkUnassign"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.roleAssignmentsBulkUnassignCreateRequest(ctx, domainID, domainRoleUnassignmentRequest, options)
	if err != nil {
		return DomainsClientRoleAssignmentsBulkUnassignResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DomainsClientRoleAssignmentsBulkUnassignResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return DomainsClientRoleAssignmentsBulkUnassignResponse{}, err
	}
	return DomainsClientRoleAssignmentsBulkUnassignResponse{}, nil
}

// roleAssignmentsBulkUnassignCreateRequest creates the RoleAssignmentsBulkUnassign request.
func (client *DomainsClient) roleAssignmentsBulkUnassignCreateRequest(ctx context.Context, domainID string, domainRoleUnassignmentRequest DomainRoleUnassignmentRequest, _ *DomainsClientRoleAssignmentsBulkUnassignOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains/{domainId}/roleAssignments/bulkUnassign"
	if domainID == "" {
		return nil, errors.New("parameter domainID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{domainId}", url.PathEscape(domainID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, domainRoleUnassignmentRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// UnassignAllDomainWorkspaces - PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
// LIMITATIONS Maximum 10 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - domainID - The domain ID.
//   - options - DomainsClientUnassignAllDomainWorkspacesOptions contains the optional parameters for the DomainsClient.UnassignAllDomainWorkspaces
//     method.
func (client *DomainsClient) UnassignAllDomainWorkspaces(ctx context.Context, domainID string, options *DomainsClientUnassignAllDomainWorkspacesOptions) (DomainsClientUnassignAllDomainWorkspacesResponse, error) {
	var err error
	const operationName = "admin.DomainsClient.UnassignAllDomainWorkspaces"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.unassignAllDomainWorkspacesCreateRequest(ctx, domainID, options)
	if err != nil {
		return DomainsClientUnassignAllDomainWorkspacesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DomainsClientUnassignAllDomainWorkspacesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return DomainsClientUnassignAllDomainWorkspacesResponse{}, err
	}
	return DomainsClientUnassignAllDomainWorkspacesResponse{}, nil
}

// unassignAllDomainWorkspacesCreateRequest creates the UnassignAllDomainWorkspaces request.
func (client *DomainsClient) unassignAllDomainWorkspacesCreateRequest(ctx context.Context, domainID string, _ *DomainsClientUnassignAllDomainWorkspacesOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains/{domainId}/unassignAllWorkspaces"
	if domainID == "" {
		return nil, errors.New("parameter domainID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{domainId}", url.PathEscape(domainID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// UnassignDomainWorkspacesByIDs - PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
// LIMITATIONS Maximum 25 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - domainID - The domain ID.
//   - options - DomainsClientUnassignDomainWorkspacesByIDsOptions contains the optional parameters for the DomainsClient.UnassignDomainWorkspacesByIDs
//     method.
func (client *DomainsClient) UnassignDomainWorkspacesByIDs(ctx context.Context, domainID string, options *DomainsClientUnassignDomainWorkspacesByIDsOptions) (DomainsClientUnassignDomainWorkspacesByIDsResponse, error) {
	var err error
	const operationName = "admin.DomainsClient.UnassignDomainWorkspacesByIDs"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.unassignDomainWorkspacesByIDsCreateRequest(ctx, domainID, options)
	if err != nil {
		return DomainsClientUnassignDomainWorkspacesByIDsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DomainsClientUnassignDomainWorkspacesByIDsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return DomainsClientUnassignDomainWorkspacesByIDsResponse{}, err
	}
	return DomainsClientUnassignDomainWorkspacesByIDsResponse{}, nil
}

// unassignDomainWorkspacesByIDsCreateRequest creates the UnassignDomainWorkspacesByIDs request.
func (client *DomainsClient) unassignDomainWorkspacesByIDsCreateRequest(ctx context.Context, domainID string, options *DomainsClientUnassignDomainWorkspacesByIDsOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains/{domainId}/unassignWorkspaces"
	if domainID == "" {
		return nil, errors.New("parameter domainID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{domainId}", url.PathEscape(domainID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.UnassignDomainWorkspacesByIDsRequest != nil {
		if err := runtime.MarshalAsJSON(req, *options.UnassignDomainWorkspacesByIDsRequest); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// UpdateDomain - PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
// LIMITATIONS Maximum 25 requests per one minute per principal.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - domainID - The domain ID.
//   - updateDomainRequest - The request payload for updating the domain.
//   - options - DomainsClientUpdateDomainOptions contains the optional parameters for the DomainsClient.UpdateDomain method.
func (client *DomainsClient) UpdateDomain(ctx context.Context, domainID string, updateDomainRequest UpdateDomainRequest, options *DomainsClientUpdateDomainOptions) (DomainsClientUpdateDomainResponse, error) {
	var err error
	const operationName = "admin.DomainsClient.UpdateDomain"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateDomainCreateRequest(ctx, domainID, updateDomainRequest, options)
	if err != nil {
		return DomainsClientUpdateDomainResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DomainsClientUpdateDomainResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return DomainsClientUpdateDomainResponse{}, err
	}
	resp, err := client.updateDomainHandleResponse(httpResp)
	return resp, err
}

// updateDomainCreateRequest creates the UpdateDomain request.
func (client *DomainsClient) updateDomainCreateRequest(ctx context.Context, domainID string, updateDomainRequest UpdateDomainRequest, _ *DomainsClientUpdateDomainOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/domains/{domainId}"
	if domainID == "" {
		return nil, errors.New("parameter domainID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{domainId}", url.PathEscape(domainID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateDomainRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateDomainHandleResponse handles the UpdateDomain response.
func (client *DomainsClient) updateDomainHandleResponse(resp *http.Response) (DomainsClientUpdateDomainResponse, error) {
	result := DomainsClientUpdateDomainResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Domain); err != nil {
		return DomainsClientUpdateDomainResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// AssignDomainWorkspacesByCapacities - returns DomainsClientAssignDomainWorkspacesByCapacitiesResponse in sync mode.
// Preexisting domain assignments will be overridden unless bulk reassignment is blocked by domain management tenant settings.
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS The caller must be a Fabric administrator.
//
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
//
// LIMITATIONS Maximum 10 requests per one minute per principal.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - domainID - The domain ID.
//   - assignDomainWorkspacesByCapacitiesRequest - The request payload for assigning workspaces to the domain by capacity.
//   - options - DomainsClientBeginAssignDomainWorkspacesByCapacitiesOptions contains the optional parameters for the DomainsClient.BeginAssignDomainWorkspacesByCapacities method.
func (client *DomainsClient) AssignDomainWorkspacesByCapacities(ctx context.Context, domainID string, assignDomainWorkspacesByCapacitiesRequest AssignDomainWorkspacesByCapacitiesRequest, options *DomainsClientBeginAssignDomainWorkspacesByCapacitiesOptions) (DomainsClientAssignDomainWorkspacesByCapacitiesResponse, error) {
	result, err := iruntime.NewLRO(client.BeginAssignDomainWorkspacesByCapacities(ctx, domainID, assignDomainWorkspacesByCapacitiesRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return DomainsClientAssignDomainWorkspacesByCapacitiesResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return DomainsClientAssignDomainWorkspacesByCapacitiesResponse{}, err
	}
	return result, err
}

// beginAssignDomainWorkspacesByCapacities creates the assignDomainWorkspacesByCapacities request.
func (client *DomainsClient) beginAssignDomainWorkspacesByCapacities(ctx context.Context, domainID string, assignDomainWorkspacesByCapacitiesRequest AssignDomainWorkspacesByCapacitiesRequest, options *DomainsClientBeginAssignDomainWorkspacesByCapacitiesOptions) (*runtime.Poller[DomainsClientAssignDomainWorkspacesByCapacitiesResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.assignDomainWorkspacesByCapacities(ctx, domainID, assignDomainWorkspacesByCapacitiesRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[DomainsClientAssignDomainWorkspacesByCapacitiesResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DomainsClientAssignDomainWorkspacesByCapacitiesResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[DomainsClientAssignDomainWorkspacesByCapacitiesResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DomainsClientAssignDomainWorkspacesByCapacitiesResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// AssignDomainWorkspacesByPrincipals - returns DomainsClientAssignDomainWorkspacesByPrincipalsResponse in sync mode.
// Preexisting domain assignments will be overridden unless bulk reassignment is blocked by domain management tenant settings.
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS The caller must be a Fabric administrator.
//
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All.
//
// LIMITATIONS Maximum 10 requests per one minute per principal.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - domainID - The domain ID.
//   - assignDomainWorkspacesByPrincipalsRequest - The request payload for assigning workspaces to the domain by principal.
//   - options - DomainsClientBeginAssignDomainWorkspacesByPrincipalsOptions contains the optional parameters for the DomainsClient.BeginAssignDomainWorkspacesByPrincipals method.
func (client *DomainsClient) AssignDomainWorkspacesByPrincipals(ctx context.Context, domainID string, assignDomainWorkspacesByPrincipalsRequest AssignDomainWorkspacesByPrincipalsRequest, options *DomainsClientBeginAssignDomainWorkspacesByPrincipalsOptions) (DomainsClientAssignDomainWorkspacesByPrincipalsResponse, error) {
	result, err := iruntime.NewLRO(client.BeginAssignDomainWorkspacesByPrincipals(ctx, domainID, assignDomainWorkspacesByPrincipalsRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return DomainsClientAssignDomainWorkspacesByPrincipalsResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return DomainsClientAssignDomainWorkspacesByPrincipalsResponse{}, err
	}
	return result, err
}

// beginAssignDomainWorkspacesByPrincipals creates the assignDomainWorkspacesByPrincipals request.
func (client *DomainsClient) beginAssignDomainWorkspacesByPrincipals(ctx context.Context, domainID string, assignDomainWorkspacesByPrincipalsRequest AssignDomainWorkspacesByPrincipalsRequest, options *DomainsClientBeginAssignDomainWorkspacesByPrincipalsOptions) (*runtime.Poller[DomainsClientAssignDomainWorkspacesByPrincipalsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.assignDomainWorkspacesByPrincipals(ctx, domainID, assignDomainWorkspacesByPrincipalsRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[DomainsClientAssignDomainWorkspacesByPrincipalsResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DomainsClientAssignDomainWorkspacesByPrincipalsResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[DomainsClientAssignDomainWorkspacesByPrincipalsResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DomainsClientAssignDomainWorkspacesByPrincipalsResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListDomainWorkspaces - returns array of DomainWorkspace from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must be a Fabric administrator.
//
// REQUIRED DELEGATED SCOPES Tenant.Read.All or Tenant.ReadWrite.All.
//
// LIMITATIONS Maximum 25 requests per one minute per principal.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - domainID - The domain ID.
//   - options - DomainsClientListDomainWorkspacesOptions contains the optional parameters for the DomainsClient.NewListDomainWorkspacesPager method.
func (client *DomainsClient) ListDomainWorkspaces(ctx context.Context, domainID string, options *DomainsClientListDomainWorkspacesOptions) ([]DomainWorkspace, error) {
	pager := client.NewListDomainWorkspacesPager(domainID, options)
	mapper := func(resp DomainsClientListDomainWorkspacesResponse) []DomainWorkspace {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []DomainWorkspace{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []DomainWorkspace{}, err
	}
	return list, nil
}
