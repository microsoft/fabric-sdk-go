// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package admin

import (
	"context"
	"net/http"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// LabelsClient contains the methods for the Labels group.
// Don't use this type directly, use a constructor function instead.
type LabelsClient struct {
	internal *azcore.Client
	endpoint string
}

// BulkRemoveLabels - For a usage example, see Set or remove sensitivity labels [/power-bi/admin/service-security-sensitivity-label-inheritance-set-remove-api].
// PERMISSIONS
// * The user must be a Fabric Administrator.
// * The admin user must have sufficient usage rights [/azure/information-protection/configure-usage-rights] to delete labels.
// REQUIRED SCOPE Tenant.ReadWrite.All
// LIMITATIONS
// * Maximum 25 requests per hour.
// * Each request can update up to 2,000 Fabric items.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - removeLabelsRequest - A list of items.
//   - options - LabelsClientBulkRemoveLabelsOptions contains the optional parameters for the LabelsClient.BulkRemoveLabels method.
func (client *LabelsClient) BulkRemoveLabels(ctx context.Context, removeLabelsRequest RemoveLabelsRequest, options *LabelsClientBulkRemoveLabelsOptions) (LabelsClientBulkRemoveLabelsResponse, error) {
	var err error
	const operationName = "admin.LabelsClient.BulkRemoveLabels"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.bulkRemoveLabelsCreateRequest(ctx, removeLabelsRequest, options)
	if err != nil {
		return LabelsClientBulkRemoveLabelsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LabelsClientBulkRemoveLabelsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return LabelsClientBulkRemoveLabelsResponse{}, err
	}
	resp, err := client.bulkRemoveLabelsHandleResponse(httpResp)
	return resp, err
}

// bulkRemoveLabelsCreateRequest creates the BulkRemoveLabels request.
func (client *LabelsClient) bulkRemoveLabelsCreateRequest(ctx context.Context, removeLabelsRequest RemoveLabelsRequest, options *LabelsClientBulkRemoveLabelsOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/items/bulkRemoveLabels"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, removeLabelsRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// bulkRemoveLabelsHandleResponse handles the BulkRemoveLabels response.
func (client *LabelsClient) bulkRemoveLabelsHandleResponse(resp *http.Response) (LabelsClientBulkRemoveLabelsResponse, error) {
	result := LabelsClientBulkRemoveLabelsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ItemsChangeLabelResponse); err != nil {
		return LabelsClientBulkRemoveLabelsResponse{}, err
	}
	return result, nil
}

// BulkSetLabels - To set a sensitivity label using this API the admin user or the delegated user, if provided, must have
// the label included in their label policy [/purview/create-sensitivity-labels?view=o365-worldwide]
// . For a usage example see: Set or remove sensitivity labels [/power-bi/admin/service-security-sensitivity-label-inheritance-set-remove-api].
// PERMISSIONS
// * The user must be a Fabric Administrator.
// * The admin user and the delegated user, if provided, must have sufficient usage rights [/azure/information-protection/configure-usage-rights]
// to set labels.
// REQUIRED SCOPE Tenant.ReadWrite.All
// LIMITATIONS
// * Maximum 25 requests per hour.
// * Each request can update up to 2,000 Fabric items.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - setLabelsRequest - Set label details.
//   - options - LabelsClientBulkSetLabelsOptions contains the optional parameters for the LabelsClient.BulkSetLabels method.
func (client *LabelsClient) BulkSetLabels(ctx context.Context, setLabelsRequest SetLabelsRequest, options *LabelsClientBulkSetLabelsOptions) (LabelsClientBulkSetLabelsResponse, error) {
	var err error
	const operationName = "admin.LabelsClient.BulkSetLabels"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.bulkSetLabelsCreateRequest(ctx, setLabelsRequest, options)
	if err != nil {
		return LabelsClientBulkSetLabelsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LabelsClientBulkSetLabelsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return LabelsClientBulkSetLabelsResponse{}, err
	}
	resp, err := client.bulkSetLabelsHandleResponse(httpResp)
	return resp, err
}

// bulkSetLabelsCreateRequest creates the BulkSetLabels request.
func (client *LabelsClient) bulkSetLabelsCreateRequest(ctx context.Context, setLabelsRequest SetLabelsRequest, options *LabelsClientBulkSetLabelsOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/items/bulkSetLabels"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, setLabelsRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// bulkSetLabelsHandleResponse handles the BulkSetLabels response.
func (client *LabelsClient) bulkSetLabelsHandleResponse(resp *http.Response) (LabelsClientBulkSetLabelsResponse, error) {
	result := LabelsClientBulkSetLabelsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ItemsChangeLabelResponse); err != nil {
		return LabelsClientBulkSetLabelsResponse{}, err
	}
	return result, nil
}

// Custom code starts below
