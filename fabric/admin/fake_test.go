// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package admin_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"
	"time"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/admin"
	"github.com/microsoft/fabric-sdk-go/fabric/admin/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *admin.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = admin.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestTenants_ListTenantSettings() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List tenant settings example"},
	})

	exampleRes := admin.TenantSettings{
		Value: []admin.TenantSetting{
			{
				CanSpecifySecurityGroups: to.Ptr(true),
				Enabled:                  to.Ptr(true),
				SettingName:              to.Ptr("AdminApisIncludeDetailedMetadata"),
				TenantSettingGroup:       to.Ptr("AdminApiSettings"),
				Title:                    to.Ptr("Enhance admin APIs responses with detailed metadata"),
			},
			{
				CanSpecifySecurityGroups: to.Ptr(true),
				Enabled:                  to.Ptr(true),
				EnabledSecurityGroups: []admin.TenantSettingSecurityGroup{
					{
						Name:    to.Ptr("TestComputeCdsa"),
						GraphID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2f0"),
					},
					{
						Name:    to.Ptr("TestComputeGroup2"),
						GraphID: to.Ptr("1fecf19f-6e33-41b3-89fa-de8c821f3b79"),
					},
					{
						Name:    to.Ptr("TestCertifiers"),
						GraphID: to.Ptr("64bc10f1-1f1b-4a7e-b7a0-c87d89cba2b4"),
					}},
				SettingName:        to.Ptr("DatamartTenant"),
				TenantSettingGroup: to.Ptr("DatamartSettings"),
				Title:              to.Ptr("Create Datamarts (Preview)"),
			},
			{
				CanSpecifySecurityGroups: to.Ptr(true),
				Enabled:                  to.Ptr(true),
				SettingName:              to.Ptr("CertifyDatasets"),
				TenantSettingGroup:       to.Ptr("ExportAndSharing"),
				Title:                    to.Ptr("Certification"),
			}},
	}

	testsuite.serverFactory.TenantsServer.NewListTenantSettingsPager = func(options *admin.TenantsClientListTenantSettingsOptions) (resp azfake.PagerResponder[admin.TenantsClientListTenantSettingsResponse]) {
		resp = azfake.PagerResponder[admin.TenantsClientListTenantSettingsResponse]{}
		resp.AddPage(http.StatusOK, admin.TenantsClientListTenantSettingsResponse{TenantSettings: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewTenantsClient()
	pager := client.NewListTenantSettingsPager(&admin.TenantsClientListTenantSettingsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.TenantSettings))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestTenants_UpdateTenantSetting() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update tenant setting example"},
	})
	var exampleTenantSettingName string
	var exampleUpdateTenantSettingRequest admin.UpdateTenantSettingRequest
	exampleTenantSettingName = "PublishToWeb"
	exampleUpdateTenantSettingRequest = admin.UpdateTenantSettingRequest{
		Enabled: to.Ptr(true),
		EnabledSecurityGroups: []admin.TenantSettingSecurityGroup{
			{
				Name:    to.Ptr("TestComputeCdsa"),
				GraphID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2f0"),
			}},
		Properties: []admin.TenantSettingProperty{
			{
				Name:  to.Ptr("CreateP2w"),
				Type:  to.Ptr(admin.TenantSettingPropertyTypeBoolean),
				Value: to.Ptr("true"),
			}},
	}

	exampleRes := admin.UpdateTenantSettingResponse{
		TenantSettings: []admin.TenantSetting{
			{
				CanSpecifySecurityGroups: to.Ptr(true),
				Enabled:                  to.Ptr(true),
				EnabledSecurityGroups: []admin.TenantSettingSecurityGroup{
					{
						Name:    to.Ptr("TestComputeCdsa"),
						GraphID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2f0"),
					}},
				Properties: []admin.TenantSettingProperty{
					{
						Name:  to.Ptr("CreateP2w"),
						Type:  to.Ptr(admin.TenantSettingPropertyTypeBoolean),
						Value: to.Ptr("true"),
					}},
				SettingName:        to.Ptr("PublishToWeb"),
				TenantSettingGroup: to.Ptr("TestSetting"),
				Title:              to.Ptr("Sample test tenant setting"),
			}},
	}

	testsuite.serverFactory.TenantsServer.UpdateTenantSetting = func(ctx context.Context, tenantSettingName string, updateTenantSettingRequest admin.UpdateTenantSettingRequest, options *admin.TenantsClientUpdateTenantSettingOptions) (resp azfake.Responder[admin.TenantsClientUpdateTenantSettingResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleTenantSettingName, tenantSettingName)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateTenantSettingRequest, updateTenantSettingRequest))
		resp = azfake.Responder[admin.TenantsClientUpdateTenantSettingResponse]{}
		resp.SetResponse(http.StatusOK, admin.TenantsClientUpdateTenantSettingResponse{UpdateTenantSettingResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewTenantsClient()
	res, err := client.UpdateTenantSetting(ctx, exampleTenantSettingName, exampleUpdateTenantSettingRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.UpdateTenantSettingResponse))
}

func (testsuite *FakeTestSuite) TestTenants_ListCapacitiesTenantSettingsOverrides() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List capacities tenant settings overrides example"},
	})

	exampleRes := admin.CapacityTenantSettingOverrides{
		ContinuationToken: to.Ptr("MSwxMDAwMCww"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/admin/capacities/delegatedTenantSettingOverrides?continuationToken=MSwxMDAwMCww"),
		Value: []admin.CapacityTenantSettingOverride{
			{
				ID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2ef"),
				TenantSettings: []admin.CapacityTenantSetting{
					{
						CanSpecifySecurityGroups: to.Ptr(true),
						Enabled:                  to.Ptr(true),
						EnabledSecurityGroups: []admin.TenantSettingSecurityGroup{
							{
								Name:    to.Ptr("TestComputeCdsa"),
								GraphID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2f0"),
							},
							{
								Name:    to.Ptr("TestComputeGroup2"),
								GraphID: to.Ptr("1fecf19f-6e33-41b3-89fa-de8c821f3b79"),
							},
							{
								Name:    to.Ptr("TestCertifiers"),
								GraphID: to.Ptr("64bc10f1-1f1b-4a7e-b7a0-c87d89cba2b4"),
							}},
						Properties: []admin.TenantSettingProperty{
							{
								Name:  to.Ptr("testIntProp"),
								Type:  to.Ptr(admin.TenantSettingPropertyTypeInteger),
								Value: to.Ptr("5"),
							}},
						SettingName:         to.Ptr("TenantSettingForCapacityDelegatedSwitch"),
						TenantSettingGroup:  to.Ptr("Delegation testing"),
						Title:               to.Ptr("Capacity delegation test settings"),
						DelegateToWorkspace: to.Ptr(false),
						DelegatedFrom:       to.Ptr(admin.DelegatedFromTenant),
					}},
			}},
	}

	testsuite.serverFactory.TenantsServer.NewListCapacitiesTenantSettingsOverridesPager = func(options *admin.TenantsClientListCapacitiesTenantSettingsOverridesOptions) (resp azfake.PagerResponder[admin.TenantsClientListCapacitiesTenantSettingsOverridesResponse]) {
		resp = azfake.PagerResponder[admin.TenantsClientListCapacitiesTenantSettingsOverridesResponse]{}
		resp.AddPage(http.StatusOK, admin.TenantsClientListCapacitiesTenantSettingsOverridesResponse{CapacityTenantSettingOverrides: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewTenantsClient()
	pager := client.NewListCapacitiesTenantSettingsOverridesPager(&admin.TenantsClientListCapacitiesTenantSettingsOverridesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CapacityTenantSettingOverrides))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestTenants_DeleteCapacityTenantSettingOverride() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update capacity tenant setting override example"},
	})
	var exampleCapacityID string
	var exampleTenantSettingName string
	exampleCapacityID = "f51b705f-a409-4d40-9197-c5d5f349e2ef"
	exampleTenantSettingName = "TenantSettingForCapacityDelegatedSwitch"

	testsuite.serverFactory.TenantsServer.DeleteCapacityTenantSettingOverride = func(ctx context.Context, capacityID string, tenantSettingName string, options *admin.TenantsClientDeleteCapacityTenantSettingOverrideOptions) (resp azfake.Responder[admin.TenantsClientDeleteCapacityTenantSettingOverrideResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleCapacityID, capacityID)
		testsuite.Require().Equal(exampleTenantSettingName, tenantSettingName)
		resp = azfake.Responder[admin.TenantsClientDeleteCapacityTenantSettingOverrideResponse]{}
		resp.SetResponse(http.StatusOK, admin.TenantsClientDeleteCapacityTenantSettingOverrideResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewTenantsClient()
	_, err = client.DeleteCapacityTenantSettingOverride(ctx, exampleCapacityID, exampleTenantSettingName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestTenants_UpdateCapacityTenantSettingOverride() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update capacity tenant setting override example"},
	})
	var exampleCapacityID string
	var exampleTenantSettingName string
	var exampleUpdateTenantSettingOverrideRequest admin.UpdateCapacityTenantSettingOverrideRequest
	exampleCapacityID = "f51b705f-a409-4d40-9197-c5d5f349e2ef"
	exampleTenantSettingName = "AdminApisIncludeDetailedMetadata"
	exampleUpdateTenantSettingOverrideRequest = admin.UpdateCapacityTenantSettingOverrideRequest{
		DelegateToWorkspace: to.Ptr(true),
		Enabled:             to.Ptr(true),
		EnabledSecurityGroups: []admin.TenantSettingSecurityGroup{
			{
				Name:    to.Ptr("TestComputeCdsa"),
				GraphID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2f0"),
			}},
	}

	exampleRes := admin.UpdateCapacityTenantSettingOverrideResponse{
		Overrides: []admin.CapacityTenantSetting{
			{
				CanSpecifySecurityGroups: to.Ptr(true),
				Enabled:                  to.Ptr(true),
				EnabledSecurityGroups: []admin.TenantSettingSecurityGroup{
					{
						Name:    to.Ptr("TestComputeCdsa"),
						GraphID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2f0"),
					}},
				Properties: []admin.TenantSettingProperty{
					{
						Name:  to.Ptr("testIntProp"),
						Type:  to.Ptr(admin.TenantSettingPropertyTypeInteger),
						Value: to.Ptr("5"),
					}},
				SettingName:         to.Ptr("TenantSettingForCapacityDelegatedSwitch"),
				TenantSettingGroup:  to.Ptr("Delegation testing"),
				Title:               to.Ptr("Capacity delegation test settings"),
				DelegateToWorkspace: to.Ptr(true),
				DelegatedFrom:       to.Ptr(admin.DelegatedFromTenant),
			}},
	}

	testsuite.serverFactory.TenantsServer.UpdateCapacityTenantSettingOverride = func(ctx context.Context, capacityID string, tenantSettingName string, updateTenantSettingOverrideRequest admin.UpdateCapacityTenantSettingOverrideRequest, options *admin.TenantsClientUpdateCapacityTenantSettingOverrideOptions) (resp azfake.Responder[admin.TenantsClientUpdateCapacityTenantSettingOverrideResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleCapacityID, capacityID)
		testsuite.Require().Equal(exampleTenantSettingName, tenantSettingName)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateTenantSettingOverrideRequest, updateTenantSettingOverrideRequest))
		resp = azfake.Responder[admin.TenantsClientUpdateCapacityTenantSettingOverrideResponse]{}
		resp.SetResponse(http.StatusOK, admin.TenantsClientUpdateCapacityTenantSettingOverrideResponse{UpdateCapacityTenantSettingOverrideResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewTenantsClient()
	res, err := client.UpdateCapacityTenantSettingOverride(ctx, exampleCapacityID, exampleTenantSettingName, exampleUpdateTenantSettingOverrideRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.UpdateCapacityTenantSettingOverrideResponse))
}

func (testsuite *FakeTestSuite) TestTenants_ListDomainsTenantSettingsOverrides() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List domain tenant settings overrides example"},
	})

	exampleRes := admin.DomainTenantSettingOverrides{
		ContinuationToken: to.Ptr("MSwxMDAwMCww"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/admin/domains/delegatedTenantSettingOverrides?continuationToken=MSwxMDAwMCww"),
		Value: []admin.DomainTenantSettingOverride{
			{
				ID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2ef"),
				TenantSettings: []admin.DomainTenantSetting{
					{
						CanSpecifySecurityGroups: to.Ptr(true),
						Enabled:                  to.Ptr(true),
						EnabledSecurityGroups: []admin.TenantSettingSecurityGroup{
							{
								Name:    to.Ptr("Admin API SP Test"),
								GraphID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2f0"),
							},
							{
								Name:    to.Ptr("Admin API Testing"),
								GraphID: to.Ptr("1fecf19f-6e33-41b3-89fa-de8c821f3b79"),
							},
							{
								Name:    to.Ptr("Admin Only"),
								GraphID: to.Ptr("64bc10f1-1f1b-4a7e-b7a0-c87d89cba2b4"),
							}},
						SettingName:         to.Ptr("TenantSettingForDomainDelegatedSwitch"),
						TenantSettingGroup:  to.Ptr("Delegation testing"),
						Title:               to.Ptr("Domain delegation test settings"),
						DelegateToWorkspace: to.Ptr(false),
						DelegatedFrom:       to.Ptr(admin.DelegatedFromTenant),
					}},
			}},
	}

	testsuite.serverFactory.TenantsServer.NewListDomainsTenantSettingsOverridesPager = func(options *admin.TenantsClientListDomainsTenantSettingsOverridesOptions) (resp azfake.PagerResponder[admin.TenantsClientListDomainsTenantSettingsOverridesResponse]) {
		resp = azfake.PagerResponder[admin.TenantsClientListDomainsTenantSettingsOverridesResponse]{}
		resp.AddPage(http.StatusOK, admin.TenantsClientListDomainsTenantSettingsOverridesResponse{DomainTenantSettingOverrides: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewTenantsClient()
	pager := client.NewListDomainsTenantSettingsOverridesPager(&admin.TenantsClientListDomainsTenantSettingsOverridesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DomainTenantSettingOverrides))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestTenants_ListWorkspacesTenantSettingsOverrides() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List workspace tenant settings overrides example"},
	})

	exampleRes := admin.WorkspaceTenantSettingOverrides{
		ContinuationToken: to.Ptr("MSwxMDAwMCww"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/admin/workspaces/delegatedTenantSettingOverrides?continuationToken=MSwxMDAwMCww"),
		Value: []admin.WorkspaceTenantSettingOverride{
			{
				ID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2ef"),
				TenantSettings: []admin.WorkspaceTenantSetting{
					{
						CanSpecifySecurityGroups: to.Ptr(true),
						Enabled:                  to.Ptr(true),
						EnabledSecurityGroups: []admin.TenantSettingSecurityGroup{
							{
								Name:    to.Ptr("Admin API SP Test"),
								GraphID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2f0"),
							},
							{
								Name:    to.Ptr("Admin API Testing"),
								GraphID: to.Ptr("1fecf19f-6e33-41b3-89fa-de8c821f3b79"),
							},
							{
								Name:    to.Ptr("Admin Only"),
								GraphID: to.Ptr("64bc10f1-1f1b-4a7e-b7a0-c87d89cba2b4"),
							}},
						SettingName:        to.Ptr("TenantSettingForWorkspaceDelegatedSwitch"),
						TenantSettingGroup: to.Ptr("Delegation testing"),
						Title:              to.Ptr("Workspace delegation test settings"),
						DelegatedFrom:      to.Ptr(admin.DelegatedFromTenant),
					}},
			}},
	}

	testsuite.serverFactory.TenantsServer.NewListWorkspacesTenantSettingsOverridesPager = func(options *admin.TenantsClientListWorkspacesTenantSettingsOverridesOptions) (resp azfake.PagerResponder[admin.TenantsClientListWorkspacesTenantSettingsOverridesResponse]) {
		resp = azfake.PagerResponder[admin.TenantsClientListWorkspacesTenantSettingsOverridesResponse]{}
		resp.AddPage(http.StatusOK, admin.TenantsClientListWorkspacesTenantSettingsOverridesResponse{WorkspaceTenantSettingOverrides: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewTenantsClient()
	pager := client.NewListWorkspacesTenantSettingsOverridesPager(&admin.TenantsClientListWorkspacesTenantSettingsOverridesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.WorkspaceTenantSettingOverrides))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestWorkspaces_ListWorkspaces() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a list of workspaces example"},
	})

	exampleRes := admin.Workspaces{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/admin/workspaces?continuationToken='LDEsMTAwMDAwLDA%3D'"),
		Workspaces: []admin.Workspace{
			{
				Name:       to.Ptr("test report"),
				Type:       to.Ptr(admin.WorkspaceTypeWorkspace),
				CapacityID: to.Ptr("41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e84"),
				ID:         to.Ptr("41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"),
				State:      to.Ptr(admin.WorkspaceStateActive),
			}},
	}

	testsuite.serverFactory.WorkspacesServer.NewListWorkspacesPager = func(options *admin.WorkspacesClientListWorkspacesOptions) (resp azfake.PagerResponder[admin.WorkspacesClientListWorkspacesResponse]) {
		resp = azfake.PagerResponder[admin.WorkspacesClientListWorkspacesResponse]{}
		resp.AddPage(http.StatusOK, admin.WorkspacesClientListWorkspacesResponse{Workspaces: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	pager := client.NewListWorkspacesPager(&admin.WorkspacesClientListWorkspacesOptions{Type: nil,
		CapacityID:        nil,
		Name:              nil,
		State:             nil,
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Workspaces))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a list of workspaces using state query parameter example"},
	})

	exampleRes = admin.Workspaces{
		Workspaces: []admin.Workspace{
			{
				Name:       to.Ptr("test report"),
				Type:       to.Ptr(admin.WorkspaceTypeWorkspace),
				CapacityID: to.Ptr("41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e84"),
				ID:         to.Ptr("41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"),
				State:      to.Ptr(admin.WorkspaceStateActive),
			}},
	}

	testsuite.serverFactory.WorkspacesServer.NewListWorkspacesPager = func(options *admin.WorkspacesClientListWorkspacesOptions) (resp azfake.PagerResponder[admin.WorkspacesClientListWorkspacesResponse]) {
		resp = azfake.PagerResponder[admin.WorkspacesClientListWorkspacesResponse]{}
		resp.AddPage(http.StatusOK, admin.WorkspacesClientListWorkspacesResponse{Workspaces: exampleRes}, nil)
		return
	}

	pager = client.NewListWorkspacesPager(&admin.WorkspacesClientListWorkspacesOptions{Type: nil,
		CapacityID:        nil,
		Name:              nil,
		State:             to.Ptr("Active"),
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Workspaces))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestWorkspaces_ListGitConnections() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a list of Git connections for tenant example"},
	})

	exampleRes := admin.GitConnections{
		ContinuationToken: to.Ptr("eyJMYXN0U2VlbkNvbm5lY3Rpb25JZCI6NX0="),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/admin/workspaces/discoverGitConnections?continuationToken=eyJMYXN0U2VlbkNvbm5lY3Rpb25JZCI6NX0="),
		Value: []admin.GitConnectionDetails{
			{
				GitProviderDetails: &admin.AzureDevOpsDetails{
					BranchName:       to.Ptr("Test Branch"),
					DirectoryName:    to.Ptr("/Test Directory"),
					GitProviderType:  to.Ptr(admin.GitProviderTypeAzureDevOps),
					RepositoryName:   to.Ptr("Test Repo"),
					OrganizationName: to.Ptr("Test Organization"),
					ProjectName:      to.Ptr("Test Project"),
				},
				WorkspaceID: to.Ptr("41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"),
			},
			{
				GitProviderDetails: &admin.GitHubDetails{
					BranchName:      to.Ptr("Test Branch"),
					DirectoryName:   to.Ptr("/"),
					GitProviderType: to.Ptr(admin.GitProviderTypeGitHub),
					RepositoryName:  to.Ptr("Test Repo"),
					OwnerName:       to.Ptr("Test Owner"),
				},
				WorkspaceID: to.Ptr("17d8929d-ab32-46d1-858b-fdea74e93bf2"),
			}},
	}

	testsuite.serverFactory.WorkspacesServer.NewListGitConnectionsPager = func(options *admin.WorkspacesClientListGitConnectionsOptions) (resp azfake.PagerResponder[admin.WorkspacesClientListGitConnectionsResponse]) {
		resp = azfake.PagerResponder[admin.WorkspacesClientListGitConnectionsResponse]{}
		resp.AddPage(http.StatusOK, admin.WorkspacesClientListGitConnectionsResponse{GitConnections: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	pager := client.NewListGitConnectionsPager(&admin.WorkspacesClientListGitConnectionsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GitConnections))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestWorkspaces_GetWorkspace() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get workspace details by ID example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"

	exampleRes := admin.Workspace{
		Name:       to.Ptr("test report"),
		Type:       to.Ptr(admin.WorkspaceTypeWorkspace),
		CapacityID: to.Ptr("41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e84"),
		ID:         to.Ptr("41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"),
		State:      to.Ptr(admin.WorkspaceStateActive),
	}

	testsuite.serverFactory.WorkspacesServer.GetWorkspace = func(ctx context.Context, workspaceID string, options *admin.WorkspacesClientGetWorkspaceOptions) (resp azfake.Responder[admin.WorkspacesClientGetWorkspaceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.Responder[admin.WorkspacesClientGetWorkspaceResponse]{}
		resp.SetResponse(http.StatusOK, admin.WorkspacesClientGetWorkspaceResponse{Workspace: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	res, err := client.GetWorkspace(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Workspace))
}

func (testsuite *FakeTestSuite) TestWorkspaces_ListWorkspaceAccessDetails() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List of users for given workspace ID example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"

	exampleRes := admin.WorkspaceAccessDetailsResponse{
		AccessDetails: []admin.WorkspaceAccessDetails{
			{
				Principal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Jacob Hancock"),
					ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("jacob@example.com"),
					},
				},
				WorkspaceAccessDetails: &admin.WorkspaceAccessDetail{
					Type:          to.Ptr(admin.WorkspaceTypeWorkspace),
					WorkspaceRole: to.Ptr(admin.WorkspaceRoleAdmin),
				},
			},
			{
				Principal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Caleb Foster"),
					ID:          to.Ptr("c7db8e03-c8cb-4d4c-9f64-1dcd327c9d3c"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("caleb@example.com"),
					},
				},
				WorkspaceAccessDetails: &admin.WorkspaceAccessDetail{
					Type:          to.Ptr(admin.WorkspaceTypeWorkspace),
					WorkspaceRole: to.Ptr(admin.WorkspaceRoleViewer),
				},
			},
			{
				Principal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeGroup),
					DisplayName: to.Ptr("TestSecurityGroup"),
					GroupDetails: &admin.PrincipalGroupDetails{
						GroupType: to.Ptr(admin.GroupTypeSecurityGroup),
					},
					ID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2f0"),
				},
				WorkspaceAccessDetails: &admin.WorkspaceAccessDetail{
					Type:          to.Ptr(admin.WorkspaceTypeWorkspace),
					WorkspaceRole: to.Ptr(admin.WorkspaceRoleContributor),
				},
			}},
	}

	testsuite.serverFactory.WorkspacesServer.ListWorkspaceAccessDetails = func(ctx context.Context, workspaceID string, options *admin.WorkspacesClientListWorkspaceAccessDetailsOptions) (resp azfake.Responder[admin.WorkspacesClientListWorkspaceAccessDetailsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.Responder[admin.WorkspacesClientListWorkspaceAccessDetailsResponse]{}
		resp.SetResponse(http.StatusOK, admin.WorkspacesClientListWorkspaceAccessDetailsResponse{WorkspaceAccessDetailsResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	res, err := client.ListWorkspaceAccessDetails(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.WorkspaceAccessDetailsResponse))
}

func (testsuite *FakeTestSuite) TestWorkspaces_RestoreWorkspace() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Restore workspace example"},
	})
	var exampleWorkspaceID string
	var exampleRestoreWorkspaceRequest admin.RestoreWorkspaceRequest
	exampleWorkspaceID = "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f"
	exampleRestoreWorkspaceRequest = admin.RestoreWorkspaceRequest{
		NewWorkspaceAdminPrincipal: &admin.Principal{
			Type: to.Ptr(admin.PrincipalTypeUser),
			ID:   to.Ptr("17dd1e38-a4c6-41ed-bc4f-1e383f8ddd01"),
		},
		NewWorkspaceName: to.Ptr("Contoso Workspace"),
	}

	testsuite.serverFactory.WorkspacesServer.RestoreWorkspace = func(ctx context.Context, workspaceID string, restoreWorkspaceRequest admin.RestoreWorkspaceRequest, options *admin.WorkspacesClientRestoreWorkspaceOptions) (resp azfake.Responder[admin.WorkspacesClientRestoreWorkspaceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleRestoreWorkspaceRequest, restoreWorkspaceRequest))
		resp = azfake.Responder[admin.WorkspacesClientRestoreWorkspaceResponse]{}
		resp.SetResponse(http.StatusOK, admin.WorkspacesClientRestoreWorkspaceResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	_, err = client.RestoreWorkspace(ctx, exampleWorkspaceID, exampleRestoreWorkspaceRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_ListItems() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a list of items using type query parameter example"},
	})

	exampleRes := admin.Items{
		ItemEntities: []admin.Item{
			{
				Name:       to.Ptr("Test Report"),
				Type:       to.Ptr(admin.ItemTypeReport),
				CapacityID: to.Ptr("D5E336D6-D919-4ECC-B424-1F771A506851"),
				CreatorPrincipal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Jacob Hancock"),
					ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("Jacob@example.com"),
					},
				},
				ID:              to.Ptr("b1a7e572-2585-4650-98ae-b92356f4460b"),
				LastUpdatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-06-27T16:55:04.893Z"); return t }()),
				State:           to.Ptr(admin.ItemStateActive),
				WorkspaceID:     to.Ptr("7f4496db-9929-47bd-89c0-d7eb2f517a98"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListItemsPager = func(options *admin.ItemsClientListItemsOptions) (resp azfake.PagerResponder[admin.ItemsClientListItemsResponse]) {
		resp = azfake.PagerResponder[admin.ItemsClientListItemsResponse]{}
		resp.AddPage(http.StatusOK, admin.ItemsClientListItemsResponse{Items: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListItemsPager(&admin.ItemsClientListItemsOptions{WorkspaceID: nil,
		CapacityID:        nil,
		State:             nil,
		Type:              to.Ptr("Report"),
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Items))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get all items in the tenant example"},
	})

	exampleRes = admin.Items{
		ContinuationToken: to.Ptr("MSwxMDAwMCww"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/admin/items?continuationToken=MSwxMDAwMCww"),
		ItemEntities: []admin.Item{
			{
				Name:        to.Ptr("Test"),
				Type:        to.Ptr(admin.ItemTypeNotebook),
				Description: to.Ptr("Test notebook."),
				CapacityID:  to.Ptr("D5E336D6-D919-4ECC-B424-1F771A506851"),
				CreatorPrincipal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Caleb Foster"),
					ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("caleb@example.com"),
					},
				},
				ID:              to.Ptr("17d8929d-ab32-46d1-858b-fdea74e93bff"),
				LastUpdatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-04-29T17:47:29.986Z"); return t }()),
				State:           to.Ptr(admin.ItemStateActive),
				WorkspaceID:     to.Ptr("7f4496db-9929-47bd-89c0-d7eb2f517a95"),
			},
			{
				Name:        to.Ptr("TestKusto"),
				Type:        to.Ptr(admin.ItemTypeKQLDatabase),
				Description: to.Ptr("Test KQL database."),
				CapacityID:  to.Ptr("D5E336D6-D919-4ECC-B424-1F881A506851"),
				CreatorPrincipal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Jacob Hancock"),
					ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("jacob@example.com"),
					},
				},
				ID:              to.Ptr("37d8929d-ab32-46d1-858b-fdea74e93bff"),
				LastUpdatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-06-30T17:47:29.986Z"); return t }()),
				State:           to.Ptr(admin.ItemStateActive),
				WorkspaceID:     to.Ptr("8f4496db-9929-47bd-89c0-d7eb2f517a95"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListItemsPager = func(options *admin.ItemsClientListItemsOptions) (resp azfake.PagerResponder[admin.ItemsClientListItemsResponse]) {
		resp = azfake.PagerResponder[admin.ItemsClientListItemsResponse]{}
		resp.AddPage(http.StatusOK, admin.ItemsClientListItemsResponse{Items: exampleRes}, nil)
		return
	}

	pager = client.NewListItemsPager(&admin.ItemsClientListItemsOptions{WorkspaceID: nil,
		CapacityID:        nil,
		State:             nil,
		Type:              nil,
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Items))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get list of datamarts using type query parameter example"},
	})

	exampleRes = admin.Items{
		ItemEntities: []admin.Item{
			{
				Name:       to.Ptr("Lakehouse 2022-03-16T21:42:38.442Z"),
				Type:       to.Ptr(admin.ItemTypeLakehouse),
				CapacityID: to.Ptr("D5E336D6-D919-4ECC-B424-1F771A506851"),
				CreatorPrincipal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Jacob Hancock"),
					ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("jacob@example.com"),
					},
				},
				ID:              to.Ptr("b1a7e572-2585-4650-98ae-b92356f4460b"),
				LastUpdatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-06-27T16:55:04.893Z"); return t }()),
				State:           to.Ptr(admin.ItemStateActive),
				WorkspaceID:     to.Ptr("7f4496db-9929-47bd-89c0-d7eb2f517a98"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListItemsPager = func(options *admin.ItemsClientListItemsOptions) (resp azfake.PagerResponder[admin.ItemsClientListItemsResponse]) {
		resp = azfake.PagerResponder[admin.ItemsClientListItemsResponse]{}
		resp.AddPage(http.StatusOK, admin.ItemsClientListItemsResponse{Items: exampleRes}, nil)
		return
	}

	pager = client.NewListItemsPager(&admin.ItemsClientListItemsOptions{WorkspaceID: nil,
		CapacityID:        nil,
		State:             nil,
		Type:              to.Ptr("Lakehouse"),
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Items))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_GetItem() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get item details by ID and type example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	exampleWorkspaceID = "7f4496db-9929-47bd-89c0-d7eb2f517a98"
	exampleItemID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"

	exampleRes := admin.Item{
		Name:        to.Ptr("Test"),
		Type:        to.Ptr(admin.ItemTypeReport),
		Description: to.Ptr("Test Jacob's Report,"),
		CapacityID:  to.Ptr("D5E336D6-D919-4ECC-B424-1F771A506851"),
		CreatorPrincipal: &admin.Principal{
			Type:        to.Ptr(admin.PrincipalTypeUser),
			DisplayName: to.Ptr("Jacob Hancock"),
			ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
			UserDetails: &admin.PrincipalUserDetails{
				UserPrincipalName: to.Ptr("Jacob@example.com"),
			},
		},
		ID:              to.Ptr("17d8929d-ab32-46d1-858b-fdea74e93bf2"),
		LastUpdatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-04-29T17:47:29.986Z"); return t }()),
		State:           to.Ptr(admin.ItemStateActive),
		WorkspaceID:     to.Ptr("7f4496db-9929-47bd-89c0-d7eb2f517a98"),
	}

	testsuite.serverFactory.ItemsServer.GetItem = func(ctx context.Context, workspaceID string, itemID string, options *admin.ItemsClientGetItemOptions) (resp azfake.Responder[admin.ItemsClientGetItemResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.Responder[admin.ItemsClientGetItemResponse]{}
		resp.SetResponse(http.StatusOK, admin.ItemsClientGetItemResponse{Item: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetItem(ctx, exampleWorkspaceID, exampleItemID, &admin.ItemsClientGetItemOptions{Type: to.Ptr("Report")})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Item))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get item details by ID example"},
	})
	exampleWorkspaceID = "7f4496db-9929-47bd-89c0-d7eb2f517a98"
	exampleItemID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"

	exampleRes = admin.Item{
		Name:        to.Ptr("Test"),
		Type:        to.Ptr(admin.ItemType("Kusto")),
		Description: to.Ptr("Test Jacob's notebook."),
		CapacityID:  to.Ptr("D5E336D6-D919-4ECC-B424-1F771A506851"),
		CreatorPrincipal: &admin.Principal{
			Type:        to.Ptr(admin.PrincipalTypeUser),
			DisplayName: to.Ptr("Jacob Hancock"),
			ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
			UserDetails: &admin.PrincipalUserDetails{
				UserPrincipalName: to.Ptr("Jacob@example.com"),
			},
		},
		ID:              to.Ptr("17d8929d-ab32-46d1-858b-fdea74e93bf2"),
		LastUpdatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-04-29T17:47:29.986Z"); return t }()),
		State:           to.Ptr(admin.ItemStateActive),
		WorkspaceID:     to.Ptr("7f4496db-9929-47bd-89c0-d7eb2f517a98"),
	}

	testsuite.serverFactory.ItemsServer.GetItem = func(ctx context.Context, workspaceID string, itemID string, options *admin.ItemsClientGetItemOptions) (resp azfake.Responder[admin.ItemsClientGetItemResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.Responder[admin.ItemsClientGetItemResponse]{}
		resp.SetResponse(http.StatusOK, admin.ItemsClientGetItemResponse{Item: exampleRes}, nil)
		return
	}

	res, err = client.GetItem(ctx, exampleWorkspaceID, exampleItemID, &admin.ItemsClientGetItemOptions{Type: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Item))
}

func (testsuite *FakeTestSuite) TestItems_ListItemAccessDetails() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List of users for given item ID and type example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	exampleWorkspaceID = "7f4496db-9929-47bd-89c0-d7eb2f517a98"
	exampleItemID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"

	exampleRes := admin.ItemAccessDetailsResponse{
		AccessDetails: []admin.ItemAccessDetails{
			{
				ItemAccessDetails: &admin.ItemAccessDetail{
					Type: to.Ptr(admin.ItemTypeReport),
					AdditionalPermissions: []string{
						"ReadAll"},
					Permissions: []admin.ItemPermissions{
						admin.ItemPermissionsRead,
						admin.ItemPermissionsReshare},
				},
				Principal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Jacob Hancock"),
					ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("jacob@example.com"),
					},
				},
			}},
	}

	testsuite.serverFactory.ItemsServer.ListItemAccessDetails = func(ctx context.Context, workspaceID string, itemID string, options *admin.ItemsClientListItemAccessDetailsOptions) (resp azfake.Responder[admin.ItemsClientListItemAccessDetailsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.Responder[admin.ItemsClientListItemAccessDetailsResponse]{}
		resp.SetResponse(http.StatusOK, admin.ItemsClientListItemAccessDetailsResponse{ItemAccessDetailsResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.ListItemAccessDetails(ctx, exampleWorkspaceID, exampleItemID, &admin.ItemsClientListItemAccessDetailsOptions{Type: to.Ptr("Report")})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ItemAccessDetailsResponse))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List of users for given item ID example"},
	})
	exampleWorkspaceID = "7f4496db-9929-47bd-89c0-d7eb2f517a98"
	exampleItemID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"

	exampleRes = admin.ItemAccessDetailsResponse{
		AccessDetails: []admin.ItemAccessDetails{
			{
				ItemAccessDetails: &admin.ItemAccessDetail{
					Type: to.Ptr(admin.ItemTypeNotebook),
					AdditionalPermissions: []string{
						"ReadAll",
						"viewOutput"},
					Permissions: []admin.ItemPermissions{
						admin.ItemPermissionsRead,
						admin.ItemPermissionsReshare},
				},
				Principal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Jacob Hancock"),
					ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("jacob@example.com"),
					},
				},
			},
			{
				ItemAccessDetails: &admin.ItemAccessDetail{
					Type: to.Ptr(admin.ItemTypeNotebook),
					AdditionalPermissions: []string{
						"ReadAll"},
					Permissions: []admin.ItemPermissions{
						admin.ItemPermissionsRead,
						admin.ItemPermissionsReshare,
						admin.ItemPermissionsExplore},
				},
				Principal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Eric Solomon"),
					ID:          to.Ptr("c7db8e03-c8cb-4d4c-9f64-1dcd327c9d3c"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("eric@example.com"),
					},
				},
			},
			{
				ItemAccessDetails: &admin.ItemAccessDetail{
					Type:                  to.Ptr(admin.ItemTypeNotebook),
					AdditionalPermissions: []string{},
					Permissions: []admin.ItemPermissions{
						admin.ItemPermissionsRead,
						admin.ItemPermissionsReshare},
				},
				Principal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeGroup),
					DisplayName: to.Ptr("TestSecurityGroup"),
					GroupDetails: &admin.PrincipalGroupDetails{
						GroupType: to.Ptr(admin.GroupTypeSecurityGroup),
					},
					ID: to.Ptr("f51b705f-a409-4d40-9197-c5d5f349e2f0"),
				},
			}},
	}

	testsuite.serverFactory.ItemsServer.ListItemAccessDetails = func(ctx context.Context, workspaceID string, itemID string, options *admin.ItemsClientListItemAccessDetailsOptions) (resp azfake.Responder[admin.ItemsClientListItemAccessDetailsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.Responder[admin.ItemsClientListItemAccessDetailsResponse]{}
		resp.SetResponse(http.StatusOK, admin.ItemsClientListItemAccessDetailsResponse{ItemAccessDetailsResponse: exampleRes}, nil)
		return
	}

	res, err = client.ListItemAccessDetails(ctx, exampleWorkspaceID, exampleItemID, &admin.ItemsClientListItemAccessDetailsOptions{Type: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ItemAccessDetailsResponse))
}

func (testsuite *FakeTestSuite) TestUsers_ListAccessEntities() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List item access details by User Principal Name (UPN) example"},
	})
	var exampleUserID string
	exampleUserID = "Test@Contoso.com"

	exampleRes := admin.AccessEntityResponse{
		ContinuationToken: to.Ptr("MSwxMDAwMCww"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/admin/users/f3052d1c-61a9-46fb-8df9-0d78916ae041/access/?continuationToken=MSwxMDAwMCww"),
		AccessEntities: []admin.AccessEntity{
			{
				Category:    to.Ptr(admin.CategoryItem),
				DisplayName: to.Ptr("TestNotebook"),
				ID:          to.Ptr("17d8929d-ab32-46d1-858b-fdea74e93bf2"),
				ItemAccessDetails: &admin.ItemAccessDetail{
					Type: to.Ptr(admin.ItemTypeNotebook),
					AdditionalPermissions: []string{
						"ReadAll",
						"viewOutput"},
					Permissions: []admin.ItemPermissions{
						admin.ItemPermissionsRead,
						admin.ItemPermissionsReshare,
						admin.ItemPermissionsExplore},
				},
			}},
	}

	testsuite.serverFactory.UsersServer.NewListAccessEntitiesPager = func(userID string, options *admin.UsersClientListAccessEntitiesOptions) (resp azfake.PagerResponder[admin.UsersClientListAccessEntitiesResponse]) {
		testsuite.Require().Equal(exampleUserID, userID)
		resp = azfake.PagerResponder[admin.UsersClientListAccessEntitiesResponse]{}
		resp.AddPage(http.StatusOK, admin.UsersClientListAccessEntitiesResponse{AccessEntityResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewUsersClient()
	pager := client.NewListAccessEntitiesPager(exampleUserID, &admin.UsersClientListAccessEntitiesOptions{Type: nil,
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AccessEntityResponse))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List item access details by graph ID and type query parameter example"},
	})
	exampleUserID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"

	exampleRes = admin.AccessEntityResponse{
		AccessEntities: []admin.AccessEntity{
			{
				Category:    to.Ptr(admin.CategoryItem),
				DisplayName: to.Ptr("Test Report"),
				ID:          to.Ptr("17d8929d-ab32-46d1-858b-fdea74e93bf2"),
				ItemAccessDetails: &admin.ItemAccessDetail{
					Type: to.Ptr(admin.ItemTypeReport),
					AdditionalPermissions: []string{
						"ReadAll",
						"viewOutput"},
					Permissions: []admin.ItemPermissions{
						admin.ItemPermissionsRead,
						admin.ItemPermissionsReshare},
				},
			}},
	}

	testsuite.serverFactory.UsersServer.NewListAccessEntitiesPager = func(userID string, options *admin.UsersClientListAccessEntitiesOptions) (resp azfake.PagerResponder[admin.UsersClientListAccessEntitiesResponse]) {
		testsuite.Require().Equal(exampleUserID, userID)
		resp = azfake.PagerResponder[admin.UsersClientListAccessEntitiesResponse]{}
		resp.AddPage(http.StatusOK, admin.UsersClientListAccessEntitiesResponse{AccessEntityResponse: exampleRes}, nil)
		return
	}

	pager = client.NewListAccessEntitiesPager(exampleUserID, &admin.UsersClientListAccessEntitiesOptions{Type: to.Ptr("Report"),
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AccessEntityResponse))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List item access details by graph ID example"},
	})
	exampleUserID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"

	exampleRes = admin.AccessEntityResponse{
		ContinuationToken: to.Ptr("MSwxMDAwMCww"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/admin/users/f3052d1c-61a9-46fb-8df9-0d78916ae041/access/?continuationToken=MSwxMDAwMCww"),
		AccessEntities: []admin.AccessEntity{
			{
				Category:    to.Ptr(admin.CategoryItem),
				DisplayName: to.Ptr("TestNotebook"),
				ID:          to.Ptr("17d8929d-ab32-46d1-858b-fdea74e93bf2"),
				ItemAccessDetails: &admin.ItemAccessDetail{
					Type: to.Ptr(admin.ItemTypeNotebook),
					AdditionalPermissions: []string{
						"ReadAll",
						"viewOutput"},
					Permissions: []admin.ItemPermissions{
						admin.ItemPermissionsRead,
						admin.ItemPermissionsReshare,
						admin.ItemPermissionsExplore},
				},
			}},
	}

	testsuite.serverFactory.UsersServer.NewListAccessEntitiesPager = func(userID string, options *admin.UsersClientListAccessEntitiesOptions) (resp azfake.PagerResponder[admin.UsersClientListAccessEntitiesResponse]) {
		testsuite.Require().Equal(exampleUserID, userID)
		resp = azfake.PagerResponder[admin.UsersClientListAccessEntitiesResponse]{}
		resp.AddPage(http.StatusOK, admin.UsersClientListAccessEntitiesResponse{AccessEntityResponse: exampleRes}, nil)
		return
	}

	pager = client.NewListAccessEntitiesPager(exampleUserID, &admin.UsersClientListAccessEntitiesOptions{Type: nil,
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AccessEntityResponse))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDomains_ListDomains() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get all non-empty domains example"},
	})

	exampleRes := admin.DomainsResponse{
		Domains: []admin.Domain{
			{
				Description:       to.Ptr("This domain is used for identifying financial data and reports."),
				ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAdminsOnly),
				DisplayName:       to.Ptr("Finance"),
				ID:                to.Ptr("bc23d4c6-cc92-4eb6-bcb5-0ff98429bbff"),
			},
			{
				ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
				DisplayName:       to.Ptr("Human resources"),
				ID:                to.Ptr("b0bca781-003c-4041-b1c4-f94d34ba76d4"),
			},
			{
				ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
				DisplayName:       to.Ptr("HR Sales"),
				ID:                to.Ptr("6af5a1b6-bc4c-4c0a-b60d-30c68e6e3034"),
				ParentDomainID:    to.Ptr("bc23d4c6-cc92-4eb6-bcb5-0ff98429bbff"),
			},
			{
				ContributorsScope: to.Ptr(admin.ContributorsScopeTypeSpecificUsersAndGroups),
				DisplayName:       to.Ptr("Marketing"),
				ID:                to.Ptr("6c00e8eb-51d4-46f7-8b90-7e98520ea7a0"),
			}},
	}

	testsuite.serverFactory.DomainsServer.ListDomains = func(ctx context.Context, options *admin.DomainsClientListDomainsOptions) (resp azfake.Responder[admin.DomainsClientListDomainsResponse], errResp azfake.ErrorResponder) {
		resp = azfake.Responder[admin.DomainsClientListDomainsResponse]{}
		resp.SetResponse(http.StatusOK, admin.DomainsClientListDomainsResponse{DomainsResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDomainsClient()
	res, err := client.ListDomains(ctx, &admin.DomainsClientListDomainsOptions{NonEmptyOnly: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DomainsResponse))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get info for all domains example"},
	})

	exampleRes = admin.DomainsResponse{
		Domains: []admin.Domain{
			{
				Description:       to.Ptr("This domain is used for identifying financial data and reports."),
				ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAdminsOnly),
				DisplayName:       to.Ptr("Finance"),
				ID:                to.Ptr("bc23d4c6-cc92-4eb6-bcb5-0ff98429bbff"),
			},
			{
				ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
				DisplayName:       to.Ptr("Human resources"),
				ID:                to.Ptr("b0bca781-003c-4041-b1c4-f94d34ba76d4"),
			},
			{
				ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
				DisplayName:       to.Ptr("HR Sales"),
				ID:                to.Ptr("6af5a1b6-bc4c-4c0a-b60d-30c68e6e3034"),
				ParentDomainID:    to.Ptr("bc23d4c6-cc92-4eb6-bcb5-0ff98429bbff"),
			},
			{
				ContributorsScope: to.Ptr(admin.ContributorsScopeTypeSpecificUsersAndGroups),
				DisplayName:       to.Ptr("Marketing"),
				ID:                to.Ptr("6c00e8eb-51d4-46f7-8b90-7e98520ea7a0"),
			},
			{
				Description:       to.Ptr("Admins only"),
				ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
				DisplayName:       to.Ptr("AdminsOnly"),
				ID:                to.Ptr("17df435d-9efd-48c1-a937-7d6fd70ab26a"),
				ParentDomainID:    to.Ptr("f2f6a374-789e-4d1d-9cc7-6e0b934fc529"),
			},
			{
				ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
				DisplayName:       to.Ptr("Root"),
				ID:                to.Ptr("fb765fe3-d404-4f24-9d67-5916449c4c50"),
			},
			{
				Description:       to.Ptr("This domain is used for identifying legal data and reports."),
				ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
				DisplayName:       to.Ptr("Legal"),
				ID:                to.Ptr("bda31be4-7efe-4272-8b85-e1b2ff0f0592"),
			}},
	}

	testsuite.serverFactory.DomainsServer.ListDomains = func(ctx context.Context, options *admin.DomainsClientListDomainsOptions) (resp azfake.Responder[admin.DomainsClientListDomainsResponse], errResp azfake.ErrorResponder) {
		resp = azfake.Responder[admin.DomainsClientListDomainsResponse]{}
		resp.SetResponse(http.StatusOK, admin.DomainsClientListDomainsResponse{DomainsResponse: exampleRes}, nil)
		return
	}

	res, err = client.ListDomains(ctx, &admin.DomainsClientListDomainsOptions{NonEmptyOnly: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DomainsResponse))
}

func (testsuite *FakeTestSuite) TestDomains_CreateDomain() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a domain example"},
	})
	var exampleCreateDomainRequest admin.CreateDomainRequest
	exampleCreateDomainRequest = admin.CreateDomainRequest{
		Description:    to.Ptr("This domain is used for identifying financial data and reports."),
		DisplayName:    to.Ptr("Finance"),
		ParentDomainID: to.Ptr("5f6552c3-816c-43e7-8289-842f8b35f9df"),
	}

	testsuite.serverFactory.DomainsServer.CreateDomain = func(ctx context.Context, createDomainRequest admin.CreateDomainRequest, options *admin.DomainsClientCreateDomainOptions) (resp azfake.Responder[admin.DomainsClientCreateDomainResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleCreateDomainRequest, createDomainRequest))
		resp = azfake.Responder[admin.DomainsClientCreateDomainResponse]{}
		resp.SetResponse(http.StatusCreated, admin.DomainsClientCreateDomainResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDomainsClient()
	_, err = client.CreateDomain(ctx, exampleCreateDomainRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestDomains_GetDomain() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a domain example"},
	})
	var exampleDomainID string
	exampleDomainID = "f2f6a374-789e-4d1d-9cc7-6e0b934fc529"

	exampleRes := admin.Domain{
		Description:       to.Ptr("This domain is used for identifying financial data and reports."),
		ContributorsScope: to.Ptr(admin.ContributorsScopeTypeSpecificUsersAndGroups),
		DisplayName:       to.Ptr("Finance"),
		ID:                to.Ptr("f2f6a374-789e-4d1d-9cc7-6e0b934fc529"),
	}

	testsuite.serverFactory.DomainsServer.GetDomain = func(ctx context.Context, domainID string, options *admin.DomainsClientGetDomainOptions) (resp azfake.Responder[admin.DomainsClientGetDomainResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleDomainID, domainID)
		resp = azfake.Responder[admin.DomainsClientGetDomainResponse]{}
		resp.SetResponse(http.StatusOK, admin.DomainsClientGetDomainResponse{Domain: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDomainsClient()
	res, err := client.GetDomain(ctx, exampleDomainID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Domain))
}

func (testsuite *FakeTestSuite) TestDomains_DeleteDomain() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a domain example"},
	})
	var exampleDomainID string
	exampleDomainID = "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f"

	testsuite.serverFactory.DomainsServer.DeleteDomain = func(ctx context.Context, domainID string, options *admin.DomainsClientDeleteDomainOptions) (resp azfake.Responder[admin.DomainsClientDeleteDomainResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleDomainID, domainID)
		resp = azfake.Responder[admin.DomainsClientDeleteDomainResponse]{}
		resp.SetResponse(http.StatusOK, admin.DomainsClientDeleteDomainResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDomainsClient()
	_, err = client.DeleteDomain(ctx, exampleDomainID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestDomains_UpdateDomain() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a domain example"},
	})
	var exampleDomainID string
	var exampleUpdateDomainRequest admin.UpdateDomainRequest
	exampleDomainID = "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f"
	exampleUpdateDomainRequest = admin.UpdateDomainRequest{
		Description:       to.Ptr("Domain's new description"),
		ContributorsScope: to.Ptr(admin.ContributorsScopeTypeSpecificUsersAndGroups),
		DisplayName:       to.Ptr("Domain's new name"),
	}

	exampleRes := admin.Domain{
		Description:       to.Ptr("Domain's new description"),
		ContributorsScope: to.Ptr(admin.ContributorsScopeTypeSpecificUsersAndGroups),
		DisplayName:       to.Ptr("Domain's new name"),
		ID:                to.Ptr("f2f6a374-789e-4d1d-9cc7-6e0b934fc529"),
	}

	testsuite.serverFactory.DomainsServer.UpdateDomain = func(ctx context.Context, domainID string, updateDomainRequest admin.UpdateDomainRequest, options *admin.DomainsClientUpdateDomainOptions) (resp azfake.Responder[admin.DomainsClientUpdateDomainResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleDomainID, domainID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateDomainRequest, updateDomainRequest))
		resp = azfake.Responder[admin.DomainsClientUpdateDomainResponse]{}
		resp.SetResponse(http.StatusOK, admin.DomainsClientUpdateDomainResponse{Domain: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDomainsClient()
	res, err := client.UpdateDomain(ctx, exampleDomainID, exampleUpdateDomainRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Domain))
}

func (testsuite *FakeTestSuite) TestDomains_ListDomainWorkspaces() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get all domain workspaces example"},
	})
	var exampleDomainID string
	exampleDomainID = "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f"

	exampleRes := admin.DomainWorkspaces{
		Value: []admin.DomainWorkspace{
			{
				DisplayName: to.Ptr("Mark8ProjectTeam"),
				ID:          to.Ptr("e281785b-5608-41ac-a1a1-78b48b95b825"),
			},
			{
				DisplayName: to.Ptr("Team southern region"),
				ID:          to.Ptr("24402490-9519-48b9-9d51-b2db4095a56b"),
			},
			{
				DisplayName: to.Ptr("SalesAndMarketing"),
				ID:          to.Ptr("46f8ccd7-a209-4e12-978f-56ef3c44a68c"),
			}},
	}

	testsuite.serverFactory.DomainsServer.NewListDomainWorkspacesPager = func(domainID string, options *admin.DomainsClientListDomainWorkspacesOptions) (resp azfake.PagerResponder[admin.DomainsClientListDomainWorkspacesResponse]) {
		testsuite.Require().Equal(exampleDomainID, domainID)
		resp = azfake.PagerResponder[admin.DomainsClientListDomainWorkspacesResponse]{}
		resp.AddPage(http.StatusOK, admin.DomainsClientListDomainWorkspacesResponse{DomainWorkspaces: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDomainsClient()
	pager := client.NewListDomainWorkspacesPager(exampleDomainID, &admin.DomainsClientListDomainWorkspacesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DomainWorkspaces))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDomains_UnassignAllDomainWorkspaces() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Unassign all domain's workspaces example"},
	})
	var exampleDomainID string
	exampleDomainID = "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f"

	testsuite.serverFactory.DomainsServer.UnassignAllDomainWorkspaces = func(ctx context.Context, domainID string, options *admin.DomainsClientUnassignAllDomainWorkspacesOptions) (resp azfake.Responder[admin.DomainsClientUnassignAllDomainWorkspacesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleDomainID, domainID)
		resp = azfake.Responder[admin.DomainsClientUnassignAllDomainWorkspacesResponse]{}
		resp.SetResponse(http.StatusOK, admin.DomainsClientUnassignAllDomainWorkspacesResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDomainsClient()
	_, err = client.UnassignAllDomainWorkspaces(ctx, exampleDomainID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestDomains_RoleAssignmentsBulkAssign() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Assign domain admins example"},
	})
	var exampleDomainID string
	var exampleDomainRoleAssignmentRequest admin.DomainRoleAssignmentRequest
	exampleDomainID = "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f"
	exampleDomainRoleAssignmentRequest = admin.DomainRoleAssignmentRequest{
		Type: to.Ptr(admin.DomainRoleAdmins),
		Principals: []admin.Principal{
			{
				Type: to.Ptr(admin.PrincipalTypeUser),
				ID:   to.Ptr("796ce6ad-9163-4c16-9559-c68192a251de"),
			}},
	}

	testsuite.serverFactory.DomainsServer.RoleAssignmentsBulkAssign = func(ctx context.Context, domainID string, domainRoleAssignmentRequest admin.DomainRoleAssignmentRequest, options *admin.DomainsClientRoleAssignmentsBulkAssignOptions) (resp azfake.Responder[admin.DomainsClientRoleAssignmentsBulkAssignResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleDomainID, domainID)
		testsuite.Require().True(reflect.DeepEqual(exampleDomainRoleAssignmentRequest, domainRoleAssignmentRequest))
		resp = azfake.Responder[admin.DomainsClientRoleAssignmentsBulkAssignResponse]{}
		resp.SetResponse(http.StatusOK, admin.DomainsClientRoleAssignmentsBulkAssignResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDomainsClient()
	_, err = client.RoleAssignmentsBulkAssign(ctx, exampleDomainID, exampleDomainRoleAssignmentRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Assign domain contributors example"},
	})
	exampleDomainID = "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f"
	exampleDomainRoleAssignmentRequest = admin.DomainRoleAssignmentRequest{
		Type: to.Ptr(admin.DomainRoleContributors),
		Principals: []admin.Principal{
			{
				Type: to.Ptr(admin.PrincipalTypeUser),
				ID:   to.Ptr("796ce6ad-9163-4c16-9559-c68192a251de"),
			}},
	}

	testsuite.serverFactory.DomainsServer.RoleAssignmentsBulkAssign = func(ctx context.Context, domainID string, domainRoleAssignmentRequest admin.DomainRoleAssignmentRequest, options *admin.DomainsClientRoleAssignmentsBulkAssignOptions) (resp azfake.Responder[admin.DomainsClientRoleAssignmentsBulkAssignResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleDomainID, domainID)
		testsuite.Require().True(reflect.DeepEqual(exampleDomainRoleAssignmentRequest, domainRoleAssignmentRequest))
		resp = azfake.Responder[admin.DomainsClientRoleAssignmentsBulkAssignResponse]{}
		resp.SetResponse(http.StatusOK, admin.DomainsClientRoleAssignmentsBulkAssignResponse{}, nil)
		return
	}

	_, err = client.RoleAssignmentsBulkAssign(ctx, exampleDomainID, exampleDomainRoleAssignmentRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestDomains_RoleAssignmentsBulkUnassign() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Unassign domain admins example"},
	})
	var exampleDomainID string
	var exampleDomainRoleUnassignmentRequest admin.DomainRoleUnassignmentRequest
	exampleDomainID = "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f"
	exampleDomainRoleUnassignmentRequest = admin.DomainRoleUnassignmentRequest{
		Type: to.Ptr(admin.DomainRoleAdmins),
		Principals: []admin.Principal{
			{
				Type: to.Ptr(admin.PrincipalTypeUser),
				ID:   to.Ptr("796ce6ad-9163-4c16-9559-c68192a251de"),
			}},
	}

	testsuite.serverFactory.DomainsServer.RoleAssignmentsBulkUnassign = func(ctx context.Context, domainID string, domainRoleUnassignmentRequest admin.DomainRoleUnassignmentRequest, options *admin.DomainsClientRoleAssignmentsBulkUnassignOptions) (resp azfake.Responder[admin.DomainsClientRoleAssignmentsBulkUnassignResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleDomainID, domainID)
		testsuite.Require().True(reflect.DeepEqual(exampleDomainRoleUnassignmentRequest, domainRoleUnassignmentRequest))
		resp = azfake.Responder[admin.DomainsClientRoleAssignmentsBulkUnassignResponse]{}
		resp.SetResponse(http.StatusOK, admin.DomainsClientRoleAssignmentsBulkUnassignResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDomainsClient()
	_, err = client.RoleAssignmentsBulkUnassign(ctx, exampleDomainID, exampleDomainRoleUnassignmentRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Unassign domain contributors example"},
	})
	exampleDomainID = "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f"
	exampleDomainRoleUnassignmentRequest = admin.DomainRoleUnassignmentRequest{
		Type: to.Ptr(admin.DomainRoleContributors),
		Principals: []admin.Principal{
			{
				Type: to.Ptr(admin.PrincipalTypeUser),
				ID:   to.Ptr("796ce6ad-9163-4c16-9559-c68192a251de"),
			}},
	}

	testsuite.serverFactory.DomainsServer.RoleAssignmentsBulkUnassign = func(ctx context.Context, domainID string, domainRoleUnassignmentRequest admin.DomainRoleUnassignmentRequest, options *admin.DomainsClientRoleAssignmentsBulkUnassignOptions) (resp azfake.Responder[admin.DomainsClientRoleAssignmentsBulkUnassignResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleDomainID, domainID)
		testsuite.Require().True(reflect.DeepEqual(exampleDomainRoleUnassignmentRequest, domainRoleUnassignmentRequest))
		resp = azfake.Responder[admin.DomainsClientRoleAssignmentsBulkUnassignResponse]{}
		resp.SetResponse(http.StatusOK, admin.DomainsClientRoleAssignmentsBulkUnassignResponse{}, nil)
		return
	}

	_, err = client.RoleAssignmentsBulkUnassign(ctx, exampleDomainID, exampleDomainRoleUnassignmentRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestTags_ListTags() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List of all tenant's tags example"},
	})

	exampleRes := admin.TagsInfo{
		Value: []admin.TagInfo{
			{
				DisplayName: to.Ptr("Finance"),
				ID:          to.Ptr("bc23d4c6-cc92-4eb6-bcb5-0ff98429bbff"),
			},
			{
				DisplayName: to.Ptr("Human resources"),
				ID:          to.Ptr("b0bca781-003c-4041-b1c4-f94d34ba76d4"),
			},
			{
				DisplayName: to.Ptr("Engineering P1"),
				ID:          to.Ptr("6af5a1b6-bc4c-4c0a-b60d-30c68e6e3034"),
			},
			{
				DisplayName: to.Ptr("Marketing Q1"),
				ID:          to.Ptr("6c00e8eb-51d4-46f7-8b90-7e98520ea7a0"),
			},
			{
				DisplayName: to.Ptr("HR Sales Q1"),
				ID:          to.Ptr("17df435d-9efd-48c1-a937-7d6fd70ab26a"),
			},
			{
				DisplayName: to.Ptr("Root"),
				ID:          to.Ptr("fb765fe3-d404-4f24-9d67-5916449c4c50"),
			},
			{
				DisplayName: to.Ptr("Legal EMEA"),
				ID:          to.Ptr("bda31be4-7efe-4272-8b85-e1b2ff0f0592"),
			}},
	}

	testsuite.serverFactory.TagsServer.NewListTagsPager = func(options *admin.TagsClientListTagsOptions) (resp azfake.PagerResponder[admin.TagsClientListTagsResponse]) {
		resp = azfake.PagerResponder[admin.TagsClientListTagsResponse]{}
		resp.AddPage(http.StatusOK, admin.TagsClientListTagsResponse{TagsInfo: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewTagsClient()
	pager := client.NewListTagsPager(&admin.TagsClientListTagsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.TagsInfo))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List of all tenant's tags with continuation example"},
	})

	exampleRes = admin.TagsInfo{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/admin/tags?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []admin.TagInfo{
			{
				DisplayName: to.Ptr("Finance"),
				ID:          to.Ptr("bc23d4c6-cc92-4eb6-bcb5-0ff98429bbff"),
			},
			{
				DisplayName: to.Ptr("Human resources"),
				ID:          to.Ptr("b0bca781-003c-4041-b1c4-f94d34ba76d4"),
			},
			{
				DisplayName: to.Ptr("Engineering P1"),
				ID:          to.Ptr("6af5a1b6-bc4c-4c0a-b60d-30c68e6e3034"),
			},
			{
				DisplayName: to.Ptr("Marketing Q1"),
				ID:          to.Ptr("6c00e8eb-51d4-46f7-8b90-7e98520ea7a0"),
			},
			{
				DisplayName: to.Ptr("HR Sales Q1"),
				ID:          to.Ptr("17df435d-9efd-48c1-a937-7d6fd70ab26a"),
			},
			{
				DisplayName: to.Ptr("Root"),
				ID:          to.Ptr("fb765fe3-d404-4f24-9d67-5916449c4c50"),
			},
			{
				DisplayName: to.Ptr("Legal EMEA"),
				ID:          to.Ptr("bda31be4-7efe-4272-8b85-e1b2ff0f0592"),
			}},
	}

	testsuite.serverFactory.TagsServer.NewListTagsPager = func(options *admin.TagsClientListTagsOptions) (resp azfake.PagerResponder[admin.TagsClientListTagsResponse]) {
		resp = azfake.PagerResponder[admin.TagsClientListTagsResponse]{}
		resp.AddPage(http.StatusOK, admin.TagsClientListTagsResponse{TagsInfo: exampleRes}, nil)
		return
	}

	pager = client.NewListTagsPager(&admin.TagsClientListTagsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.TagsInfo))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestTags_BulkCreateTags() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create tags in bulk example"},
	})
	var exampleCreateTagsRequest admin.CreateTagsRequest
	exampleCreateTagsRequest = admin.CreateTagsRequest{}

	testsuite.serverFactory.TagsServer.BulkCreateTags = func(ctx context.Context, createTagsRequest admin.CreateTagsRequest, options *admin.TagsClientBulkCreateTagsOptions) (resp azfake.Responder[admin.TagsClientBulkCreateTagsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleCreateTagsRequest, createTagsRequest))
		resp = azfake.Responder[admin.TagsClientBulkCreateTagsResponse]{}
		resp.SetResponse(http.StatusCreated, admin.TagsClientBulkCreateTagsResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewTagsClient()
	_, err = client.BulkCreateTags(ctx, exampleCreateTagsRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestTags_DeleteTag() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a tag example"},
	})
	var exampleTagID string
	exampleTagID = "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f"

	testsuite.serverFactory.TagsServer.DeleteTag = func(ctx context.Context, tagID string, options *admin.TagsClientDeleteTagOptions) (resp azfake.Responder[admin.TagsClientDeleteTagResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleTagID, tagID)
		resp = azfake.Responder[admin.TagsClientDeleteTagResponse]{}
		resp.SetResponse(http.StatusOK, admin.TagsClientDeleteTagResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewTagsClient()
	_, err = client.DeleteTag(ctx, exampleTagID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestTags_UpdateTag() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a tag example"},
	})
	var exampleTagID string
	var exampleUpdateTagRequest admin.UpdateTagRequest
	exampleTagID = "d889df97-7061-45f6-98b8-c53a83c2cf68"
	exampleUpdateTagRequest = admin.UpdateTagRequest{
		DisplayName: to.Ptr("Tag's new name."),
	}

	exampleRes := admin.Tag{
		DisplayName: to.Ptr("Tag's new name."),
		ID:          to.Ptr("d889df97-7061-45f6-98b8-c53a83c2cf68"),
	}

	testsuite.serverFactory.TagsServer.UpdateTag = func(ctx context.Context, tagID string, updateTagRequest admin.UpdateTagRequest, options *admin.TagsClientUpdateTagOptions) (resp azfake.Responder[admin.TagsClientUpdateTagResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleTagID, tagID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateTagRequest, updateTagRequest))
		resp = azfake.Responder[admin.TagsClientUpdateTagResponse]{}
		resp.SetResponse(http.StatusOK, admin.TagsClientUpdateTagResponse{Tag: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewTagsClient()
	res, err := client.UpdateTag(ctx, exampleTagID, exampleUpdateTagRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Tag))
}

func (testsuite *FakeTestSuite) TestLabels_BulkRemoveLabels() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Remove labels example"},
	})
	var exampleRemoveLabelsRequest admin.RemoveLabelsRequest
	exampleRemoveLabelsRequest = admin.RemoveLabelsRequest{
		Items: []admin.ItemInfo{
			{
				Type: to.Ptr(admin.ItemTypeDashboard),
				ID:   to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542a"),
			},
			{
				Type: to.Ptr(admin.ItemTypeDashboard),
				ID:   to.Ptr("476fcafe-b514-495d-b13f-ca9a4f0b1d8b"),
			},
			{
				Type: to.Ptr(admin.ItemTypeReport),
				ID:   to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542c"),
			},
			{
				Type: to.Ptr(admin.ItemTypeSemanticModel),
				ID:   to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542e"),
			},
			{
				Type: to.Ptr(admin.ItemTypeNotebook),
				ID:   to.Ptr("476fcafe-b514-495d-b13f-ca9a4f0b1d8f"),
			}},
	}

	exampleRes := admin.ItemsChangeLabelResponse{
		ItemsChangeLabelStatus: []admin.ItemChangeLabelStatus{
			{
				Type:   to.Ptr(admin.ItemTypeDashboard),
				ID:     to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542a"),
				Status: to.Ptr(admin.StatusNotFound),
			},
			{
				Type:   to.Ptr(admin.ItemTypeDashboard),
				ID:     to.Ptr("476fcafe-b514-495d-b13f-ca9a4f0b1d8b"),
				Status: to.Ptr(admin.StatusFailed),
			},
			{
				Type:   to.Ptr(admin.ItemTypeReport),
				ID:     to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542c"),
				Status: to.Ptr(admin.StatusSucceeded),
			},
			{
				Type:   to.Ptr(admin.ItemTypeSemanticModel),
				ID:     to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542e"),
				Status: to.Ptr(admin.StatusInsufficientUsageRights),
			},
			{
				Type:   to.Ptr(admin.ItemTypeNotebook),
				ID:     to.Ptr("476fcafe-b514-495d-b13f-ca9a4f0b1d8f"),
				Status: to.Ptr(admin.StatusFailedToGetUsageRights),
			}},
	}

	testsuite.serverFactory.LabelsServer.BulkRemoveLabels = func(ctx context.Context, removeLabelsRequest admin.RemoveLabelsRequest, options *admin.LabelsClientBulkRemoveLabelsOptions) (resp azfake.Responder[admin.LabelsClientBulkRemoveLabelsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleRemoveLabelsRequest, removeLabelsRequest))
		resp = azfake.Responder[admin.LabelsClientBulkRemoveLabelsResponse]{}
		resp.SetResponse(http.StatusOK, admin.LabelsClientBulkRemoveLabelsResponse{ItemsChangeLabelResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewLabelsClient()
	res, err := client.BulkRemoveLabels(ctx, exampleRemoveLabelsRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ItemsChangeLabelResponse))
}

func (testsuite *FakeTestSuite) TestLabels_BulkSetLabels() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Set labels example"},
	})
	var exampleSetLabelsRequest admin.SetLabelsRequest
	exampleSetLabelsRequest = admin.SetLabelsRequest{
		AssignmentMethod: to.Ptr(admin.AssignmentMethodStandard),
		DelegatedPrincipal: &admin.Principal{
			Type: to.Ptr(admin.PrincipalTypeUser),
			ID:   to.Ptr("796ce6ad-9163-4c16-9559-c68192a251de"),
		},
		Items: []admin.ItemInfo{
			{
				Type: to.Ptr(admin.ItemTypeDashboard),
				ID:   to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542a"),
			},
			{
				Type: to.Ptr(admin.ItemTypeDashboard),
				ID:   to.Ptr("476fcafe-b514-495d-b13f-ca9a4f0b1d8b"),
			},
			{
				Type: to.Ptr(admin.ItemTypeReport),
				ID:   to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542c"),
			},
			{
				Type: to.Ptr(admin.ItemTypeSemanticModel),
				ID:   to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542e"),
			},
			{
				Type: to.Ptr(admin.ItemTypeNotebook),
				ID:   to.Ptr("476fcafe-b514-495d-b13f-ca9a4f0b1d8f"),
			}},
		LabelID: to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542d"),
	}

	exampleRes := admin.ItemsChangeLabelResponse{
		ItemsChangeLabelStatus: []admin.ItemChangeLabelStatus{
			{
				Type:   to.Ptr(admin.ItemTypeDashboard),
				ID:     to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542a"),
				Status: to.Ptr(admin.StatusNotFound),
			},
			{
				Type:   to.Ptr(admin.ItemTypeDashboard),
				ID:     to.Ptr("476fcafe-b514-495d-b13f-ca9a4f0b1d8b"),
				Status: to.Ptr(admin.StatusFailed),
			},
			{
				Type:   to.Ptr(admin.ItemTypeReport),
				ID:     to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542c"),
				Status: to.Ptr(admin.StatusSucceeded),
			},
			{
				Type:   to.Ptr(admin.ItemTypeSemanticModel),
				ID:     to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542e"),
				Status: to.Ptr(admin.StatusInsufficientUsageRights),
			},
			{
				Type:   to.Ptr(admin.ItemTypeNotebook),
				ID:     to.Ptr("476fcafe-b514-495d-b13f-ca9a4f0b1d8f"),
				Status: to.Ptr(admin.StatusFailedToGetUsageRights),
			}},
	}

	testsuite.serverFactory.LabelsServer.BulkSetLabels = func(ctx context.Context, setLabelsRequest admin.SetLabelsRequest, options *admin.LabelsClientBulkSetLabelsOptions) (resp azfake.Responder[admin.LabelsClientBulkSetLabelsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleSetLabelsRequest, setLabelsRequest))
		resp = azfake.Responder[admin.LabelsClientBulkSetLabelsResponse]{}
		resp.SetResponse(http.StatusOK, admin.LabelsClientBulkSetLabelsResponse{ItemsChangeLabelResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewLabelsClient()
	res, err := client.BulkSetLabels(ctx, exampleSetLabelsRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ItemsChangeLabelResponse))
}

func (testsuite *FakeTestSuite) TestExternalDataSharesProvider_ListExternalDataShares() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List external data shares in the tenant example"},
	})

	exampleRes := admin.ExternalDataShares{
		Value: []admin.ExternalDataShare{
			{
				CreatorPrincipal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Jacob Hancock"),
					ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("jacob@contoso.com"),
					},
				},
				ExpirationTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-12-13T00:00:00.000Z"); return t }()),
				ID:                to.Ptr("dccc162f-7a41-4720-83c3-5c7e81187959"),
				InvitationURL:     to.Ptr("https://app.fabric.microsoft.com/externaldatasharing/accept?providerTenantId=34f92457-fe9d-4c36-92a8-499fdfaf0f8f&shareId=dccc162f-7a41-4720-83c3-5c7e81187959"),
				ItemID:            to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
				Paths: []string{
					"Files/Sales/Contoso_Sales_2023"},
				Recipient: &admin.ExternalDataShareRecipient{
					UserPrincipalName: to.Ptr("lisa@fabrikam.com"),
				},
				Status:      to.Ptr(admin.ExternalDataShareStatusPending),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				AcceptedByTenantID: to.Ptr("c51dc03f-268a-4da0-a879-25f24947ab8b"),
				CreatorPrincipal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Jacob Hancock"),
					ID:          to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("jacob@contoso.com"),
					},
				},
				ExpirationTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-08-31T00:00:00.000Z"); return t }()),
				ID:                to.Ptr("96c21561-65b8-4b23-bb9a-ee8cef945c45"),
				InvitationURL:     to.Ptr("https://app.fabric.microsoft.com/externaldatasharing/accept?providerTenantId=34f92457-fe9d-4c36-92a8-499fdfaf0f8f&shareId=96c21561-65b8-4b23-bb9a-ee8cef945c45"),
				ItemID:            to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
				Paths: []string{
					"Files/Sales/Contoso_Sales_2023"},
				Recipient: &admin.ExternalDataShareRecipient{
					UserPrincipalName: to.Ptr("lisa@fabrikam.com"),
				},
				Status:      to.Ptr(admin.ExternalDataShareStatusActive),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				CreatorPrincipal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Eric Solomon"),
					ID:          to.Ptr("81fac5e1-2a81-421b-a168-110b1c72fa11"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("eric@contoso.com"),
					},
				},
				ExpirationTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-01T00:00:00.000Z"); return t }()),
				ID:                to.Ptr("0f40aeca-8f78-4a6f-a552-e5c45faadc60"),
				InvitationURL:     to.Ptr("https://app.fabric.microsoft.com/externaldatasharing/accept?providerTenantId=34f92457-fe9d-4c36-92a8-499fdfaf0f8f&shareId=0f40aeca-8f78-4a6f-a552-e5c45faadc60"),
				ItemID:            to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
				Paths: []string{
					"Files/Sales/Contoso_Sales_2023"},
				Recipient: &admin.ExternalDataShareRecipient{
					UserPrincipalName: to.Ptr("lisa@fabrikam.com"),
				},
				Status:      to.Ptr(admin.ExternalDataShareStatusInvitationExpired),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				AcceptedByTenantID: to.Ptr("c51dc03f-268a-4da0-a879-25f24947ab8b"),
				CreatorPrincipal: &admin.Principal{
					Type:        to.Ptr(admin.PrincipalTypeUser),
					DisplayName: to.Ptr("Eric Solomon"),
					ID:          to.Ptr("81fac5e1-2a81-421b-a168-110b1c72fa11"),
					UserDetails: &admin.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("eric@contoso.com"),
					},
				},
				ExpirationTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-12-01T00:00:00.000Z"); return t }()),
				ID:                to.Ptr("89e82a82-0140-4837-8eee-9c919e3e5952"),
				InvitationURL:     to.Ptr("https://app.fabric.microsoft.com/externaldatasharing/accept?providerTenantId=34f92457-fe9d-4c36-92a8-499fdfaf0f8f&shareId=89e82a82-0140-4837-8eee-9c919e3e5952"),
				ItemID:            to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
				Paths: []string{
					"Files/Sales/Contoso_Sales_2023"},
				Recipient: &admin.ExternalDataShareRecipient{
					UserPrincipalName: to.Ptr("lisa@fabrikam.com"),
				},
				Status:      to.Ptr(admin.ExternalDataShareStatusRevoked),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ExternalDataSharesProviderServer.NewListExternalDataSharesPager = func(options *admin.ExternalDataSharesProviderClientListExternalDataSharesOptions) (resp azfake.PagerResponder[admin.ExternalDataSharesProviderClientListExternalDataSharesResponse]) {
		resp = azfake.PagerResponder[admin.ExternalDataSharesProviderClientListExternalDataSharesResponse]{}
		resp.AddPage(http.StatusOK, admin.ExternalDataSharesProviderClientListExternalDataSharesResponse{ExternalDataShares: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewExternalDataSharesProviderClient()
	pager := client.NewListExternalDataSharesPager(&admin.ExternalDataSharesProviderClientListExternalDataSharesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ExternalDataShares))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestExternalDataSharesProvider_RevokeExternalDataShare() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Revoke external data share example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleExternalDataShareID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleExternalDataShareID = "dccc162f-7a41-4720-83c3-5c7e81187959"

	testsuite.serverFactory.ExternalDataSharesProviderServer.RevokeExternalDataShare = func(ctx context.Context, workspaceID string, itemID string, externalDataShareID string, options *admin.ExternalDataSharesProviderClientRevokeExternalDataShareOptions) (resp azfake.Responder[admin.ExternalDataSharesProviderClientRevokeExternalDataShareResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleExternalDataShareID, externalDataShareID)
		resp = azfake.Responder[admin.ExternalDataSharesProviderClientRevokeExternalDataShareResponse]{}
		resp.SetResponse(http.StatusOK, admin.ExternalDataSharesProviderClientRevokeExternalDataShareResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewExternalDataSharesProviderClient()
	_, err = client.RevokeExternalDataShare(ctx, exampleWorkspaceID, exampleItemID, exampleExternalDataShareID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestSharingLinks_RemoveAllSharingLinks() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Remove all sharing links example"},
	})
	var exampleRemoveAllSharingLinksRequest admin.RemoveAllSharingLinksRequest
	exampleRemoveAllSharingLinksRequest = admin.RemoveAllSharingLinksRequest{
		SharingLinkType: to.Ptr(admin.SharingLinkTypeOrgLink),
	}

	testsuite.serverFactory.SharingLinksServer.BeginRemoveAllSharingLinks = func(ctx context.Context, removeAllSharingLinksRequest admin.RemoveAllSharingLinksRequest, options *admin.SharingLinksClientBeginRemoveAllSharingLinksOptions) (resp azfake.PollerResponder[admin.SharingLinksClientRemoveAllSharingLinksResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleRemoveAllSharingLinksRequest, removeAllSharingLinksRequest))
		resp = azfake.PollerResponder[admin.SharingLinksClientRemoveAllSharingLinksResponse]{}
		resp.SetTerminalResponse(http.StatusOK, admin.SharingLinksClientRemoveAllSharingLinksResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewSharingLinksClient()
	poller, err := client.BeginRemoveAllSharingLinks(ctx, exampleRemoveAllSharingLinksRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestSharingLinks_BulkRemoveSharingLinks() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Remove sharing links for specific items example"},
	})
	var exampleBulkRemoveSharingLinksRequest admin.BulkRemoveSharingLinksRequest
	exampleBulkRemoveSharingLinksRequest = admin.BulkRemoveSharingLinksRequest{
		Items: []admin.ItemInfo{
			{
				Type: to.Ptr(admin.ItemTypeReport),
				ID:   to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542a"),
			},
			{
				Type: to.Ptr(admin.ItemTypeReport),
				ID:   to.Ptr("476fcafe-b514-495d-b13f-ca9a4f0b1d8b"),
			},
			{
				Type: to.Ptr(admin.ItemTypeReport),
				ID:   to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542c"),
			},
			{
				Type: to.Ptr(admin.ItemTypeNotebook),
				ID:   to.Ptr("476fcafe-b514-495d-b13f-ca9a4f0b1d8f"),
			}},
		SharingLinkType: to.Ptr(admin.SharingLinkTypeOrgLink),
	}

	exampleRes := admin.BulkRemoveSharingLinksResponse{
		ItemsRemoveSharingLinksStatus: []admin.ItemRemoveSharingLinksStatus{
			{
				Type:   to.Ptr(admin.ItemTypeReport),
				ID:     to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542a"),
				Status: to.Ptr(admin.SharingLinksRemovalStatusNotFound),
			},
			{
				Type:   to.Ptr(admin.ItemTypeReport),
				ID:     to.Ptr("476fcafe-b514-495d-b13f-ca9a4f0b1d8b"),
				Status: to.Ptr(admin.SharingLinksRemovalStatus("Failed")),
			},
			{
				Type:   to.Ptr(admin.ItemTypeReport),
				ID:     to.Ptr("fe472f5e-636e-4c10-a1c6-7e9edc0b542c"),
				Status: to.Ptr(admin.SharingLinksRemovalStatusSucceeded),
			},
			{
				Type:   to.Ptr(admin.ItemTypeNotebook),
				ID:     to.Ptr("476fcafe-b514-495d-b13f-ca9a4f0b1d8f"),
				Status: to.Ptr(admin.SharingLinksRemovalStatusSucceeded),
			}},
		SharingLinkType: to.Ptr(admin.SharingLinkTypeOrgLink),
	}

	testsuite.serverFactory.SharingLinksServer.BeginBulkRemoveSharingLinks = func(ctx context.Context, bulkRemoveSharingLinksRequest admin.BulkRemoveSharingLinksRequest, options *admin.SharingLinksClientBeginBulkRemoveSharingLinksOptions) (resp azfake.PollerResponder[admin.SharingLinksClientBulkRemoveSharingLinksResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleBulkRemoveSharingLinksRequest, bulkRemoveSharingLinksRequest))
		resp = azfake.PollerResponder[admin.SharingLinksClientBulkRemoveSharingLinksResponse]{}
		resp.SetTerminalResponse(http.StatusOK, admin.SharingLinksClientBulkRemoveSharingLinksResponse{BulkRemoveSharingLinksResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewSharingLinksClient()
	poller, err := client.BeginBulkRemoveSharingLinks(ctx, exampleBulkRemoveSharingLinksRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.BulkRemoveSharingLinksResponse))
}
