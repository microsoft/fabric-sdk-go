// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package admin_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"

	"github.com/microsoft/fabric-sdk-go/fabric/admin"
)

// Generated from example definition
func ExampleDomainsClient_ListDomains_getAllNonEmptyDomainsExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewDomainsClient().ListDomains(ctx, &admin.DomainsClientListDomainsOptions{NonEmptyOnly: to.Ptr(true)})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.DomainsResponse = admin.DomainsResponse{
	// 	Domains: []admin.Domain{
	// 		{
	// 			Description: to.Ptr("This domain is used for identifying financial data and reports."),
	// 			ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAdminsOnly),
	// 			DisplayName: to.Ptr("Finance"),
	// 			ID: to.Ptr("bc23d4c6-cc92-4eb6-bcb5-0ff98429bbff"),
	// 		},
	// 		{
	// 			ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
	// 			DisplayName: to.Ptr("Human resources"),
	// 			ID: to.Ptr("b0bca781-003c-4041-b1c4-f94d34ba76d4"),
	// 		},
	// 		{
	// 			ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
	// 			DisplayName: to.Ptr("HR Sales"),
	// 			ID: to.Ptr("6af5a1b6-bc4c-4c0a-b60d-30c68e6e3034"),
	// 			ParentDomainID: to.Ptr("bc23d4c6-cc92-4eb6-bcb5-0ff98429bbff"),
	// 		},
	// 		{
	// 			ContributorsScope: to.Ptr(admin.ContributorsScopeTypeSpecificUsersAndGroups),
	// 			DisplayName: to.Ptr("Marketing"),
	// 			ID: to.Ptr("6c00e8eb-51d4-46f7-8b90-7e98520ea7a0"),
	// 	}},
	// }
}

// Generated from example definition
func ExampleDomainsClient_ListDomains_getInfoForAllDomainsExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewDomainsClient().ListDomains(ctx, &admin.DomainsClientListDomainsOptions{NonEmptyOnly: nil})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.DomainsResponse = admin.DomainsResponse{
	// 	Domains: []admin.Domain{
	// 		{
	// 			Description: to.Ptr("This domain is used for identifying financial data and reports."),
	// 			ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAdminsOnly),
	// 			DisplayName: to.Ptr("Finance"),
	// 			ID: to.Ptr("bc23d4c6-cc92-4eb6-bcb5-0ff98429bbff"),
	// 		},
	// 		{
	// 			ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
	// 			DisplayName: to.Ptr("Human resources"),
	// 			ID: to.Ptr("b0bca781-003c-4041-b1c4-f94d34ba76d4"),
	// 		},
	// 		{
	// 			ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
	// 			DisplayName: to.Ptr("HR Sales"),
	// 			ID: to.Ptr("6af5a1b6-bc4c-4c0a-b60d-30c68e6e3034"),
	// 			ParentDomainID: to.Ptr("bc23d4c6-cc92-4eb6-bcb5-0ff98429bbff"),
	// 		},
	// 		{
	// 			ContributorsScope: to.Ptr(admin.ContributorsScopeTypeSpecificUsersAndGroups),
	// 			DisplayName: to.Ptr("Marketing"),
	// 			ID: to.Ptr("6c00e8eb-51d4-46f7-8b90-7e98520ea7a0"),
	// 		},
	// 		{
	// 			Description: to.Ptr("Admins only"),
	// 			ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
	// 			DisplayName: to.Ptr("AdminsOnly"),
	// 			ID: to.Ptr("17df435d-9efd-48c1-a937-7d6fd70ab26a"),
	// 			ParentDomainID: to.Ptr("f2f6a374-789e-4d1d-9cc7-6e0b934fc529"),
	// 		},
	// 		{
	// 			ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
	// 			DisplayName: to.Ptr("Root"),
	// 			ID: to.Ptr("fb765fe3-d404-4f24-9d67-5916449c4c50"),
	// 		},
	// 		{
	// 			Description: to.Ptr("This domain is used for identifying legal data and reports."),
	// 			ContributorsScope: to.Ptr(admin.ContributorsScopeTypeAllTenant),
	// 			DisplayName: to.Ptr("Legal"),
	// 			ID: to.Ptr("bda31be4-7efe-4272-8b85-e1b2ff0f0592"),
	// 	}},
	// }
}

// Generated from example definition
func ExampleDomainsClient_CreateDomain() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewDomainsClient().CreateDomain(ctx, admin.CreateDomainRequest{
		Description:    to.Ptr("This domain is used for identifying financial data and reports."),
		DisplayName:    to.Ptr("Finance"),
		ParentDomainID: to.Ptr("5f6552c3-816c-43e7-8289-842f8b35f9df"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleDomainsClient_GetDomain() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewDomainsClient().GetDomain(ctx, "f2f6a374-789e-4d1d-9cc7-6e0b934fc529", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Domain = admin.Domain{
	// 	Description: to.Ptr("This domain is used for identifying financial data and reports."),
	// 	ContributorsScope: to.Ptr(admin.ContributorsScopeTypeSpecificUsersAndGroups),
	// 	DisplayName: to.Ptr("Finance"),
	// 	ID: to.Ptr("f2f6a374-789e-4d1d-9cc7-6e0b934fc529"),
	// }
}

// Generated from example definition
func ExampleDomainsClient_DeleteDomain() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewDomainsClient().DeleteDomain(ctx, "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleDomainsClient_UpdateDomain() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewDomainsClient().UpdateDomain(ctx, "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f", admin.UpdateDomainRequest{
		Description:       to.Ptr("Domain's new description"),
		ContributorsScope: to.Ptr(admin.ContributorsScopeTypeSpecificUsersAndGroups),
		DisplayName:       to.Ptr("Domain's new name"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Domain = admin.Domain{
	// 	Description: to.Ptr("Domain's new description"),
	// 	ContributorsScope: to.Ptr(admin.ContributorsScopeTypeSpecificUsersAndGroups),
	// 	DisplayName: to.Ptr("Domain's new name"),
	// 	ID: to.Ptr("f2f6a374-789e-4d1d-9cc7-6e0b934fc529"),
	// }
}

// Generated from example definition
func ExampleDomainsClient_NewListDomainWorkspacesPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewDomainsClient().NewListDomainWorkspacesPager("97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f", &admin.DomainsClientListDomainWorkspacesOptions{ContinuationToken: nil})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.DomainWorkspaces = admin.DomainWorkspaces{
		// 	Value: []admin.DomainWorkspace{
		// 		{
		// 			DisplayName: to.Ptr("Mark8ProjectTeam"),
		// 			ID: to.Ptr("e281785b-5608-41ac-a1a1-78b48b95b825"),
		// 		},
		// 		{
		// 			DisplayName: to.Ptr("Team southern region"),
		// 			ID: to.Ptr("24402490-9519-48b9-9d51-b2db4095a56b"),
		// 		},
		// 		{
		// 			DisplayName: to.Ptr("SalesAndMarketing"),
		// 			ID: to.Ptr("46f8ccd7-a209-4e12-978f-56ef3c44a68c"),
		// 	}},
		// }
	}
}

// Generated from example definition
func ExampleDomainsClient_AssignDomainWorkspacesByIDs() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewDomainsClient().AssignDomainWorkspacesByIDs(ctx, "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f", admin.AssignDomainWorkspacesByIDsRequest{
		WorkspacesIDs: []string{
			"e8de1852-7382-480a-8404-d5b1f5e1ab65",
			"5348d3a9-c096-4074-9083-09e3ca69c8e5",
			"ac561643-c5c5-4cf1-868e-8755a90e6fa3"},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleDomainsClient_UnassignDomainWorkspacesByIDs() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewDomainsClient().UnassignDomainWorkspacesByIDs(ctx, "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f", &admin.DomainsClientUnassignDomainWorkspacesByIDsOptions{UnassignDomainWorkspacesByIDsRequest: &admin.UnassignDomainWorkspacesByIDsRequest{
		WorkspacesIDs: []string{
			"e8de1852-7382-480a-8404-d5b1f5e1ab65",
			"5348d3a9-c096-4074-9083-09e3ca69c8e5",
			"ac561643-c5c5-4cf1-868e-8755a90e6fa3"},
	},
	})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleDomainsClient_UnassignAllDomainWorkspaces() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewDomainsClient().UnassignAllDomainWorkspaces(ctx, "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleDomainsClient_RoleAssignmentsBulkAssign_assignDomainAdminsExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewDomainsClient().RoleAssignmentsBulkAssign(ctx, "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f", admin.DomainRoleAssignmentRequest{
		Type: to.Ptr(admin.DomainRoleAdmins),
		Principals: []admin.Principal{
			{
				Type: to.Ptr(admin.PrincipalTypeUser),
				ID:   to.Ptr("796ce6ad-9163-4c16-9559-c68192a251de"),
			}},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleDomainsClient_RoleAssignmentsBulkAssign_assignDomainContributorsExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewDomainsClient().RoleAssignmentsBulkAssign(ctx, "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f", admin.DomainRoleAssignmentRequest{
		Type: to.Ptr(admin.DomainRoleContributors),
		Principals: []admin.Principal{
			{
				Type: to.Ptr(admin.PrincipalTypeUser),
				ID:   to.Ptr("796ce6ad-9163-4c16-9559-c68192a251de"),
			}},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleDomainsClient_RoleAssignmentsBulkUnassign_unassignDomainAdminsExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewDomainsClient().RoleAssignmentsBulkUnassign(ctx, "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f", admin.DomainRoleUnassignmentRequest{
		Type: to.Ptr(admin.DomainRoleAdmins),
		Principals: []admin.Principal{
			{
				Type: to.Ptr(admin.PrincipalTypeUser),
				ID:   to.Ptr("796ce6ad-9163-4c16-9559-c68192a251de"),
			}},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleDomainsClient_RoleAssignmentsBulkUnassign_unassignDomainContributorsExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := admin.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewDomainsClient().RoleAssignmentsBulkUnassign(ctx, "97dd1d38-a4c6-41ed-bc4f-1e383f8ddd0f", admin.DomainRoleUnassignmentRequest{
		Type: to.Ptr(admin.DomainRoleContributors),
		Principals: []admin.Principal{
			{
				Type: to.Ptr(admin.PrincipalTypeUser),
				ID:   to.Ptr("796ce6ad-9163-4c16-9559-c68192a251de"),
			}},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}
