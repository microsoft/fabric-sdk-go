// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package admin

import (
	"context"
	"errors"
	"net/http"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// SharingLinksClient contains the methods for the SharingLinks group.
// Don't use this type directly, use a constructor function instead.
type SharingLinksClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginBulkRemoveSharingLinks - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development
// purposes only. It may change based on feedback and is not recommended for production use.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Use LinksSharedToWholeOrganization [https://learn.microsoft.com/en-us/rest/api/power-bi/admin] PowerBI Admin REST API to
// get Power BI Reports shared via organizational sharing links.
// PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All
// LIMITATIONS
// * Maximum 10 requests per minute.
// * Each request can delete organization sharing links for up to 500 Fabric items.
// * Only Power BI Reports are supported.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - bulkRemoveSharingLinksRequest - A list of items.
//   - options - SharingLinksClientBeginBulkRemoveSharingLinksOptions contains the optional parameters for the SharingLinksClient.BeginBulkRemoveSharingLinks
//     method.
func (client *SharingLinksClient) BeginBulkRemoveSharingLinks(ctx context.Context, bulkRemoveSharingLinksRequest BulkRemoveSharingLinksRequest, options *SharingLinksClientBeginBulkRemoveSharingLinksOptions) (*runtime.Poller[SharingLinksClientBulkRemoveSharingLinksResponse], error) {
	return client.beginBulkRemoveSharingLinks(ctx, bulkRemoveSharingLinksRequest, options)
}

// BulkRemoveSharingLinks - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development
// purposes only. It may change based on feedback and is not recommended for production use.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Use LinksSharedToWholeOrganization [https://learn.microsoft.com/en-us/rest/api/power-bi/admin] PowerBI Admin REST API to
// get Power BI Reports shared via organizational sharing links.
// PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All
// LIMITATIONS
// * Maximum 10 requests per minute.
// * Each request can delete organization sharing links for up to 500 Fabric items.
// * Only Power BI Reports are supported.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *SharingLinksClient) bulkRemoveSharingLinks(ctx context.Context, bulkRemoveSharingLinksRequest BulkRemoveSharingLinksRequest, options *SharingLinksClientBeginBulkRemoveSharingLinksOptions) (*http.Response, error) {
	var err error
	const operationName = "admin.SharingLinksClient.BeginBulkRemoveSharingLinks"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.bulkRemoveSharingLinksCreateRequest(ctx, bulkRemoveSharingLinksRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// bulkRemoveSharingLinksCreateRequest creates the BulkRemoveSharingLinks request.
func (client *SharingLinksClient) bulkRemoveSharingLinksCreateRequest(ctx context.Context, bulkRemoveSharingLinksRequest BulkRemoveSharingLinksRequest, _ *SharingLinksClientBeginBulkRemoveSharingLinksOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/items/bulkRemoveSharingLinks"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, bulkRemoveSharingLinksRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginRemoveAllSharingLinks - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development
// purposes only. It may change based on feedback and is not recommended for production use.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Use LinksSharedToWholeOrganization [https://learn.microsoft.com/en-us/rest/api/power-bi/admin] PowerBI Admin REST API to
// get Power BI Reports shared via organizational sharing links.
// PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All
// LIMITATIONS
// * Maximum 10 requests per minute.
// * Only Power BI Reports are supported.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - removeAllSharingLinksRequest - Type of sharing links to be removed.
//   - options - SharingLinksClientBeginRemoveAllSharingLinksOptions contains the optional parameters for the SharingLinksClient.BeginRemoveAllSharingLinks
//     method.
func (client *SharingLinksClient) BeginRemoveAllSharingLinks(ctx context.Context, removeAllSharingLinksRequest RemoveAllSharingLinksRequest, options *SharingLinksClientBeginRemoveAllSharingLinksOptions) (*runtime.Poller[SharingLinksClientRemoveAllSharingLinksResponse], error) {
	return client.beginRemoveAllSharingLinks(ctx, removeAllSharingLinksRequest, options)
}

// RemoveAllSharingLinks - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development
// purposes only. It may change based on feedback and is not recommended for production use.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Use LinksSharedToWholeOrganization [https://learn.microsoft.com/en-us/rest/api/power-bi/admin] PowerBI Admin REST API to
// get Power BI Reports shared via organizational sharing links.
// PERMISSIONS The caller must be a Fabric administrator.
// REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All
// LIMITATIONS
// * Maximum 10 requests per minute.
// * Only Power BI Reports are supported.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *SharingLinksClient) removeAllSharingLinks(ctx context.Context, removeAllSharingLinksRequest RemoveAllSharingLinksRequest, options *SharingLinksClientBeginRemoveAllSharingLinksOptions) (*http.Response, error) {
	var err error
	const operationName = "admin.SharingLinksClient.BeginRemoveAllSharingLinks"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.removeAllSharingLinksCreateRequest(ctx, removeAllSharingLinksRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// removeAllSharingLinksCreateRequest creates the RemoveAllSharingLinks request.
func (client *SharingLinksClient) removeAllSharingLinksCreateRequest(ctx context.Context, removeAllSharingLinksRequest RemoveAllSharingLinksRequest, _ *SharingLinksClientBeginRemoveAllSharingLinksOptions) (*policy.Request, error) {
	urlPath := "/v1/admin/items/removeAllSharingLinks"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, removeAllSharingLinksRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// BulkRemoveSharingLinks - returns SharingLinksClientBulkRemoveSharingLinksResponse in sync mode.
// >  [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes only. It may change based on feedback and is not recommended for production use.
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// Use LinksSharedToWholeOrganization [https://learn.microsoft.com/en-us/rest/api/power-bi/admin] PowerBI Admin REST API to get Power BI Reports shared via organizational sharing links.
//
// PERMISSIONS The caller must be a Fabric administrator.
//
// # REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All
//
// LIMITATIONS
//
//   - Maximum 10 requests per minute.
//   - Each request can delete organization sharing links for up to 500 Fabric items.
//   - Only Power BI Reports are supported.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - bulkRemoveSharingLinksRequest - A list of items.
//   - options - SharingLinksClientBeginBulkRemoveSharingLinksOptions contains the optional parameters for the SharingLinksClient.BeginBulkRemoveSharingLinks method.
func (client *SharingLinksClient) BulkRemoveSharingLinks(ctx context.Context, bulkRemoveSharingLinksRequest BulkRemoveSharingLinksRequest, options *SharingLinksClientBeginBulkRemoveSharingLinksOptions) (SharingLinksClientBulkRemoveSharingLinksResponse, error) {
	result, err := iruntime.NewLRO(client.BeginBulkRemoveSharingLinks(ctx, bulkRemoveSharingLinksRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return SharingLinksClientBulkRemoveSharingLinksResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return SharingLinksClientBulkRemoveSharingLinksResponse{}, err
	}
	return result, err
}

// beginBulkRemoveSharingLinks creates the bulkRemoveSharingLinks request.
func (client *SharingLinksClient) beginBulkRemoveSharingLinks(ctx context.Context, bulkRemoveSharingLinksRequest BulkRemoveSharingLinksRequest, options *SharingLinksClientBeginBulkRemoveSharingLinksOptions) (*runtime.Poller[SharingLinksClientBulkRemoveSharingLinksResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.bulkRemoveSharingLinks(ctx, bulkRemoveSharingLinksRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[SharingLinksClientBulkRemoveSharingLinksResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SharingLinksClientBulkRemoveSharingLinksResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[SharingLinksClientBulkRemoveSharingLinksResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SharingLinksClientBulkRemoveSharingLinksResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// RemoveAllSharingLinks - returns SharingLinksClientRemoveAllSharingLinksResponse in sync mode.
// >  [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes only. It may change based on feedback and is not recommended for production use.
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// Use LinksSharedToWholeOrganization [https://learn.microsoft.com/en-us/rest/api/power-bi/admin] PowerBI Admin REST API to get Power BI Reports shared via organizational sharing links.
//
// PERMISSIONS The caller must be a Fabric administrator.
//
// # REQUIRED DELEGATED SCOPES Tenant.ReadWrite.All
//
// LIMITATIONS
//
//   - Maximum 10 requests per minute.
//   - Only Power BI Reports are supported.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - removeAllSharingLinksRequest - Type of sharing links to be removed.
//   - options - SharingLinksClientBeginRemoveAllSharingLinksOptions contains the optional parameters for the SharingLinksClient.BeginRemoveAllSharingLinks method.
func (client *SharingLinksClient) RemoveAllSharingLinks(ctx context.Context, removeAllSharingLinksRequest RemoveAllSharingLinksRequest, options *SharingLinksClientBeginRemoveAllSharingLinksOptions) (SharingLinksClientRemoveAllSharingLinksResponse, error) {
	result, err := iruntime.NewLRO(client.BeginRemoveAllSharingLinks(ctx, removeAllSharingLinksRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return SharingLinksClientRemoveAllSharingLinksResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return SharingLinksClientRemoveAllSharingLinksResponse{}, err
	}
	return result, err
}

// beginRemoveAllSharingLinks creates the removeAllSharingLinks request.
func (client *SharingLinksClient) beginRemoveAllSharingLinks(ctx context.Context, removeAllSharingLinksRequest RemoveAllSharingLinksRequest, options *SharingLinksClientBeginRemoveAllSharingLinksOptions) (*runtime.Poller[SharingLinksClientRemoveAllSharingLinksResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.removeAllSharingLinks(ctx, removeAllSharingLinksRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[SharingLinksClientRemoveAllSharingLinksResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SharingLinksClientRemoveAllSharingLinksResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[SharingLinksClientRemoveAllSharingLinksResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SharingLinksClientRemoveAllSharingLinksResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}
