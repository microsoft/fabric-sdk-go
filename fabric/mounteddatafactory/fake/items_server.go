// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/mounteddatafactory"
)

// ItemsServer is a fake server for instances of the mounteddatafactory.ItemsClient type.
type ItemsServer struct {
	// BeginCreateMountedDataFactory is the fake for method ItemsClient.BeginCreateMountedDataFactory
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateMountedDataFactory func(ctx context.Context, workspaceID string, createMountedDataFactoryRequest mounteddatafactory.CreateMountedDataFactoryRequest, options *mounteddatafactory.ItemsClientBeginCreateMountedDataFactoryOptions) (resp azfake.PollerResponder[mounteddatafactory.ItemsClientCreateMountedDataFactoryResponse], errResp azfake.ErrorResponder)

	// DeleteMountedDataFactory is the fake for method ItemsClient.DeleteMountedDataFactory
	// HTTP status codes to indicate success: http.StatusOK
	DeleteMountedDataFactory func(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *mounteddatafactory.ItemsClientDeleteMountedDataFactoryOptions) (resp azfake.Responder[mounteddatafactory.ItemsClientDeleteMountedDataFactoryResponse], errResp azfake.ErrorResponder)

	// GetMountedDataFactory is the fake for method ItemsClient.GetMountedDataFactory
	// HTTP status codes to indicate success: http.StatusOK
	GetMountedDataFactory func(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *mounteddatafactory.ItemsClientGetMountedDataFactoryOptions) (resp azfake.Responder[mounteddatafactory.ItemsClientGetMountedDataFactoryResponse], errResp azfake.ErrorResponder)

	// BeginGetMountedDataFactoryDefinition is the fake for method ItemsClient.BeginGetMountedDataFactoryDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetMountedDataFactoryDefinition func(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *mounteddatafactory.ItemsClientBeginGetMountedDataFactoryDefinitionOptions) (resp azfake.PollerResponder[mounteddatafactory.ItemsClientGetMountedDataFactoryDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListMountedDataFactoriesPager is the fake for method ItemsClient.NewListMountedDataFactoriesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListMountedDataFactoriesPager func(workspaceID string, options *mounteddatafactory.ItemsClientListMountedDataFactoriesOptions) (resp azfake.PagerResponder[mounteddatafactory.ItemsClientListMountedDataFactoriesResponse])

	// UpdateMountedDataFactory is the fake for method ItemsClient.UpdateMountedDataFactory
	// HTTP status codes to indicate success: http.StatusOK
	UpdateMountedDataFactory func(ctx context.Context, workspaceID string, mountedDataFactoryID string, updateMountedDataFactoryRequest mounteddatafactory.UpdateMountedDataFactoryRequest, options *mounteddatafactory.ItemsClientUpdateMountedDataFactoryOptions) (resp azfake.Responder[mounteddatafactory.ItemsClientUpdateMountedDataFactoryResponse], errResp azfake.ErrorResponder)

	// BeginUpdateMountedDataFactoryDefinition is the fake for method ItemsClient.BeginUpdateMountedDataFactoryDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateMountedDataFactoryDefinition func(ctx context.Context, workspaceID string, mountedDataFactoryID string, updateMountedDataFactoryDefinitionRequest mounteddatafactory.UpdateMountedDataFactoryDefinitionRequest, options *mounteddatafactory.ItemsClientBeginUpdateMountedDataFactoryDefinitionOptions) (resp azfake.PollerResponder[mounteddatafactory.ItemsClientUpdateMountedDataFactoryDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of mounteddatafactory.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                                     srv,
		beginCreateMountedDataFactory:           newTracker[azfake.PollerResponder[mounteddatafactory.ItemsClientCreateMountedDataFactoryResponse]](),
		beginGetMountedDataFactoryDefinition:    newTracker[azfake.PollerResponder[mounteddatafactory.ItemsClientGetMountedDataFactoryDefinitionResponse]](),
		newListMountedDataFactoriesPager:        newTracker[azfake.PagerResponder[mounteddatafactory.ItemsClientListMountedDataFactoriesResponse]](),
		beginUpdateMountedDataFactoryDefinition: newTracker[azfake.PollerResponder[mounteddatafactory.ItemsClientUpdateMountedDataFactoryDefinitionResponse]](),
	}
}

// ItemsServerTransport connects instances of mounteddatafactory.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                                     *ItemsServer
	beginCreateMountedDataFactory           *tracker[azfake.PollerResponder[mounteddatafactory.ItemsClientCreateMountedDataFactoryResponse]]
	beginGetMountedDataFactoryDefinition    *tracker[azfake.PollerResponder[mounteddatafactory.ItemsClientGetMountedDataFactoryDefinitionResponse]]
	newListMountedDataFactoriesPager        *tracker[azfake.PagerResponder[mounteddatafactory.ItemsClientListMountedDataFactoriesResponse]]
	beginUpdateMountedDataFactoryDefinition *tracker[azfake.PollerResponder[mounteddatafactory.ItemsClientUpdateMountedDataFactoryDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateMountedDataFactory":
				res.resp, res.err = i.dispatchBeginCreateMountedDataFactory(req)
			case "ItemsClient.DeleteMountedDataFactory":
				res.resp, res.err = i.dispatchDeleteMountedDataFactory(req)
			case "ItemsClient.GetMountedDataFactory":
				res.resp, res.err = i.dispatchGetMountedDataFactory(req)
			case "ItemsClient.BeginGetMountedDataFactoryDefinition":
				res.resp, res.err = i.dispatchBeginGetMountedDataFactoryDefinition(req)
			case "ItemsClient.NewListMountedDataFactoriesPager":
				res.resp, res.err = i.dispatchNewListMountedDataFactoriesPager(req)
			case "ItemsClient.UpdateMountedDataFactory":
				res.resp, res.err = i.dispatchUpdateMountedDataFactory(req)
			case "ItemsClient.BeginUpdateMountedDataFactoryDefinition":
				res.resp, res.err = i.dispatchBeginUpdateMountedDataFactoryDefinition(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateMountedDataFactory(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateMountedDataFactory == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateMountedDataFactory not implemented")}
	}
	beginCreateMountedDataFactory := i.beginCreateMountedDataFactory.get(req)
	if beginCreateMountedDataFactory == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mountedDataFactories`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[mounteddatafactory.CreateMountedDataFactoryRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateMountedDataFactory(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateMountedDataFactory = &respr
		i.beginCreateMountedDataFactory.add(req, beginCreateMountedDataFactory)
	}

	resp, err := server.PollerResponderNext(beginCreateMountedDataFactory, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateMountedDataFactory.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateMountedDataFactory) {
		i.beginCreateMountedDataFactory.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteMountedDataFactory(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteMountedDataFactory == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteMountedDataFactory not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mountedDataFactories/(?P<mountedDataFactoryId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mountedDataFactoryIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mountedDataFactoryId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteMountedDataFactory(req.Context(), workspaceIDParam, mountedDataFactoryIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetMountedDataFactory(req *http.Request) (*http.Response, error) {
	if i.srv.GetMountedDataFactory == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMountedDataFactory not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mountedDataFactories/(?P<mountedDataFactoryId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mountedDataFactoryIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mountedDataFactoryId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetMountedDataFactory(req.Context(), workspaceIDParam, mountedDataFactoryIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MountedDataFactory, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginGetMountedDataFactoryDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginGetMountedDataFactoryDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetMountedDataFactoryDefinition not implemented")}
	}
	beginGetMountedDataFactoryDefinition := i.beginGetMountedDataFactoryDefinition.get(req)
	if beginGetMountedDataFactoryDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mountedDataFactories/(?P<mountedDataFactoryId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		mountedDataFactoryIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mountedDataFactoryId")])
		if err != nil {
			return nil, err
		}
		formatUnescaped, err := url.QueryUnescape(qp.Get("format"))
		if err != nil {
			return nil, err
		}
		formatParam := getOptional(formatUnescaped)
		var options *mounteddatafactory.ItemsClientBeginGetMountedDataFactoryDefinitionOptions
		if formatParam != nil {
			options = &mounteddatafactory.ItemsClientBeginGetMountedDataFactoryDefinitionOptions{
				Format: formatParam,
			}
		}
		respr, errRespr := i.srv.BeginGetMountedDataFactoryDefinition(req.Context(), workspaceIDParam, mountedDataFactoryIDParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetMountedDataFactoryDefinition = &respr
		i.beginGetMountedDataFactoryDefinition.add(req, beginGetMountedDataFactoryDefinition)
	}

	resp, err := server.PollerResponderNext(beginGetMountedDataFactoryDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginGetMountedDataFactoryDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetMountedDataFactoryDefinition) {
		i.beginGetMountedDataFactoryDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListMountedDataFactoriesPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListMountedDataFactoriesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListMountedDataFactoriesPager not implemented")}
	}
	newListMountedDataFactoriesPager := i.newListMountedDataFactoriesPager.get(req)
	if newListMountedDataFactoriesPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mountedDataFactories`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *mounteddatafactory.ItemsClientListMountedDataFactoriesOptions
		if continuationTokenParam != nil {
			options = &mounteddatafactory.ItemsClientListMountedDataFactoriesOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListMountedDataFactoriesPager(workspaceIDParam, options)
		newListMountedDataFactoriesPager = &resp
		i.newListMountedDataFactoriesPager.add(req, newListMountedDataFactoriesPager)
		server.PagerResponderInjectNextLinks(newListMountedDataFactoriesPager, req, func(page *mounteddatafactory.ItemsClientListMountedDataFactoriesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListMountedDataFactoriesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListMountedDataFactoriesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListMountedDataFactoriesPager) {
		i.newListMountedDataFactoriesPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateMountedDataFactory(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateMountedDataFactory == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateMountedDataFactory not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mountedDataFactories/(?P<mountedDataFactoryId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[mounteddatafactory.UpdateMountedDataFactoryRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mountedDataFactoryIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mountedDataFactoryId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateMountedDataFactory(req.Context(), workspaceIDParam, mountedDataFactoryIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MountedDataFactory, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginUpdateMountedDataFactoryDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateMountedDataFactoryDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateMountedDataFactoryDefinition not implemented")}
	}
	beginUpdateMountedDataFactoryDefinition := i.beginUpdateMountedDataFactoryDefinition.get(req)
	if beginUpdateMountedDataFactoryDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mountedDataFactories/(?P<mountedDataFactoryId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[mounteddatafactory.UpdateMountedDataFactoryDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		mountedDataFactoryIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mountedDataFactoryId")])
		if err != nil {
			return nil, err
		}
		updateMetadataUnescaped, err := url.QueryUnescape(qp.Get("updateMetadata"))
		if err != nil {
			return nil, err
		}
		updateMetadataParam, err := parseOptional(updateMetadataUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *mounteddatafactory.ItemsClientBeginUpdateMountedDataFactoryDefinitionOptions
		if updateMetadataParam != nil {
			options = &mounteddatafactory.ItemsClientBeginUpdateMountedDataFactoryDefinitionOptions{
				UpdateMetadata: updateMetadataParam,
			}
		}
		respr, errRespr := i.srv.BeginUpdateMountedDataFactoryDefinition(req.Context(), workspaceIDParam, mountedDataFactoryIDParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateMountedDataFactoryDefinition = &respr
		i.beginUpdateMountedDataFactoryDefinition.add(req, beginUpdateMountedDataFactoryDefinition)
	}

	resp, err := server.PollerResponderNext(beginUpdateMountedDataFactoryDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginUpdateMountedDataFactoryDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateMountedDataFactoryDefinition) {
		i.beginUpdateMountedDataFactoryDefinition.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
