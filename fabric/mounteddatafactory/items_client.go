// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package mounteddatafactory

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateMountedDataFactory - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create MountedDataFactory with a public definition, refer to MountedDataFactory [/rest/api/fabric/articles/item-management/definitions/mounted-data-factory-definition]
// article.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES MountedDataFactory.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a MountedDataFactory the workspace must be on a supported Fabric capacity. For more information see: Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createMountedDataFactoryRequest - Create item request payload.
//   - options - ItemsClientBeginCreateMountedDataFactoryOptions contains the optional parameters for the ItemsClient.BeginCreateMountedDataFactory
//     method.
func (client *ItemsClient) BeginCreateMountedDataFactory(ctx context.Context, workspaceID string, createMountedDataFactoryRequest CreateMountedDataFactoryRequest, options *ItemsClientBeginCreateMountedDataFactoryOptions) (*runtime.Poller[ItemsClientCreateMountedDataFactoryResponse], error) {
	return client.beginCreateMountedDataFactory(ctx, workspaceID, createMountedDataFactoryRequest, options)
}

// CreateMountedDataFactory - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create MountedDataFactory with a public definition, refer to MountedDataFactory [/rest/api/fabric/articles/item-management/definitions/mounted-data-factory-definition]
// article.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES MountedDataFactory.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a MountedDataFactory the workspace must be on a supported Fabric capacity. For more information see: Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createMountedDataFactory(ctx context.Context, workspaceID string, createMountedDataFactoryRequest CreateMountedDataFactoryRequest, options *ItemsClientBeginCreateMountedDataFactoryOptions) (*http.Response, error) {
	var err error
	const operationName = "mounteddatafactory.ItemsClient.BeginCreateMountedDataFactory"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createMountedDataFactoryCreateRequest(ctx, workspaceID, createMountedDataFactoryRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createMountedDataFactoryCreateRequest creates the CreateMountedDataFactory request.
func (client *ItemsClient) createMountedDataFactoryCreateRequest(ctx context.Context, workspaceID string, createMountedDataFactoryRequest CreateMountedDataFactoryRequest, _ *ItemsClientBeginCreateMountedDataFactoryOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mountedDataFactories"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createMountedDataFactoryRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteMountedDataFactory - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES MountedDataFactory.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mountedDataFactoryID - The MountedDataFactory ID.
//   - options - ItemsClientDeleteMountedDataFactoryOptions contains the optional parameters for the ItemsClient.DeleteMountedDataFactory
//     method.
func (client *ItemsClient) DeleteMountedDataFactory(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *ItemsClientDeleteMountedDataFactoryOptions) (ItemsClientDeleteMountedDataFactoryResponse, error) {
	var err error
	const operationName = "mounteddatafactory.ItemsClient.DeleteMountedDataFactory"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteMountedDataFactoryCreateRequest(ctx, workspaceID, mountedDataFactoryID, options)
	if err != nil {
		return ItemsClientDeleteMountedDataFactoryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteMountedDataFactoryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteMountedDataFactoryResponse{}, err
	}
	return ItemsClientDeleteMountedDataFactoryResponse{}, nil
}

// deleteMountedDataFactoryCreateRequest creates the DeleteMountedDataFactory request.
func (client *ItemsClient) deleteMountedDataFactoryCreateRequest(ctx context.Context, workspaceID string, mountedDataFactoryID string, _ *ItemsClientDeleteMountedDataFactoryOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mountedDataFactories/{mountedDataFactoryId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mountedDataFactoryID == "" {
		return nil, errors.New("parameter mountedDataFactoryID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mountedDataFactoryId}", url.PathEscape(mountedDataFactoryID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetMountedDataFactory - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES MountedDataFactory.Read.All or MountedDataFactory.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mountedDataFactoryID - The MountedDataFactory ID.
//   - options - ItemsClientGetMountedDataFactoryOptions contains the optional parameters for the ItemsClient.GetMountedDataFactory
//     method.
func (client *ItemsClient) GetMountedDataFactory(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *ItemsClientGetMountedDataFactoryOptions) (ItemsClientGetMountedDataFactoryResponse, error) {
	var err error
	const operationName = "mounteddatafactory.ItemsClient.GetMountedDataFactory"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getMountedDataFactoryCreateRequest(ctx, workspaceID, mountedDataFactoryID, options)
	if err != nil {
		return ItemsClientGetMountedDataFactoryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetMountedDataFactoryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetMountedDataFactoryResponse{}, err
	}
	resp, err := client.getMountedDataFactoryHandleResponse(httpResp)
	return resp, err
}

// getMountedDataFactoryCreateRequest creates the GetMountedDataFactory request.
func (client *ItemsClient) getMountedDataFactoryCreateRequest(ctx context.Context, workspaceID string, mountedDataFactoryID string, _ *ItemsClientGetMountedDataFactoryOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mountedDataFactories/{mountedDataFactoryId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mountedDataFactoryID == "" {
		return nil, errors.New("parameter mountedDataFactoryID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mountedDataFactoryId}", url.PathEscape(mountedDataFactoryID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMountedDataFactoryHandleResponse handles the GetMountedDataFactory response.
func (client *ItemsClient) getMountedDataFactoryHandleResponse(resp *http.Response) (ItemsClientGetMountedDataFactoryResponse, error) {
	result := ItemsClientGetMountedDataFactoryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MountedDataFactory); err != nil {
		return ItemsClientGetMountedDataFactoryResponse{}, err
	}
	return result, nil
}

// BeginGetMountedDataFactoryDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a MountedDataFactory's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mountedDataFactoryID - The MountedDataFactory ID.
//   - options - ItemsClientBeginGetMountedDataFactoryDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetMountedDataFactoryDefinition
//     method.
func (client *ItemsClient) BeginGetMountedDataFactoryDefinition(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *ItemsClientBeginGetMountedDataFactoryDefinitionOptions) (*runtime.Poller[ItemsClientGetMountedDataFactoryDefinitionResponse], error) {
	return client.beginGetMountedDataFactoryDefinition(ctx, workspaceID, mountedDataFactoryID, options)
}

// GetMountedDataFactoryDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a MountedDataFactory's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getMountedDataFactoryDefinition(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *ItemsClientBeginGetMountedDataFactoryDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "mounteddatafactory.ItemsClient.BeginGetMountedDataFactoryDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getMountedDataFactoryDefinitionCreateRequest(ctx, workspaceID, mountedDataFactoryID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getMountedDataFactoryDefinitionCreateRequest creates the GetMountedDataFactoryDefinition request.
func (client *ItemsClient) getMountedDataFactoryDefinitionCreateRequest(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *ItemsClientBeginGetMountedDataFactoryDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mountedDataFactories/{mountedDataFactoryId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mountedDataFactoryID == "" {
		return nil, errors.New("parameter mountedDataFactoryID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mountedDataFactoryId}", url.PathEscape(mountedDataFactoryID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("format", *options.Format)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListMountedDataFactoriesPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListMountedDataFactoriesOptions contains the optional parameters for the ItemsClient.NewListMountedDataFactoriesPager
//     method.
func (client *ItemsClient) NewListMountedDataFactoriesPager(workspaceID string, options *ItemsClientListMountedDataFactoriesOptions) *runtime.Pager[ItemsClientListMountedDataFactoriesResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListMountedDataFactoriesResponse]{
		More: func(page ItemsClientListMountedDataFactoriesResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListMountedDataFactoriesResponse) (ItemsClientListMountedDataFactoriesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "mounteddatafactory.ItemsClient.NewListMountedDataFactoriesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listMountedDataFactoriesCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListMountedDataFactoriesResponse{}, err
			}
			return client.listMountedDataFactoriesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listMountedDataFactoriesCreateRequest creates the ListMountedDataFactories request.
func (client *ItemsClient) listMountedDataFactoriesCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListMountedDataFactoriesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mountedDataFactories"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listMountedDataFactoriesHandleResponse handles the ListMountedDataFactories response.
func (client *ItemsClient) listMountedDataFactoriesHandleResponse(resp *http.Response) (ItemsClientListMountedDataFactoriesResponse, error) {
	result := ItemsClientListMountedDataFactoriesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MountedDataFactories); err != nil {
		return ItemsClientListMountedDataFactoriesResponse{}, err
	}
	return result, nil
}

// UpdateMountedDataFactory - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES MountedDataFactory.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mountedDataFactoryID - The MountedDataFactory ID.
//   - updateMountedDataFactoryRequest - Update MountedDataFactory request payload.
//   - options - ItemsClientUpdateMountedDataFactoryOptions contains the optional parameters for the ItemsClient.UpdateMountedDataFactory
//     method.
func (client *ItemsClient) UpdateMountedDataFactory(ctx context.Context, workspaceID string, mountedDataFactoryID string, updateMountedDataFactoryRequest UpdateMountedDataFactoryRequest, options *ItemsClientUpdateMountedDataFactoryOptions) (ItemsClientUpdateMountedDataFactoryResponse, error) {
	var err error
	const operationName = "mounteddatafactory.ItemsClient.UpdateMountedDataFactory"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateMountedDataFactoryCreateRequest(ctx, workspaceID, mountedDataFactoryID, updateMountedDataFactoryRequest, options)
	if err != nil {
		return ItemsClientUpdateMountedDataFactoryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateMountedDataFactoryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateMountedDataFactoryResponse{}, err
	}
	resp, err := client.updateMountedDataFactoryHandleResponse(httpResp)
	return resp, err
}

// updateMountedDataFactoryCreateRequest creates the UpdateMountedDataFactory request.
func (client *ItemsClient) updateMountedDataFactoryCreateRequest(ctx context.Context, workspaceID string, mountedDataFactoryID string, updateMountedDataFactoryRequest UpdateMountedDataFactoryRequest, _ *ItemsClientUpdateMountedDataFactoryOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mountedDataFactories/{mountedDataFactoryId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mountedDataFactoryID == "" {
		return nil, errors.New("parameter mountedDataFactoryID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mountedDataFactoryId}", url.PathEscape(mountedDataFactoryID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateMountedDataFactoryRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateMountedDataFactoryHandleResponse handles the UpdateMountedDataFactory response.
func (client *ItemsClient) updateMountedDataFactoryHandleResponse(resp *http.Response) (ItemsClientUpdateMountedDataFactoryResponse, error) {
	result := ItemsClientUpdateMountedDataFactoryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MountedDataFactory); err != nil {
		return ItemsClientUpdateMountedDataFactoryResponse{}, err
	}
	return result, nil
}

// BeginUpdateMountedDataFactoryDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the MountedDataFactory's definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES MountedDataFactory.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mountedDataFactoryID - The MountedDataFactory ID.
//   - updateMountedDataFactoryDefinitionRequest - Update MountedDataFactory definition request payload.
//   - options - ItemsClientBeginUpdateMountedDataFactoryDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateMountedDataFactoryDefinition
//     method.
func (client *ItemsClient) BeginUpdateMountedDataFactoryDefinition(ctx context.Context, workspaceID string, mountedDataFactoryID string, updateMountedDataFactoryDefinitionRequest UpdateMountedDataFactoryDefinitionRequest, options *ItemsClientBeginUpdateMountedDataFactoryDefinitionOptions) (*runtime.Poller[ItemsClientUpdateMountedDataFactoryDefinitionResponse], error) {
	return client.beginUpdateMountedDataFactoryDefinition(ctx, workspaceID, mountedDataFactoryID, updateMountedDataFactoryDefinitionRequest, options)
}

// UpdateMountedDataFactoryDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the MountedDataFactory's definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES MountedDataFactory.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateMountedDataFactoryDefinition(ctx context.Context, workspaceID string, mountedDataFactoryID string, updateMountedDataFactoryDefinitionRequest UpdateMountedDataFactoryDefinitionRequest, options *ItemsClientBeginUpdateMountedDataFactoryDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "mounteddatafactory.ItemsClient.BeginUpdateMountedDataFactoryDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateMountedDataFactoryDefinitionCreateRequest(ctx, workspaceID, mountedDataFactoryID, updateMountedDataFactoryDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateMountedDataFactoryDefinitionCreateRequest creates the UpdateMountedDataFactoryDefinition request.
func (client *ItemsClient) updateMountedDataFactoryDefinitionCreateRequest(ctx context.Context, workspaceID string, mountedDataFactoryID string, updateMountedDataFactoryDefinitionRequest UpdateMountedDataFactoryDefinitionRequest, options *ItemsClientBeginUpdateMountedDataFactoryDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mountedDataFactories/{mountedDataFactoryId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mountedDataFactoryID == "" {
		return nil, errors.New("parameter mountedDataFactoryID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mountedDataFactoryId}", url.PathEscape(mountedDataFactoryID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateMountedDataFactoryDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateMountedDataFactory - returns ItemsClientCreateMountedDataFactoryResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// To create MountedDataFactory with a public definition, refer to MountedDataFactory [/rest/api/fabric/articles/item-management/definitions/mounted-data-factory-definition] article.
//
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES MountedDataFactory.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a MountedDataFactory the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types
//     [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createMountedDataFactoryRequest - Create item request payload.
//   - options - ItemsClientBeginCreateMountedDataFactoryOptions contains the optional parameters for the ItemsClient.BeginCreateMountedDataFactory method.
func (client *ItemsClient) CreateMountedDataFactory(ctx context.Context, workspaceID string, createMountedDataFactoryRequest CreateMountedDataFactoryRequest, options *ItemsClientBeginCreateMountedDataFactoryOptions) (ItemsClientCreateMountedDataFactoryResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateMountedDataFactory(ctx, workspaceID, createMountedDataFactoryRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateMountedDataFactoryResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateMountedDataFactoryResponse{}, err
	}
	return result, err
}

// beginCreateMountedDataFactory creates the createMountedDataFactory request.
func (client *ItemsClient) beginCreateMountedDataFactory(ctx context.Context, workspaceID string, createMountedDataFactoryRequest CreateMountedDataFactoryRequest, options *ItemsClientBeginCreateMountedDataFactoryOptions) (*runtime.Poller[ItemsClientCreateMountedDataFactoryResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createMountedDataFactory(ctx, workspaceID, createMountedDataFactoryRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateMountedDataFactoryResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateMountedDataFactoryResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateMountedDataFactoryResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateMountedDataFactoryResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetMountedDataFactoryDefinition - returns ItemsClientGetMountedDataFactoryDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// When you get a MountedDataFactory's public definition, the sensitivity label is not a part of the definition.
//
// PERMISSIONS The caller must have contributor or higher workspace role.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mountedDataFactoryID - The MountedDataFactory ID.
//   - options - ItemsClientBeginGetMountedDataFactoryDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetMountedDataFactoryDefinition method.
func (client *ItemsClient) GetMountedDataFactoryDefinition(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *ItemsClientBeginGetMountedDataFactoryDefinitionOptions) (ItemsClientGetMountedDataFactoryDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetMountedDataFactoryDefinition(ctx, workspaceID, mountedDataFactoryID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetMountedDataFactoryDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetMountedDataFactoryDefinitionResponse{}, err
	}
	return result, err
}

// beginGetMountedDataFactoryDefinition creates the getMountedDataFactoryDefinition request.
func (client *ItemsClient) beginGetMountedDataFactoryDefinition(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *ItemsClientBeginGetMountedDataFactoryDefinitionOptions) (*runtime.Poller[ItemsClientGetMountedDataFactoryDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getMountedDataFactoryDefinition(ctx, workspaceID, mountedDataFactoryID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetMountedDataFactoryDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetMountedDataFactoryDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetMountedDataFactoryDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetMountedDataFactoryDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateMountedDataFactoryDefinition - returns ItemsClientUpdateMountedDataFactoryDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// Updating the MountedDataFactory's definition, does not affect its sensitivity label.
//
// PERMISSIONS The API caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES MountedDataFactory.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mountedDataFactoryID - The MountedDataFactory ID.
//   - updateMountedDataFactoryDefinitionRequest - Update MountedDataFactory definition request payload.
//   - options - ItemsClientBeginUpdateMountedDataFactoryDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateMountedDataFactoryDefinition method.
func (client *ItemsClient) UpdateMountedDataFactoryDefinition(ctx context.Context, workspaceID string, mountedDataFactoryID string, updateMountedDataFactoryDefinitionRequest UpdateMountedDataFactoryDefinitionRequest, options *ItemsClientBeginUpdateMountedDataFactoryDefinitionOptions) (ItemsClientUpdateMountedDataFactoryDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateMountedDataFactoryDefinition(ctx, workspaceID, mountedDataFactoryID, updateMountedDataFactoryDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateMountedDataFactoryDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateMountedDataFactoryDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateMountedDataFactoryDefinition creates the updateMountedDataFactoryDefinition request.
func (client *ItemsClient) beginUpdateMountedDataFactoryDefinition(ctx context.Context, workspaceID string, mountedDataFactoryID string, updateMountedDataFactoryDefinitionRequest UpdateMountedDataFactoryDefinitionRequest, options *ItemsClientBeginUpdateMountedDataFactoryDefinitionOptions) (*runtime.Poller[ItemsClientUpdateMountedDataFactoryDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateMountedDataFactoryDefinition(ctx, workspaceID, mountedDataFactoryID, updateMountedDataFactoryDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateMountedDataFactoryDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateMountedDataFactoryDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateMountedDataFactoryDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateMountedDataFactoryDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListMountedDataFactories - returns array of MountedDataFactory from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListMountedDataFactoriesOptions contains the optional parameters for the ItemsClient.NewListMountedDataFactoriesPager method.
func (client *ItemsClient) ListMountedDataFactories(ctx context.Context, workspaceID string, options *ItemsClientListMountedDataFactoriesOptions) ([]MountedDataFactory, error) {
	pager := client.NewListMountedDataFactoriesPager(workspaceID, options)
	mapper := func(resp ItemsClientListMountedDataFactoriesResponse) []MountedDataFactory {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []MountedDataFactory{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []MountedDataFactory{}, err
	}
	return list, nil
}
