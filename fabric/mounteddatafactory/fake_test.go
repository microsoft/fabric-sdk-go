// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package mounteddatafactory_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/mounteddatafactory"
	"github.com/microsoft/fabric-sdk-go/fabric/mounteddatafactory/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *mounteddatafactory.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = mounteddatafactory.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListMountedDataFactories() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List MountedDataFactorys in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := mounteddatafactory.MountedDataFactories{
		Value: []mounteddatafactory.MountedDataFactory{
			{
				Type:        to.Ptr(mounteddatafactory.ItemTypeMountedDataFactory),
				Description: to.Ptr("A MountedDataFactory description."),
				DisplayName: to.Ptr("MountedDataFactory Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(mounteddatafactory.ItemTypeMountedDataFactory),
				Description: to.Ptr("A MountedDataFactory description."),
				DisplayName: to.Ptr("MountedDataFactory Name 2"),
				ID:          to.Ptr("f697fb63-abd4-4399-9548-be7e3c3c0dac"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListMountedDataFactoriesPager = func(workspaceID string, options *mounteddatafactory.ItemsClientListMountedDataFactoriesOptions) (resp azfake.PagerResponder[mounteddatafactory.ItemsClientListMountedDataFactoriesResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[mounteddatafactory.ItemsClientListMountedDataFactoriesResponse]{}
		resp.AddPage(http.StatusOK, mounteddatafactory.ItemsClientListMountedDataFactoriesResponse{MountedDataFactories: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListMountedDataFactoriesPager(exampleWorkspaceID, &mounteddatafactory.ItemsClientListMountedDataFactoriesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.MountedDataFactories))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateMountedDataFactory() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a MountedDataFactory with public definition example"},
	})
	var exampleWorkspaceID string
	var exampleCreateMountedDataFactoryRequest mounteddatafactory.CreateMountedDataFactoryRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateMountedDataFactoryRequest = mounteddatafactory.CreateMountedDataFactoryRequest{
		Description: to.Ptr("A MountedDataFactory description."),
		Definition: &mounteddatafactory.Definition{
			Parts: []mounteddatafactory.DefinitionPart{
				{
					Path:        to.Ptr("mountedDataFactory-content.json"),
					Payload:     to.Ptr("ewogICJkYXRhRmFjdG9yeVJlc291cmNlSWQiOiAiL3N1YnNjcmlwdGlvbnMvPHN1YnNjcmlwdGlvbklkPi9yZXNvdXJjZUdyb3Vwcy88cmVzb3VyY2VHcm91cD4vcHJvdmlkZXJzL01pY3Jvc29mdC5EYXRhRmFjdG9yeS9mYWN0b3JpZXMvPGZhY3RvcnlOYW1lPiIKfQ=="),
					PayloadType: to.Ptr(mounteddatafactory.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(mounteddatafactory.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("MountedDataFactory 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateMountedDataFactory = func(ctx context.Context, workspaceID string, createMountedDataFactoryRequest mounteddatafactory.CreateMountedDataFactoryRequest, options *mounteddatafactory.ItemsClientBeginCreateMountedDataFactoryOptions) (resp azfake.PollerResponder[mounteddatafactory.ItemsClientCreateMountedDataFactoryResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateMountedDataFactoryRequest, createMountedDataFactoryRequest))
		resp = azfake.PollerResponder[mounteddatafactory.ItemsClientCreateMountedDataFactoryResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, mounteddatafactory.ItemsClientCreateMountedDataFactoryResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateMountedDataFactory(ctx, exampleWorkspaceID, exampleCreateMountedDataFactoryRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetMountedDataFactory() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a MountedDataFactory example"},
	})
	var exampleWorkspaceID string
	var exampleMountedDataFactoryID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleMountedDataFactoryID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := mounteddatafactory.MountedDataFactory{
		Type:        to.Ptr(mounteddatafactory.ItemTypeMountedDataFactory),
		Description: to.Ptr("A MountedDataFactory description."),
		DisplayName: to.Ptr("MountedDataFactory 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetMountedDataFactory = func(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *mounteddatafactory.ItemsClientGetMountedDataFactoryOptions) (resp azfake.Responder[mounteddatafactory.ItemsClientGetMountedDataFactoryResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMountedDataFactoryID, mountedDataFactoryID)
		resp = azfake.Responder[mounteddatafactory.ItemsClientGetMountedDataFactoryResponse]{}
		resp.SetResponse(http.StatusOK, mounteddatafactory.ItemsClientGetMountedDataFactoryResponse{MountedDataFactory: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetMountedDataFactory(ctx, exampleWorkspaceID, exampleMountedDataFactoryID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MountedDataFactory))
}

func (testsuite *FakeTestSuite) TestItems_UpdateMountedDataFactory() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a MountedDataFactory example"},
	})
	var exampleWorkspaceID string
	var exampleMountedDataFactoryID string
	var exampleUpdateMountedDataFactoryRequest mounteddatafactory.UpdateMountedDataFactoryRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleMountedDataFactoryID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateMountedDataFactoryRequest = mounteddatafactory.UpdateMountedDataFactoryRequest{
		Description: to.Ptr("MountedDataFactory's New description"),
		DisplayName: to.Ptr("MountedDataFactory's New name"),
	}

	exampleRes := mounteddatafactory.MountedDataFactory{
		Type:        to.Ptr(mounteddatafactory.ItemTypeMountedDataFactory),
		Description: to.Ptr("MountedDataFactory's New description"),
		DisplayName: to.Ptr("MountedDataFactory's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateMountedDataFactory = func(ctx context.Context, workspaceID string, mountedDataFactoryID string, updateMountedDataFactoryRequest mounteddatafactory.UpdateMountedDataFactoryRequest, options *mounteddatafactory.ItemsClientUpdateMountedDataFactoryOptions) (resp azfake.Responder[mounteddatafactory.ItemsClientUpdateMountedDataFactoryResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMountedDataFactoryID, mountedDataFactoryID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateMountedDataFactoryRequest, updateMountedDataFactoryRequest))
		resp = azfake.Responder[mounteddatafactory.ItemsClientUpdateMountedDataFactoryResponse]{}
		resp.SetResponse(http.StatusOK, mounteddatafactory.ItemsClientUpdateMountedDataFactoryResponse{MountedDataFactory: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateMountedDataFactory(ctx, exampleWorkspaceID, exampleMountedDataFactoryID, exampleUpdateMountedDataFactoryRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MountedDataFactory))
}

func (testsuite *FakeTestSuite) TestItems_DeleteMountedDataFactory() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a MountedDataFactory example"},
	})
	var exampleWorkspaceID string
	var exampleMountedDataFactoryID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleMountedDataFactoryID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteMountedDataFactory = func(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *mounteddatafactory.ItemsClientDeleteMountedDataFactoryOptions) (resp azfake.Responder[mounteddatafactory.ItemsClientDeleteMountedDataFactoryResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMountedDataFactoryID, mountedDataFactoryID)
		resp = azfake.Responder[mounteddatafactory.ItemsClientDeleteMountedDataFactoryResponse]{}
		resp.SetResponse(http.StatusOK, mounteddatafactory.ItemsClientDeleteMountedDataFactoryResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteMountedDataFactory(ctx, exampleWorkspaceID, exampleMountedDataFactoryID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetMountedDataFactoryDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a MountedDataFactory public definition example"},
	})
	var exampleWorkspaceID string
	var exampleMountedDataFactoryID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleMountedDataFactoryID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := mounteddatafactory.DefinitionResponse{
		Definition: &mounteddatafactory.Definition{
			Parts: []mounteddatafactory.DefinitionPart{
				{
					Path:        to.Ptr("mountedDataFactory-content.json"),
					Payload:     to.Ptr("ewogICJkYXRhRmFjdG9yeVJlc291cmNlSWQiOiAiL3N1YnNjcmlwdGlvbnMvPHN1YnNjcmlwdGlvbklkPi9yZXNvdXJjZUdyb3Vwcy88cmVzb3VyY2VHcm91cD4vcHJvdmlkZXJzL01pY3Jvc29mdC5EYXRhRmFjdG9yeS9mYWN0b3JpZXMvPGZhY3RvcnlOYW1lPiIKfQ=="),
					PayloadType: to.Ptr(mounteddatafactory.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(mounteddatafactory.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetMountedDataFactoryDefinition = func(ctx context.Context, workspaceID string, mountedDataFactoryID string, options *mounteddatafactory.ItemsClientBeginGetMountedDataFactoryDefinitionOptions) (resp azfake.PollerResponder[mounteddatafactory.ItemsClientGetMountedDataFactoryDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMountedDataFactoryID, mountedDataFactoryID)
		resp = azfake.PollerResponder[mounteddatafactory.ItemsClientGetMountedDataFactoryDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, mounteddatafactory.ItemsClientGetMountedDataFactoryDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetMountedDataFactoryDefinition(ctx, exampleWorkspaceID, exampleMountedDataFactoryID, &mounteddatafactory.ItemsClientBeginGetMountedDataFactoryDefinitionOptions{Format: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateMountedDataFactoryDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a MountedDataFactory public definition example"},
	})
	var exampleWorkspaceID string
	var exampleMountedDataFactoryID string
	var exampleUpdateMountedDataFactoryDefinitionRequest mounteddatafactory.UpdateMountedDataFactoryDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleMountedDataFactoryID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateMountedDataFactoryDefinitionRequest = mounteddatafactory.UpdateMountedDataFactoryDefinitionRequest{
		Definition: &mounteddatafactory.Definition{
			Parts: []mounteddatafactory.DefinitionPart{
				{
					Path:        to.Ptr("mountedDataFactory-content.json"),
					Payload:     to.Ptr("ewogICJkYXRhRmFjdG9yeVJlc291cmNlSWQiOiAiL3N1YnNjcmlwdGlvbnMvPHN1YnNjcmlwdGlvbklkPi9yZXNvdXJjZUdyb3Vwcy88cmVzb3VyY2VHcm91cD4vcHJvdmlkZXJzL01pY3Jvc29mdC5EYXRhRmFjdG9yeS9mYWN0b3JpZXMvPGZhY3RvcnlOYW1lPiIKfQ=="),
					PayloadType: to.Ptr(mounteddatafactory.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(mounteddatafactory.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateMountedDataFactoryDefinition = func(ctx context.Context, workspaceID string, mountedDataFactoryID string, updateMountedDataFactoryDefinitionRequest mounteddatafactory.UpdateMountedDataFactoryDefinitionRequest, options *mounteddatafactory.ItemsClientBeginUpdateMountedDataFactoryDefinitionOptions) (resp azfake.PollerResponder[mounteddatafactory.ItemsClientUpdateMountedDataFactoryDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMountedDataFactoryID, mountedDataFactoryID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateMountedDataFactoryDefinitionRequest, updateMountedDataFactoryDefinitionRequest))
		resp = azfake.PollerResponder[mounteddatafactory.ItemsClientUpdateMountedDataFactoryDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, mounteddatafactory.ItemsClientUpdateMountedDataFactoryDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateMountedDataFactoryDefinition(ctx, exampleWorkspaceID, exampleMountedDataFactoryID, exampleUpdateMountedDataFactoryDefinitionRequest, &mounteddatafactory.ItemsClientBeginUpdateMountedDataFactoryDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}
