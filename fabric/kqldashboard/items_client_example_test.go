// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package kqldashboard_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"

	"github.com/microsoft/fabric-sdk-go/fabric/kqldashboard"
)

// Generated from example definition
func ExampleItemsClient_NewListKQLDashboardsPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldashboard.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewItemsClient().NewListKQLDashboardsPager("cfafbeb1-8037-4d0c-896e-a46fb27ff229", &kqldashboard.ItemsClientListKQLDashboardsOptions{ContinuationToken: nil})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.KQLDashboards = kqldashboard.KQLDashboards{
		// 	Value: []kqldashboard.KQLDashboard{
		// 		{
		// 			Type: to.Ptr(kqldashboard.ItemTypeKQLDashboard),
		// 			Description: to.Ptr("A KQL dashboard description."),
		// 			DisplayName: to.Ptr("KQLDashboard_1"),
		// 			ID: to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
		// 			WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		// 		},
		// 		{
		// 			Type: to.Ptr(kqldashboard.ItemTypeKQLDashboard),
		// 			Description: to.Ptr("A KQL dashboard description."),
		// 			DisplayName: to.Ptr("KQLDashboard_2"),
		// 			ID: to.Ptr("340d91b9-5a39-409c-b9c0-05ba832c476e"),
		// 			WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		// 	}},
		// }
	}
}

// Generated from example definition
func ExampleItemsClient_CreateKQLDashboard_createAKqlDashboardExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldashboard.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewItemsClient().CreateKQLDashboard(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", kqldashboard.CreateKQLDashboardRequest{
		Description: to.Ptr("A KQL dashboard description"),
		DisplayName: to.Ptr("KQLDashboard_1"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleItemsClient_CreateKQLDashboard_createAKqlDashboardExampleWithDefinition() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldashboard.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewItemsClient().CreateKQLDashboard(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", kqldashboard.CreateKQLDashboardRequest{
		Description: to.Ptr("A KQL dashboard description"),
		Definition: &kqldashboard.Definition{
			Parts: []kqldashboard.DefinitionPart{
				{
					Path:        to.Ptr("RealTimeDashboard.json"),
					Payload:     to.Ptr("ewogICJhdXRvUmVmcmVzaCI6IHsKICAgICJlbmFibGVkIjogZmFsc2UKICB9LAogICJiYXNlUXVlcmllcyI6IFtdLAogICJ0aWxlcyI6IFtdLAogICJkYXRhU291cmNlcyI6IFtdLAogICJwYWdlcyI6IFsKICAgIHsKICAgICAgIm5hbWUiOiAiUGFnZSAxIiwKICAgICAgImlkIjogImFiNWYwNjI4LTk3NTAtNDNlNi05YmE0LTIwMTE2ZTg2ODc1NSIKICAgIH0KICBdLAogICJwYXJhbWV0ZXJzIjogWwogICAgewogICAgICAia2luZCI6ICJkdXJhdGlvbiIsCiAgICAgICJpZCI6ICJmNTEwYjlmZi0xZjI3LTQ4YmQtODBlNC1mZDFhNTllODQ5MjQiLAogICAgICAiZGlzcGxheU5hbWUiOiAiVGltZSByYW5nZSIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAiYmVnaW5WYXJpYWJsZU5hbWUiOiAiX3N0YXJ0VGltZSIsCiAgICAgICJlbmRWYXJpYWJsZU5hbWUiOiAiX2VuZFRpbWUiLAogICAgICAiZGVmYXVsdFZhbHVlIjogewogICAgICAgICJraW5kIjogImR5bmFtaWMiLAogICAgICAgICJjb3VudCI6IDEsCiAgICAgICAgInVuaXQiOiAiaG91cnMiCiAgICAgIH0sCiAgICAgICJzaG93T25QYWdlcyI6IHsKICAgICAgICAia2luZCI6ICJhbGwiCiAgICAgIH0KICAgIH0KICBdLAogICJxdWVyaWVzIjogW10sCiAgInNjaGVtYV92ZXJzaW9uIjogIjUyIiwKICAidGl0bGUiOiAidmNkem5ncnpzbSIKfQ=="),
					PayloadType: to.Ptr(kqldashboard.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(kqldashboard.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("KQL Dashboard 1"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleItemsClient_GetKQLDashboard() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldashboard.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewItemsClient().GetKQLDashboard(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", "5b218778-e7a5-4d73-8187-f10824047715", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.KQLDashboard = kqldashboard.KQLDashboard{
	// 	Type: to.Ptr(kqldashboard.ItemTypeKQLDashboard),
	// 	Description: to.Ptr("A KQL dashboard description."),
	// 	DisplayName: to.Ptr("KQLDashboard_1"),
	// 	ID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
	// 	WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	// }
}

// Generated from example definition
func ExampleItemsClient_UpdateKQLDashboard() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldashboard.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewItemsClient().UpdateKQLDashboard(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", "5b218778-e7a5-4d73-8187-f10824047715", kqldashboard.UpdateKQLDashboardRequest{
		Description: to.Ptr("KQL dashboard new description"),
		DisplayName: to.Ptr("KQL dashboard new name"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.KQLDashboard = kqldashboard.KQLDashboard{
	// 	Type: to.Ptr(kqldashboard.ItemTypeKQLDashboard),
	// 	Description: to.Ptr("KQL dashboard new description"),
	// 	DisplayName: to.Ptr("KQL dashboard new name"),
	// 	ID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
	// 	WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	// }
}

// Generated from example definition
func ExampleItemsClient_DeleteKQLDashboard() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldashboard.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewItemsClient().DeleteKQLDashboard(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", "5b218778-e7a5-4d73-8187-f10824047715", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleItemsClient_GetKQLDashboardDefinition() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldashboard.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewItemsClient().GetKQLDashboardDefinition(ctx, "6e335e92-a2a2-4b5a-970a-bd6a89fbb765", "cfafbeb1-8037-4d0c-896e-a46fb27ff229", &kqldashboard.ItemsClientGetKQLDashboardDefinitionOptions{Format: nil})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.DefinitionResponse = kqldashboard.DefinitionResponse{
	// 	Definition: &kqldashboard.Definition{
	// 		Parts: []kqldashboard.DefinitionPart{
	// 			{
	// 				Path: to.Ptr("RealTimeDashboard.json"),
	// 				Payload: to.Ptr("ewogICJhdXRvUmVmcmVzaCI6IHsKICAgICJlbmFibGVkIjogZmFsc2UKICB9LAogICJiYXNlUXVlcmllcyI6IFtdLAogICJ0aWxlcyI6IFtdLAogICJkYXRhU291cmNlcyI6IFtdLAogICJwYWdlcyI6IFsKICAgIHsKICAgICAgIm5hbWUiOiAiUGFnZSAxIiwKICAgICAgImlkIjogImFiNWYwNjI4LTk3NTAtNDNlNi05YmE0LTIwMTE2ZTg2ODc1NSIKICAgIH0KICBdLAogICJwYXJhbWV0ZXJzIjogWwogICAgewogICAgICAia2luZCI6ICJkdXJhdGlvbiIsCiAgICAgICJpZCI6ICJmNTEwYjlmZi0xZjI3LTQ4YmQtODBlNC1mZDFhNTllODQ5MjQiLAogICAgICAiZGlzcGxheU5hbWUiOiAiVGltZSByYW5nZSIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAiYmVnaW5WYXJpYWJsZU5hbWUiOiAiX3N0YXJ0VGltZSIsCiAgICAgICJlbmRWYXJpYWJsZU5hbWUiOiAiX2VuZFRpbWUiLAogICAgICAiZGVmYXVsdFZhbHVlIjogewogICAgICAgICJraW5kIjogImR5bmFtaWMiLAogICAgICAgICJjb3VudCI6IDEsCiAgICAgICAgInVuaXQiOiAiaG91cnMiCiAgICAgIH0sCiAgICAgICJzaG93T25QYWdlcyI6IHsKICAgICAgICAia2luZCI6ICJhbGwiCiAgICAgIH0KICAgIH0KICBdLAogICJxdWVyaWVzIjogW10sCiAgInNjaGVtYV92ZXJzaW9uIjogIjUyIiwKICAidGl0bGUiOiAidmNkem5ncnpzbSIKfQ=="),
	// 				PayloadType: to.Ptr(kqldashboard.PayloadTypeInlineBase64),
	// 			},
	// 			{
	// 				Path: to.Ptr(".platform"),
	// 				Payload: to.Ptr("ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIktRTERhc2hib2FyZCIsCiAgICAiZGlzcGxheU5hbWUiOiAidmNkem5ncnpzbSIsCiAgICAiZGVzY3JpcHRpb24iOiAidmNkem5ncnpzbSIKICB9LAogICJjb25maWciOiB7CiAgICAidmVyc2lvbiI6ICIyLjAiLAogICAgImxvZ2ljYWxJZCI6ICIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiCiAgfQp9"),
	// 				PayloadType: to.Ptr(kqldashboard.PayloadTypeInlineBase64),
	// 		}},
	// 	},
	// }
}

// Generated from example definition
func ExampleItemsClient_UpdateKQLDashboardDefinition() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldashboard.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewItemsClient().UpdateKQLDashboardDefinition(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", "5b218778-e7a5-4d73-8187-f10824047715", kqldashboard.UpdateKQLDashboardDefinitionRequest{
		Definition: &kqldashboard.Definition{
			Parts: []kqldashboard.DefinitionPart{
				{
					Path:        to.Ptr("RealTimeDashboard.json"),
					Payload:     to.Ptr("ewogICJhdXRvUmVmcmVzaCI6IHsKICAgICJlbmFibGVkIjogZmFsc2UKICB9LAogICJiYXNlUXVlcmllcyI6IFtdLAogICJ0aWxlcyI6IFtdLAogICJkYXRhU291cmNlcyI6IFtdLAogICJwYWdlcyI6IFsKICAgIHsKICAgICAgIm5hbWUiOiAiUGFnZSAxIiwKICAgICAgImlkIjogImFiNWYwNjI4LTk3NTAtNDNlNi05YmE0LTIwMTE2ZTg2ODc1NSIKICAgIH0KICBdLAogICJwYXJhbWV0ZXJzIjogWwogICAgewogICAgICAia2luZCI6ICJkdXJhdGlvbiIsCiAgICAgICJpZCI6ICJmNTEwYjlmZi0xZjI3LTQ4YmQtODBlNC1mZDFhNTllODQ5MjQiLAogICAgICAiZGlzcGxheU5hbWUiOiAiVGltZSByYW5nZSIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAiYmVnaW5WYXJpYWJsZU5hbWUiOiAiX3N0YXJ0VGltZSIsCiAgICAgICJlbmRWYXJpYWJsZU5hbWUiOiAiX2VuZFRpbWUiLAogICAgICAiZGVmYXVsdFZhbHVlIjogewogICAgICAgICJraW5kIjogImR5bmFtaWMiLAogICAgICAgICJjb3VudCI6IDEsCiAgICAgICAgInVuaXQiOiAiaG91cnMiCiAgICAgIH0sCiAgICAgICJzaG93T25QYWdlcyI6IHsKICAgICAgICAia2luZCI6ICJhbGwiCiAgICAgIH0KICAgIH0KICBdLAogICJxdWVyaWVzIjogW10sCiAgInNjaGVtYV92ZXJzaW9uIjogIjUyIiwKICAidGl0bGUiOiAidmNkem5ncnpzbSIKfQ=="),
					PayloadType: to.Ptr(kqldashboard.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(kqldashboard.PayloadTypeInlineBase64),
				}},
		},
	}, &kqldashboard.ItemsClientUpdateKQLDashboardDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}
