// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/kqldashboard"
)

// ItemsServer is a fake server for instances of the kqldashboard.ItemsClient type.
type ItemsServer struct {
	// CreateKQLDashboard is the fake for method ItemsClient.CreateKQLDashboard
	// HTTP status codes to indicate success: http.StatusCreated
	CreateKQLDashboard func(ctx context.Context, workspaceID string, createKQLDashboardRequest kqldashboard.CreateKQLDashboardRequest, options *kqldashboard.ItemsClientCreateKQLDashboardOptions) (resp azfake.Responder[kqldashboard.ItemsClientCreateKQLDashboardResponse], errResp azfake.ErrorResponder)

	// DeleteKQLDashboard is the fake for method ItemsClient.DeleteKQLDashboard
	// HTTP status codes to indicate success: http.StatusOK
	DeleteKQLDashboard func(ctx context.Context, workspaceID string, kqlDashboardID string, options *kqldashboard.ItemsClientDeleteKQLDashboardOptions) (resp azfake.Responder[kqldashboard.ItemsClientDeleteKQLDashboardResponse], errResp azfake.ErrorResponder)

	// GetKQLDashboard is the fake for method ItemsClient.GetKQLDashboard
	// HTTP status codes to indicate success: http.StatusOK
	GetKQLDashboard func(ctx context.Context, workspaceID string, kqlDashboardID string, options *kqldashboard.ItemsClientGetKQLDashboardOptions) (resp azfake.Responder[kqldashboard.ItemsClientGetKQLDashboardResponse], errResp azfake.ErrorResponder)

	// GetKQLDashboardDefinition is the fake for method ItemsClient.GetKQLDashboardDefinition
	// HTTP status codes to indicate success: http.StatusOK
	GetKQLDashboardDefinition func(ctx context.Context, workspaceID string, kqlDashboardID string, options *kqldashboard.ItemsClientGetKQLDashboardDefinitionOptions) (resp azfake.Responder[kqldashboard.ItemsClientGetKQLDashboardDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListKQLDashboardsPager is the fake for method ItemsClient.NewListKQLDashboardsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListKQLDashboardsPager func(workspaceID string, options *kqldashboard.ItemsClientListKQLDashboardsOptions) (resp azfake.PagerResponder[kqldashboard.ItemsClientListKQLDashboardsResponse])

	// UpdateKQLDashboard is the fake for method ItemsClient.UpdateKQLDashboard
	// HTTP status codes to indicate success: http.StatusOK
	UpdateKQLDashboard func(ctx context.Context, workspaceID string, kqlDashboardID string, updateKQLDashboardRequest kqldashboard.UpdateKQLDashboardRequest, options *kqldashboard.ItemsClientUpdateKQLDashboardOptions) (resp azfake.Responder[kqldashboard.ItemsClientUpdateKQLDashboardResponse], errResp azfake.ErrorResponder)

	// UpdateKQLDashboardDefinition is the fake for method ItemsClient.UpdateKQLDashboardDefinition
	// HTTP status codes to indicate success: http.StatusOK
	UpdateKQLDashboardDefinition func(ctx context.Context, workspaceID string, kqlDashboardID string, updateKQLDashboardDefinitionRequest kqldashboard.UpdateKQLDashboardDefinitionRequest, options *kqldashboard.ItemsClientUpdateKQLDashboardDefinitionOptions) (resp azfake.Responder[kqldashboard.ItemsClientUpdateKQLDashboardDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of kqldashboard.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                       srv,
		newListKQLDashboardsPager: newTracker[azfake.PagerResponder[kqldashboard.ItemsClientListKQLDashboardsResponse]](),
	}
}

// ItemsServerTransport connects instances of kqldashboard.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                       *ItemsServer
	newListKQLDashboardsPager *tracker[azfake.PagerResponder[kqldashboard.ItemsClientListKQLDashboardsResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ItemsClient.CreateKQLDashboard":
		resp, err = i.dispatchCreateKQLDashboard(req)
	case "ItemsClient.DeleteKQLDashboard":
		resp, err = i.dispatchDeleteKQLDashboard(req)
	case "ItemsClient.GetKQLDashboard":
		resp, err = i.dispatchGetKQLDashboard(req)
	case "ItemsClient.GetKQLDashboardDefinition":
		resp, err = i.dispatchGetKQLDashboardDefinition(req)
	case "ItemsClient.NewListKQLDashboardsPager":
		resp, err = i.dispatchNewListKQLDashboardsPager(req)
	case "ItemsClient.UpdateKQLDashboard":
		resp, err = i.dispatchUpdateKQLDashboard(req)
	case "ItemsClient.UpdateKQLDashboardDefinition":
		resp, err = i.dispatchUpdateKQLDashboardDefinition(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (i *ItemsServerTransport) dispatchCreateKQLDashboard(req *http.Request) (*http.Response, error) {
	if i.srv.CreateKQLDashboard == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateKQLDashboard not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDashboards`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[kqldashboard.CreateKQLDashboardRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.CreateKQLDashboard(req.Context(), workspaceIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KQLDashboard, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Location; val != nil {
		resp.Header.Set("Location", *val)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteKQLDashboard(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteKQLDashboard == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteKQLDashboard not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDashboards/(?P<kqlDashboardId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlDashboardIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlDashboardId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteKQLDashboard(req.Context(), workspaceIDParam, kqlDashboardIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetKQLDashboard(req *http.Request) (*http.Response, error) {
	if i.srv.GetKQLDashboard == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetKQLDashboard not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDashboards/(?P<kqlDashboardId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlDashboardIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlDashboardId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetKQLDashboard(req.Context(), workspaceIDParam, kqlDashboardIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KQLDashboard, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetKQLDashboardDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.GetKQLDashboardDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetKQLDashboardDefinition not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDashboards/(?P<kqlDashboardId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlDashboardIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlDashboardId")])
	if err != nil {
		return nil, err
	}
	formatUnescaped, err := url.QueryUnescape(qp.Get("format"))
	if err != nil {
		return nil, err
	}
	formatParam := getOptional(formatUnescaped)
	var options *kqldashboard.ItemsClientGetKQLDashboardDefinitionOptions
	if formatParam != nil {
		options = &kqldashboard.ItemsClientGetKQLDashboardDefinitionOptions{
			Format: formatParam,
		}
	}
	respr, errRespr := i.srv.GetKQLDashboardDefinition(req.Context(), workspaceIDParam, kqlDashboardIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DefinitionResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListKQLDashboardsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListKQLDashboardsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListKQLDashboardsPager not implemented")}
	}
	newListKQLDashboardsPager := i.newListKQLDashboardsPager.get(req)
	if newListKQLDashboardsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDashboards`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *kqldashboard.ItemsClientListKQLDashboardsOptions
		if continuationTokenParam != nil {
			options = &kqldashboard.ItemsClientListKQLDashboardsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListKQLDashboardsPager(workspaceIDParam, options)
		newListKQLDashboardsPager = &resp
		i.newListKQLDashboardsPager.add(req, newListKQLDashboardsPager)
		server.PagerResponderInjectNextLinks(newListKQLDashboardsPager, req, func(page *kqldashboard.ItemsClientListKQLDashboardsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListKQLDashboardsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListKQLDashboardsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListKQLDashboardsPager) {
		i.newListKQLDashboardsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateKQLDashboard(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateKQLDashboard == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateKQLDashboard not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDashboards/(?P<kqlDashboardId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[kqldashboard.UpdateKQLDashboardRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlDashboardIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlDashboardId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateKQLDashboard(req.Context(), workspaceIDParam, kqlDashboardIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KQLDashboard, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateKQLDashboardDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateKQLDashboardDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateKQLDashboardDefinition not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDashboards/(?P<kqlDashboardId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	body, err := server.UnmarshalRequestAsJSON[kqldashboard.UpdateKQLDashboardDefinitionRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlDashboardIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlDashboardId")])
	if err != nil {
		return nil, err
	}
	updateMetadataUnescaped, err := url.QueryUnescape(qp.Get("updateMetadata"))
	if err != nil {
		return nil, err
	}
	updateMetadataParam, err := parseOptional(updateMetadataUnescaped, strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	var options *kqldashboard.ItemsClientUpdateKQLDashboardDefinitionOptions
	if updateMetadataParam != nil {
		options = &kqldashboard.ItemsClientUpdateKQLDashboardDefinitionOptions{
			UpdateMetadata: updateMetadataParam,
		}
	}
	respr, errRespr := i.srv.UpdateKQLDashboardDefinition(req.Context(), workspaceIDParam, kqlDashboardIDParam, body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
