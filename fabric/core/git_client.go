// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// GitClient contains the methods for the Git group.
// Don't use this type directly, use a constructor function instead.
type GitClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCommitToGit - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// You can choose to commit all changes or only specific changed items. To sync the workspace for the first time, use this
// API after the Connect [/rest/api/fabric/core/git/connect] and Initialize
// Connection [/rest/api/fabric/core/git/initialize-connection] APIs.
// PERMISSIONS The caller must have a contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.GitCommit.All.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - commitToGitRequest - Commit to the Git request payload.
//   - options - GitClientBeginCommitToGitOptions contains the optional parameters for the GitClient.BeginCommitToGit method.
func (client *GitClient) BeginCommitToGit(ctx context.Context, workspaceID string, commitToGitRequest CommitToGitRequest, options *GitClientBeginCommitToGitOptions) (*runtime.Poller[GitClientCommitToGitResponse], error) {
	return client.beginCommitToGit(ctx, workspaceID, commitToGitRequest, options)
}

// CommitToGit - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// You can choose to commit all changes or only specific changed items. To sync the workspace for the first time, use this
// API after the Connect [/rest/api/fabric/core/git/connect] and Initialize
// Connection [/rest/api/fabric/core/git/initialize-connection] APIs.
// PERMISSIONS The caller must have a contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.GitCommit.All.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *GitClient) commitToGit(ctx context.Context, workspaceID string, commitToGitRequest CommitToGitRequest, options *GitClientBeginCommitToGitOptions) (*http.Response, error) {
	var err error
	const operationName = "core.GitClient.BeginCommitToGit"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.commitToGitCreateRequest(ctx, workspaceID, commitToGitRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// commitToGitCreateRequest creates the CommitToGit request.
func (client *GitClient) commitToGitCreateRequest(ctx context.Context, workspaceID string, commitToGitRequest CommitToGitRequest, options *GitClientBeginCommitToGitOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/git/commitToGit"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, commitToGitRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Connect - This operation does not sync between the workspace and the connected branch. To complete the sync, use the Initialize
// Connection [/rest/api/fabric/core/git/initialize-connection] operation and follow
// with either the Commit To Git [/rest/api/fabric/core/git/commit-to-git] or the Update From Git [/rest/api/fabric/core/git/update-from-git]
// operation.
// PERMISSIONS The caller must have an admin role for the workspace.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - gitConnectRequest - Connect to the Git request payload.
//   - options - GitClientConnectOptions contains the optional parameters for the GitClient.Connect method.
func (client *GitClient) Connect(ctx context.Context, workspaceID string, gitConnectRequest GitConnectRequest, options *GitClientConnectOptions) (GitClientConnectResponse, error) {
	var err error
	const operationName = "core.GitClient.Connect"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.connectCreateRequest(ctx, workspaceID, gitConnectRequest, options)
	if err != nil {
		return GitClientConnectResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GitClientConnectResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return GitClientConnectResponse{}, err
	}
	return GitClientConnectResponse{}, nil
}

// connectCreateRequest creates the Connect request.
func (client *GitClient) connectCreateRequest(ctx context.Context, workspaceID string, gitConnectRequest GitConnectRequest, options *GitClientConnectOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/git/connect"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, gitConnectRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Disconnect - PERMISSIONS The caller must have an admin workspace role.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - GitClientDisconnectOptions contains the optional parameters for the GitClient.Disconnect method.
func (client *GitClient) Disconnect(ctx context.Context, workspaceID string, options *GitClientDisconnectOptions) (GitClientDisconnectResponse, error) {
	var err error
	const operationName = "core.GitClient.Disconnect"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.disconnectCreateRequest(ctx, workspaceID, options)
	if err != nil {
		return GitClientDisconnectResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GitClientDisconnectResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return GitClientDisconnectResponse{}, err
	}
	return GitClientDisconnectResponse{}, nil
}

// disconnectCreateRequest creates the Disconnect request.
func (client *GitClient) disconnectCreateRequest(ctx context.Context, workspaceID string, options *GitClientDisconnectOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/git/disconnect"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetConnection - PERMISSIONS The caller must have a contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - GitClientGetConnectionOptions contains the optional parameters for the GitClient.GetConnection method.
func (client *GitClient) GetConnection(ctx context.Context, workspaceID string, options *GitClientGetConnectionOptions) (GitClientGetConnectionResponse, error) {
	var err error
	const operationName = "core.GitClient.GetConnection"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getConnectionCreateRequest(ctx, workspaceID, options)
	if err != nil {
		return GitClientGetConnectionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GitClientGetConnectionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return GitClientGetConnectionResponse{}, err
	}
	resp, err := client.getConnectionHandleResponse(httpResp)
	return resp, err
}

// getConnectionCreateRequest creates the GetConnection request.
func (client *GitClient) getConnectionCreateRequest(ctx context.Context, workspaceID string, options *GitClientGetConnectionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/git/connection"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getConnectionHandleResponse handles the GetConnection response.
func (client *GitClient) getConnectionHandleResponse(resp *http.Response) (GitClientGetConnectionResponse, error) {
	result := GitClientGetConnectionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GitConnection); err != nil {
		return GitClientGetConnectionResponse{}, err
	}
	return result, nil
}

// BeginGetStatus - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// The status indicates changes to the item(s) since the last workspace and remote branch sync. If both locations were modified,
// the API flags a conflict.
// PERMISSIONS The caller must have a contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.GitUpdate.All or Workspace.GitCommit.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - GitClientBeginGetStatusOptions contains the optional parameters for the GitClient.BeginGetStatus method.
func (client *GitClient) BeginGetStatus(ctx context.Context, workspaceID string, options *GitClientBeginGetStatusOptions) (*runtime.Poller[GitClientGetStatusResponse], error) {
	return client.beginGetStatus(ctx, workspaceID, options)
}

// GetStatus - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// The status indicates changes to the item(s) since the last workspace and remote branch sync. If both locations were modified,
// the API flags a conflict.
// PERMISSIONS The caller must have a contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.GitUpdate.All or Workspace.GitCommit.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *GitClient) getStatus(ctx context.Context, workspaceID string, options *GitClientBeginGetStatusOptions) (*http.Response, error) {
	var err error
	const operationName = "core.GitClient.BeginGetStatus"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getStatusCreateRequest(ctx, workspaceID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getStatusCreateRequest creates the GetStatus request.
func (client *GitClient) getStatusCreateRequest(ctx context.Context, workspaceID string, options *GitClientBeginGetStatusOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/git/status"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginInitializeConnection - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API should be called after a successful call to the Connect [/rest/api/fabric/core/git/connect] API. To complete a
// full sync of the workspace, use the Required Action
// [initialize-connection#requiredaction] operation to call the relevant sync operation, either Commit To Git [/rest/api/fabric/core/git/commit-to-git]
// or Update From Git
// [/rest/api/fabric/core/git/update-from-git].
// PERMISSIONS The caller must have an admin workspace role.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - GitClientBeginInitializeConnectionOptions contains the optional parameters for the GitClient.BeginInitializeConnection
//     method.
func (client *GitClient) BeginInitializeConnection(ctx context.Context, workspaceID string, options *GitClientBeginInitializeConnectionOptions) (*runtime.Poller[GitClientInitializeConnectionResponse], error) {
	return client.beginInitializeConnection(ctx, workspaceID, options)
}

// InitializeConnection - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API should be called after a successful call to the Connect [/rest/api/fabric/core/git/connect] API. To complete a
// full sync of the workspace, use the Required Action
// [initialize-connection#requiredaction] operation to call the relevant sync operation, either Commit To Git [/rest/api/fabric/core/git/commit-to-git]
// or Update From Git
// [/rest/api/fabric/core/git/update-from-git].
// PERMISSIONS The caller must have an admin workspace role.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *GitClient) initializeConnection(ctx context.Context, workspaceID string, options *GitClientBeginInitializeConnectionOptions) (*http.Response, error) {
	var err error
	const operationName = "core.GitClient.BeginInitializeConnection"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.initializeConnectionCreateRequest(ctx, workspaceID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// initializeConnectionCreateRequest creates the InitializeConnection request.
func (client *GitClient) initializeConnectionCreateRequest(ctx context.Context, workspaceID string, options *GitClientBeginInitializeConnectionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/git/initializeConnection"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.GitInitializeConnectionRequest != nil {
		if err := runtime.MarshalAsJSON(req, *options.GitInitializeConnectionRequest); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// BeginUpdateFromGit - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// The update only affects items in the workspace that were changed in those commits. If called after the Connect [/rest/api/fabric/core/git/connect]
// and Initialize Connection
// [/rest/api/fabric/core/git/initialize-connection] APIs, it will perform a full update of the entire workspace.
// PERMISSIONS The caller must have a contributor or higher role for the workspace.
// REQUIRED DELEGATED SCOPES Workspace.GitUpdate.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - updateFromGitRequest - Update from a Git request payload.
//   - options - GitClientBeginUpdateFromGitOptions contains the optional parameters for the GitClient.BeginUpdateFromGit method.
func (client *GitClient) BeginUpdateFromGit(ctx context.Context, workspaceID string, updateFromGitRequest UpdateFromGitRequest, options *GitClientBeginUpdateFromGitOptions) (*runtime.Poller[GitClientUpdateFromGitResponse], error) {
	return client.beginUpdateFromGit(ctx, workspaceID, updateFromGitRequest, options)
}

// UpdateFromGit - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// The update only affects items in the workspace that were changed in those commits. If called after the Connect [/rest/api/fabric/core/git/connect]
// and Initialize Connection
// [/rest/api/fabric/core/git/initialize-connection] APIs, it will perform a full update of the entire workspace.
// PERMISSIONS The caller must have a contributor or higher role for the workspace.
// REQUIRED DELEGATED SCOPES Workspace.GitUpdate.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *GitClient) updateFromGit(ctx context.Context, workspaceID string, updateFromGitRequest UpdateFromGitRequest, options *GitClientBeginUpdateFromGitOptions) (*http.Response, error) {
	var err error
	const operationName = "core.GitClient.BeginUpdateFromGit"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateFromGitCreateRequest(ctx, workspaceID, updateFromGitRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateFromGitCreateRequest creates the UpdateFromGit request.
func (client *GitClient) updateFromGitCreateRequest(ctx context.Context, workspaceID string, updateFromGitRequest UpdateFromGitRequest, options *GitClientBeginUpdateFromGitOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/git/updateFromGit"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateFromGitRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CommitToGit - returns GitClientCommitToGitResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// You can choose to commit all changes or only specific changed items. To sync the workspace for the first time, use this API after the Connect [/rest/api/fabric/core/git/connect] and Initialize
// Connection [/rest/api/fabric/core/git/initialize-connection] APIs.
//
// PERMISSIONS The caller must have a contributor or higher workspace role.
//
// REQUIRED DELEGATED SCOPES Workspace.GitCommit.All.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - commitToGitRequest - Commit to the Git request payload.
//   - options - GitClientBeginCommitToGitOptions contains the optional parameters for the GitClient.BeginCommitToGit method.
func (client *GitClient) CommitToGit(ctx context.Context, workspaceID string, commitToGitRequest CommitToGitRequest, options *GitClientBeginCommitToGitOptions) (GitClientCommitToGitResponse, error) {
	return iruntime.NewLRO(client.BeginCommitToGit(ctx, workspaceID, commitToGitRequest, options)).Sync(ctx)
}

// beginCommitToGit creates the commitToGit request.
func (client *GitClient) beginCommitToGit(ctx context.Context, workspaceID string, commitToGitRequest CommitToGitRequest, options *GitClientBeginCommitToGitOptions) (*runtime.Poller[GitClientCommitToGitResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.commitToGit(ctx, workspaceID, commitToGitRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[GitClientCommitToGitResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GitClientCommitToGitResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[GitClientCommitToGitResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GitClientCommitToGitResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetStatus - returns GitClientGetStatusResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// The status indicates changes to the item(s) since the last workspace and remote branch sync. If both locations were modified, the API flags a conflict.
//
// PERMISSIONS The caller must have a contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.GitUpdate.All or Workspace.GitCommit.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - GitClientBeginGetStatusOptions contains the optional parameters for the GitClient.BeginGetStatus method.
func (client *GitClient) GetStatus(ctx context.Context, workspaceID string, options *GitClientBeginGetStatusOptions) (GitClientGetStatusResponse, error) {
	return iruntime.NewLRO(client.BeginGetStatus(ctx, workspaceID, options)).Sync(ctx)
}

// beginGetStatus creates the getStatus request.
func (client *GitClient) beginGetStatus(ctx context.Context, workspaceID string, options *GitClientBeginGetStatusOptions) (*runtime.Poller[GitClientGetStatusResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getStatus(ctx, workspaceID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[GitClientGetStatusResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GitClientGetStatusResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[GitClientGetStatusResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GitClientGetStatusResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// InitializeConnection - returns GitClientInitializeConnectionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// This API should be called after a successful call to the Connect [/rest/api/fabric/core/git/connect] API. To complete a full sync of the workspace, use the Required Action
// [initialize-connection#requiredaction] operation to call the relevant sync operation, either Commit To Git [/rest/api/fabric/core/git/commit-to-git] or Update From Git
// [/rest/api/fabric/core/git/update-from-git].
//
// PERMISSIONS The caller must have an admin workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - GitClientBeginInitializeConnectionOptions contains the optional parameters for the GitClient.BeginInitializeConnection method.
func (client *GitClient) InitializeConnection(ctx context.Context, workspaceID string, options *GitClientBeginInitializeConnectionOptions) (GitClientInitializeConnectionResponse, error) {
	return iruntime.NewLRO(client.BeginInitializeConnection(ctx, workspaceID, options)).Sync(ctx)
}

// beginInitializeConnection creates the initializeConnection request.
func (client *GitClient) beginInitializeConnection(ctx context.Context, workspaceID string, options *GitClientBeginInitializeConnectionOptions) (*runtime.Poller[GitClientInitializeConnectionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.initializeConnection(ctx, workspaceID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[GitClientInitializeConnectionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GitClientInitializeConnectionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[GitClientInitializeConnectionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GitClientInitializeConnectionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateFromGit - returns GitClientUpdateFromGitResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// The update only affects items in the workspace that were changed in those commits. If called after the Connect [/rest/api/fabric/core/git/connect] and Initialize Connection
// [/rest/api/fabric/core/git/initialize-connection] APIs, it will perform a full update of the entire workspace.
//
// PERMISSIONS The caller must have a contributor or higher role for the workspace.
//
// # REQUIRED DELEGATED SCOPES Workspace.GitUpdate.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - updateFromGitRequest - Update from a Git request payload.
//   - options - GitClientBeginUpdateFromGitOptions contains the optional parameters for the GitClient.BeginUpdateFromGit method.
func (client *GitClient) UpdateFromGit(ctx context.Context, workspaceID string, updateFromGitRequest UpdateFromGitRequest, options *GitClientBeginUpdateFromGitOptions) (GitClientUpdateFromGitResponse, error) {
	return iruntime.NewLRO(client.BeginUpdateFromGit(ctx, workspaceID, updateFromGitRequest, options)).Sync(ctx)
}

// beginUpdateFromGit creates the updateFromGit request.
func (client *GitClient) beginUpdateFromGit(ctx context.Context, workspaceID string, updateFromGitRequest UpdateFromGitRequest, options *GitClientBeginUpdateFromGitOptions) (*runtime.Poller[GitClientUpdateFromGitResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateFromGit(ctx, workspaceID, updateFromGitRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[GitClientUpdateFromGitResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GitClientUpdateFromGitResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[GitClientUpdateFromGitResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GitClientUpdateFromGitResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}
