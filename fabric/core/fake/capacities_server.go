// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// CapacitiesServer is a fake server for instances of the core.CapacitiesClient type.
type CapacitiesServer struct {
	// NewListCapacitiesPager is the fake for method CapacitiesClient.NewListCapacitiesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListCapacitiesPager func(options *core.CapacitiesClientListCapacitiesOptions) (resp azfake.PagerResponder[core.CapacitiesClientListCapacitiesResponse])
}

// NewCapacitiesServerTransport creates a new instance of CapacitiesServerTransport with the provided implementation.
// The returned CapacitiesServerTransport instance is connected to an instance of core.CapacitiesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCapacitiesServerTransport(srv *CapacitiesServer) *CapacitiesServerTransport {
	return &CapacitiesServerTransport{
		srv:                    srv,
		newListCapacitiesPager: newTracker[azfake.PagerResponder[core.CapacitiesClientListCapacitiesResponse]](),
	}
}

// CapacitiesServerTransport connects instances of core.CapacitiesClient to instances of CapacitiesServer.
// Don't use this type directly, use NewCapacitiesServerTransport instead.
type CapacitiesServerTransport struct {
	srv                    *CapacitiesServer
	newListCapacitiesPager *tracker[azfake.PagerResponder[core.CapacitiesClientListCapacitiesResponse]]
}

// Do implements the policy.Transporter interface for CapacitiesServerTransport.
func (c *CapacitiesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return c.dispatchToMethodFake(req, method)
}

func (c *CapacitiesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if capacitiesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = capacitiesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "CapacitiesClient.NewListCapacitiesPager":
				res.resp, res.err = c.dispatchNewListCapacitiesPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (c *CapacitiesServerTransport) dispatchNewListCapacitiesPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListCapacitiesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListCapacitiesPager not implemented")}
	}
	newListCapacitiesPager := c.newListCapacitiesPager.get(req)
	if newListCapacitiesPager == nil {
		qp := req.URL.Query()
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *core.CapacitiesClientListCapacitiesOptions
		if continuationTokenParam != nil {
			options = &core.CapacitiesClientListCapacitiesOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := c.srv.NewListCapacitiesPager(options)
		newListCapacitiesPager = &resp
		c.newListCapacitiesPager.add(req, newListCapacitiesPager)
		server.PagerResponderInjectNextLinks(newListCapacitiesPager, req, func(page *core.CapacitiesClientListCapacitiesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListCapacitiesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListCapacitiesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListCapacitiesPager) {
		c.newListCapacitiesPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to CapacitiesServerTransport
var capacitiesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
