// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// FoldersServer is a fake server for instances of the core.FoldersClient type.
type FoldersServer struct {
	// CreateFolder is the fake for method FoldersClient.CreateFolder
	// HTTP status codes to indicate success: http.StatusCreated
	CreateFolder func(ctx context.Context, workspaceID string, createFolderRequest core.CreateFolderRequest, options *core.FoldersClientCreateFolderOptions) (resp azfake.Responder[core.FoldersClientCreateFolderResponse], errResp azfake.ErrorResponder)

	// DeleteFolder is the fake for method FoldersClient.DeleteFolder
	// HTTP status codes to indicate success: http.StatusOK
	DeleteFolder func(ctx context.Context, workspaceID string, folderID string, options *core.FoldersClientDeleteFolderOptions) (resp azfake.Responder[core.FoldersClientDeleteFolderResponse], errResp azfake.ErrorResponder)

	// GetFolder is the fake for method FoldersClient.GetFolder
	// HTTP status codes to indicate success: http.StatusOK
	GetFolder func(ctx context.Context, workspaceID string, folderID string, options *core.FoldersClientGetFolderOptions) (resp azfake.Responder[core.FoldersClientGetFolderResponse], errResp azfake.ErrorResponder)

	// NewListFoldersPager is the fake for method FoldersClient.NewListFoldersPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListFoldersPager func(workspaceID string, options *core.FoldersClientListFoldersOptions) (resp azfake.PagerResponder[core.FoldersClientListFoldersResponse])

	// MoveFolder is the fake for method FoldersClient.MoveFolder
	// HTTP status codes to indicate success: http.StatusOK
	MoveFolder func(ctx context.Context, workspaceID string, folderID string, moveFolderRequest core.MoveFolderRequest, options *core.FoldersClientMoveFolderOptions) (resp azfake.Responder[core.FoldersClientMoveFolderResponse], errResp azfake.ErrorResponder)

	// UpdateFolder is the fake for method FoldersClient.UpdateFolder
	// HTTP status codes to indicate success: http.StatusOK
	UpdateFolder func(ctx context.Context, workspaceID string, folderID string, updateFolderRequest core.UpdateFolderRequest, options *core.FoldersClientUpdateFolderOptions) (resp azfake.Responder[core.FoldersClientUpdateFolderResponse], errResp azfake.ErrorResponder)
}

// NewFoldersServerTransport creates a new instance of FoldersServerTransport with the provided implementation.
// The returned FoldersServerTransport instance is connected to an instance of core.FoldersClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewFoldersServerTransport(srv *FoldersServer) *FoldersServerTransport {
	return &FoldersServerTransport{
		srv:                 srv,
		newListFoldersPager: newTracker[azfake.PagerResponder[core.FoldersClientListFoldersResponse]](),
	}
}

// FoldersServerTransport connects instances of core.FoldersClient to instances of FoldersServer.
// Don't use this type directly, use NewFoldersServerTransport instead.
type FoldersServerTransport struct {
	srv                 *FoldersServer
	newListFoldersPager *tracker[azfake.PagerResponder[core.FoldersClientListFoldersResponse]]
}

// Do implements the policy.Transporter interface for FoldersServerTransport.
func (f *FoldersServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return f.dispatchToMethodFake(req, method)
}

func (f *FoldersServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if foldersServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = foldersServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "FoldersClient.CreateFolder":
				res.resp, res.err = f.dispatchCreateFolder(req)
			case "FoldersClient.DeleteFolder":
				res.resp, res.err = f.dispatchDeleteFolder(req)
			case "FoldersClient.GetFolder":
				res.resp, res.err = f.dispatchGetFolder(req)
			case "FoldersClient.NewListFoldersPager":
				res.resp, res.err = f.dispatchNewListFoldersPager(req)
			case "FoldersClient.MoveFolder":
				res.resp, res.err = f.dispatchMoveFolder(req)
			case "FoldersClient.UpdateFolder":
				res.resp, res.err = f.dispatchUpdateFolder(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (f *FoldersServerTransport) dispatchCreateFolder(req *http.Request) (*http.Response, error) {
	if f.srv.CreateFolder == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateFolder not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/folders`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.CreateFolderRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.CreateFolder(req.Context(), workspaceIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Folder, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FoldersServerTransport) dispatchDeleteFolder(req *http.Request) (*http.Response, error) {
	if f.srv.DeleteFolder == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteFolder not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/folders/(?P<folderId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	folderIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("folderId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.DeleteFolder(req.Context(), workspaceIDParam, folderIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FoldersServerTransport) dispatchGetFolder(req *http.Request) (*http.Response, error) {
	if f.srv.GetFolder == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetFolder not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/folders/(?P<folderId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	folderIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("folderId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.GetFolder(req.Context(), workspaceIDParam, folderIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Folder, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FoldersServerTransport) dispatchNewListFoldersPager(req *http.Request) (*http.Response, error) {
	if f.srv.NewListFoldersPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListFoldersPager not implemented")}
	}
	newListFoldersPager := f.newListFoldersPager.get(req)
	if newListFoldersPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/folders`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		rootFolderIDUnescaped, err := url.QueryUnescape(qp.Get("rootFolderId"))
		if err != nil {
			return nil, err
		}
		rootFolderIDParam := getOptional(rootFolderIDUnescaped)
		recursiveUnescaped, err := url.QueryUnescape(qp.Get("recursive"))
		if err != nil {
			return nil, err
		}
		recursiveParam, err := parseOptional(recursiveUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *core.FoldersClientListFoldersOptions
		if rootFolderIDParam != nil || recursiveParam != nil || continuationTokenParam != nil {
			options = &core.FoldersClientListFoldersOptions{
				RootFolderID:      rootFolderIDParam,
				Recursive:         recursiveParam,
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := f.srv.NewListFoldersPager(workspaceIDParam, options)
		newListFoldersPager = &resp
		f.newListFoldersPager.add(req, newListFoldersPager)
		server.PagerResponderInjectNextLinks(newListFoldersPager, req, func(page *core.FoldersClientListFoldersResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListFoldersPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		f.newListFoldersPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListFoldersPager) {
		f.newListFoldersPager.remove(req)
	}
	return resp, nil
}

func (f *FoldersServerTransport) dispatchMoveFolder(req *http.Request) (*http.Response, error) {
	if f.srv.MoveFolder == nil {
		return nil, &nonRetriableError{errors.New("fake for method MoveFolder not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/folders/(?P<folderId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/move`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.MoveFolderRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	folderIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("folderId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.MoveFolder(req.Context(), workspaceIDParam, folderIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Folder, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FoldersServerTransport) dispatchUpdateFolder(req *http.Request) (*http.Response, error) {
	if f.srv.UpdateFolder == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateFolder not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/folders/(?P<folderId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.UpdateFolderRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	folderIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("folderId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.UpdateFolder(req.Context(), workspaceIDParam, folderIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Folder, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to FoldersServerTransport
var foldersServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
