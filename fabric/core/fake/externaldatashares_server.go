// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// ExternalDataSharesServer is a fake server for instances of the core.ExternalDataSharesClient type.
type ExternalDataSharesServer struct {
	// CreateExternalDataShare is the fake for method ExternalDataSharesClient.CreateExternalDataShare
	// HTTP status codes to indicate success: http.StatusCreated
	CreateExternalDataShare func(ctx context.Context, workspaceID string, itemID string, createExternalDataShareRequest core.CreateExternalDataShareRequest, options *core.ExternalDataSharesClientCreateExternalDataShareOptions) (resp azfake.Responder[core.ExternalDataSharesClientCreateExternalDataShareResponse], errResp azfake.ErrorResponder)

	// GetExternalDataShare is the fake for method ExternalDataSharesClient.GetExternalDataShare
	// HTTP status codes to indicate success: http.StatusOK
	GetExternalDataShare func(ctx context.Context, workspaceID string, itemID string, externalDataShareID string, options *core.ExternalDataSharesClientGetExternalDataShareOptions) (resp azfake.Responder[core.ExternalDataSharesClientGetExternalDataShareResponse], errResp azfake.ErrorResponder)

	// NewListExternalDataSharesInItemPager is the fake for method ExternalDataSharesClient.NewListExternalDataSharesInItemPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListExternalDataSharesInItemPager func(workspaceID string, itemID string, options *core.ExternalDataSharesClientListExternalDataSharesInItemOptions) (resp azfake.PagerResponder[core.ExternalDataSharesClientListExternalDataSharesInItemResponse])

	// RevokeExternalDataShare is the fake for method ExternalDataSharesClient.RevokeExternalDataShare
	// HTTP status codes to indicate success: http.StatusOK
	RevokeExternalDataShare func(ctx context.Context, workspaceID string, itemID string, externalDataShareID string, options *core.ExternalDataSharesClientRevokeExternalDataShareOptions) (resp azfake.Responder[core.ExternalDataSharesClientRevokeExternalDataShareResponse], errResp azfake.ErrorResponder)
}

// NewExternalDataSharesServerTransport creates a new instance of ExternalDataSharesServerTransport with the provided implementation.
// The returned ExternalDataSharesServerTransport instance is connected to an instance of core.ExternalDataSharesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewExternalDataSharesServerTransport(srv *ExternalDataSharesServer) *ExternalDataSharesServerTransport {
	return &ExternalDataSharesServerTransport{
		srv:                                  srv,
		newListExternalDataSharesInItemPager: newTracker[azfake.PagerResponder[core.ExternalDataSharesClientListExternalDataSharesInItemResponse]](),
	}
}

// ExternalDataSharesServerTransport connects instances of core.ExternalDataSharesClient to instances of ExternalDataSharesServer.
// Don't use this type directly, use NewExternalDataSharesServerTransport instead.
type ExternalDataSharesServerTransport struct {
	srv                                  *ExternalDataSharesServer
	newListExternalDataSharesInItemPager *tracker[azfake.PagerResponder[core.ExternalDataSharesClientListExternalDataSharesInItemResponse]]
}

// Do implements the policy.Transporter interface for ExternalDataSharesServerTransport.
func (e *ExternalDataSharesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return e.dispatchToMethodFake(req, method)
}

func (e *ExternalDataSharesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "ExternalDataSharesClient.CreateExternalDataShare":
			res.resp, res.err = e.dispatchCreateExternalDataShare(req)
		case "ExternalDataSharesClient.GetExternalDataShare":
			res.resp, res.err = e.dispatchGetExternalDataShare(req)
		case "ExternalDataSharesClient.NewListExternalDataSharesInItemPager":
			res.resp, res.err = e.dispatchNewListExternalDataSharesInItemPager(req)
		case "ExternalDataSharesClient.RevokeExternalDataShare":
			res.resp, res.err = e.dispatchRevokeExternalDataShare(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (e *ExternalDataSharesServerTransport) dispatchCreateExternalDataShare(req *http.Request) (*http.Response, error) {
	if e.srv.CreateExternalDataShare == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateExternalDataShare not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/items/(?P<itemId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/externalDataShares`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.CreateExternalDataShareRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	itemIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("itemId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.CreateExternalDataShare(req.Context(), workspaceIDParam, itemIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExternalDataShare, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Location; val != nil {
		resp.Header.Set("Location", *val)
	}
	return resp, nil
}

func (e *ExternalDataSharesServerTransport) dispatchGetExternalDataShare(req *http.Request) (*http.Response, error) {
	if e.srv.GetExternalDataShare == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetExternalDataShare not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/items/(?P<itemId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/externalDataShares/(?P<externalDataShareId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	itemIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("itemId")])
	if err != nil {
		return nil, err
	}
	externalDataShareIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("externalDataShareId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.GetExternalDataShare(req.Context(), workspaceIDParam, itemIDParam, externalDataShareIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExternalDataShare, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *ExternalDataSharesServerTransport) dispatchNewListExternalDataSharesInItemPager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListExternalDataSharesInItemPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListExternalDataSharesInItemPager not implemented")}
	}
	newListExternalDataSharesInItemPager := e.newListExternalDataSharesInItemPager.get(req)
	if newListExternalDataSharesInItemPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/items/(?P<itemId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/externalDataShares`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		itemIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("itemId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *core.ExternalDataSharesClientListExternalDataSharesInItemOptions
		if continuationTokenParam != nil {
			options = &core.ExternalDataSharesClientListExternalDataSharesInItemOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := e.srv.NewListExternalDataSharesInItemPager(workspaceIDParam, itemIDParam, options)
		newListExternalDataSharesInItemPager = &resp
		e.newListExternalDataSharesInItemPager.add(req, newListExternalDataSharesInItemPager)
		server.PagerResponderInjectNextLinks(newListExternalDataSharesInItemPager, req, func(page *core.ExternalDataSharesClientListExternalDataSharesInItemResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListExternalDataSharesInItemPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		e.newListExternalDataSharesInItemPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListExternalDataSharesInItemPager) {
		e.newListExternalDataSharesInItemPager.remove(req)
	}
	return resp, nil
}

func (e *ExternalDataSharesServerTransport) dispatchRevokeExternalDataShare(req *http.Request) (*http.Response, error) {
	if e.srv.RevokeExternalDataShare == nil {
		return nil, &nonRetriableError{errors.New("fake for method RevokeExternalDataShare not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/items/(?P<itemId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/externalDataShares/(?P<externalDataShareId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/revoke`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	itemIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("itemId")])
	if err != nil {
		return nil, err
	}
	externalDataShareIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("externalDataShareId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.RevokeExternalDataShare(req.Context(), workspaceIDParam, itemIDParam, externalDataShareIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
