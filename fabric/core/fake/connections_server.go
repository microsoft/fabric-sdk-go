// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// ConnectionsServer is a fake server for instances of the core.ConnectionsClient type.
type ConnectionsServer struct {
	// AddConnectionRoleAssignment is the fake for method ConnectionsClient.AddConnectionRoleAssignment
	// HTTP status codes to indicate success: http.StatusCreated
	AddConnectionRoleAssignment func(ctx context.Context, connectionID string, addConnectionRoleAssignmentRequest core.AddConnectionRoleAssignmentRequest, options *core.ConnectionsClientAddConnectionRoleAssignmentOptions) (resp azfake.Responder[core.ConnectionsClientAddConnectionRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// CreateConnection is the fake for method ConnectionsClient.CreateConnection
	// HTTP status codes to indicate success: http.StatusCreated
	CreateConnection func(ctx context.Context, createConnectionRequest core.CreateConnectionRequestClassification, options *core.ConnectionsClientCreateConnectionOptions) (resp azfake.Responder[core.ConnectionsClientCreateConnectionResponse], errResp azfake.ErrorResponder)

	// DeleteConnection is the fake for method ConnectionsClient.DeleteConnection
	// HTTP status codes to indicate success: http.StatusOK
	DeleteConnection func(ctx context.Context, connectionID string, options *core.ConnectionsClientDeleteConnectionOptions) (resp azfake.Responder[core.ConnectionsClientDeleteConnectionResponse], errResp azfake.ErrorResponder)

	// DeleteConnectionRoleAssignment is the fake for method ConnectionsClient.DeleteConnectionRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK
	DeleteConnectionRoleAssignment func(ctx context.Context, connectionID string, connectionRoleAssignmentID string, options *core.ConnectionsClientDeleteConnectionRoleAssignmentOptions) (resp azfake.Responder[core.ConnectionsClientDeleteConnectionRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// GetConnection is the fake for method ConnectionsClient.GetConnection
	// HTTP status codes to indicate success: http.StatusOK
	GetConnection func(ctx context.Context, connectionID string, options *core.ConnectionsClientGetConnectionOptions) (resp azfake.Responder[core.ConnectionsClientGetConnectionResponse], errResp azfake.ErrorResponder)

	// GetConnectionRoleAssignment is the fake for method ConnectionsClient.GetConnectionRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK
	GetConnectionRoleAssignment func(ctx context.Context, connectionID string, connectionRoleAssignmentID string, options *core.ConnectionsClientGetConnectionRoleAssignmentOptions) (resp azfake.Responder[core.ConnectionsClientGetConnectionRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// NewListConnectionRoleAssignmentsPager is the fake for method ConnectionsClient.NewListConnectionRoleAssignmentsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListConnectionRoleAssignmentsPager func(connectionID string, options *core.ConnectionsClientListConnectionRoleAssignmentsOptions) (resp azfake.PagerResponder[core.ConnectionsClientListConnectionRoleAssignmentsResponse])

	// NewListConnectionsPager is the fake for method ConnectionsClient.NewListConnectionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListConnectionsPager func(options *core.ConnectionsClientListConnectionsOptions) (resp azfake.PagerResponder[core.ConnectionsClientListConnectionsResponse])

	// NewListSupportedConnectionTypesPager is the fake for method ConnectionsClient.NewListSupportedConnectionTypesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListSupportedConnectionTypesPager func(options *core.ConnectionsClientListSupportedConnectionTypesOptions) (resp azfake.PagerResponder[core.ConnectionsClientListSupportedConnectionTypesResponse])

	// UpdateConnection is the fake for method ConnectionsClient.UpdateConnection
	// HTTP status codes to indicate success: http.StatusOK
	UpdateConnection func(ctx context.Context, connectionID string, updateConnectionRequest core.UpdateConnectionRequestClassification, options *core.ConnectionsClientUpdateConnectionOptions) (resp azfake.Responder[core.ConnectionsClientUpdateConnectionResponse], errResp azfake.ErrorResponder)

	// UpdateConnectionRoleAssignment is the fake for method ConnectionsClient.UpdateConnectionRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK
	UpdateConnectionRoleAssignment func(ctx context.Context, connectionID string, connectionRoleAssignmentID string, updateConnectionRoleAssignmentRequest core.UpdateConnectionRoleAssignmentRequest, options *core.ConnectionsClientUpdateConnectionRoleAssignmentOptions) (resp azfake.Responder[core.ConnectionsClientUpdateConnectionRoleAssignmentResponse], errResp azfake.ErrorResponder)
}

// NewConnectionsServerTransport creates a new instance of ConnectionsServerTransport with the provided implementation.
// The returned ConnectionsServerTransport instance is connected to an instance of core.ConnectionsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewConnectionsServerTransport(srv *ConnectionsServer) *ConnectionsServerTransport {
	return &ConnectionsServerTransport{
		srv:                                   srv,
		newListConnectionRoleAssignmentsPager: newTracker[azfake.PagerResponder[core.ConnectionsClientListConnectionRoleAssignmentsResponse]](),
		newListConnectionsPager:               newTracker[azfake.PagerResponder[core.ConnectionsClientListConnectionsResponse]](),
		newListSupportedConnectionTypesPager:  newTracker[azfake.PagerResponder[core.ConnectionsClientListSupportedConnectionTypesResponse]](),
	}
}

// ConnectionsServerTransport connects instances of core.ConnectionsClient to instances of ConnectionsServer.
// Don't use this type directly, use NewConnectionsServerTransport instead.
type ConnectionsServerTransport struct {
	srv                                   *ConnectionsServer
	newListConnectionRoleAssignmentsPager *tracker[azfake.PagerResponder[core.ConnectionsClientListConnectionRoleAssignmentsResponse]]
	newListConnectionsPager               *tracker[azfake.PagerResponder[core.ConnectionsClientListConnectionsResponse]]
	newListSupportedConnectionTypesPager  *tracker[azfake.PagerResponder[core.ConnectionsClientListSupportedConnectionTypesResponse]]
}

// Do implements the policy.Transporter interface for ConnectionsServerTransport.
func (c *ConnectionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return c.dispatchToMethodFake(req, method)
}

func (c *ConnectionsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if connectionsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = connectionsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ConnectionsClient.AddConnectionRoleAssignment":
				res.resp, res.err = c.dispatchAddConnectionRoleAssignment(req)
			case "ConnectionsClient.CreateConnection":
				res.resp, res.err = c.dispatchCreateConnection(req)
			case "ConnectionsClient.DeleteConnection":
				res.resp, res.err = c.dispatchDeleteConnection(req)
			case "ConnectionsClient.DeleteConnectionRoleAssignment":
				res.resp, res.err = c.dispatchDeleteConnectionRoleAssignment(req)
			case "ConnectionsClient.GetConnection":
				res.resp, res.err = c.dispatchGetConnection(req)
			case "ConnectionsClient.GetConnectionRoleAssignment":
				res.resp, res.err = c.dispatchGetConnectionRoleAssignment(req)
			case "ConnectionsClient.NewListConnectionRoleAssignmentsPager":
				res.resp, res.err = c.dispatchNewListConnectionRoleAssignmentsPager(req)
			case "ConnectionsClient.NewListConnectionsPager":
				res.resp, res.err = c.dispatchNewListConnectionsPager(req)
			case "ConnectionsClient.NewListSupportedConnectionTypesPager":
				res.resp, res.err = c.dispatchNewListSupportedConnectionTypesPager(req)
			case "ConnectionsClient.UpdateConnection":
				res.resp, res.err = c.dispatchUpdateConnection(req)
			case "ConnectionsClient.UpdateConnectionRoleAssignment":
				res.resp, res.err = c.dispatchUpdateConnectionRoleAssignment(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (c *ConnectionsServerTransport) dispatchAddConnectionRoleAssignment(req *http.Request) (*http.Response, error) {
	if c.srv.AddConnectionRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method AddConnectionRoleAssignment not implemented")}
	}
	const regexStr = `/v1/connections/(?P<connectionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.AddConnectionRoleAssignmentRequest](req)
	if err != nil {
		return nil, err
	}
	connectionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.AddConnectionRoleAssignment(req.Context(), connectionIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ConnectionRoleAssignment, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Location; val != nil {
		resp.Header.Set("Location", *val)
	}
	return resp, nil
}

func (c *ConnectionsServerTransport) dispatchCreateConnection(req *http.Request) (*http.Response, error) {
	if c.srv.CreateConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateConnection not implemented")}
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalCreateConnectionRequestClassification(raw)
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.CreateConnection(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ConnectionClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ConnectionsServerTransport) dispatchDeleteConnection(req *http.Request) (*http.Response, error) {
	if c.srv.DeleteConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteConnection not implemented")}
	}
	const regexStr = `/v1/connections/(?P<connectionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	connectionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.DeleteConnection(req.Context(), connectionIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ConnectionsServerTransport) dispatchDeleteConnectionRoleAssignment(req *http.Request) (*http.Response, error) {
	if c.srv.DeleteConnectionRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteConnectionRoleAssignment not implemented")}
	}
	const regexStr = `/v1/connections/(?P<connectionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments/(?P<connectionRoleAssignmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	connectionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionId")])
	if err != nil {
		return nil, err
	}
	connectionRoleAssignmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionRoleAssignmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.DeleteConnectionRoleAssignment(req.Context(), connectionIDParam, connectionRoleAssignmentIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ConnectionsServerTransport) dispatchGetConnection(req *http.Request) (*http.Response, error) {
	if c.srv.GetConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetConnection not implemented")}
	}
	const regexStr = `/v1/connections/(?P<connectionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	connectionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.GetConnection(req.Context(), connectionIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ConnectionClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ConnectionsServerTransport) dispatchGetConnectionRoleAssignment(req *http.Request) (*http.Response, error) {
	if c.srv.GetConnectionRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetConnectionRoleAssignment not implemented")}
	}
	const regexStr = `/v1/connections/(?P<connectionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments/(?P<connectionRoleAssignmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	connectionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionId")])
	if err != nil {
		return nil, err
	}
	connectionRoleAssignmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionRoleAssignmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.GetConnectionRoleAssignment(req.Context(), connectionIDParam, connectionRoleAssignmentIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ConnectionRoleAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ConnectionsServerTransport) dispatchNewListConnectionRoleAssignmentsPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListConnectionRoleAssignmentsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListConnectionRoleAssignmentsPager not implemented")}
	}
	newListConnectionRoleAssignmentsPager := c.newListConnectionRoleAssignmentsPager.get(req)
	if newListConnectionRoleAssignmentsPager == nil {
		const regexStr = `/v1/connections/(?P<connectionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		connectionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *core.ConnectionsClientListConnectionRoleAssignmentsOptions
		if continuationTokenParam != nil {
			options = &core.ConnectionsClientListConnectionRoleAssignmentsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := c.srv.NewListConnectionRoleAssignmentsPager(connectionIDParam, options)
		newListConnectionRoleAssignmentsPager = &resp
		c.newListConnectionRoleAssignmentsPager.add(req, newListConnectionRoleAssignmentsPager)
		server.PagerResponderInjectNextLinks(newListConnectionRoleAssignmentsPager, req, func(page *core.ConnectionsClientListConnectionRoleAssignmentsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListConnectionRoleAssignmentsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListConnectionRoleAssignmentsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListConnectionRoleAssignmentsPager) {
		c.newListConnectionRoleAssignmentsPager.remove(req)
	}
	return resp, nil
}

func (c *ConnectionsServerTransport) dispatchNewListConnectionsPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListConnectionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListConnectionsPager not implemented")}
	}
	newListConnectionsPager := c.newListConnectionsPager.get(req)
	if newListConnectionsPager == nil {
		qp := req.URL.Query()
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *core.ConnectionsClientListConnectionsOptions
		if continuationTokenParam != nil {
			options = &core.ConnectionsClientListConnectionsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := c.srv.NewListConnectionsPager(options)
		newListConnectionsPager = &resp
		c.newListConnectionsPager.add(req, newListConnectionsPager)
		server.PagerResponderInjectNextLinks(newListConnectionsPager, req, func(page *core.ConnectionsClientListConnectionsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListConnectionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListConnectionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListConnectionsPager) {
		c.newListConnectionsPager.remove(req)
	}
	return resp, nil
}

func (c *ConnectionsServerTransport) dispatchNewListSupportedConnectionTypesPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListSupportedConnectionTypesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListSupportedConnectionTypesPager not implemented")}
	}
	newListSupportedConnectionTypesPager := c.newListSupportedConnectionTypesPager.get(req)
	if newListSupportedConnectionTypesPager == nil {
		qp := req.URL.Query()
		gatewayIDUnescaped, err := url.QueryUnescape(qp.Get("gatewayId"))
		if err != nil {
			return nil, err
		}
		gatewayIDParam := getOptional(gatewayIDUnescaped)
		showAllCreationMethodsUnescaped, err := url.QueryUnescape(qp.Get("showAllCreationMethods"))
		if err != nil {
			return nil, err
		}
		showAllCreationMethodsParam, err := parseOptional(showAllCreationMethodsUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *core.ConnectionsClientListSupportedConnectionTypesOptions
		if gatewayIDParam != nil || showAllCreationMethodsParam != nil || continuationTokenParam != nil {
			options = &core.ConnectionsClientListSupportedConnectionTypesOptions{
				GatewayID:              gatewayIDParam,
				ShowAllCreationMethods: showAllCreationMethodsParam,
				ContinuationToken:      continuationTokenParam,
			}
		}
		resp := c.srv.NewListSupportedConnectionTypesPager(options)
		newListSupportedConnectionTypesPager = &resp
		c.newListSupportedConnectionTypesPager.add(req, newListSupportedConnectionTypesPager)
		server.PagerResponderInjectNextLinks(newListSupportedConnectionTypesPager, req, func(page *core.ConnectionsClientListSupportedConnectionTypesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListSupportedConnectionTypesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListSupportedConnectionTypesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListSupportedConnectionTypesPager) {
		c.newListSupportedConnectionTypesPager.remove(req)
	}
	return resp, nil
}

func (c *ConnectionsServerTransport) dispatchUpdateConnection(req *http.Request) (*http.Response, error) {
	if c.srv.UpdateConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateConnection not implemented")}
	}
	const regexStr = `/v1/connections/(?P<connectionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalUpdateConnectionRequestClassification(raw)
	if err != nil {
		return nil, err
	}
	connectionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.UpdateConnection(req.Context(), connectionIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ConnectionClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ConnectionsServerTransport) dispatchUpdateConnectionRoleAssignment(req *http.Request) (*http.Response, error) {
	if c.srv.UpdateConnectionRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateConnectionRoleAssignment not implemented")}
	}
	const regexStr = `/v1/connections/(?P<connectionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments/(?P<connectionRoleAssignmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.UpdateConnectionRoleAssignmentRequest](req)
	if err != nil {
		return nil, err
	}
	connectionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionId")])
	if err != nil {
		return nil, err
	}
	connectionRoleAssignmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionRoleAssignmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.UpdateConnectionRoleAssignment(req.Context(), connectionIDParam, connectionRoleAssignmentIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ConnectionRoleAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ConnectionsServerTransport
var connectionsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
