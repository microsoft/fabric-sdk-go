// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// WorkspacesServer is a fake server for instances of the core.WorkspacesClient type.
type WorkspacesServer struct {
	// AddWorkspaceRoleAssignment is the fake for method WorkspacesClient.AddWorkspaceRoleAssignment
	// HTTP status codes to indicate success: http.StatusCreated
	AddWorkspaceRoleAssignment func(ctx context.Context, workspaceID string, workspaceRoleAssignmentRequest core.AddWorkspaceRoleAssignmentRequest, options *core.WorkspacesClientAddWorkspaceRoleAssignmentOptions) (resp azfake.Responder[core.WorkspacesClientAddWorkspaceRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// AssignToCapacity is the fake for method WorkspacesClient.AssignToCapacity
	// HTTP status codes to indicate success: http.StatusAccepted
	AssignToCapacity func(ctx context.Context, workspaceID string, assignWorkspaceToCapacityRequest core.AssignWorkspaceToCapacityRequest, options *core.WorkspacesClientAssignToCapacityOptions) (resp azfake.Responder[core.WorkspacesClientAssignToCapacityResponse], errResp azfake.ErrorResponder)

	// AssignToDomain is the fake for method WorkspacesClient.AssignToDomain
	// HTTP status codes to indicate success: http.StatusOK
	AssignToDomain func(ctx context.Context, workspaceID string, assignWorkspaceToDomainRequest core.AssignWorkspaceToDomainRequest, options *core.WorkspacesClientAssignToDomainOptions) (resp azfake.Responder[core.WorkspacesClientAssignToDomainResponse], errResp azfake.ErrorResponder)

	// CreateWorkspace is the fake for method WorkspacesClient.CreateWorkspace
	// HTTP status codes to indicate success: http.StatusCreated
	CreateWorkspace func(ctx context.Context, createWorkspaceRequest core.CreateWorkspaceRequest, options *core.WorkspacesClientCreateWorkspaceOptions) (resp azfake.Responder[core.WorkspacesClientCreateWorkspaceResponse], errResp azfake.ErrorResponder)

	// DeleteWorkspace is the fake for method WorkspacesClient.DeleteWorkspace
	// HTTP status codes to indicate success: http.StatusOK
	DeleteWorkspace func(ctx context.Context, workspaceID string, options *core.WorkspacesClientDeleteWorkspaceOptions) (resp azfake.Responder[core.WorkspacesClientDeleteWorkspaceResponse], errResp azfake.ErrorResponder)

	// DeleteWorkspaceRoleAssignment is the fake for method WorkspacesClient.DeleteWorkspaceRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK
	DeleteWorkspaceRoleAssignment func(ctx context.Context, workspaceID string, workspaceRoleAssignmentID string, options *core.WorkspacesClientDeleteWorkspaceRoleAssignmentOptions) (resp azfake.Responder[core.WorkspacesClientDeleteWorkspaceRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// BeginDeprovisionIdentity is the fake for method WorkspacesClient.BeginDeprovisionIdentity
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeprovisionIdentity func(ctx context.Context, workspaceID string, options *core.WorkspacesClientBeginDeprovisionIdentityOptions) (resp azfake.PollerResponder[core.WorkspacesClientDeprovisionIdentityResponse], errResp azfake.ErrorResponder)

	// GetNetworkCommunicationPolicy is the fake for method WorkspacesClient.GetNetworkCommunicationPolicy
	// HTTP status codes to indicate success: http.StatusOK
	GetNetworkCommunicationPolicy func(ctx context.Context, workspaceID string, options *core.WorkspacesClientGetNetworkCommunicationPolicyOptions) (resp azfake.Responder[core.WorkspacesClientGetNetworkCommunicationPolicyResponse], errResp azfake.ErrorResponder)

	// GetWorkspace is the fake for method WorkspacesClient.GetWorkspace
	// HTTP status codes to indicate success: http.StatusOK
	GetWorkspace func(ctx context.Context, workspaceID string, options *core.WorkspacesClientGetWorkspaceOptions) (resp azfake.Responder[core.WorkspacesClientGetWorkspaceResponse], errResp azfake.ErrorResponder)

	// GetWorkspaceRoleAssignment is the fake for method WorkspacesClient.GetWorkspaceRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK
	GetWorkspaceRoleAssignment func(ctx context.Context, workspaceID string, workspaceRoleAssignmentID string, options *core.WorkspacesClientGetWorkspaceRoleAssignmentOptions) (resp azfake.Responder[core.WorkspacesClientGetWorkspaceRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// NewListWorkspaceRoleAssignmentsPager is the fake for method WorkspacesClient.NewListWorkspaceRoleAssignmentsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListWorkspaceRoleAssignmentsPager func(workspaceID string, options *core.WorkspacesClientListWorkspaceRoleAssignmentsOptions) (resp azfake.PagerResponder[core.WorkspacesClientListWorkspaceRoleAssignmentsResponse])

	// NewListWorkspacesPager is the fake for method WorkspacesClient.NewListWorkspacesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListWorkspacesPager func(options *core.WorkspacesClientListWorkspacesOptions) (resp azfake.PagerResponder[core.WorkspacesClientListWorkspacesResponse])

	// BeginProvisionIdentity is the fake for method WorkspacesClient.BeginProvisionIdentity
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginProvisionIdentity func(ctx context.Context, workspaceID string, options *core.WorkspacesClientBeginProvisionIdentityOptions) (resp azfake.PollerResponder[core.WorkspacesClientProvisionIdentityResponse], errResp azfake.ErrorResponder)

	// SetNetworkCommunicationPolicy is the fake for method WorkspacesClient.SetNetworkCommunicationPolicy
	// HTTP status codes to indicate success: http.StatusOK
	SetNetworkCommunicationPolicy func(ctx context.Context, workspaceID string, setWorkspaceNetworkingCommunicationPolicy core.WorkspaceNetworkingCommunicationPolicy, options *core.WorkspacesClientSetNetworkCommunicationPolicyOptions) (resp azfake.Responder[core.WorkspacesClientSetNetworkCommunicationPolicyResponse], errResp azfake.ErrorResponder)

	// UnassignFromCapacity is the fake for method WorkspacesClient.UnassignFromCapacity
	// HTTP status codes to indicate success: http.StatusAccepted
	UnassignFromCapacity func(ctx context.Context, workspaceID string, options *core.WorkspacesClientUnassignFromCapacityOptions) (resp azfake.Responder[core.WorkspacesClientUnassignFromCapacityResponse], errResp azfake.ErrorResponder)

	// UnassignFromDomain is the fake for method WorkspacesClient.UnassignFromDomain
	// HTTP status codes to indicate success: http.StatusOK
	UnassignFromDomain func(ctx context.Context, workspaceID string, options *core.WorkspacesClientUnassignFromDomainOptions) (resp azfake.Responder[core.WorkspacesClientUnassignFromDomainResponse], errResp azfake.ErrorResponder)

	// UpdateWorkspace is the fake for method WorkspacesClient.UpdateWorkspace
	// HTTP status codes to indicate success: http.StatusOK
	UpdateWorkspace func(ctx context.Context, workspaceID string, updateWorkspaceRequest core.UpdateWorkspaceRequest, options *core.WorkspacesClientUpdateWorkspaceOptions) (resp azfake.Responder[core.WorkspacesClientUpdateWorkspaceResponse], errResp azfake.ErrorResponder)

	// UpdateWorkspaceRoleAssignment is the fake for method WorkspacesClient.UpdateWorkspaceRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK
	UpdateWorkspaceRoleAssignment func(ctx context.Context, workspaceID string, workspaceRoleAssignmentID string, updateWorkspaceRoleAssignmentRequest core.UpdateWorkspaceRoleAssignmentRequest, options *core.WorkspacesClientUpdateWorkspaceRoleAssignmentOptions) (resp azfake.Responder[core.WorkspacesClientUpdateWorkspaceRoleAssignmentResponse], errResp azfake.ErrorResponder)
}

// NewWorkspacesServerTransport creates a new instance of WorkspacesServerTransport with the provided implementation.
// The returned WorkspacesServerTransport instance is connected to an instance of core.WorkspacesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewWorkspacesServerTransport(srv *WorkspacesServer) *WorkspacesServerTransport {
	return &WorkspacesServerTransport{
		srv:                                  srv,
		beginDeprovisionIdentity:             newTracker[azfake.PollerResponder[core.WorkspacesClientDeprovisionIdentityResponse]](),
		newListWorkspaceRoleAssignmentsPager: newTracker[azfake.PagerResponder[core.WorkspacesClientListWorkspaceRoleAssignmentsResponse]](),
		newListWorkspacesPager:               newTracker[azfake.PagerResponder[core.WorkspacesClientListWorkspacesResponse]](),
		beginProvisionIdentity:               newTracker[azfake.PollerResponder[core.WorkspacesClientProvisionIdentityResponse]](),
	}
}

// WorkspacesServerTransport connects instances of core.WorkspacesClient to instances of WorkspacesServer.
// Don't use this type directly, use NewWorkspacesServerTransport instead.
type WorkspacesServerTransport struct {
	srv                                  *WorkspacesServer
	beginDeprovisionIdentity             *tracker[azfake.PollerResponder[core.WorkspacesClientDeprovisionIdentityResponse]]
	newListWorkspaceRoleAssignmentsPager *tracker[azfake.PagerResponder[core.WorkspacesClientListWorkspaceRoleAssignmentsResponse]]
	newListWorkspacesPager               *tracker[azfake.PagerResponder[core.WorkspacesClientListWorkspacesResponse]]
	beginProvisionIdentity               *tracker[azfake.PollerResponder[core.WorkspacesClientProvisionIdentityResponse]]
}

// Do implements the policy.Transporter interface for WorkspacesServerTransport.
func (w *WorkspacesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return w.dispatchToMethodFake(req, method)
}

func (w *WorkspacesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if workspacesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = workspacesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "WorkspacesClient.AddWorkspaceRoleAssignment":
				res.resp, res.err = w.dispatchAddWorkspaceRoleAssignment(req)
			case "WorkspacesClient.AssignToCapacity":
				res.resp, res.err = w.dispatchAssignToCapacity(req)
			case "WorkspacesClient.AssignToDomain":
				res.resp, res.err = w.dispatchAssignToDomain(req)
			case "WorkspacesClient.CreateWorkspace":
				res.resp, res.err = w.dispatchCreateWorkspace(req)
			case "WorkspacesClient.DeleteWorkspace":
				res.resp, res.err = w.dispatchDeleteWorkspace(req)
			case "WorkspacesClient.DeleteWorkspaceRoleAssignment":
				res.resp, res.err = w.dispatchDeleteWorkspaceRoleAssignment(req)
			case "WorkspacesClient.BeginDeprovisionIdentity":
				res.resp, res.err = w.dispatchBeginDeprovisionIdentity(req)
			case "WorkspacesClient.GetNetworkCommunicationPolicy":
				res.resp, res.err = w.dispatchGetNetworkCommunicationPolicy(req)
			case "WorkspacesClient.GetWorkspace":
				res.resp, res.err = w.dispatchGetWorkspace(req)
			case "WorkspacesClient.GetWorkspaceRoleAssignment":
				res.resp, res.err = w.dispatchGetWorkspaceRoleAssignment(req)
			case "WorkspacesClient.NewListWorkspaceRoleAssignmentsPager":
				res.resp, res.err = w.dispatchNewListWorkspaceRoleAssignmentsPager(req)
			case "WorkspacesClient.NewListWorkspacesPager":
				res.resp, res.err = w.dispatchNewListWorkspacesPager(req)
			case "WorkspacesClient.BeginProvisionIdentity":
				res.resp, res.err = w.dispatchBeginProvisionIdentity(req)
			case "WorkspacesClient.SetNetworkCommunicationPolicy":
				res.resp, res.err = w.dispatchSetNetworkCommunicationPolicy(req)
			case "WorkspacesClient.UnassignFromCapacity":
				res.resp, res.err = w.dispatchUnassignFromCapacity(req)
			case "WorkspacesClient.UnassignFromDomain":
				res.resp, res.err = w.dispatchUnassignFromDomain(req)
			case "WorkspacesClient.UpdateWorkspace":
				res.resp, res.err = w.dispatchUpdateWorkspace(req)
			case "WorkspacesClient.UpdateWorkspaceRoleAssignment":
				res.resp, res.err = w.dispatchUpdateWorkspaceRoleAssignment(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (w *WorkspacesServerTransport) dispatchAddWorkspaceRoleAssignment(req *http.Request) (*http.Response, error) {
	if w.srv.AddWorkspaceRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method AddWorkspaceRoleAssignment not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.AddWorkspaceRoleAssignmentRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.AddWorkspaceRoleAssignment(req.Context(), workspaceIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WorkspaceRoleAssignment, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Location; val != nil {
		resp.Header.Set("Location", *val)
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchAssignToCapacity(req *http.Request) (*http.Response, error) {
	if w.srv.AssignToCapacity == nil {
		return nil, &nonRetriableError{errors.New("fake for method AssignToCapacity not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/assignToCapacity`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.AssignWorkspaceToCapacityRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.AssignToCapacity(req.Context(), workspaceIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchAssignToDomain(req *http.Request) (*http.Response, error) {
	if w.srv.AssignToDomain == nil {
		return nil, &nonRetriableError{errors.New("fake for method AssignToDomain not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/assignToDomain`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.AssignWorkspaceToDomainRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.AssignToDomain(req.Context(), workspaceIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchCreateWorkspace(req *http.Request) (*http.Response, error) {
	if w.srv.CreateWorkspace == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateWorkspace not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[core.CreateWorkspaceRequest](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.CreateWorkspace(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Workspace, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Location; val != nil {
		resp.Header.Set("Location", *val)
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchDeleteWorkspace(req *http.Request) (*http.Response, error) {
	if w.srv.DeleteWorkspace == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteWorkspace not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.DeleteWorkspace(req.Context(), workspaceIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchDeleteWorkspaceRoleAssignment(req *http.Request) (*http.Response, error) {
	if w.srv.DeleteWorkspaceRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteWorkspaceRoleAssignment not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments/(?P<workspaceRoleAssignmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	workspaceRoleAssignmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceRoleAssignmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.DeleteWorkspaceRoleAssignment(req.Context(), workspaceIDParam, workspaceRoleAssignmentIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchBeginDeprovisionIdentity(req *http.Request) (*http.Response, error) {
	if w.srv.BeginDeprovisionIdentity == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeprovisionIdentity not implemented")}
	}
	beginDeprovisionIdentity := w.beginDeprovisionIdentity.get(req)
	if beginDeprovisionIdentity == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deprovisionIdentity`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginDeprovisionIdentity(req.Context(), workspaceIDParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeprovisionIdentity = &respr
		w.beginDeprovisionIdentity.add(req, beginDeprovisionIdentity)
	}

	resp, err := server.PollerResponderNext(beginDeprovisionIdentity, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		w.beginDeprovisionIdentity.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeprovisionIdentity) {
		w.beginDeprovisionIdentity.remove(req)
	}

	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchGetNetworkCommunicationPolicy(req *http.Request) (*http.Response, error) {
	if w.srv.GetNetworkCommunicationPolicy == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNetworkCommunicationPolicy not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/networking/communicationPolicy`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.GetNetworkCommunicationPolicy(req.Context(), workspaceIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WorkspaceNetworkingCommunicationPolicy, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchGetWorkspace(req *http.Request) (*http.Response, error) {
	if w.srv.GetWorkspace == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetWorkspace not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	preferWorkspaceSpecificEndpointsUnescaped, err := url.QueryUnescape(qp.Get("preferWorkspaceSpecificEndpoints"))
	if err != nil {
		return nil, err
	}
	preferWorkspaceSpecificEndpointsParam, err := parseOptional(preferWorkspaceSpecificEndpointsUnescaped, strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	var options *core.WorkspacesClientGetWorkspaceOptions
	if preferWorkspaceSpecificEndpointsParam != nil {
		options = &core.WorkspacesClientGetWorkspaceOptions{
			PreferWorkspaceSpecificEndpoints: preferWorkspaceSpecificEndpointsParam,
		}
	}
	respr, errRespr := w.srv.GetWorkspace(req.Context(), workspaceIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WorkspaceInfo, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchGetWorkspaceRoleAssignment(req *http.Request) (*http.Response, error) {
	if w.srv.GetWorkspaceRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetWorkspaceRoleAssignment not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments/(?P<workspaceRoleAssignmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	workspaceRoleAssignmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceRoleAssignmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.GetWorkspaceRoleAssignment(req.Context(), workspaceIDParam, workspaceRoleAssignmentIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WorkspaceRoleAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchNewListWorkspaceRoleAssignmentsPager(req *http.Request) (*http.Response, error) {
	if w.srv.NewListWorkspaceRoleAssignmentsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListWorkspaceRoleAssignmentsPager not implemented")}
	}
	newListWorkspaceRoleAssignmentsPager := w.newListWorkspaceRoleAssignmentsPager.get(req)
	if newListWorkspaceRoleAssignmentsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *core.WorkspacesClientListWorkspaceRoleAssignmentsOptions
		if continuationTokenParam != nil {
			options = &core.WorkspacesClientListWorkspaceRoleAssignmentsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := w.srv.NewListWorkspaceRoleAssignmentsPager(workspaceIDParam, options)
		newListWorkspaceRoleAssignmentsPager = &resp
		w.newListWorkspaceRoleAssignmentsPager.add(req, newListWorkspaceRoleAssignmentsPager)
		server.PagerResponderInjectNextLinks(newListWorkspaceRoleAssignmentsPager, req, func(page *core.WorkspacesClientListWorkspaceRoleAssignmentsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListWorkspaceRoleAssignmentsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		w.newListWorkspaceRoleAssignmentsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListWorkspaceRoleAssignmentsPager) {
		w.newListWorkspaceRoleAssignmentsPager.remove(req)
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchNewListWorkspacesPager(req *http.Request) (*http.Response, error) {
	if w.srv.NewListWorkspacesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListWorkspacesPager not implemented")}
	}
	newListWorkspacesPager := w.newListWorkspacesPager.get(req)
	if newListWorkspacesPager == nil {
		qp := req.URL.Query()
		rolesUnescaped, err := url.QueryUnescape(qp.Get("roles"))
		if err != nil {
			return nil, err
		}
		rolesParam := getOptional(rolesUnescaped)
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		preferWorkspaceSpecificEndpointsUnescaped, err := url.QueryUnescape(qp.Get("preferWorkspaceSpecificEndpoints"))
		if err != nil {
			return nil, err
		}
		preferWorkspaceSpecificEndpointsParam, err := parseOptional(preferWorkspaceSpecificEndpointsUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *core.WorkspacesClientListWorkspacesOptions
		if rolesParam != nil || continuationTokenParam != nil || preferWorkspaceSpecificEndpointsParam != nil {
			options = &core.WorkspacesClientListWorkspacesOptions{
				Roles:                            rolesParam,
				ContinuationToken:                continuationTokenParam,
				PreferWorkspaceSpecificEndpoints: preferWorkspaceSpecificEndpointsParam,
			}
		}
		resp := w.srv.NewListWorkspacesPager(options)
		newListWorkspacesPager = &resp
		w.newListWorkspacesPager.add(req, newListWorkspacesPager)
		server.PagerResponderInjectNextLinks(newListWorkspacesPager, req, func(page *core.WorkspacesClientListWorkspacesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListWorkspacesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		w.newListWorkspacesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListWorkspacesPager) {
		w.newListWorkspacesPager.remove(req)
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchBeginProvisionIdentity(req *http.Request) (*http.Response, error) {
	if w.srv.BeginProvisionIdentity == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginProvisionIdentity not implemented")}
	}
	beginProvisionIdentity := w.beginProvisionIdentity.get(req)
	if beginProvisionIdentity == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/provisionIdentity`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginProvisionIdentity(req.Context(), workspaceIDParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginProvisionIdentity = &respr
		w.beginProvisionIdentity.add(req, beginProvisionIdentity)
	}

	resp, err := server.PollerResponderNext(beginProvisionIdentity, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		w.beginProvisionIdentity.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginProvisionIdentity) {
		w.beginProvisionIdentity.remove(req)
	}

	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchSetNetworkCommunicationPolicy(req *http.Request) (*http.Response, error) {
	if w.srv.SetNetworkCommunicationPolicy == nil {
		return nil, &nonRetriableError{errors.New("fake for method SetNetworkCommunicationPolicy not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/networking/communicationPolicy`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.WorkspaceNetworkingCommunicationPolicy](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	var options *core.WorkspacesClientSetNetworkCommunicationPolicyOptions
	if ifMatchParam != nil {
		options = &core.WorkspacesClientSetNetworkCommunicationPolicyOptions{
			IfMatch: ifMatchParam,
		}
	}
	respr, errRespr := w.srv.SetNetworkCommunicationPolicy(req.Context(), workspaceIDParam, body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchUnassignFromCapacity(req *http.Request) (*http.Response, error) {
	if w.srv.UnassignFromCapacity == nil {
		return nil, &nonRetriableError{errors.New("fake for method UnassignFromCapacity not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/unassignFromCapacity`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.UnassignFromCapacity(req.Context(), workspaceIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchUnassignFromDomain(req *http.Request) (*http.Response, error) {
	if w.srv.UnassignFromDomain == nil {
		return nil, &nonRetriableError{errors.New("fake for method UnassignFromDomain not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/unassignFromDomain`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.UnassignFromDomain(req.Context(), workspaceIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchUpdateWorkspace(req *http.Request) (*http.Response, error) {
	if w.srv.UpdateWorkspace == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateWorkspace not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.UpdateWorkspaceRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.UpdateWorkspace(req.Context(), workspaceIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Workspace, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchUpdateWorkspaceRoleAssignment(req *http.Request) (*http.Response, error) {
	if w.srv.UpdateWorkspaceRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateWorkspaceRoleAssignment not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments/(?P<workspaceRoleAssignmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.UpdateWorkspaceRoleAssignmentRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	workspaceRoleAssignmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceRoleAssignmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.UpdateWorkspaceRoleAssignment(req.Context(), workspaceIDParam, workspaceRoleAssignmentIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WorkspaceRoleAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to WorkspacesServerTransport
var workspacesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
