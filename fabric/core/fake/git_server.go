// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// GitServer is a fake server for instances of the core.GitClient type.
type GitServer struct {
	// BeginCommitToGit is the fake for method GitClient.BeginCommitToGit
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginCommitToGit func(ctx context.Context, workspaceID string, commitToGitRequest core.CommitToGitRequest, options *core.GitClientBeginCommitToGitOptions) (resp azfake.PollerResponder[core.GitClientCommitToGitResponse], errResp azfake.ErrorResponder)

	// Connect is the fake for method GitClient.Connect
	// HTTP status codes to indicate success: http.StatusOK
	Connect func(ctx context.Context, workspaceID string, gitConnectRequest core.GitConnectRequest, options *core.GitClientConnectOptions) (resp azfake.Responder[core.GitClientConnectResponse], errResp azfake.ErrorResponder)

	// Disconnect is the fake for method GitClient.Disconnect
	// HTTP status codes to indicate success: http.StatusOK
	Disconnect func(ctx context.Context, workspaceID string, options *core.GitClientDisconnectOptions) (resp azfake.Responder[core.GitClientDisconnectResponse], errResp azfake.ErrorResponder)

	// GetConnection is the fake for method GitClient.GetConnection
	// HTTP status codes to indicate success: http.StatusOK
	GetConnection func(ctx context.Context, workspaceID string, options *core.GitClientGetConnectionOptions) (resp azfake.Responder[core.GitClientGetConnectionResponse], errResp azfake.ErrorResponder)

	// GetMyGitCredentials is the fake for method GitClient.GetMyGitCredentials
	// HTTP status codes to indicate success: http.StatusOK
	GetMyGitCredentials func(ctx context.Context, workspaceID string, options *core.GitClientGetMyGitCredentialsOptions) (resp azfake.Responder[core.GitClientGetMyGitCredentialsResponse], errResp azfake.ErrorResponder)

	// BeginGetStatus is the fake for method GitClient.BeginGetStatus
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetStatus func(ctx context.Context, workspaceID string, options *core.GitClientBeginGetStatusOptions) (resp azfake.PollerResponder[core.GitClientGetStatusResponse], errResp azfake.ErrorResponder)

	// BeginInitializeConnection is the fake for method GitClient.BeginInitializeConnection
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginInitializeConnection func(ctx context.Context, workspaceID string, options *core.GitClientBeginInitializeConnectionOptions) (resp azfake.PollerResponder[core.GitClientInitializeConnectionResponse], errResp azfake.ErrorResponder)

	// BeginUpdateFromGit is the fake for method GitClient.BeginUpdateFromGit
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateFromGit func(ctx context.Context, workspaceID string, updateFromGitRequest core.UpdateFromGitRequest, options *core.GitClientBeginUpdateFromGitOptions) (resp azfake.PollerResponder[core.GitClientUpdateFromGitResponse], errResp azfake.ErrorResponder)

	// UpdateMyGitCredentials is the fake for method GitClient.UpdateMyGitCredentials
	// HTTP status codes to indicate success: http.StatusOK
	UpdateMyGitCredentials func(ctx context.Context, workspaceID string, updateGitCredentialsRequest core.UpdateGitCredentialsRequestClassification, options *core.GitClientUpdateMyGitCredentialsOptions) (resp azfake.Responder[core.GitClientUpdateMyGitCredentialsResponse], errResp azfake.ErrorResponder)
}

// NewGitServerTransport creates a new instance of GitServerTransport with the provided implementation.
// The returned GitServerTransport instance is connected to an instance of core.GitClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewGitServerTransport(srv *GitServer) *GitServerTransport {
	return &GitServerTransport{
		srv:                       srv,
		beginCommitToGit:          newTracker[azfake.PollerResponder[core.GitClientCommitToGitResponse]](),
		beginGetStatus:            newTracker[azfake.PollerResponder[core.GitClientGetStatusResponse]](),
		beginInitializeConnection: newTracker[azfake.PollerResponder[core.GitClientInitializeConnectionResponse]](),
		beginUpdateFromGit:        newTracker[azfake.PollerResponder[core.GitClientUpdateFromGitResponse]](),
	}
}

// GitServerTransport connects instances of core.GitClient to instances of GitServer.
// Don't use this type directly, use NewGitServerTransport instead.
type GitServerTransport struct {
	srv                       *GitServer
	beginCommitToGit          *tracker[azfake.PollerResponder[core.GitClientCommitToGitResponse]]
	beginGetStatus            *tracker[azfake.PollerResponder[core.GitClientGetStatusResponse]]
	beginInitializeConnection *tracker[azfake.PollerResponder[core.GitClientInitializeConnectionResponse]]
	beginUpdateFromGit        *tracker[azfake.PollerResponder[core.GitClientUpdateFromGitResponse]]
}

// Do implements the policy.Transporter interface for GitServerTransport.
func (g *GitServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return g.dispatchToMethodFake(req, method)
}

func (g *GitServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "GitClient.BeginCommitToGit":
			res.resp, res.err = g.dispatchBeginCommitToGit(req)
		case "GitClient.Connect":
			res.resp, res.err = g.dispatchConnect(req)
		case "GitClient.Disconnect":
			res.resp, res.err = g.dispatchDisconnect(req)
		case "GitClient.GetConnection":
			res.resp, res.err = g.dispatchGetConnection(req)
		case "GitClient.GetMyGitCredentials":
			res.resp, res.err = g.dispatchGetMyGitCredentials(req)
		case "GitClient.BeginGetStatus":
			res.resp, res.err = g.dispatchBeginGetStatus(req)
		case "GitClient.BeginInitializeConnection":
			res.resp, res.err = g.dispatchBeginInitializeConnection(req)
		case "GitClient.BeginUpdateFromGit":
			res.resp, res.err = g.dispatchBeginUpdateFromGit(req)
		case "GitClient.UpdateMyGitCredentials":
			res.resp, res.err = g.dispatchUpdateMyGitCredentials(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (g *GitServerTransport) dispatchBeginCommitToGit(req *http.Request) (*http.Response, error) {
	if g.srv.BeginCommitToGit == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCommitToGit not implemented")}
	}
	beginCommitToGit := g.beginCommitToGit.get(req)
	if beginCommitToGit == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/git/commitToGit`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[core.CommitToGitRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := g.srv.BeginCommitToGit(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCommitToGit = &respr
		g.beginCommitToGit.add(req, beginCommitToGit)
	}

	resp, err := server.PollerResponderNext(beginCommitToGit, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		g.beginCommitToGit.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCommitToGit) {
		g.beginCommitToGit.remove(req)
	}

	return resp, nil
}

func (g *GitServerTransport) dispatchConnect(req *http.Request) (*http.Response, error) {
	if g.srv.Connect == nil {
		return nil, &nonRetriableError{errors.New("fake for method Connect not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/git/connect`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.GitConnectRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.Connect(req.Context(), workspaceIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GitServerTransport) dispatchDisconnect(req *http.Request) (*http.Response, error) {
	if g.srv.Disconnect == nil {
		return nil, &nonRetriableError{errors.New("fake for method Disconnect not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/git/disconnect`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.Disconnect(req.Context(), workspaceIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GitServerTransport) dispatchGetConnection(req *http.Request) (*http.Response, error) {
	if g.srv.GetConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetConnection not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/git/connection`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.GetConnection(req.Context(), workspaceIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GitConnection, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GitServerTransport) dispatchGetMyGitCredentials(req *http.Request) (*http.Response, error) {
	if g.srv.GetMyGitCredentials == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMyGitCredentials not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/git/myGitCredentials`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.GetMyGitCredentials(req.Context(), workspaceIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GitCredentialsConfigurationResponseClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GitServerTransport) dispatchBeginGetStatus(req *http.Request) (*http.Response, error) {
	if g.srv.BeginGetStatus == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetStatus not implemented")}
	}
	beginGetStatus := g.beginGetStatus.get(req)
	if beginGetStatus == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/git/status`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := g.srv.BeginGetStatus(req.Context(), workspaceIDParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetStatus = &respr
		g.beginGetStatus.add(req, beginGetStatus)
	}

	resp, err := server.PollerResponderNext(beginGetStatus, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		g.beginGetStatus.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetStatus) {
		g.beginGetStatus.remove(req)
	}

	return resp, nil
}

func (g *GitServerTransport) dispatchBeginInitializeConnection(req *http.Request) (*http.Response, error) {
	if g.srv.BeginInitializeConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginInitializeConnection not implemented")}
	}
	beginInitializeConnection := g.beginInitializeConnection.get(req)
	if beginInitializeConnection == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/git/initializeConnection`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[core.InitializeGitConnectionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		var options *core.GitClientBeginInitializeConnectionOptions
		if !reflect.ValueOf(body).IsZero() {
			options = &core.GitClientBeginInitializeConnectionOptions{
				GitInitializeConnectionRequest: &body,
			}
		}
		respr, errRespr := g.srv.BeginInitializeConnection(req.Context(), workspaceIDParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginInitializeConnection = &respr
		g.beginInitializeConnection.add(req, beginInitializeConnection)
	}

	resp, err := server.PollerResponderNext(beginInitializeConnection, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		g.beginInitializeConnection.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginInitializeConnection) {
		g.beginInitializeConnection.remove(req)
	}

	return resp, nil
}

func (g *GitServerTransport) dispatchBeginUpdateFromGit(req *http.Request) (*http.Response, error) {
	if g.srv.BeginUpdateFromGit == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateFromGit not implemented")}
	}
	beginUpdateFromGit := g.beginUpdateFromGit.get(req)
	if beginUpdateFromGit == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/git/updateFromGit`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[core.UpdateFromGitRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := g.srv.BeginUpdateFromGit(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateFromGit = &respr
		g.beginUpdateFromGit.add(req, beginUpdateFromGit)
	}

	resp, err := server.PollerResponderNext(beginUpdateFromGit, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		g.beginUpdateFromGit.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateFromGit) {
		g.beginUpdateFromGit.remove(req)
	}

	return resp, nil
}

func (g *GitServerTransport) dispatchUpdateMyGitCredentials(req *http.Request) (*http.Response, error) {
	if g.srv.UpdateMyGitCredentials == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateMyGitCredentials not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/git/myGitCredentials`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalUpdateGitCredentialsRequestClassification(raw)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.UpdateMyGitCredentials(req.Context(), workspaceIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GitCredentialsConfigurationResponseClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
