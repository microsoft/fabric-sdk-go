// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// GatewaysServer is a fake server for instances of the core.GatewaysClient type.
type GatewaysServer struct {
	// AddGatewayRoleAssignment is the fake for method GatewaysClient.AddGatewayRoleAssignment
	// HTTP status codes to indicate success: http.StatusCreated
	AddGatewayRoleAssignment func(ctx context.Context, gatewayID string, addGatewayRoleAssignmentRequest core.AddGatewayRoleAssignmentRequest, options *core.GatewaysClientAddGatewayRoleAssignmentOptions) (resp azfake.Responder[core.GatewaysClientAddGatewayRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// CreateGateway is the fake for method GatewaysClient.CreateGateway
	// HTTP status codes to indicate success: http.StatusCreated
	CreateGateway func(ctx context.Context, createGatewayRequest core.CreateGatewayRequestClassification, options *core.GatewaysClientCreateGatewayOptions) (resp azfake.Responder[core.GatewaysClientCreateGatewayResponse], errResp azfake.ErrorResponder)

	// DeleteGateway is the fake for method GatewaysClient.DeleteGateway
	// HTTP status codes to indicate success: http.StatusOK
	DeleteGateway func(ctx context.Context, gatewayID string, options *core.GatewaysClientDeleteGatewayOptions) (resp azfake.Responder[core.GatewaysClientDeleteGatewayResponse], errResp azfake.ErrorResponder)

	// DeleteGatewayMember is the fake for method GatewaysClient.DeleteGatewayMember
	// HTTP status codes to indicate success: http.StatusOK
	DeleteGatewayMember func(ctx context.Context, gatewayID string, gatewayMemberID string, options *core.GatewaysClientDeleteGatewayMemberOptions) (resp azfake.Responder[core.GatewaysClientDeleteGatewayMemberResponse], errResp azfake.ErrorResponder)

	// DeleteGatewayRoleAssignment is the fake for method GatewaysClient.DeleteGatewayRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK
	DeleteGatewayRoleAssignment func(ctx context.Context, gatewayID string, gatewayRoleAssignmentID string, options *core.GatewaysClientDeleteGatewayRoleAssignmentOptions) (resp azfake.Responder[core.GatewaysClientDeleteGatewayRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// GetGateway is the fake for method GatewaysClient.GetGateway
	// HTTP status codes to indicate success: http.StatusOK
	GetGateway func(ctx context.Context, gatewayID string, options *core.GatewaysClientGetGatewayOptions) (resp azfake.Responder[core.GatewaysClientGetGatewayResponse], errResp azfake.ErrorResponder)

	// GetGatewayRoleAssignment is the fake for method GatewaysClient.GetGatewayRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK
	GetGatewayRoleAssignment func(ctx context.Context, gatewayID string, gatewayRoleAssignmentID string, options *core.GatewaysClientGetGatewayRoleAssignmentOptions) (resp azfake.Responder[core.GatewaysClientGetGatewayRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// ListGatewayMembers is the fake for method GatewaysClient.ListGatewayMembers
	// HTTP status codes to indicate success: http.StatusOK
	ListGatewayMembers func(ctx context.Context, gatewayID string, options *core.GatewaysClientListGatewayMembersOptions) (resp azfake.Responder[core.GatewaysClientListGatewayMembersResponse], errResp azfake.ErrorResponder)

	// NewListGatewayRoleAssignmentsPager is the fake for method GatewaysClient.NewListGatewayRoleAssignmentsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListGatewayRoleAssignmentsPager func(gatewayID string, options *core.GatewaysClientListGatewayRoleAssignmentsOptions) (resp azfake.PagerResponder[core.GatewaysClientListGatewayRoleAssignmentsResponse])

	// NewListGatewaysPager is the fake for method GatewaysClient.NewListGatewaysPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListGatewaysPager func(options *core.GatewaysClientListGatewaysOptions) (resp azfake.PagerResponder[core.GatewaysClientListGatewaysResponse])

	// UpdateGateway is the fake for method GatewaysClient.UpdateGateway
	// HTTP status codes to indicate success: http.StatusOK
	UpdateGateway func(ctx context.Context, gatewayID string, updateGatewayRequest core.UpdateGatewayRequestClassification, options *core.GatewaysClientUpdateGatewayOptions) (resp azfake.Responder[core.GatewaysClientUpdateGatewayResponse], errResp azfake.ErrorResponder)

	// UpdateGatewayMember is the fake for method GatewaysClient.UpdateGatewayMember
	// HTTP status codes to indicate success: http.StatusOK
	UpdateGatewayMember func(ctx context.Context, gatewayID string, gatewayMemberID string, updateGatewayMemberRequest core.UpdateGatewayMemberRequest, options *core.GatewaysClientUpdateGatewayMemberOptions) (resp azfake.Responder[core.GatewaysClientUpdateGatewayMemberResponse], errResp azfake.ErrorResponder)

	// UpdateGatewayRoleAssignment is the fake for method GatewaysClient.UpdateGatewayRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK
	UpdateGatewayRoleAssignment func(ctx context.Context, gatewayID string, gatewayRoleAssignmentID string, updateGatewayRoleAssignmentRequest core.UpdateGatewayRoleAssignmentRequest, options *core.GatewaysClientUpdateGatewayRoleAssignmentOptions) (resp azfake.Responder[core.GatewaysClientUpdateGatewayRoleAssignmentResponse], errResp azfake.ErrorResponder)
}

// NewGatewaysServerTransport creates a new instance of GatewaysServerTransport with the provided implementation.
// The returned GatewaysServerTransport instance is connected to an instance of core.GatewaysClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewGatewaysServerTransport(srv *GatewaysServer) *GatewaysServerTransport {
	return &GatewaysServerTransport{
		srv:                                srv,
		newListGatewayRoleAssignmentsPager: newTracker[azfake.PagerResponder[core.GatewaysClientListGatewayRoleAssignmentsResponse]](),
		newListGatewaysPager:               newTracker[azfake.PagerResponder[core.GatewaysClientListGatewaysResponse]](),
	}
}

// GatewaysServerTransport connects instances of core.GatewaysClient to instances of GatewaysServer.
// Don't use this type directly, use NewGatewaysServerTransport instead.
type GatewaysServerTransport struct {
	srv                                *GatewaysServer
	newListGatewayRoleAssignmentsPager *tracker[azfake.PagerResponder[core.GatewaysClientListGatewayRoleAssignmentsResponse]]
	newListGatewaysPager               *tracker[azfake.PagerResponder[core.GatewaysClientListGatewaysResponse]]
}

// Do implements the policy.Transporter interface for GatewaysServerTransport.
func (g *GatewaysServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return g.dispatchToMethodFake(req, method)
}

func (g *GatewaysServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if gatewaysServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = gatewaysServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "GatewaysClient.AddGatewayRoleAssignment":
				res.resp, res.err = g.dispatchAddGatewayRoleAssignment(req)
			case "GatewaysClient.CreateGateway":
				res.resp, res.err = g.dispatchCreateGateway(req)
			case "GatewaysClient.DeleteGateway":
				res.resp, res.err = g.dispatchDeleteGateway(req)
			case "GatewaysClient.DeleteGatewayMember":
				res.resp, res.err = g.dispatchDeleteGatewayMember(req)
			case "GatewaysClient.DeleteGatewayRoleAssignment":
				res.resp, res.err = g.dispatchDeleteGatewayRoleAssignment(req)
			case "GatewaysClient.GetGateway":
				res.resp, res.err = g.dispatchGetGateway(req)
			case "GatewaysClient.GetGatewayRoleAssignment":
				res.resp, res.err = g.dispatchGetGatewayRoleAssignment(req)
			case "GatewaysClient.ListGatewayMembers":
				res.resp, res.err = g.dispatchListGatewayMembers(req)
			case "GatewaysClient.NewListGatewayRoleAssignmentsPager":
				res.resp, res.err = g.dispatchNewListGatewayRoleAssignmentsPager(req)
			case "GatewaysClient.NewListGatewaysPager":
				res.resp, res.err = g.dispatchNewListGatewaysPager(req)
			case "GatewaysClient.UpdateGateway":
				res.resp, res.err = g.dispatchUpdateGateway(req)
			case "GatewaysClient.UpdateGatewayMember":
				res.resp, res.err = g.dispatchUpdateGatewayMember(req)
			case "GatewaysClient.UpdateGatewayRoleAssignment":
				res.resp, res.err = g.dispatchUpdateGatewayRoleAssignment(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (g *GatewaysServerTransport) dispatchAddGatewayRoleAssignment(req *http.Request) (*http.Response, error) {
	if g.srv.AddGatewayRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method AddGatewayRoleAssignment not implemented")}
	}
	const regexStr = `/v1/gateways/(?P<gatewayId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.AddGatewayRoleAssignmentRequest](req)
	if err != nil {
		return nil, err
	}
	gatewayIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.AddGatewayRoleAssignment(req.Context(), gatewayIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GatewayRoleAssignment, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Location; val != nil {
		resp.Header.Set("Location", *val)
	}
	return resp, nil
}

func (g *GatewaysServerTransport) dispatchCreateGateway(req *http.Request) (*http.Response, error) {
	if g.srv.CreateGateway == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateGateway not implemented")}
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalCreateGatewayRequestClassification(raw)
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.CreateGateway(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GatewayClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GatewaysServerTransport) dispatchDeleteGateway(req *http.Request) (*http.Response, error) {
	if g.srv.DeleteGateway == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteGateway not implemented")}
	}
	const regexStr = `/v1/gateways/(?P<gatewayId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	gatewayIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.DeleteGateway(req.Context(), gatewayIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GatewaysServerTransport) dispatchDeleteGatewayMember(req *http.Request) (*http.Response, error) {
	if g.srv.DeleteGatewayMember == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteGatewayMember not implemented")}
	}
	const regexStr = `/v1/gateways/(?P<gatewayId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/members/(?P<gatewayMemberId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	gatewayIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayId")])
	if err != nil {
		return nil, err
	}
	gatewayMemberIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayMemberId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.DeleteGatewayMember(req.Context(), gatewayIDParam, gatewayMemberIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GatewaysServerTransport) dispatchDeleteGatewayRoleAssignment(req *http.Request) (*http.Response, error) {
	if g.srv.DeleteGatewayRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteGatewayRoleAssignment not implemented")}
	}
	const regexStr = `/v1/gateways/(?P<gatewayId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments/(?P<gatewayRoleAssignmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	gatewayIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayId")])
	if err != nil {
		return nil, err
	}
	gatewayRoleAssignmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayRoleAssignmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.DeleteGatewayRoleAssignment(req.Context(), gatewayIDParam, gatewayRoleAssignmentIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GatewaysServerTransport) dispatchGetGateway(req *http.Request) (*http.Response, error) {
	if g.srv.GetGateway == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetGateway not implemented")}
	}
	const regexStr = `/v1/gateways/(?P<gatewayId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	gatewayIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.GetGateway(req.Context(), gatewayIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GatewayClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GatewaysServerTransport) dispatchGetGatewayRoleAssignment(req *http.Request) (*http.Response, error) {
	if g.srv.GetGatewayRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetGatewayRoleAssignment not implemented")}
	}
	const regexStr = `/v1/gateways/(?P<gatewayId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments/(?P<gatewayRoleAssignmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	gatewayIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayId")])
	if err != nil {
		return nil, err
	}
	gatewayRoleAssignmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayRoleAssignmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.GetGatewayRoleAssignment(req.Context(), gatewayIDParam, gatewayRoleAssignmentIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GatewayRoleAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GatewaysServerTransport) dispatchListGatewayMembers(req *http.Request) (*http.Response, error) {
	if g.srv.ListGatewayMembers == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListGatewayMembers not implemented")}
	}
	const regexStr = `/v1/gateways/(?P<gatewayId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/members`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	gatewayIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.ListGatewayMembers(req.Context(), gatewayIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ListGatewayMembersResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GatewaysServerTransport) dispatchNewListGatewayRoleAssignmentsPager(req *http.Request) (*http.Response, error) {
	if g.srv.NewListGatewayRoleAssignmentsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListGatewayRoleAssignmentsPager not implemented")}
	}
	newListGatewayRoleAssignmentsPager := g.newListGatewayRoleAssignmentsPager.get(req)
	if newListGatewayRoleAssignmentsPager == nil {
		const regexStr = `/v1/gateways/(?P<gatewayId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		gatewayIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *core.GatewaysClientListGatewayRoleAssignmentsOptions
		if continuationTokenParam != nil {
			options = &core.GatewaysClientListGatewayRoleAssignmentsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := g.srv.NewListGatewayRoleAssignmentsPager(gatewayIDParam, options)
		newListGatewayRoleAssignmentsPager = &resp
		g.newListGatewayRoleAssignmentsPager.add(req, newListGatewayRoleAssignmentsPager)
		server.PagerResponderInjectNextLinks(newListGatewayRoleAssignmentsPager, req, func(page *core.GatewaysClientListGatewayRoleAssignmentsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListGatewayRoleAssignmentsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		g.newListGatewayRoleAssignmentsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListGatewayRoleAssignmentsPager) {
		g.newListGatewayRoleAssignmentsPager.remove(req)
	}
	return resp, nil
}

func (g *GatewaysServerTransport) dispatchNewListGatewaysPager(req *http.Request) (*http.Response, error) {
	if g.srv.NewListGatewaysPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListGatewaysPager not implemented")}
	}
	newListGatewaysPager := g.newListGatewaysPager.get(req)
	if newListGatewaysPager == nil {
		qp := req.URL.Query()
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *core.GatewaysClientListGatewaysOptions
		if continuationTokenParam != nil {
			options = &core.GatewaysClientListGatewaysOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := g.srv.NewListGatewaysPager(options)
		newListGatewaysPager = &resp
		g.newListGatewaysPager.add(req, newListGatewaysPager)
		server.PagerResponderInjectNextLinks(newListGatewaysPager, req, func(page *core.GatewaysClientListGatewaysResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListGatewaysPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		g.newListGatewaysPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListGatewaysPager) {
		g.newListGatewaysPager.remove(req)
	}
	return resp, nil
}

func (g *GatewaysServerTransport) dispatchUpdateGateway(req *http.Request) (*http.Response, error) {
	if g.srv.UpdateGateway == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateGateway not implemented")}
	}
	const regexStr = `/v1/gateways/(?P<gatewayId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalUpdateGatewayRequestClassification(raw)
	if err != nil {
		return nil, err
	}
	gatewayIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.UpdateGateway(req.Context(), gatewayIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GatewayClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GatewaysServerTransport) dispatchUpdateGatewayMember(req *http.Request) (*http.Response, error) {
	if g.srv.UpdateGatewayMember == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateGatewayMember not implemented")}
	}
	const regexStr = `/v1/gateways/(?P<gatewayId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/members/(?P<gatewayMemberId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.UpdateGatewayMemberRequest](req)
	if err != nil {
		return nil, err
	}
	gatewayIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayId")])
	if err != nil {
		return nil, err
	}
	gatewayMemberIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayMemberId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.UpdateGatewayMember(req.Context(), gatewayIDParam, gatewayMemberIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).OnPremisesGatewayMember, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GatewaysServerTransport) dispatchUpdateGatewayRoleAssignment(req *http.Request) (*http.Response, error) {
	if g.srv.UpdateGatewayRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateGatewayRoleAssignment not implemented")}
	}
	const regexStr = `/v1/gateways/(?P<gatewayId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/roleAssignments/(?P<gatewayRoleAssignmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.UpdateGatewayRoleAssignmentRequest](req)
	if err != nil {
		return nil, err
	}
	gatewayIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayId")])
	if err != nil {
		return nil, err
	}
	gatewayRoleAssignmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("gatewayRoleAssignmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.UpdateGatewayRoleAssignment(req.Context(), gatewayIDParam, gatewayRoleAssignmentIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GatewayRoleAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to GatewaysServerTransport
var gatewaysServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
