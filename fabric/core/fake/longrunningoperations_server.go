// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// LongRunningOperationsServer is a fake server for instances of the core.LongRunningOperationsClient type.
type LongRunningOperationsServer struct {
	// GetOperationResult is the fake for method LongRunningOperationsClient.GetOperationResult
	// HTTP status codes to indicate success: http.StatusOK
	GetOperationResult func(ctx context.Context, operationID string, options *core.LongRunningOperationsClientGetOperationResultOptions) (resp azfake.Responder[core.LongRunningOperationsClientGetOperationResultResponse], errResp azfake.ErrorResponder)

	// GetOperationState is the fake for method LongRunningOperationsClient.GetOperationState
	// HTTP status codes to indicate success: http.StatusOK
	GetOperationState func(ctx context.Context, operationID string, options *core.LongRunningOperationsClientGetOperationStateOptions) (resp azfake.Responder[core.LongRunningOperationsClientGetOperationStateResponse], errResp azfake.ErrorResponder)
}

// NewLongRunningOperationsServerTransport creates a new instance of LongRunningOperationsServerTransport with the provided implementation.
// The returned LongRunningOperationsServerTransport instance is connected to an instance of core.LongRunningOperationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewLongRunningOperationsServerTransport(srv *LongRunningOperationsServer) *LongRunningOperationsServerTransport {
	return &LongRunningOperationsServerTransport{srv: srv}
}

// LongRunningOperationsServerTransport connects instances of core.LongRunningOperationsClient to instances of LongRunningOperationsServer.
// Don't use this type directly, use NewLongRunningOperationsServerTransport instead.
type LongRunningOperationsServerTransport struct {
	srv *LongRunningOperationsServer
}

// Do implements the policy.Transporter interface for LongRunningOperationsServerTransport.
func (l *LongRunningOperationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return l.dispatchToMethodFake(req, method)
}

func (l *LongRunningOperationsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "LongRunningOperationsClient.GetOperationResult":
		resp, err = l.dispatchGetOperationResult(req)
	case "LongRunningOperationsClient.GetOperationState":
		resp, err = l.dispatchGetOperationState(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (l *LongRunningOperationsServerTransport) dispatchGetOperationResult(req *http.Request) (*http.Response, error) {
	if l.srv.GetOperationResult == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetOperationResult not implemented")}
	}
	const regexStr = `/v1/operations/(?P<operationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/result`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	operationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("operationId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.GetOperationResult(req.Context(), operationIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, &server.ResponseOptions{
		Body:        server.GetResponse(respr).Body,
		ContentType: req.Header.Get("Content-Type"),
	})
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LongRunningOperationsServerTransport) dispatchGetOperationState(req *http.Request) (*http.Response, error) {
	if l.srv.GetOperationState == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetOperationState not implemented")}
	}
	const regexStr = `/v1/operations/(?P<operationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	operationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("operationId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.GetOperationState(req.Context(), operationIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).OperationState, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Location; val != nil {
		resp.Header.Set("Location", *val)
	}
	if val := server.GetResponse(respr).RetryAfter; val != nil {
		resp.Header.Set("Retry-After", strconv.FormatInt(int64(*val), 10))
	}
	if val := server.GetResponse(respr).XMSOperationID; val != nil {
		resp.Header.Set("x-ms-operation-id", *val)
	}
	return resp, nil
}
