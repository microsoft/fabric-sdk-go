// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// OneLakeDataAccessSecurityServer is a fake server for instances of the core.OneLakeDataAccessSecurityClient type.
type OneLakeDataAccessSecurityServer struct {
	// CreateOrUpdateDataAccessRoles is the fake for method OneLakeDataAccessSecurityClient.CreateOrUpdateDataAccessRoles
	// HTTP status codes to indicate success: http.StatusOK
	CreateOrUpdateDataAccessRoles func(ctx context.Context, workspaceID string, itemID string, createOrUpdateDataAccessRolesRequest core.CreateOrUpdateDataAccessRolesRequest, options *core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesOptions) (resp azfake.Responder[core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse], errResp azfake.ErrorResponder)

	// ListDataAccessRoles is the fake for method OneLakeDataAccessSecurityClient.ListDataAccessRoles
	// HTTP status codes to indicate success: http.StatusOK
	ListDataAccessRoles func(ctx context.Context, workspaceID string, itemID string, options *core.OneLakeDataAccessSecurityClientListDataAccessRolesOptions) (resp azfake.Responder[core.OneLakeDataAccessSecurityClientListDataAccessRolesResponse], errResp azfake.ErrorResponder)
}

// NewOneLakeDataAccessSecurityServerTransport creates a new instance of OneLakeDataAccessSecurityServerTransport with the provided implementation.
// The returned OneLakeDataAccessSecurityServerTransport instance is connected to an instance of core.OneLakeDataAccessSecurityClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewOneLakeDataAccessSecurityServerTransport(srv *OneLakeDataAccessSecurityServer) *OneLakeDataAccessSecurityServerTransport {
	return &OneLakeDataAccessSecurityServerTransport{srv: srv}
}

// OneLakeDataAccessSecurityServerTransport connects instances of core.OneLakeDataAccessSecurityClient to instances of OneLakeDataAccessSecurityServer.
// Don't use this type directly, use NewOneLakeDataAccessSecurityServerTransport instead.
type OneLakeDataAccessSecurityServerTransport struct {
	srv *OneLakeDataAccessSecurityServer
}

// Do implements the policy.Transporter interface for OneLakeDataAccessSecurityServerTransport.
func (o *OneLakeDataAccessSecurityServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return o.dispatchToMethodFake(req, method)
}

func (o *OneLakeDataAccessSecurityServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if oneLakeDataAccessSecurityServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = oneLakeDataAccessSecurityServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "OneLakeDataAccessSecurityClient.CreateOrUpdateDataAccessRoles":
				res.resp, res.err = o.dispatchCreateOrUpdateDataAccessRoles(req)
			case "OneLakeDataAccessSecurityClient.ListDataAccessRoles":
				res.resp, res.err = o.dispatchListDataAccessRoles(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (o *OneLakeDataAccessSecurityServerTransport) dispatchCreateOrUpdateDataAccessRoles(req *http.Request) (*http.Response, error) {
	if o.srv.CreateOrUpdateDataAccessRoles == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdateDataAccessRoles not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/items/(?P<itemId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataAccessRoles`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	body, err := server.UnmarshalRequestAsJSON[core.CreateOrUpdateDataAccessRolesRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	itemIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("itemId")])
	if err != nil {
		return nil, err
	}
	dryRunUnescaped, err := url.QueryUnescape(qp.Get("dryRun"))
	if err != nil {
		return nil, err
	}
	dryRunParam, err := parseOptional(dryRunUnescaped, strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	var options *core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesOptions
	if dryRunParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil {
		options = &core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesOptions{
			DryRun:      dryRunParam,
			IfMatch:     ifMatchParam,
			IfNoneMatch: ifNoneMatchParam,
		}
	}
	respr, errRespr := o.srv.CreateOrUpdateDataAccessRoles(req.Context(), workspaceIDParam, itemIDParam, body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Etag; val != nil {
		resp.Header.Set("Etag", *val)
	}
	return resp, nil
}

func (o *OneLakeDataAccessSecurityServerTransport) dispatchListDataAccessRoles(req *http.Request) (*http.Response, error) {
	if o.srv.ListDataAccessRoles == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListDataAccessRoles not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/items/(?P<itemId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataAccessRoles`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	itemIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("itemId")])
	if err != nil {
		return nil, err
	}
	continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
	if err != nil {
		return nil, err
	}
	continuationTokenParam := getOptional(continuationTokenUnescaped)
	var options *core.OneLakeDataAccessSecurityClientListDataAccessRolesOptions
	if continuationTokenParam != nil {
		options = &core.OneLakeDataAccessSecurityClientListDataAccessRolesOptions{
			ContinuationToken: continuationTokenParam,
		}
	}
	respr, errRespr := o.srv.ListDataAccessRoles(req.Context(), workspaceIDParam, itemIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DataAccessRoles, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Etag; val != nil {
		resp.Header.Set("Etag", *val)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to OneLakeDataAccessSecurityServerTransport
var oneLakeDataAccessSecurityServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
