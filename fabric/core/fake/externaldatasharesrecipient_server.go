// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// ExternalDataSharesRecipientServer is a fake server for instances of the core.ExternalDataSharesRecipientClient type.
type ExternalDataSharesRecipientServer struct {
	// AcceptExternalDataShareInvitation is the fake for method ExternalDataSharesRecipientClient.AcceptExternalDataShareInvitation
	// HTTP status codes to indicate success: http.StatusOK
	AcceptExternalDataShareInvitation func(ctx context.Context, invitationID string, acceptExternalDataShareRequest core.AcceptExternalDataShareInvitationRequest, options *core.ExternalDataSharesRecipientClientAcceptExternalDataShareInvitationOptions) (resp azfake.Responder[core.ExternalDataSharesRecipientClientAcceptExternalDataShareInvitationResponse], errResp azfake.ErrorResponder)

	// GetExternalDataShareInvitationDetails is the fake for method ExternalDataSharesRecipientClient.GetExternalDataShareInvitationDetails
	// HTTP status codes to indicate success: http.StatusOK
	GetExternalDataShareInvitationDetails func(ctx context.Context, invitationID string, providerTenantID string, options *core.ExternalDataSharesRecipientClientGetExternalDataShareInvitationDetailsOptions) (resp azfake.Responder[core.ExternalDataSharesRecipientClientGetExternalDataShareInvitationDetailsResponse], errResp azfake.ErrorResponder)
}

// NewExternalDataSharesRecipientServerTransport creates a new instance of ExternalDataSharesRecipientServerTransport with the provided implementation.
// The returned ExternalDataSharesRecipientServerTransport instance is connected to an instance of core.ExternalDataSharesRecipientClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewExternalDataSharesRecipientServerTransport(srv *ExternalDataSharesRecipientServer) *ExternalDataSharesRecipientServerTransport {
	return &ExternalDataSharesRecipientServerTransport{srv: srv}
}

// ExternalDataSharesRecipientServerTransport connects instances of core.ExternalDataSharesRecipientClient to instances of ExternalDataSharesRecipientServer.
// Don't use this type directly, use NewExternalDataSharesRecipientServerTransport instead.
type ExternalDataSharesRecipientServerTransport struct {
	srv *ExternalDataSharesRecipientServer
}

// Do implements the policy.Transporter interface for ExternalDataSharesRecipientServerTransport.
func (e *ExternalDataSharesRecipientServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return e.dispatchToMethodFake(req, method)
}

func (e *ExternalDataSharesRecipientServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if externalDataSharesRecipientServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = externalDataSharesRecipientServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ExternalDataSharesRecipientClient.AcceptExternalDataShareInvitation":
				res.resp, res.err = e.dispatchAcceptExternalDataShareInvitation(req)
			case "ExternalDataSharesRecipientClient.GetExternalDataShareInvitationDetails":
				res.resp, res.err = e.dispatchGetExternalDataShareInvitationDetails(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (e *ExternalDataSharesRecipientServerTransport) dispatchAcceptExternalDataShareInvitation(req *http.Request) (*http.Response, error) {
	if e.srv.AcceptExternalDataShareInvitation == nil {
		return nil, &nonRetriableError{errors.New("fake for method AcceptExternalDataShareInvitation not implemented")}
	}
	const regexStr = `/v1/externalDataShares/invitations/(?P<invitationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/accept`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[core.AcceptExternalDataShareInvitationRequest](req)
	if err != nil {
		return nil, err
	}
	invitationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("invitationId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.AcceptExternalDataShareInvitation(req.Context(), invitationIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AcceptExternalDataShareInvitationResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *ExternalDataSharesRecipientServerTransport) dispatchGetExternalDataShareInvitationDetails(req *http.Request) (*http.Response, error) {
	if e.srv.GetExternalDataShareInvitationDetails == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetExternalDataShareInvitationDetails not implemented")}
	}
	const regexStr = `/v1/externalDataShares/invitations/(?P<invitationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	invitationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("invitationId")])
	if err != nil {
		return nil, err
	}
	providerTenantIDParam, err := url.QueryUnescape(qp.Get("providerTenantId"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.GetExternalDataShareInvitationDetails(req.Context(), invitationIDParam, providerTenantIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExternalDataShareInvitationDetails, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ExternalDataSharesRecipientServerTransport
var externalDataSharesRecipientServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
