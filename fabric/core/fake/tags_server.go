// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// TagsServer is a fake server for instances of the core.TagsClient type.
type TagsServer struct {
	// NewListTagsPager is the fake for method TagsClient.NewListTagsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListTagsPager func(options *core.TagsClientListTagsOptions) (resp azfake.PagerResponder[core.TagsClientListTagsResponse])
}

// NewTagsServerTransport creates a new instance of TagsServerTransport with the provided implementation.
// The returned TagsServerTransport instance is connected to an instance of core.TagsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewTagsServerTransport(srv *TagsServer) *TagsServerTransport {
	return &TagsServerTransport{
		srv:              srv,
		newListTagsPager: newTracker[azfake.PagerResponder[core.TagsClientListTagsResponse]](),
	}
}

// TagsServerTransport connects instances of core.TagsClient to instances of TagsServer.
// Don't use this type directly, use NewTagsServerTransport instead.
type TagsServerTransport struct {
	srv              *TagsServer
	newListTagsPager *tracker[azfake.PagerResponder[core.TagsClientListTagsResponse]]
}

// Do implements the policy.Transporter interface for TagsServerTransport.
func (t *TagsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return t.dispatchToMethodFake(req, method)
}

func (t *TagsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if tagsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = tagsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "TagsClient.NewListTagsPager":
				res.resp, res.err = t.dispatchNewListTagsPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (t *TagsServerTransport) dispatchNewListTagsPager(req *http.Request) (*http.Response, error) {
	if t.srv.NewListTagsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListTagsPager not implemented")}
	}
	newListTagsPager := t.newListTagsPager.get(req)
	if newListTagsPager == nil {
		qp := req.URL.Query()
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *core.TagsClientListTagsOptions
		if continuationTokenParam != nil {
			options = &core.TagsClientListTagsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := t.srv.NewListTagsPager(options)
		newListTagsPager = &resp
		t.newListTagsPager.add(req, newListTagsPager)
		server.PagerResponderInjectNextLinks(newListTagsPager, req, func(page *core.TagsClientListTagsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListTagsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		t.newListTagsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListTagsPager) {
		t.newListTagsPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to TagsServerTransport
var tagsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
