// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
)

// DomainsClient contains the methods for the Domains group.
// Don't use this type directly, use a constructor function instead.
type DomainsClient struct {
	internal *azcore.Client
	endpoint string
}

// GetDomain - REQUIRED DELEGATED SCOPES Domain.Read.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - domainID - The domain ID.
//   - options - DomainsClientGetDomainOptions contains the optional parameters for the DomainsClient.GetDomain method.
func (client *DomainsClient) GetDomain(ctx context.Context, domainID string, options *DomainsClientGetDomainOptions) (DomainsClientGetDomainResponse, error) {
	var err error
	const operationName = "core.DomainsClient.GetDomain"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDomainCreateRequest(ctx, domainID, options)
	if err != nil {
		return DomainsClientGetDomainResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DomainsClientGetDomainResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return DomainsClientGetDomainResponse{}, err
	}
	resp, err := client.getDomainHandleResponse(httpResp)
	return resp, err
}

// getDomainCreateRequest creates the GetDomain request.
func (client *DomainsClient) getDomainCreateRequest(ctx context.Context, domainID string, _ *DomainsClientGetDomainOptions) (*policy.Request, error) {
	urlPath := "/v1/domains/{domainId}"
	if domainID == "" {
		return nil, errors.New("parameter domainID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{domainId}", url.PathEscape(domainID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDomainHandleResponse handles the GetDomain response.
func (client *DomainsClient) getDomainHandleResponse(resp *http.Response) (DomainsClientGetDomainResponse, error) {
	result := DomainsClientGetDomainResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Domain); err != nil {
		return DomainsClientGetDomainResponse{}, err
	}
	return result, nil
}

// NewListDomainsPager - REQUIRED DELEGATED SCOPES Domain.Read.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - options - DomainsClientListDomainsOptions contains the optional parameters for the DomainsClient.NewListDomainsPager method.
func (client *DomainsClient) NewListDomainsPager(options *DomainsClientListDomainsOptions) *runtime.Pager[DomainsClientListDomainsResponse] {
	return runtime.NewPager(runtime.PagingHandler[DomainsClientListDomainsResponse]{
		More: func(page DomainsClientListDomainsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *DomainsClientListDomainsResponse) (DomainsClientListDomainsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "core.DomainsClient.NewListDomainsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listDomainsCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return DomainsClientListDomainsResponse{}, err
			}
			return client.listDomainsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listDomainsCreateRequest creates the ListDomains request.
func (client *DomainsClient) listDomainsCreateRequest(ctx context.Context, options *DomainsClientListDomainsOptions) (*policy.Request, error) {
	urlPath := "/v1/domains"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listDomainsHandleResponse handles the ListDomains response.
func (client *DomainsClient) listDomainsHandleResponse(resp *http.Response) (DomainsClientListDomainsResponse, error) {
	result := DomainsClientListDomainsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Domains); err != nil {
		return DomainsClientListDomainsResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// ListDomains - returns array of Domain from all pages.
// REQUIRED DELEGATED SCOPES Domain.Read.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - options - DomainsClientListDomainsOptions contains the optional parameters for the DomainsClient.NewListDomainsPager method.
func (client *DomainsClient) ListDomains(ctx context.Context, options *DomainsClientListDomainsOptions) ([]Domain, error) {
	pager := client.NewListDomainsPager(options)
	mapper := func(resp DomainsClientListDomainsResponse) []Domain {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Domain{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return []Domain{}, err
	}
	return list, nil
}
