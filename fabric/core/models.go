// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import "time"

// AcceptExternalDataShareInvitationRequest - The request payload for accepting an external data share invitation.
type AcceptExternalDataShareInvitationRequest struct {
	// REQUIRED; The item ID.
	ItemID *string

	// REQUIRED; The payload for the Accept External Data Share invitation request.
	Payload ExternalDataShareAcceptRequestPayloadClassification

	// REQUIRED; The provider tenant ID.
	ProviderTenantID *string

	// REQUIRED; The workspace ID.
	WorkspaceID *string
}

// AcceptExternalDataShareInvitationResponse - The response for accepting an external data share invitation.
type AcceptExternalDataShareInvitationResponse struct {
	// READ-ONLY; A list of shortcuts that were created by accepting an external data share invitation.
	Value []ExternalDataShareShortcutInfo
}

// AddConnectionRoleAssignmentRequest - The add connection role assignment request for a principal.
type AddConnectionRoleAssignmentRequest struct {
	// REQUIRED; The principal.
	Principal *Principal

	// REQUIRED; The connection role of the principal.
	Role *ConnectionRole
}

// AddDeploymentPipelineRoleAssignmentRequest - Add deployment pipeline role assignment request payload.
type AddDeploymentPipelineRoleAssignmentRequest struct {
	// REQUIRED; The principal.
	Principal *Principal

	// REQUIRED; The deployment pipeline role of the principal.
	Role *DeploymentPipelineRole
}

// AddGatewayRoleAssignmentRequest - The add gateway role assignment request for a principal.
type AddGatewayRoleAssignmentRequest struct {
	// REQUIRED; The principal.
	Principal *Principal

	// REQUIRED; The gateway role of the principal.
	Role *GatewayRole
}

// AddWorkspaceRoleAssignmentRequest - Add workspace role assignment request payload.
type AddWorkspaceRoleAssignmentRequest struct {
	// REQUIRED; The principal.
	Principal *Principal

	// REQUIRED; The workspace role of the principal.
	Role *WorkspaceRole
}

// AdlsGen2 - An object containing the properties of the target ADLS Gen2 data source.
type AdlsGen2 struct {
	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource. To find
	// this connection ID, first create a cloud connection [/fabric/data-factory/data-source-management#add-a-data-source] to
	// be used by the shortcut when connecting to the ADLS data location. Open the cloud
	// connection's Settings view and copy the connection ID; this is a GUID.
	ConnectionID *string

	// REQUIRED; Specifies the location of the target ADLS container. The URI must be in the format https://[account-name].dfs.core.windows.net
	// where [account-name] is the name of the target ADLS account.
	Location *string

	// REQUIRED; Specifies the container and subfolder within the ADLS account where the target folder is located. Must be of
	// the format [container]/[subfolder] where [container] is the name of the container that
	// holds the files and folders; [subfolder] is the name of the subfolder within the container (optional). For example: /mycontainer/mysubfolder
	Subpath *string
}

// AmazonS3 - An object containing the properties of the target Amazon S3 data source.
type AmazonS3 struct {
	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource. To find
	// this connection ID, first create a cloud connection [/fabric/data-factory/data-source-management#add-a-data-source] to
	// be used by the shortcut when connecting to the Amazon S3 data location. Open the
	// cloud connection's Settings view and copy the connection ID; this is a GUID.
	ConnectionID *string

	// REQUIRED; HTTP URL that points to the target bucket in S3. The URL should be in the format https://[bucket-name].s3.[region-code].amazonaws.com,
	// where "bucket-name" is the name of the S3 bucket you want to
	// point to, and "region-code" is the code for the region where the bucket is located. For example: https://my-s3-bucket.s3.us-west-2.amazonaws.com
	Location *string

	// Specifies a target folder or subfolder within the S3 bucket.
	Subpath *string
}

// AnonymousCredentials - Credentials for Anonymous CredentialType.
type AnonymousCredentials struct {
	// REQUIRED; The credential type of the connection.
	CredentialType *CredentialType
}

// GetCredentials implements the CredentialsClassification interface for type AnonymousCredentials.
func (a *AnonymousCredentials) GetCredentials() *Credentials {
	return &Credentials{
		CredentialType: a.CredentialType,
	}
}

// ApplyTagsRequest - The request payload for applying tags.
type ApplyTagsRequest struct {
	// REQUIRED; The array of tag IDs.
	Tags []string
}

// AssignWorkspaceToCapacityRequest - A capacity assignment request.
type AssignWorkspaceToCapacityRequest struct {
	// REQUIRED; The ID of the capacity the workspace should be assigned to.
	CapacityID *string
}

// AssignWorkspaceToDomainRequest - A domain assignment request.
type AssignWorkspaceToDomainRequest struct {
	// REQUIRED; The ID of the domain the workspace should be assigned to.
	DomainID *string
}

// AutomaticGitCredentials - Automatic Git credentials.
type AutomaticGitCredentials struct {
	// REQUIRED; The Git credentials source.
	Source *GitCredentialsSource
}

// GetGitCredentials implements the GitCredentialsClassification interface for type AutomaticGitCredentials.
func (a *AutomaticGitCredentials) GetGitCredentials() *GitCredentials {
	return &GitCredentials{
		Source: a.Source,
	}
}

// AutomaticGitCredentialsResponse - Automatic Git credentials.
type AutomaticGitCredentialsResponse struct {
	// REQUIRED; The Git credentials source.
	Source *GitCredentialsSource
}

// GetGitCredentialsConfigurationResponse implements the GitCredentialsConfigurationResponseClassification interface for type
// AutomaticGitCredentialsResponse.
func (a *AutomaticGitCredentialsResponse) GetGitCredentialsConfigurationResponse() *GitCredentialsConfigurationResponse {
	return &GitCredentialsConfigurationResponse{
		Source: a.Source,
	}
}

// AzureBlobStorage - An object containing the properties of the target Azure Blob Storage data source.
type AzureBlobStorage struct {
	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource. To find
	// this connection ID, first create a cloud connection [/fabric/data-factory/data-source-management#add-a-data-source] to
	// be used by the shortcut when connecting to the Azure Blob Storage data location.
	// Open the cloud connection's settings view and copy the GUID that is the connection ID.
	ConnectionID *string

	// REQUIRED; Specifies the location of the target Azure Blob Storage container. The URI must be in the format https://[account-name].blob.core.windows.net
	// where [account-name] is the name of the target Azure Blob
	// Storage account.
	Location *string

	// REQUIRED; Specifies the container and subfolder within the Azure Blob Storage account where the target folder is located.
	// Must be of the format [container]/[subfolder]. [Container] is the name of the container
	// that holds the files and folders. [Subfolder] is the name of the subfolder within the container and is optional. For example:
	// /mycontainer/mysubfolder
	Subpath *string
}

// AzureDevOpsDetails - Azure DevOps provider details.
type AzureDevOpsDetails struct {
	// REQUIRED; The branch name. Maximum length is 250 characters.
	BranchName *string

	// REQUIRED; The relative path to the directory. Maximum length is 256 characters.
	DirectoryName *string

	// REQUIRED; A Git provider type. Additional provider types may be added over time.
	GitProviderType *GitProviderType

	// REQUIRED; The organization name. Maximum length is 100 characters.
	OrganizationName *string

	// REQUIRED; The project name. Maximum length is 100 characters.
	ProjectName *string

	// REQUIRED; The repository name. Maximum length is 128 characters.
	RepositoryName *string
}

// GetGitProviderDetails implements the GitProviderDetailsClassification interface for type AzureDevOpsDetails.
func (a *AzureDevOpsDetails) GetGitProviderDetails() *GitProviderDetails {
	return &GitProviderDetails{
		BranchName:      a.BranchName,
		DirectoryName:   a.DirectoryName,
		GitProviderType: a.GitProviderType,
		RepositoryName:  a.RepositoryName,
	}
}

// BasicCredentials - Credentials for Basic CredentialType.
type BasicCredentials struct {
	// REQUIRED; The credential type of the connection.
	CredentialType *CredentialType

	// REQUIRED; The password.
	Password *string

	// REQUIRED; The username.
	Username *string
}

// GetCredentials implements the CredentialsClassification interface for type BasicCredentials.
func (b *BasicCredentials) GetCredentials() *Credentials {
	return &Credentials{
		CredentialType: b.CredentialType,
	}
}

// BulkCreateShortcutResponse - A collection of CreateShortcutResponse that corresponds to the requested shortcut creation
// requests.
type BulkCreateShortcutResponse struct {
	// REQUIRED; A list of create shortcut response.
	Value []CreateShortcutResponse
}

// BulkCreateShortcutsRequest - A list of create shortcut requests.
type BulkCreateShortcutsRequest struct {
	// REQUIRED; A list of shortcut creation requests.
	CreateShortcutRequests []CreateShortcutWithTransformRequest
}

// BulkMoveItemsRequest - Bulk move items request.
type BulkMoveItemsRequest struct {
	// REQUIRED; The IDs of requested items to move.
	Items []string

	// The destination folder ID. If not provided, the workspace is used as the destination folder.
	TargetFolderID *string
}

// CSVToDeltaTransform - CSV to Delta transform.
type CSVToDeltaTransform struct {
	// REQUIRED; CSV to Delta transform properties.
	Properties *CSVToDeltaTransformProperties

	// REQUIRED; The type of transform. Additional transform types may be added over time.
	Type *TransformType
}

// GetTransform implements the TransformClassification interface for type CSVToDeltaTransform.
func (c *CSVToDeltaTransform) GetTransform() *Transform {
	return &Transform{
		Type: c.Type,
	}
}

// CSVToDeltaTransformProperties - Properties for the CSV to Delta transform.
type CSVToDeltaTransformProperties struct {
	// Specifies the character used to separate values within a row in the CSV file and it must specify exactly one of the supported
	// values: ,, , \t, |, &, ;. Default value is ,.
	Delimiter *string

	// Whether to skip files with errors. True - Skip files with errors, False - Do not skip files with errors. Default value
	// is True.
	SkipFilesWithErrors *bool

	// Whether first row of the CSV file should be used as the header. True - Use first row as header. False - Do not use first
	// row as header. Default value is True.
	UseFirstRowAsHeader *bool
}

type Capacities struct {
	// REQUIRED; A list of capacities.
	Value []Capacity

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// Capacity - A capacity object.
type Capacity struct {
	// READ-ONLY; The capacity display name.
	DisplayName *string

	// READ-ONLY; The capacity ID.
	ID *string

	// READ-ONLY; The Azure region where the capacity was provisioned.
	Region *string

	// READ-ONLY; The capacity SKU.
	SKU *string

	// READ-ONLY; The capacity state.
	State *CapacityState
}

// ColumnConstraint indicates a constraint that determines the permissions and visibility a user has on columns within a table.
type ColumnConstraint struct {
	// REQUIRED; The array of actions applied to the columnNames. This determines which actions a user will be able to perform
	// on columns. The allowed values are: Read. Additional columnAction types may be added over
	// time.
	ColumnAction []ColumnAction

	// REQUIRED; The effect given to the columnNames. The only allowed value is Permit. Additional columnEffect types may be added
	// over time.
	ColumnEffect *ColumnEffect

	// REQUIRED; An array of case sensitive column names. Each value is a column name from the table specified in tablePath. Use
	// these columns with columnEffect and columnAction. Columns that aren't listed get the
	// default value null. Use * to indicate all columns in the table.
	ColumnNames []string

	// REQUIRED; A relative file path specifying which table the column constraint applies to. This should be in the form of /Tables/{optionalSchema}/{tableName}.
	// Only one value can be given here and the tableName
	// must be a table included in the PermissionScope.
	TablePath *string
}

// CommitToGitRequest - Contains the commit request.
type CommitToGitRequest struct {
	// REQUIRED; The mode for the commit operation.
	Mode *CommitMode

	// Caller-free comment for this commit. Maximum length is 300 characters. If no comment is provided by the caller, use the
	// default Git provider comment.
	Comment *string

	// Specific items to commit. This is relevant only for Selective commit mode. The items can be retrieved from the Git Status
	// [/rest/api/fabric/core/git/get-status] API.
	Items []ItemIdentifier

	// Full SHA hash that the workspace is synced to. The hash can be retrieved from the Git Status [/rest/api/fabric/core/git/get-status]
	// API.
	WorkspaceHead *string
}

// ConfiguredConnectionGitCredentials - Configured connection Git credentials.
type ConfiguredConnectionGitCredentials struct {
	// REQUIRED; The object ID of the connection.
	ConnectionID *string

	// REQUIRED; The Git credentials source.
	Source *GitCredentialsSource
}

// GetGitCredentials implements the GitCredentialsClassification interface for type ConfiguredConnectionGitCredentials.
func (c *ConfiguredConnectionGitCredentials) GetGitCredentials() *GitCredentials {
	return &GitCredentials{
		Source: c.Source,
	}
}

// ConfiguredConnectionGitCredentialsResponse - Configured connection Git credentials.
type ConfiguredConnectionGitCredentialsResponse struct {
	// REQUIRED; The object ID of the connection.
	ConnectionID *string

	// REQUIRED; The Git credentials source.
	Source *GitCredentialsSource
}

// GetGitCredentialsConfigurationResponse implements the GitCredentialsConfigurationResponseClassification interface for type
// ConfiguredConnectionGitCredentialsResponse.
func (c *ConfiguredConnectionGitCredentialsResponse) GetGitCredentialsConfigurationResponse() *GitCredentialsConfigurationResponse {
	return &GitCredentialsConfigurationResponse{
		Source: c.Source,
	}
}

// Connection - The base object of a connection.
type Connection struct {
	// REQUIRED; The connection details of the connection.
	ConnectionDetails *ListConnectionDetails

	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// REQUIRED; The object ID of the connection.
	ID *string

	// The credential details of the connection.
	CredentialDetails *ListCredentialDetails

	// The display name of the connection.
	DisplayName *string

	// The privacy level of the connection.
	PrivacyLevel *PrivacyLevel
}

// GetConnection implements the ConnectionClassification interface for type Connection.
func (c *Connection) GetConnection() *Connection { return c }

type ConnectionCreationMetadata struct {
	// REQUIRED; A list of creation methods for the connection.
	CreationMethods []ConnectionCreationMethod

	// REQUIRED; A list of connection encryption values that the connection supports.
	SupportedConnectionEncryptionTypes []ConnectionEncryption

	// REQUIRED; A list of credential type values that the connection supports.
	SupportedCredentialTypes []CredentialType

	// REQUIRED; Whether the connection type supports skip test connection. True - The connection type supports skip test connection,
	// False - The connection type does not support skip test connection.
	SupportsSkipTestConnection *bool

	// REQUIRED; The type of the connection.
	Type *string
}

type ConnectionCreationMethod struct {
	// REQUIRED; The name of the creation method.
	Name *string

	// REQUIRED; A list of creation method parameters for the connection.
	Parameters []ConnectionCreationParameter
}

type ConnectionCreationParameter struct {
	// REQUIRED; The data type of the connection creation parameter.
	DataType *DataType

	// REQUIRED; The name of the connection creation parameter.
	Name *string

	// REQUIRED; Whether the connection creation parameter is required. True - The connection creation parameter is required,
	// False - The connection creation parameter is not required.
	Required *bool

	// A list of allowed values for the connection creation parameter.
	AllowedValues []string
}

// ConnectionDetailsBooleanParameter - ConnectionDetailsParameter for boolean dataType.
type ConnectionDetailsBooleanParameter struct {
	// REQUIRED; The data type of the parameter.
	DataType *DataType

	// REQUIRED; The name of the parameter.
	Name *string

	// REQUIRED; The boolean value.
	Value *bool
}

// GetConnectionDetailsParameter implements the ConnectionDetailsParameterClassification interface for type ConnectionDetailsBooleanParameter.
func (c *ConnectionDetailsBooleanParameter) GetConnectionDetailsParameter() *ConnectionDetailsParameter {
	return &ConnectionDetailsParameter{
		DataType: c.DataType,
		Name:     c.Name,
	}
}

// ConnectionDetailsDateParameter - ConnectionDetailsParameter for date dataType.
type ConnectionDetailsDateParameter struct {
	// REQUIRED; The data type of the parameter.
	DataType *DataType

	// REQUIRED; The name of the parameter.
	Name *string

	// REQUIRED; The date value using YYYY-MM-DD format.
	Value *time.Time
}

// GetConnectionDetailsParameter implements the ConnectionDetailsParameterClassification interface for type ConnectionDetailsDateParameter.
func (c *ConnectionDetailsDateParameter) GetConnectionDetailsParameter() *ConnectionDetailsParameter {
	return &ConnectionDetailsParameter{
		DataType: c.DataType,
		Name:     c.Name,
	}
}

// ConnectionDetailsDateTimeParameter - ConnectionDetailsParameter for dateTime dataType.
type ConnectionDetailsDateTimeParameter struct {
	// REQUIRED; The data type of the parameter.
	DataType *DataType

	// REQUIRED; The name of the parameter.
	Name *string

	// REQUIRED; The date time value using YYYY-MM-DDTHH:mm:ss.FFFZ format.
	Value *time.Time
}

// GetConnectionDetailsParameter implements the ConnectionDetailsParameterClassification interface for type ConnectionDetailsDateTimeParameter.
func (c *ConnectionDetailsDateTimeParameter) GetConnectionDetailsParameter() *ConnectionDetailsParameter {
	return &ConnectionDetailsParameter{
		DataType: c.DataType,
		Name:     c.Name,
	}
}

// ConnectionDetailsDateTimeZoneParameter - ConnectionDetailsParameter for dateTimeZone dataType.
type ConnectionDetailsDateTimeZoneParameter struct {
	// REQUIRED; The data type of the parameter.
	DataType *DataType

	// REQUIRED; The name of the parameter.
	Name *string

	// REQUIRED; The date time zone value using YYYY-MM-DDTHH:mm:ss.FFF±hh:mm format.
	Value *string
}

// GetConnectionDetailsParameter implements the ConnectionDetailsParameterClassification interface for type ConnectionDetailsDateTimeZoneParameter.
func (c *ConnectionDetailsDateTimeZoneParameter) GetConnectionDetailsParameter() *ConnectionDetailsParameter {
	return &ConnectionDetailsParameter{
		DataType: c.DataType,
		Name:     c.Name,
	}
}

// ConnectionDetailsDurationParameter - ConnectionDetailsParameter for duration dataType.
type ConnectionDetailsDurationParameter struct {
	// REQUIRED; The data type of the parameter.
	DataType *DataType

	// REQUIRED; The name of the parameter.
	Name *string

	// REQUIRED; The duration value using [-]P(n)DT(n)H(n)M(n)S format. For example: P3DT4H30M10S (for 3 days, 4 hours, 30 minutes,
	// and 10 seconds).
	Value *string
}

// GetConnectionDetailsParameter implements the ConnectionDetailsParameterClassification interface for type ConnectionDetailsDurationParameter.
func (c *ConnectionDetailsDurationParameter) GetConnectionDetailsParameter() *ConnectionDetailsParameter {
	return &ConnectionDetailsParameter{
		DataType: c.DataType,
		Name:     c.Name,
	}
}

// ConnectionDetailsNumberParameter - ConnectionDetailsParameter for number dataType.
type ConnectionDetailsNumberParameter struct {
	// REQUIRED; The data type of the parameter.
	DataType *DataType

	// REQUIRED; The name of the parameter.
	Name *string

	// REQUIRED; The number value.
	Value *float32
}

// GetConnectionDetailsParameter implements the ConnectionDetailsParameterClassification interface for type ConnectionDetailsNumberParameter.
func (c *ConnectionDetailsNumberParameter) GetConnectionDetailsParameter() *ConnectionDetailsParameter {
	return &ConnectionDetailsParameter{
		DataType: c.DataType,
		Name:     c.Name,
	}
}

// ConnectionDetailsParameter - The base object of ConnectionDetailsParameter.
type ConnectionDetailsParameter struct {
	// REQUIRED; The data type of the parameter.
	DataType *DataType

	// REQUIRED; The name of the parameter.
	Name *string
}

// GetConnectionDetailsParameter implements the ConnectionDetailsParameterClassification interface for type ConnectionDetailsParameter.
func (c *ConnectionDetailsParameter) GetConnectionDetailsParameter() *ConnectionDetailsParameter {
	return c
}

// ConnectionDetailsTextParameter - ConnectionDetailsParameter for text dataType.
type ConnectionDetailsTextParameter struct {
	// REQUIRED; The data type of the parameter.
	DataType *DataType

	// REQUIRED; The name of the parameter.
	Name *string

	// REQUIRED; The text value.
	Value *string
}

// GetConnectionDetailsParameter implements the ConnectionDetailsParameterClassification interface for type ConnectionDetailsTextParameter.
func (c *ConnectionDetailsTextParameter) GetConnectionDetailsParameter() *ConnectionDetailsParameter {
	return &ConnectionDetailsParameter{
		DataType: c.DataType,
		Name:     c.Name,
	}
}

// ConnectionDetailsTimeParameter - ConnectionDetailsParameter for time dataType.
type ConnectionDetailsTimeParameter struct {
	// REQUIRED; The data type of the parameter.
	DataType *DataType

	// REQUIRED; The name of the parameter.
	Name *string

	// REQUIRED; The time value using HH:mm:ss.FFFZ format.
	Value *time.Time
}

// GetConnectionDetailsParameter implements the ConnectionDetailsParameterClassification interface for type ConnectionDetailsTimeParameter.
func (c *ConnectionDetailsTimeParameter) GetConnectionDetailsParameter() *ConnectionDetailsParameter {
	return &ConnectionDetailsParameter{
		DataType: c.DataType,
		Name:     c.Name,
	}
}

// ConnectionRoleAssignment - The connection role assignment for a principal.
type ConnectionRoleAssignment struct {
	// REQUIRED; The object ID of the connection role assignment.
	ID *string

	// REQUIRED; The principal.
	Principal *Principal

	// REQUIRED; The connection role of the principal.
	Role *ConnectionRole
}

type ConnectionRoleAssignments struct {
	// REQUIRED; A list of connection role assignments.
	Value []ConnectionRoleAssignment

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// CreatableShortcutTarget - An object that contains the target datasource, and must specify exactly one of the supported
// destinations as described in the table below.
type CreatableShortcutTarget struct {
	// An object containing the properties of the target ADLS Gen2 data source.
	AdlsGen2 *AdlsGen2

	// An object containing the properties of the target Amazon S3 data source.
	AmazonS3 *AmazonS3

	// An object containing the properties of the target Azure Blob Storage data source.
	AzureBlobStorage *AzureBlobStorage

	// An object containing the properties of the target Dataverse data source.
	Dataverse *Dataverse

	// An object containing the properties of the target Google Cloud Storage data source.
	GoogleCloudStorage *GoogleCloudStorage

	// An object containing the properties of the target OneLake data source.
	OneLake *OneLake

	// An object containing the properties of the target S3 compatible data source.
	S3Compatible *S3Compatible
}

type CreateCloudConnectionRequest struct {
	// REQUIRED; The connection details of the connection.
	ConnectionDetails *CreateConnectionDetails

	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// REQUIRED; The credential details of the connection.
	CredentialDetails *CreateCredentialDetails

	// REQUIRED; The display name of the connection. Maximum length is 200 characters.
	DisplayName *string

	// Allow this connection to be utilized with either on-premises data gateways or VNet data gateways.
	AllowConnectionUsageInGateway *bool

	// (Optional) The privacy level of the connection. When no value is passed, this is set to 'Organizational'.
	PrivacyLevel *PrivacyLevel
}

// GetCreateConnectionRequest implements the CreateConnectionRequestClassification interface for type CreateCloudConnectionRequest.
func (c *CreateCloudConnectionRequest) GetCreateConnectionRequest() *CreateConnectionRequest {
	return &CreateConnectionRequest{
		ConnectionDetails: c.ConnectionDetails,
		ConnectivityType:  c.ConnectivityType,
		DisplayName:       c.DisplayName,
		PrivacyLevel:      c.PrivacyLevel,
	}
}

// CreateConnectionDetails - The connection details input for create operations.
type CreateConnectionDetails struct {
	// REQUIRED; The creation method used to create the connection. For a list of creation methods use the ListSupportedConnectionTypes
	// [/rest/api/fabric/core/connections/list-supported-connection-types] API.
	CreationMethod *string

	// REQUIRED; The list of connection parameters. For a list of parameters for each creation method use the ListSupportedConnectionTypes
	// [/rest/api/fabric/core/connections/list-supported-connection-types] API.
	Parameters []ConnectionDetailsParameterClassification

	// REQUIRED; The type of the connection.
	Type *string
}

// CreateConnectionRequest - The base object of create connection request.
type CreateConnectionRequest struct {
	// REQUIRED; The connection details of the connection.
	ConnectionDetails *CreateConnectionDetails

	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// REQUIRED; The display name of the connection. Maximum length is 200 characters.
	DisplayName *string

	// (Optional) The privacy level of the connection. When no value is passed, this is set to 'Organizational'.
	PrivacyLevel *PrivacyLevel
}

// GetCreateConnectionRequest implements the CreateConnectionRequestClassification interface for type CreateConnectionRequest.
func (c *CreateConnectionRequest) GetCreateConnectionRequest() *CreateConnectionRequest { return c }

// CreateCredentialDetails - The credential details input for creating a connection.
type CreateCredentialDetails struct {
	// REQUIRED; The credentials of the connection.
	Credentials CredentialsClassification

	// (Optional) The connection encryption setting that is used during the test connection. When no value is passed, the connection
	// is not encrypted.
	ConnectionEncryption *ConnectionEncryption

	// (Optional) The single sign-on type of the connection. When no value is passed, the connection doesn't use single sign-on.
	SingleSignOnType *SingleSignOnType

	// Whether the connection should skip the test connection during creation and update. True - Skip the test connection, False
	// - Do not skip the test connection. When no value is passed, this is set to
	// 'False'.
	SkipTestConnection *bool
}

// CreateDeploymentPipelineRequest - A request to create a new deployment pipeline.
type CreateDeploymentPipelineRequest struct {
	// REQUIRED; The display name for the deployment pipeline.
	// The display name cannot contain more than 256 characters.
	DisplayName *string

	// REQUIRED; The collection of deployment pipeline stages.
	Stages []DeploymentPipelineStageRequest

	// The description for the deployment pipeline.
	// The description cannot contain more than 1024 characters.
	Description *string
}

// CreateExternalDataShareRequest - The request payload for creating an external data share.
type CreateExternalDataShareRequest struct {
	// REQUIRED; The path or list of paths that are to be externally shared. You can share up to 100 paths in each share. A valid
	// path to an external data share must start with "Files/" or "Tables/". You can't share
	// the root folder itself (Files or Tables).
	// For example, these paths are valid:
	// * "Files/MyFolder1"
	//
	//
	// * "Tables/MySchema"
	//
	//
	// * "Tables/MyTable1"
	Paths []string

	// REQUIRED; The recipient who is invited to accept the external data share.
	Recipient *ExternalDataShareRecipient
}

// CreateExternalDataShareShortcutRequest - Definitions for creating an external data share shortcut.
type CreateExternalDataShareShortcutRequest struct {
	// REQUIRED; Unique identifier of the target path, as returned by 'GetExternalDataShareInvitationDetails' operation.
	PathID *string

	// REQUIRED; Name of the shortcut.
	ShortcutName *string
}

// CreateFolderRequest - Create folder request payload.
type CreateFolderRequest struct {
	// REQUIRED; The folder display name. The name must meet Folder name requirements [/fabric/get-started/workspaces-folders#folder-name-requirements]
	DisplayName *string

	// The parent folder ID. If not specified or null, the folder is created with the workspace as its parent folder.
	ParentFolderID *string
}

// CreateGatewayRequest - The base object of create gateway request.
type CreateGatewayRequest struct {
	// REQUIRED; The type of the gateway.
	Type *GatewayType
}

// GetCreateGatewayRequest implements the CreateGatewayRequestClassification interface for type CreateGatewayRequest.
func (c *CreateGatewayRequest) GetCreateGatewayRequest() *CreateGatewayRequest { return c }

// CreateItemRequest - Create item request payload.
type CreateItemRequest struct {
	// REQUIRED; The item display name. The display name must follow naming rules according to item type.
	DisplayName *string

	// REQUIRED; The item type.
	Type *ItemType

	// A set of properties used to create the item. The Create Item page of the relevant type indicates whether creationPayload
	// is supported and lists the item's properties. Use creationPayload or definition
	// . You can't use both at the same time.
	CreationPayload any

	// The item definition. The Create Item page of the relevant type indicates whether the definition is supported and details
	// its structure. Use definition or creationPayload. You can't use both at the
	// same time.
	Definition *ItemDefinition

	// The item description. Maximum length is 256 characters.
	Description *string

	// The folder ID. If not specified or null, the item is created with the workspace as its folder.
	FolderID *string
}

// CreateManagedPrivateEndpointRequest - Create managed private endpoint request payload.
type CreateManagedPrivateEndpointRequest struct {
	// REQUIRED; The private endpoint name. Should not be more than 64 characters.
	Name *string

	// REQUIRED; Resource Id of data source for which private endpoint needs to be created.
	TargetPrivateLinkResourceID *string

	// REQUIRED; Sub-resource pointing to Private-link resoure [/azure/private-link/private-endpoint-overview#private-link-resource].
	TargetSubresourceType *string

	// Message to approve private endpoint request. Should not be more than 140 characters.
	RequestMessage *string
}

type CreateOnPremisesConnectionRequest struct {
	// REQUIRED; The connection details of the connection.
	ConnectionDetails *CreateConnectionDetails

	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// REQUIRED; The credential details of the connection.
	CredentialDetails *CreateOnPremisesCredentialDetails

	// REQUIRED; The display name of the connection. Maximum length is 200 characters.
	DisplayName *string

	// REQUIRED; The object ID of the primary gateway of the on-premises gateway that the connection is created under.
	GatewayID *string

	// (Optional) The privacy level of the connection. When no value is passed, this is set to 'Organizational'.
	PrivacyLevel *PrivacyLevel
}

// GetCreateConnectionRequest implements the CreateConnectionRequestClassification interface for type CreateOnPremisesConnectionRequest.
func (c *CreateOnPremisesConnectionRequest) GetCreateConnectionRequest() *CreateConnectionRequest {
	return &CreateConnectionRequest{
		ConnectionDetails: c.ConnectionDetails,
		ConnectivityType:  c.ConnectivityType,
		DisplayName:       c.DisplayName,
		PrivacyLevel:      c.PrivacyLevel,
	}
}

// CreateOnPremisesCredentialDetails - The credential details input for creating an on-premises gateway connection.
type CreateOnPremisesCredentialDetails struct {
	// REQUIRED; The credentials of the connection.
	Credentials *OnPremisesGatewayCredentials

	// (Optional) The connection encryption setting that is used during the test connection. When no value is passed, the connection
	// is not encrypted.
	ConnectionEncryption *ConnectionEncryption

	// (Optional) The single sign-on type of the connection. When no value is passed, the connection doesn't use single sign-on.
	SingleSignOnType *SingleSignOnType

	// Whether the connection should skip the test connection during creation and update. True - Skip the test connection, False
	// - Do not skip the test connection. When no value is passed, this is set to
	// 'False'.
	SkipTestConnection *bool
}

// CreateOrUpdateDataAccessRolesRequest - Contains definition of Roles that are used to manage data access security and ensure
// that only authorized users can view, edit, or delete certain data. Calling this API updates role definitions and
// creates, updates, or deletes roles to match the provided payload.
type CreateOrUpdateDataAccessRolesRequest struct {
	// A list of roles that are used to manage data access security and ensure that only authorized users can view certain data.
	// A role represents a set of permissions and permission scopes that define what
	// actions its members are allowed to perform for the data in scope. Members are users or groups who have been granted the
	// role, and they can read the data based on the permissions assigned to the role.
	// For example, a member can be a Microsoft Entra ID group and permission scope can be a Read Action applied on the given
	// Path to File, Folder(s) or Table(s) in OneLake.
	Value []DataAccessRole
}

// CreateScheduleRequest - Create item schedule plan request payload.
type CreateScheduleRequest struct {
	// REQUIRED; The actual data contains the time/weekdays of this schedule.
	Configuration ScheduleConfigClassification

	// REQUIRED; Whether this schedule is enabled. True - Enabled, False - Disabled.
	Enabled *bool
}

// CreateShortcutRequest - A shortcut creation request with an object representing a reference to another storage location.
type CreateShortcutRequest struct {
	// REQUIRED; Name of the shortcut.
	Name *string

	// REQUIRED; A string representing the full path where the shortcut is created, including either "Files" or "Tables".
	Path *string

	// REQUIRED; An object that contains the target datasource, and it must specify exactly one of the supported destinations:
	// OneLake, Amazon S3, ADLS Gen2, Google Cloud Storage, S3 compatible, Dataverse or Azure
	// Blob storage.
	Target *CreatableShortcutTarget
}

// CreateShortcutResponse - An object that contains the original shortcut request, actual shortcut creation metadata, status
// of shortcut creation and if any associated errors.
type CreateShortcutResponse struct {
	// REQUIRED; An object that contains the original shortcut name and path
	Request *CreateShortcutResponseRequest

	// REQUIRED; The status of create shortcut. Additional status may be added over time.
	Status *Status

	// An object containing the shortcut properties and created shortcut name.
	Result *Shortcut

	// READ-ONLY; The error details in case the operation is in failed state
	Error *ErrorResponse
}

// CreateShortcutResponseRequest - An object that contains the original shortcut name and path
type CreateShortcutResponseRequest struct {
	// REQUIRED; Name of the shortcut.
	Name *string

	// REQUIRED; A string representing the full path where the shortcut is created, including either "Files" or "Tables".
	Path *string
}

// CreateShortcutWithTransformRequest - A shortcut creation request with an object representing a reference to another storage
// location.
type CreateShortcutWithTransformRequest struct {
	// REQUIRED; Name of the shortcut.
	Name *string

	// REQUIRED; A string representing the full path where the shortcut is created, including either "Files" or "Tables".
	Path *string

	// REQUIRED; An object that contains the target datasource, and it must specify exactly one of the supported destinations:
	// OneLake, Amazon S3, ADLS Gen2, Google Cloud Storage, S3 compatible, Dataverse or Azure
	// Blob storage.
	Target *CreatableShortcutTarget

	// An object that contains the transform name and its corresponding properties to be applied to target data, and must specify
	// exactly one of the supported transformations: CsvToDelta
	Transform TransformClassification
}

type CreateVirtualNetworkGatewayConnectionRequest struct {
	// REQUIRED; The connection details of the connection.
	ConnectionDetails *CreateConnectionDetails

	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// REQUIRED; The credential details of the connection.
	CredentialDetails *CreateCredentialDetails

	// REQUIRED; The display name of the connection. Maximum length is 200 characters.
	DisplayName *string

	// REQUIRED; The object ID of the virtual network gateway that the connection is created under.
	GatewayID *string

	// (Optional) The privacy level of the connection. When no value is passed, this is set to 'Organizational'.
	PrivacyLevel *PrivacyLevel
}

// GetCreateConnectionRequest implements the CreateConnectionRequestClassification interface for type CreateVirtualNetworkGatewayConnectionRequest.
func (c *CreateVirtualNetworkGatewayConnectionRequest) GetCreateConnectionRequest() *CreateConnectionRequest {
	return &CreateConnectionRequest{
		ConnectionDetails: c.ConnectionDetails,
		ConnectivityType:  c.ConnectivityType,
		DisplayName:       c.DisplayName,
		PrivacyLevel:      c.PrivacyLevel,
	}
}

type CreateVirtualNetworkGatewayRequest struct {
	// REQUIRED; The object ID of the Fabric license capacity.
	CapacityID *string

	// REQUIRED; The display name of the virtual network gateway. Maximum length is 200 characters.
	DisplayName *string

	// REQUIRED; The minutes of inactivity before the virtual network gateway goes into auto-sleep. Must be one of the following
	// values: 30, 60, 90, 120, 150, 240, 360, 480, 720, 1440.
	InactivityMinutesBeforeSleep *int32

	// REQUIRED; The number of member gateways. A number between 1 and 7.
	NumberOfMemberGateways *int32

	// REQUIRED; The type of the gateway.
	Type *GatewayType

	// REQUIRED; The Azure virtual network resource.
	VirtualNetworkAzureResource *VirtualNetworkAzureResource
}

// GetCreateGatewayRequest implements the CreateGatewayRequestClassification interface for type CreateVirtualNetworkGatewayRequest.
func (c *CreateVirtualNetworkGatewayRequest) GetCreateGatewayRequest() *CreateGatewayRequest {
	return &CreateGatewayRequest{
		Type: c.Type,
	}
}

// CreateWorkspaceRequest - Create workspace request payload.
type CreateWorkspaceRequest struct {
	// REQUIRED; The workspace display name.
	// The display name cannot contain more than 256 characters.
	// Only unused workspace names are allowed.
	// "Admin monitoring" is a reserved workspace name.
	DisplayName *string

	// The ID of the capacity to assign the workspace to.
	CapacityID *string

	// The workspace description.
	// The description cannot contain more than 4000 characters.
	Description *string

	// The ID of the domain to assign the workspace to.
	DomainID *string
}

// Credentials - The base object of credentials.
type Credentials struct {
	// REQUIRED; The credential type of the connection.
	CredentialType *CredentialType
}

// GetCredentials implements the CredentialsClassification interface for type Credentials.
func (c *Credentials) GetCredentials() *Credentials { return c }

type CronScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time interval in minutes. A number between 1 and 5270400 (10 years).
	Interval *int32

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type CronScheduleConfig.
func (c *CronScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     c.EndDateTime,
		LocalTimeZoneID: c.LocalTimeZoneID,
		StartDateTime:   c.StartDateTime,
		Type:            c.Type,
	}
}

type DailyScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; A list of time slots in the hh:mm format. The maximum time slots you can use is 100.
	Times []string

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type DailyScheduleConfig.
func (d *DailyScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     d.EndDateTime,
		LocalTimeZoneID: d.LocalTimeZoneID,
		StartDateTime:   d.StartDateTime,
		Type:            d.Type,
	}
}

// DataAccessRole - A Data access role represents a set of permissions and permission scopes that define what actions its
// members are allowed to perform for the data in scope. Data access roles are used to manage data
// access security and ensure that only authorized users can view, edit, or delete certain data. Members are users or groups
// who have been granted the role, and they can read the data based on the
// permissions assigned to the role. For example, a member can be an Microsoft Entra ID group and permission scope can be
// a Read Action applied on the given Path to File, Folder(s) or Table(s) in
// OneLake.
type DataAccessRole struct {
	// REQUIRED; The array of permissions that make up the Data access role.
	DecisionRules []DecisionRule

	// REQUIRED; The name of the Data access role.
	Name *string

	// The members object which contains the members of the role as arrays of different member types.
	Members *Members

	// READ-ONLY; The unique id for the Data access role.
	ID *string
}

type DataAccessRoles struct {
	// REQUIRED; A list of roles that are used to manage data access security and ensure that only authorized users can view certain
	// data. A role represents a set of permissions and permission scopes that define what
	// actions its members are allowed to perform for the data in scope. Members are users or groups who have been granted the
	// role, and they can read the data based on the permissions assigned to the role.
	// For example, a member can be a Microsoft Entra ID group and permission scope can be a Read Action applied on the given
	// Path to File, Folder(s) or Table(s) in OneLake.
	Value []DataAccessRole

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// Dataverse - An object containing the properties of the target Dataverse data source.
type Dataverse struct {
	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource. To find
	// this connection ID, first create a cloud connection [/fabric/data-factory/data-source-management#add-a-data-source] to
	// be used by the shortcut when connecting to the Dataverse data location. Open the
	// cloud connection's Settings view and copy the connection ID; this is a GUID.
	ConnectionID *string

	// REQUIRED; Specifies the DeltaLake folder path where the target data is stored.
	DeltaLakeFolder *string

	// REQUIRED; URI that indicates the Dataverse target environment's domain name. The URI should be formatted as "https://[orgname].crm[xx].dynamics.com",
	// where [orgname] represents the name of your Dataverse
	// organization.
	EnvironmentDomain *string

	// REQUIRED; Specifies the name of the target table in Dataverse
	TableName *string
}

// DayOfMonth - Specifies a date to trigger the job. The value must be a valid date. Otherwise, it will be skipped.
type DayOfMonth struct {
	// REQUIRED; Specifies a date to trigger the job, using a value between 1 and 31. For example, 2 means the second day of the
	// month. The date must be valid. If an invalid date is provided, such as February 31st, it
	// will automatically skip to the month that includes the 31st day.
	DayOfMonth *int32

	// REQUIRED; An enumerator that lists the day for triggering jobs. Additional types may be added over time.
	OccurrenceType *OccurrenceType
}

// GetMonthlyOccurrence implements the MonthlyOccurrenceClassification interface for type DayOfMonth.
func (d *DayOfMonth) GetMonthlyOccurrence() *MonthlyOccurrence {
	return &MonthlyOccurrence{
		OccurrenceType: d.OccurrenceType,
	}
}

// DecisionRule - Specifies a rule for matching the requested action. Contains effect (Permit) and Permission which determine
// whether a user or entity is authorized to perform a specific action (e.g., read) on a
// resource. Permission is a set of scopes, defined by attributes, that must match the requested action for the rule to apply.
type DecisionRule struct {
	// REQUIRED; The permission property is an array that specifies the scope and level of access for a requested action. The
	// array must contain exactly two PermissionScope objects: Path and Action. The scope is
	// defined using the PermissionScope object, with attributeValueIncludedIn specifying either the location of the resource
	// being accessed or the type of action being granted. The access refers to the
	// level of access being granted, such as Read.
	Permission []PermissionScope

	// Any constraints such as row or column level security that are applied to tables as part of this role. If not included,
	// no constraints apply to any tables in the role.
	Constraints *DecisionRuleConstraints

	// The effect that a role has on access to the data resource. Currently, the only supported effect type is Permit, which grants
	// access to the resource. Additional effect types may be added over time.
	Effect *Effect
}

// DecisionRuleConstraints - Any constraints such as row or column level security that are applied to tables as part of this
// role. If not included, no constraints apply to any tables in the role.
type DecisionRuleConstraints struct {
	// The array of column constraints applied to one or more tables in the data access role.
	Columns []ColumnConstraint

	// The array of row constraints applied to one or more tables in the data access role.
	Rows []RowConstraint
}

// DeployRequest - A request to deploy items from a deployment pipeline stage to another consecutive stage. Deploying to a
// previous stage can be done only when the target stage is empty. If no items were specified, will
// deploy all supported items from the deployment pipeline stage, otherwise will deploy only the specified items.
type DeployRequest struct {
	// REQUIRED; The ID of the source stage.
	SourceStageID *string

	// REQUIRED; The ID of the target stage.
	TargetStageID *string

	// The configuration details for creating a new workspace. Required when deploying to a stage that has no assigned workspaces,
	// otherwise it is ignored. The deployment will fail if the new workspace
	// configuration details aren't provided when required.
	CreatedWorkspaceDetails *DeploymentPipelineNewWorkspaceConfiguration

	// A list of items to be deployed. If not used, all supported stage items are deployed.
	Items []ItemDeploymentRequest

	// A note describing the deployment. The text size is limited to 1024 characters.
	Note *string

	// Deployment options that control the behavior of the deployment.
	Options *DeploymentOptions
}

// DeploymentExecutionPlan - A deployment execution plan.
type DeploymentExecutionPlan struct {
	// READ-ONLY; The collection of execution plan steps.
	Steps []DeploymentExecutionStep
}

// DeploymentExecutionStep - A deployment execution step.
type DeploymentExecutionStep struct {
	// READ-ONLY; The deployment step description.
	Description *string

	// READ-ONLY; The step index.
	Index *int32

	// READ-ONLY; The source and target items of the step.
	SourceAndTarget *DeploymentSourceAndTarget

	// READ-ONLY; The status of the deployment pipeline operation. Additional statuses may be added over time.
	Status *DeploymentPipelineOperationStatus

	// READ-ONLY; The error details. Only applicable if the deployment pipeline operation failed.
	Error *ErrorResponse

	// READ-ONLY; Is an item new, different or identical to items in the target stage before deployment.
	PreDeploymentDiffState *ItemPreDeploymentDiffState
}

// DeploymentOptions - Deployment configuration options for the deployment.
type DeploymentOptions struct {
	// Indicates whether cross region deployment is enabled. True - enabled, False - disabled. Default value is false.
	AllowCrossRegionDeployment *bool
}

// DeploymentPipeline - A Fabric deployment pipeline.
type DeploymentPipeline struct {
	// REQUIRED; The deployment pipeline display name.
	DisplayName *string

	// READ-ONLY; The deployment pipeline ID.
	ID *string

	// The deployment pipeline description.
	Description *string
}

// DeploymentPipelineAssignWorkspaceRequest - A request to assign a workspace to a deployment pipeline stage.
type DeploymentPipelineAssignWorkspaceRequest struct {
	// REQUIRED; The workspace ID.
	WorkspaceID *string
}

// DeploymentPipelineExtendedInfo - A Fabric deployment pipeline.
type DeploymentPipelineExtendedInfo struct {
	// REQUIRED; The deployment pipeline display name.
	DisplayName *string

	// REQUIRED; The collection of deployment pipeline stages.
	Stages []DeploymentPipelineStage

	// READ-ONLY; The deployment pipeline ID.
	ID *string

	// The deployment pipeline description.
	Description *string
}

// DeploymentPipelineNewWorkspaceConfiguration - The configuration details for creating a new workspace. Required when deploying
// to a stage that has no assigned workspaces.
type DeploymentPipelineNewWorkspaceConfiguration struct {
	// REQUIRED; The name of the new workspace.
	// The display name cannot contain more than 256 characters.
	Name *string

	// The ID of the capacity that the new workspace will be assigned to. If unspecified and the API caller has permissions for
	// the source stage workspace capacity, then that capacity will be used.
	// Otherwise, Fabric will select a capacity that the API caller has permissions for.
	CapacityID *string
}

// DeploymentPipelineOperation - A Fabric deployment pipeline operation.
type DeploymentPipelineOperation struct {
	// A note representing a description of the operation.
	Note *DeploymentPipelineOperationNote

	// The principal that performed the deployment pipeline operation.
	PerformedBy *Principal

	// READ-ONLY; The operation ID.
	ID *string

	// READ-ONLY; The date and time that the operation was last updated.
	LastUpdatedTime *time.Time

	// READ-ONLY; The deployment pipeline operation status. Additional statuses may be added over time.
	Status *DeploymentPipelineOperationStatus

	// READ-ONLY; The operation type. Additional types may be added over time.
	Type *DeploymentPipelineOperationType

	// READ-ONLY; The date and time that the operation ended.
	ExecutionEndTime *time.Time

	// READ-ONLY; The date and time that the operation started.
	ExecutionStartTime *time.Time

	// READ-ONLY; The number of deployed items in the source stage, that are new, identical or different to items in the target
	// stage, before deployment.
	PreDeploymentDiffInformation *PreDeploymentDiffInformation

	// READ-ONLY; The ID of a source deployment pipeline stage.
	SourceStageID *string

	// READ-ONLY; The ID of a target deployment pipeline stage.
	TargetStageID *string
}

// DeploymentPipelineOperationExtendedInfo - A Fabric deployment pipeline operation.
type DeploymentPipelineOperationExtendedInfo struct {
	// A note representing a description of the operation.
	Note *DeploymentPipelineOperationNote

	// The principal that performed the deployment pipeline operation.
	PerformedBy *Principal

	// READ-ONLY; The operation ID.
	ID *string

	// READ-ONLY; The date and time that the operation was last updated.
	LastUpdatedTime *time.Time

	// READ-ONLY; The deployment pipeline operation status. Additional statuses may be added over time.
	Status *DeploymentPipelineOperationStatus

	// READ-ONLY; The operation type. Additional types may be added over time.
	Type *DeploymentPipelineOperationType

	// READ-ONLY; The date and time that the operation ended.
	ExecutionEndTime *time.Time

	// READ-ONLY; The deployment execution plan.
	ExecutionPlan *DeploymentExecutionPlan

	// READ-ONLY; The date and time that the operation started.
	ExecutionStartTime *time.Time

	// READ-ONLY; The number of deployed items in the source stage, that are new, identical or different to items in the target
	// stage, before deployment.
	PreDeploymentDiffInformation *PreDeploymentDiffInformation

	// READ-ONLY; The ID of a source deployment pipeline stage.
	SourceStageID *string

	// READ-ONLY; The ID of a target deployment pipeline stage.
	TargetStageID *string
}

// DeploymentPipelineOperationNote - A note describing the deployment.
type DeploymentPipelineOperationNote struct {
	// REQUIRED; Text describing the deployment.
	Content *string

	// Indicates whether the note content is truncated. True - the note content is truncated, False - the note content isn't truncated.
	// Default value is false.
	IsTruncated *bool
}

// DeploymentPipelineOperations - A collection of Fabric deployment pipeline operations.
type DeploymentPipelineOperations struct {
	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string

	// The collection of deployment pipeline operations.
	Value []DeploymentPipelineOperation
}

// DeploymentPipelineRoleAssignment - A Fabric principal role assignment for a deployment pipeline.
type DeploymentPipelineRoleAssignment struct {
	// READ-ONLY; The deployment pipeline role assignment ID.
	ID *string

	// READ-ONLY; The principal.
	Principal *Principal

	// READ-ONLY; The deployment pipeline role of the principal.
	Role *DeploymentPipelineRole
}

type DeploymentPipelineRoleAssignments struct {
	// REQUIRED
	Value []DeploymentPipelineRoleAssignment

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// DeploymentPipelineStage - A Fabric deployment pipeline stage.
type DeploymentPipelineStage struct {
	// REQUIRED; The deployment pipeline stage display name.
	DisplayName *string

	// Indicates whether the deployment pipeline stage is public. True - the stage is public, False - the stage isn't public.
	IsPublic *bool

	// The assigned workspace ID. Only applicable when there's an assigned workspace.
	WorkspaceID *string

	// The assigned workspace name. Only applicable when there's an assigned workspace and the user has access to the workspace.
	WorkspaceName *string

	// READ-ONLY; The deployment pipeline stage ID.
	ID *string

	// READ-ONLY; The stage order, starting from zero.
	Order *int32

	// The deployment pipeline stage description.
	Description *string
}

// DeploymentPipelineStageItem - Fabric item metadata for a deployment pipeline stage.
type DeploymentPipelineStageItem struct {
	// REQUIRED; The Fabric item display name.
	ItemDisplayName *string

	// REQUIRED; The Fabric item ID.
	ItemID *string

	// REQUIRED; The Fabric item type.
	ItemType *ItemType

	// The ID of the Fabric item from the workspace assigned to the source stage, which will update the current Fabric item upon
	// deployment. Applicable only when the user has at least contributor access to
	// the source stage workspace.
	SourceItemID *string

	// The ID of the Fabric item from the workspace of the target stage, which will be updated by the current Fabric item upon
	// deployment. Applicable only when the user has at least contributor access to the
	// target stage workspace.
	TargetItemID *string

	// READ-ONLY; The last deployment date and time of the Fabric item.
	LastDeploymentTime *time.Time
}

// DeploymentPipelineStageItems - Supported items from a workspace that's assigned to a deployment pipeline stage.
type DeploymentPipelineStageItems struct {
	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string

	// The items collection.
	Value []DeploymentPipelineStageItem
}

// DeploymentPipelineStageRequest - A Fabric deployment pipeline stage.
type DeploymentPipelineStageRequest struct {
	// REQUIRED; The deployment pipeline stage display name.
	// The display name cannot contain more than 256 characters.
	DisplayName *string

	// The deployment pipeline stage description.
	// The description cannot contain more than 1024 characters.
	Description *string

	// Whether the deployment pipeline stage is public.
	IsPublic *bool
}

// DeploymentPipelineStages - A collection of Fabric deployment pipeline stages.
type DeploymentPipelineStages struct {
	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string

	// The collection of deployment pipeline stages
	Value []DeploymentPipelineStage
}

// DeploymentPipelines - A collection of Fabric deployment pipelines.
type DeploymentPipelines struct {
	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string

	// A collection of deployment pipelines.
	Value []DeploymentPipeline
}

// DeploymentSourceAndTarget - Source and target items.
type DeploymentSourceAndTarget struct {
	// READ-ONLY; The ID of the Fabric item that's deployed from the source stage.
	SourceItemID *string

	// READ-ONLY; The type of the Fabric item that will be overwritten in the target stage. Only applies when overwriting a Fabric
	// item.
	ItemType *ItemType

	// READ-ONLY; The display name of the Fabric item that's deployed from the source stage.
	SourceItemDisplayName *string

	// READ-ONLY; The name of the Fabric item that will be overwritten in the target stage. Only applies when overwriting a Fabric
	// item.
	TargetItemDisplayName *string

	// READ-ONLY; The ID of the Fabric item that will be overwritten in the target stage. Only applies when overwriting a Fabric
	// item.
	TargetItemID *string
}

// Domain - Represents a domain.
type Domain struct {
	// REQUIRED; The description of the domain.
	Description *string

	// REQUIRED; The name of the domain.
	DisplayName *string

	// REQUIRED; The domain ID.
	ID *string

	// The parent domain ID, for a subdomain.
	ParentDomainID *string
}

// DomainTagScope - Represents domain tag scope.
type DomainTagScope struct {
	// REQUIRED; Domain object ID
	DomainID *string

	// REQUIRED; Denotes tag scope. Additional tag scopes may be added over time.
	Type *TagScopeType
}

// GetTagScope implements the TagScopeClassification interface for type DomainTagScope.
func (d *DomainTagScope) GetTagScope() *TagScope {
	return &TagScope{
		Type: d.Type,
	}
}

// Domains - A response wrapper for a list of domains.
type Domains struct {
	// REQUIRED; An array of domains
	Value []Domain

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// ErrorRelatedResource - The error related resource details object.
type ErrorRelatedResource struct {
	// READ-ONLY; The resource ID that's involved in the error.
	ResourceID *string

	// READ-ONLY; The type of the resource that's involved in the error.
	ResourceType *string
}

// ErrorResponse - The error response.
type ErrorResponse struct {
	// READ-ONLY; A specific identifier that provides information about an error condition, allowing for standardized communication
	// between our service and its users.
	ErrorCode *string

	// READ-ONLY; A human readable representation of the error.
	Message *string

	// READ-ONLY; List of additional error details.
	MoreDetails []ErrorResponseDetails

	// READ-ONLY; The error related resource details.
	RelatedResource *ErrorRelatedResource

	// READ-ONLY; ID of the request associated with the error.
	RequestID *string
}

// ErrorResponseDetails - The error response details.
type ErrorResponseDetails struct {
	// READ-ONLY; A specific identifier that provides information about an error condition, allowing for standardized communication
	// between our service and its users.
	ErrorCode *string

	// READ-ONLY; A human readable representation of the error.
	Message *string

	// READ-ONLY; The error related resource details.
	RelatedResource *ErrorRelatedResource
}

// ExternalDataShare - An external data share object.
type ExternalDataShare struct {
	// READ-ONLY; The principal that created the external data share.
	CreatorPrincipal *Principal

	// READ-ONLY; The external data share ID.
	ID *string

	// READ-ONLY; The item ID.
	ItemID *string

	// READ-ONLY; The path or list of paths that are externally shared.
	Paths []string

	// READ-ONLY; The recipient who was invited to accept the external data share.
	Recipient *ExternalDataShareRecipient

	// READ-ONLY; The status of the external data share.
	Status *ExternalDataShareStatus

	// READ-ONLY; The workspace ID.
	WorkspaceID *string

	// READ-ONLY; The tenant ID in which the external data share was accepted.
	AcceptedByTenantID *string

	// READ-ONLY; The expiration date and time (UTC) of the invitation to the external data share.
	ExpirationTimeUTC *time.Time

	// READ-ONLY; The URL for accepting the invitation to the external data share.
	InvitationURL *string
}

// ExternalDataShareAcceptRequestPayload - Payload for the Accept External Data Share invitation request
type ExternalDataShareAcceptRequestPayload struct {
	// REQUIRED; The external data share acceptance type. Additional types may be added over time.
	PayloadType *ExternalDataShareAcceptRequestPayloadType
}

// GetExternalDataShareAcceptRequestPayload implements the ExternalDataShareAcceptRequestPayloadClassification interface for
// type ExternalDataShareAcceptRequestPayload.
func (e *ExternalDataShareAcceptRequestPayload) GetExternalDataShareAcceptRequestPayload() *ExternalDataShareAcceptRequestPayload {
	return e
}

// ExternalDataShareInvitationDetails - External data share invitation details.
type ExternalDataShareInvitationDetails struct {
	// READ-ONLY; Information about the paths included in the external data share.
	PathsDetails []ExternalDataSharePathDetails

	// READ-ONLY; Information about the external data share's provider tenant.
	ProviderTenantDetails *ExternalDataShareProviderTenantDetails
}

// ExternalDataSharePathDetails - Details of a path that was shared as part of external data sharing.
type ExternalDataSharePathDetails struct {
	// READ-ONLY; The name of the content that was shared.
	Name *string

	// READ-ONLY; Unique identifier of the path.
	PathID *string

	// READ-ONLY; The type of the external data share.
	Type *ExternalDataSharePathType
}

// ExternalDataShareProviderTenantDetails - External data share's provider tenant details.
type ExternalDataShareProviderTenantDetails struct {
	// READ-ONLY; The provider tenant display name.
	DisplayName *string

	// READ-ONLY; The provider tenant ID.
	TenantID *string

	// READ-ONLY; The provider tenant verified domain name (in Entra ID).
	VerifiedDomainName *string
}

// ExternalDataShareRecipient - A representation of the the external data share recipient.
type ExternalDataShareRecipient struct {
	// REQUIRED; The recipient's email address.
	UserPrincipalName *string

	// The recipient's tenant ID.
	TenantID *string
}

// ExternalDataShareShortcutInfo - Information about a shortcut that was created by accepting an external data share invitation.
type ExternalDataShareShortcutInfo struct {
	// READ-ONLY; The item ID.
	ItemID *string

	// READ-ONLY; The name of the shortcut.
	Name *string

	// READ-ONLY; The path in which the shortcut was created.
	Path *string

	// READ-ONLY; The workspace ID.
	WorkspaceID *string
}

// ExternalDataShareTarget - An object containing the properties of the target external data share.
type ExternalDataShareTarget struct {
	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource.
	ConnectionID *string
}

// ExternalDataShares - A list of external data shares with a continuation token.
type ExternalDataShares struct {
	// READ-ONLY; A list of external data shares.
	Value []ExternalDataShare

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// FabricItemMember - Fabric item member.
type FabricItemMember struct {
	// REQUIRED; A list specifying the access permissions for Fabric user to have to be automatically included in the role members.
	// Additional itemAccess types may be added over time.
	ItemAccess []ItemAccess

	// REQUIRED; The path to Fabric item having the specified item access.
	SourcePath *string
}

// Folder - A folder object.
type Folder struct {
	// READ-ONLY; The folder display name.
	DisplayName *string

	// READ-ONLY; The folder ID.
	ID *string

	// READ-ONLY; The parent folder ID. If the parent folder is a workspace, parentFolderId is either not specified or null.
	ParentFolderID *string

	// READ-ONLY; The workspace ID.
	WorkspaceID *string
}

type Folders struct {
	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string

	// READ-ONLY; A list of folders.
	Value []Folder
}

// Gateway - The base object of gateway.
type Gateway struct {
	// REQUIRED; The object ID of the gateway.
	ID *string

	// REQUIRED; The type of the gateway.
	Type *GatewayType
}

// GetGateway implements the GatewayClassification interface for type Gateway.
func (g *Gateway) GetGateway() *Gateway { return g }

// GatewayRoleAssignment - The gateway role assignment for a principal.
type GatewayRoleAssignment struct {
	// REQUIRED; The object ID of the gateway role assignment.
	ID *string

	// REQUIRED; The principal.
	Principal *Principal

	// REQUIRED; The gateway role of the principal.
	Role *GatewayRole
}

type GatewayRoleAssignments struct {
	// REQUIRED; A list of gateway role assignments.
	Value []GatewayRoleAssignment

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// GitConnectRequest - Contains the Git connect request data.
type GitConnectRequest struct {
	// REQUIRED; The Git provider details.
	GitProviderDetails GitProviderDetailsClassification

	// User-specific Git credentials for authentication to the GitProvider. These credentials are not shared with other workspace
	// contributors. For GitHub, this property is required. For AzureDevOps, this
	// property is optional. If not set, the default is AutomaticGitCredentials.
	MyGitCredentials GitCredentialsClassification
}

// GitConnection - Contains the Git connection details.
type GitConnection struct {
	// Git connection state. Additional connection state types may be added over time.
	GitConnectionState *GitConnectionState

	// The Git provider details.
	GitProviderDetails GitProviderDetailsClassification

	// Contains the sync details.
	GitSyncDetails *GitSyncDetails
}

// GitCredentials - The Git credentials.
type GitCredentials struct {
	// REQUIRED; The Git credentials source.
	Source *GitCredentialsSource
}

// GetGitCredentials implements the GitCredentialsClassification interface for type GitCredentials.
func (g *GitCredentials) GetGitCredentials() *GitCredentials { return g }

// GitCredentialsConfigurationResponse - The Git credentials configuration.
type GitCredentialsConfigurationResponse struct {
	// REQUIRED; The Git credentials source.
	Source *GitCredentialsSource
}

// GetGitCredentialsConfigurationResponse implements the GitCredentialsConfigurationResponseClassification interface for type
// GitCredentialsConfigurationResponse.
func (g *GitCredentialsConfigurationResponse) GetGitCredentialsConfigurationResponse() *GitCredentialsConfigurationResponse {
	return g
}

// GitHubDetails - GitHub provider details.
type GitHubDetails struct {
	// REQUIRED; The branch name. Maximum length is 250 characters.
	BranchName *string

	// REQUIRED; The relative path to the directory. Maximum length is 256 characters.
	DirectoryName *string

	// REQUIRED; A Git provider type. Additional provider types may be added over time.
	GitProviderType *GitProviderType

	// REQUIRED; The owner name. Maximum length is 100 characters.
	OwnerName *string

	// REQUIRED; The repository name. Maximum length is 128 characters.
	RepositoryName *string
}

// GetGitProviderDetails implements the GitProviderDetailsClassification interface for type GitHubDetails.
func (g *GitHubDetails) GetGitProviderDetails() *GitProviderDetails {
	return &GitProviderDetails{
		BranchName:      g.BranchName,
		DirectoryName:   g.DirectoryName,
		GitProviderType: g.GitProviderType,
		RepositoryName:  g.RepositoryName,
	}
}

// GitProviderDetails - The Git provider details.
type GitProviderDetails struct {
	// REQUIRED; The branch name. Maximum length is 250 characters.
	BranchName *string

	// REQUIRED; The relative path to the directory. Maximum length is 256 characters.
	DirectoryName *string

	// REQUIRED; A Git provider type. Additional provider types may be added over time.
	GitProviderType *GitProviderType

	// REQUIRED; The repository name. Maximum length is 128 characters.
	RepositoryName *string
}

// GetGitProviderDetails implements the GitProviderDetailsClassification interface for type GitProviderDetails.
func (g *GitProviderDetails) GetGitProviderDetails() *GitProviderDetails { return g }

// GitStatusResponse - Contains the status response.
type GitStatusResponse struct {
	// REQUIRED
	Changes []ItemChange

	// READ-ONLY; Remote full SHA commit hash.
	RemoteCommitHash *string

	// READ-ONLY; Full SHA hash that the workspace is synced to.
	WorkspaceHead *string
}

// GitSyncDetails - Contains the sync details.
type GitSyncDetails struct {
	// READ-ONLY; The full Secure Hash Algorithm 1 (SHA-1) of the synced commit ID.
	Head *string

	// READ-ONLY; The date and time of last sync state.
	LastSyncTime *time.Time
}

// GoogleCloudStorage - An object containing the properties of the target Google Cloud Storage data source.
type GoogleCloudStorage struct {
	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource.
	ConnectionID *string

	// REQUIRED; HTTP URL that points to the target bucket in GCS. The URL should be in the format https://[bucket-name].storage.googleapis.com,
	// where [bucket-name] is the name of the bucket you want to point to. For
	// example: https://my-gcs-bucket.storage.googleapis.com
	Location *string

	// REQUIRED; Specifies a target folder or subfolder within the GCS bucket. For example: /folder
	Subpath *string
}

// InboundRules - The policy for all inbound communications to a workspace.
type InboundRules struct {
	// The policy for inbound communications to a workspace from public networks.
	PublicAccessRules *NetworkRules
}

// InitializeGitConnectionRequest - Contains the initialize Git connection request data.
type InitializeGitConnectionRequest struct {
	// The strategy required for an initialization process when content exists on both the remote side and the workspace side.
	// Additional strategies may be added over time.
	InitializationStrategy *InitializationStrategy
}

// InitializeGitConnectionResponse - Contains the initialize Git connection response data.
type InitializeGitConnectionResponse struct {
	// READ-ONLY; Remote full SHA commit hash.
	RemoteCommitHash *string

	// READ-ONLY; Required action after the initialization process has finished. Additional actions may be added over time.
	RequiredAction *RequiredAction

	// READ-ONLY; Full SHA hash that the workspace is synced to.
	WorkspaceHead *string
}

// Item - An item object.
type Item struct {
	// REQUIRED; The item type.
	Type *ItemType

	// The item description.
	Description *string

	// The item display name.
	DisplayName *string

	// READ-ONLY; The folder ID.
	FolderID *string

	// READ-ONLY; The item ID.
	ID *string

	// READ-ONLY; List of applied tags.
	Tags []ItemTag

	// READ-ONLY; The workspace ID.
	WorkspaceID *string
}

// ItemChange - Contains the item's change information.
type ItemChange struct {
	// READ-ONLY; When there are changes on both the workspace side and the remote Git side.
	ConflictType *ConflictType

	// READ-ONLY; The item metadata.
	ItemMetadata *ItemMetadata

	// READ-ONLY; Change on the remote Git side.
	RemoteChange *ChangeType

	// READ-ONLY; Change on the workspace side.
	WorkspaceChange *ChangeType
}

type ItemConnection struct {
	// REQUIRED; The connection details of the connection.
	ConnectionDetails *ListConnectionDetails

	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// The display name of the connection. Maximum length is 200 characters.
	DisplayName *string

	// The gateway object ID of the connection.
	GatewayID *string

	// The object ID of the connection.
	ID *string
}

type ItemConnections struct {
	// REQUIRED; A list of item connections
	Value []ItemConnection

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// ItemDefinition - An item definition object.
type ItemDefinition struct {
	// REQUIRED; A list of definition parts.
	Parts []ItemDefinitionPart

	// The format of the item definition.
	Format *string
}

// ItemDefinitionPart - An item definition part object.
type ItemDefinitionPart struct {
	// REQUIRED; The item part path.
	Path *string

	// REQUIRED; The item part payload.
	Payload *string

	// REQUIRED; The payload type.
	PayloadType *PayloadType
}

// ItemDefinitionResponse - Item public definition response.
type ItemDefinitionResponse struct {
	// READ-ONLY; An item definition object.
	Definition *ItemDefinition
}

// ItemDeploymentRequest - A request to deploy a Fabric item (such as a report or a dashboard).
type ItemDeploymentRequest struct {
	// REQUIRED; The Fabric item type.
	ItemType *ItemType

	// REQUIRED; The ID of the Fabric item to be deployed.
	SourceItemID *string
}

// ItemIdentifier - Contains the item identifier. At least one of the properties must be defined.
type ItemIdentifier struct {
	// The logical ID of the item. When the logical ID isn't available because the item is not yet added to the workspace, you
	// can use the object ID.
	LogicalID *string

	// The object ID of the item. When the object ID isn't available because the item was deleted from the workspace, you can
	// use the logical ID.
	ObjectID *string
}

// ItemJobInstance - An object representing item job instance
type ItemJobInstance struct {
	// Job end time in UTC
	EndTimeUTC *string

	// Job instance Id
	ID *string

	// The item job invoke type. Additional invokeTypes may be added over time.
	InvokeType *InvokeType

	// Item Id
	ItemID *string

	// Job type
	JobType *string

	// Root activity id to trace requests across services
	RootActivityID *string

	// Job start time in UTC
	StartTimeUTC *string

	// The item job status. Additional statuses may be added over time.
	Status *Status

	// READ-ONLY; Error response when job is failed
	FailureReason *ErrorResponse
}

type ItemJobInstances struct {
	// REQUIRED; A list of item job instances.
	Value []ItemJobInstance

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// ItemMetadata - Contains the item metadata.
type ItemMetadata struct {
	// READ-ONLY; The display name of the item. Prefers the workspace item's display name if it exists, otherwise displayName
	// uses the remote item's display name.
	DisplayName *string

	// READ-ONLY; The item identifier.
	ItemIdentifier *ItemIdentifier

	// READ-ONLY; The item type.
	ItemType *ItemType
}

// ItemSchedule - Item schedule.
type ItemSchedule struct {
	// REQUIRED; Whether this schedule is enabled. True - Enabled, False - Disabled.
	Enabled *bool

	// REQUIRED; The schedule ID.
	ID *string

	// The actual data contains the time/weekdays of this schedule.
	Configuration ScheduleConfigClassification

	// The created time stamp of this schedule in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	CreatedDateTime *time.Time

	// The user identity that created this schedule or last modified.
	Owner *Principal
}

// ItemSchedules - list of schedules for this item.
type ItemSchedules struct {
	// REQUIRED; list of schedules for this item.
	Value []ItemSchedule

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// ItemTag - Represents a tag applied on an item.
type ItemTag struct {
	// REQUIRED; The name of the tag.
	DisplayName *string

	// REQUIRED; The tag ID.
	ID *string
}

type Items struct {
	// REQUIRED; A list of items.
	Value []Item

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// KeyCredentials - Credentials for Key CredentialType.
type KeyCredentials struct {
	// REQUIRED; The credential type of the connection.
	CredentialType *CredentialType

	// REQUIRED; The key.
	Key *string
}

// GetCredentials implements the CredentialsClassification interface for type KeyCredentials.
func (k *KeyCredentials) GetCredentials() *Credentials {
	return &Credentials{
		CredentialType: k.CredentialType,
	}
}

// ListConnectionDetails - The connection details output for list operations.
type ListConnectionDetails struct {
	// REQUIRED; The path of the connection.
	Path *string

	// REQUIRED; The type of the connection.
	Type *string
}

type ListConnectionsResponse struct {
	// REQUIRED; A list of connections returned.
	Value []ConnectionClassification

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// ListCredentialDetails - The credential details returned when fetching a connection.
type ListCredentialDetails struct {
	// The connection encryption setting that is used during the test connection.
	ConnectionEncryption *ConnectionEncryption

	// The credential type of the connection.
	CredentialType *CredentialType

	// The single sign-on type of the connection.
	SingleSignOnType *SingleSignOnType

	// Whether the connection should skip the test connection during creation and update. True - Skip the test connection, False
	// - Do not skip the test connection.
	SkipTestConnection *bool
}

type ListGatewayMembersResponse struct {
	// REQUIRED; A list of gateway cluster members returned.
	Value []OnPremisesGatewayMember

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

type ListGatewaysResponse struct {
	// REQUIRED; A list of gateways returned.
	Value []GatewayClassification

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

type ListSupportedConnectionTypesResponse struct {
	// REQUIRED; A list of supported connection types returned.
	Value []ConnectionCreationMetadata

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// ManagedPrivateEndpoint - Managed private endpoint.
type ManagedPrivateEndpoint struct {
	// Endpoint connection state of provisioned endpoints.
	ConnectionState *PrivateEndpointConnectionState

	// Managed private endpoint Id.
	ID *string

	// The private endpoint name.
	Name *string

	// Provisioning state of endpoint.
	ProvisioningState *PrivateEndpointProvisioningState

	// Resource Id of data source for which private endpoint is created
	TargetPrivateLinkResourceID *string

	// Sub-resource pointing to Private-link resoure [/azure/private-link/private-endpoint-overview#private-link-resource].
	TargetSubresourceType *string
}

type ManagedPrivateEndpoints struct {
	// REQUIRED; A list of managed private endpoints.
	Value []ManagedPrivateEndpoint

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// Members - The members object which contains the members of the role as arrays of different member types.
type Members struct {
	// A list of members who have a certain permission set in Microsoft Fabric. All members with that permission set are added
	// as members of this Data Access Role.
	FabricItemMembers []FabricItemMember

	// The list of Microsoft Entra ID members.
	MicrosoftEntraMembers []MicrosoftEntraMember
}

// MicrosoftEntraMember - Microsoft Entra ID member assigned to the role.
type MicrosoftEntraMember struct {
	// REQUIRED; The object id.
	ObjectID *string

	// REQUIRED; The tenant id.
	TenantID *string

	// The type of Microsoft Entra ID object. Additional objectType types may be added over time.
	ObjectType *ObjectType
}

// MonthlyOccurrence - Specifies the day for triggering jobs
type MonthlyOccurrence struct {
	// REQUIRED; An enumerator that lists the day for triggering jobs. Additional types may be added over time.
	OccurrenceType *OccurrenceType
}

// GetMonthlyOccurrence implements the MonthlyOccurrenceClassification interface for type MonthlyOccurrence.
func (m *MonthlyOccurrence) GetMonthlyOccurrence() *MonthlyOccurrence { return m }

type MonthlyScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; A date for triggering the job.
	Occurrence MonthlyOccurrenceClassification

	// REQUIRED; Specifies the monthly job repeat interval. For example, when set to 1 the job is triggered every month.
	Recurrence *int32

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; A list of time slots in the hh:mm format. The maximum time slots you can use is 100.
	Times []string

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type MonthlyScheduleConfig.
func (m *MonthlyScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     m.EndDateTime,
		LocalTimeZoneID: m.LocalTimeZoneID,
		StartDateTime:   m.StartDateTime,
		Type:            m.Type,
	}
}

// MoveFolderRequest - Move folder request.
type MoveFolderRequest struct {
	// The destination folder ID. If not provided, the workspace is used as the destination folder.
	TargetFolderID *string
}

// MoveItemRequest - Move item request.
type MoveItemRequest struct {
	// The destination folder ID. If not provided, the workspace is used as the destination folder.
	TargetFolderID *string
}

type MovedItems struct {
	// REQUIRED; A list of items.
	Value []Item
}

// NetworkRules - The policy defining access to/from a workspace to/from public networks.
type NetworkRules struct {
	// Default policy for workspace access from public networks.
	DefaultAction *NetworkAccessRule
}

// NoneGitCredentialsResponse - Not configured Git credentials.
type NoneGitCredentialsResponse struct {
	// REQUIRED; The Git credentials source.
	Source *GitCredentialsSource
}

// GetGitCredentialsConfigurationResponse implements the GitCredentialsConfigurationResponseClassification interface for type
// NoneGitCredentialsResponse.
func (n *NoneGitCredentialsResponse) GetGitCredentialsConfigurationResponse() *GitCredentialsConfigurationResponse {
	return &GitCredentialsConfigurationResponse{
		Source: n.Source,
	}
}

// OnPremisesCredentialEntry - A gateway ID and its encrypted serialized credentials.
type OnPremisesCredentialEntry struct {
	// REQUIRED; The encrypted serialized .json of the list of name value pairs. Name is a credential name and value is a credential
	// value. Encryption is performed using the Rivest-Shamir-Adleman (RSA) encryption
	// algorithm with the on-premises gateway member's public key.
	EncryptedCredentials *string

	// REQUIRED; The object ID of the gateway.
	GatewayID *string
}

type OnPremisesGateway struct {
	// REQUIRED; Whether to allow cloud connections to refresh through this on-premises gateway. True - Allow, False - Do not
	// allow.
	AllowCloudConnectionRefresh *bool

	// REQUIRED; Whether to allow custom connectors to be used with this on-premises gateway. True - Allow, False - Do not allow.
	AllowCustomConnectors *bool

	// REQUIRED; The display name of the on-premises gateway.
	DisplayName *string

	// REQUIRED; The object ID of the gateway.
	ID *string

	// REQUIRED; The load balancing setting of the on-premises gateway.
	LoadBalancingSetting *LoadBalancingSetting

	// REQUIRED; The number of gateway members in the on-premises gateway.
	NumberOfMemberGateways *int32

	// REQUIRED; The public key of the primary gateway member. Used to encrypt the credentials for creating and updating connections.
	PublicKey *PublicKey

	// REQUIRED; The type of the gateway.
	Type *GatewayType

	// REQUIRED; The version of the installed primary gateway member.
	Version *string
}

// GetGateway implements the GatewayClassification interface for type OnPremisesGateway.
func (o *OnPremisesGateway) GetGateway() *Gateway {
	return &Gateway{
		ID:   o.ID,
		Type: o.Type,
	}
}

// OnPremisesGatewayConnection - A connection that connects through on-premises data gateway.
type OnPremisesGatewayConnection struct {
	// REQUIRED; The connection details of the connection.
	ConnectionDetails *ListConnectionDetails

	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// REQUIRED; The object ID of the connection.
	ID *string

	// The credential details of the connection.
	CredentialDetails *ListCredentialDetails

	// The display name of the connection.
	DisplayName *string

	// The gateway object ID of the connection.
	GatewayID *string

	// The privacy level of the connection.
	PrivacyLevel *PrivacyLevel
}

// GetConnection implements the ConnectionClassification interface for type OnPremisesGatewayConnection.
func (o *OnPremisesGatewayConnection) GetConnection() *Connection {
	return &Connection{
		ConnectionDetails: o.ConnectionDetails,
		ConnectivityType:  o.ConnectivityType,
		CredentialDetails: o.CredentialDetails,
		DisplayName:       o.DisplayName,
		ID:                o.ID,
		PrivacyLevel:      o.PrivacyLevel,
	}
}

// OnPremisesGatewayCredentials - Credentials for authenticating through an on-premises gateway.
type OnPremisesGatewayCredentials struct {
	// REQUIRED; The credential type of the connection.
	CredentialType *CredentialType

	// REQUIRED; The credential payload to send to the on-premises gateway.
	Values []OnPremisesCredentialEntry
}

// OnPremisesGatewayMember - The gateway member information.
type OnPremisesGatewayMember struct {
	// REQUIRED; The display name of the gateway member.
	DisplayName *string

	// REQUIRED; Whether the gateway member is enabled. True - Enabled, False - Not enabled.
	Enabled *bool

	// REQUIRED; The object ID of the gateway member.
	ID *string

	// REQUIRED; The public key of the gateway member. Used to encrypt the credentials for creating and updating connections.
	PublicKey *PublicKey

	// REQUIRED; The version of the installed gateway member.
	Version *string
}

type OnPremisesGatewayPersonal struct {
	// REQUIRED; The object ID of the gateway.
	ID *string

	// REQUIRED; The public key of the gateway. Used to encrypt the credentials for creating and updating connections.
	PublicKey *PublicKey

	// REQUIRED; The type of the gateway.
	Type *GatewayType

	// REQUIRED; The version of the gateway.
	Version *string
}

// GetGateway implements the GatewayClassification interface for type OnPremisesGatewayPersonal.
func (o *OnPremisesGatewayPersonal) GetGateway() *Gateway {
	return &Gateway{
		ID:   o.ID,
		Type: o.Type,
	}
}

// OnPremisesGatewayPersonalConnection - A connection that connects through a personal on-premises data gateway.
type OnPremisesGatewayPersonalConnection struct {
	// REQUIRED; The connection details of the connection.
	ConnectionDetails *ListConnectionDetails

	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// REQUIRED; The object ID of the connection.
	ID *string

	// The credential details of the connection.
	CredentialDetails *ListCredentialDetails

	// The display name of the connection.
	DisplayName *string

	// The gateway object ID of the connection.
	GatewayID *string

	// The privacy level of the connection.
	PrivacyLevel *PrivacyLevel
}

// GetConnection implements the ConnectionClassification interface for type OnPremisesGatewayPersonalConnection.
func (o *OnPremisesGatewayPersonalConnection) GetConnection() *Connection {
	return &Connection{
		ConnectionDetails: o.ConnectionDetails,
		ConnectivityType:  o.ConnectivityType,
		CredentialDetails: o.CredentialDetails,
		DisplayName:       o.DisplayName,
		ID:                o.ID,
		PrivacyLevel:      o.PrivacyLevel,
	}
}

// OnPremisesGatewayPersonalCredentials - Credentials for authenticating through an on-premises gateway (personal mode).
type OnPremisesGatewayPersonalCredentials struct {
	// REQUIRED; The credential type of the connection.
	CredentialType *CredentialType

	// REQUIRED; The encrypted serialized .json of the list of name value pairs. Name is a credential name and value is a credential
	// value. Encryption is performed using the Rivest-Shamir-Adleman (RSA) encryption
	// algorithm with the on-premises gateway's public key.
	EncryptedCredentials *string
}

// OneLake - An object containing the properties of the target OneLake data source.
type OneLake struct {
	// REQUIRED; The ID of the target in OneLake. The target can be an item of Lakehouse, KQLDatabase, or Warehouse.
	ItemID *string

	// REQUIRED; A string representing the full path to the target folder within the Item. This path should be relative to the
	// root of the OneLake directory structure. For example:
	// "Tables/myTablesFolder/someTableSubFolder".
	Path *string

	// REQUIRED; The ID of the target workspace.
	WorkspaceID *string

	// A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier used to establish
	// a connection between the shortcut and the target datasource. To find
	// this connection ID, first create a cloud connection [/fabric/data-factory/data-source-management#add-a-data-source] to
	// be used by the shortcut when connecting to the Amazon S3 data location. Open the
	// cloud connection's Settings view and copy the connection ID; this is a GUID.
	ConnectionID *string
}

// OneLakeEndpoints - The OneLake API endpoints associated with this workspace.
type OneLakeEndpoints struct {
	// READ-ONLY; The OneLake API endpoint available for Blob API operations. By default, this is a region specific endpoint.
	// If the user enables preferWorkspaceSpecificEndpoints or the workspace has public access
	// disabled, the workspace-specific endpoint is provided to allow for access over private links.
	BlobEndpoint *string

	// READ-ONLY; The OneLake API endpoint available for Distributed File System (DFS) or ADLSgen2 filesystem API operations.
	// By default, this is a region specific endpoint. If the user enables
	// preferWorkspaceSpecificEndpoints or the workspace has public access disabled, the workspace-specific endpoint is provided
	// to allow for access over private links.
	DfsEndpoint *string
}

// OperationState - An object describing the details and current state of a long running operation
type OperationState struct {
	// REQUIRED; The start date and time of the operation
	CreatedTimeUTC *time.Time

	// REQUIRED; The date and time of the last change to the operation
	LastUpdatedTimeUTC *time.Time

	// REQUIRED; The current status of the operation. Additional operation statuses may be added over time.
	Status *LongRunningOperationStatus

	// Operation progress as a percentage
	PercentComplete *int32

	// READ-ONLY; The error details in case the operation is in failed state
	Error *ErrorResponse
}

// OrdinalWeekday - Specifies the ordinal week and weekday to trigger the job. The value must be a valid date. Otherwise,
// it will be skipped.
type OrdinalWeekday struct {
	// REQUIRED; An enumerator that lists the day for triggering jobs. Additional types may be added over time.
	OccurrenceType *OccurrenceType

	// REQUIRED; The week of the month.
	WeekIndex *WeekIndex

	// REQUIRED; Week day for triggering jobs.
	Weekday *DayOfWeek
}

// GetMonthlyOccurrence implements the MonthlyOccurrenceClassification interface for type OrdinalWeekday.
func (o *OrdinalWeekday) GetMonthlyOccurrence() *MonthlyOccurrence {
	return &MonthlyOccurrence{
		OccurrenceType: o.OccurrenceType,
	}
}

// OutboundRules - The policy for all outbound communications from a workspace.
type OutboundRules struct {
	// The policy for outbound communications to public networks from a workspace.
	PublicAccessRules *NetworkRules
}

// PermissionScope - Defines a set of attributes (properties) that determine the scope and level of access to a resource.
// When attributeName property is set to Path, the attributeValueIncludedIn property must specify the
// location of the resource being accessed, such as "Tables/Table1". When the attributeName property is set to Action, the
// attributeValueIncludedIn property must specify the type of access being granted,
// such as Read.
type PermissionScope struct {
	// REQUIRED; Specifies the name of the attribute that is being evaluated for access permissions. AttributeName can be Path
	// or Action. Additional attributeName types may be added over time.
	AttributeName *AttributeName

	// REQUIRED; Specifies a list of values for the attributeName to define the scope and the level of access to a resource. When
	// attributeName is Path, attributeValueIncludedIn must specify the location of the
	// resource being accessed, such as "Tables/Table1". When attributeName is Action, the attributeValueIncludedIn must specify
	// the type of access being granted, such as Read.
	AttributeValueIncludedIn []string
}

// PersonalCloudConnection - A connection that connects through the cloud and cannot be shared.
type PersonalCloudConnection struct {
	// REQUIRED; The connection details of the connection.
	ConnectionDetails *ListConnectionDetails

	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// REQUIRED; The object ID of the connection.
	ID *string

	// Allow this connection to be utilized with either on-premises data gateways or VNet data gateways.
	AllowConnectionUsageInGateway *bool

	// The credential details of the connection.
	CredentialDetails *ListCredentialDetails

	// The display name of the connection.
	DisplayName *string

	// The privacy level of the connection.
	PrivacyLevel *PrivacyLevel
}

// GetConnection implements the ConnectionClassification interface for type PersonalCloudConnection.
func (p *PersonalCloudConnection) GetConnection() *Connection {
	return &Connection{
		ConnectionDetails: p.ConnectionDetails,
		ConnectivityType:  p.ConnectivityType,
		CredentialDetails: p.CredentialDetails,
		DisplayName:       p.DisplayName,
		ID:                p.ID,
		PrivacyLevel:      p.PrivacyLevel,
	}
}

// PreDeploymentDiffInformation - The number of new, different and identical deployed items before deployment.
type PreDeploymentDiffInformation struct {
	// READ-ONLY; The number of deployed items with differences between source and target stages, before deployment.
	DifferentItemsCount *int32

	// READ-ONLY; The number of new items deployed to the target stage.
	NewItemsCount *int32

	// READ-ONLY; The number of identical deployed items in the source and target stages, before deployment.
	NoDifferenceItemsCount *int32
}

// Principal - Represents an identity or a Microsoft Entra group.
type Principal struct {
	// REQUIRED; The principal's ID.
	ID *string

	// REQUIRED; The type of the principal. Additional principal types may be added over time.
	Type *PrincipalType

	// Group specific details. Applicable when the principal type is Group.
	GroupDetails *PrincipalGroupDetails

	// Service principal profile details. Applicable when the principal type is ServicePrincipalProfile.
	ServicePrincipalProfileDetails *PrincipalServicePrincipalProfileDetails

	// READ-ONLY; The principal's display name.
	DisplayName *string

	// READ-ONLY; Service principal specific details. Applicable when the principal type is ServicePrincipal.
	ServicePrincipalDetails *PrincipalServicePrincipalDetails

	// READ-ONLY; User principal specific details. Applicable when the principal type is User.
	UserDetails *PrincipalUserDetails
}

// PrincipalGroupDetails - Group specific details. Applicable when the principal type is Group.
type PrincipalGroupDetails struct {
	// The type of the group. Additional group types may be added over time.
	GroupType *GroupType
}

// PrincipalServicePrincipalDetails - Service principal specific details. Applicable when the principal type is ServicePrincipal.
type PrincipalServicePrincipalDetails struct {
	// READ-ONLY; The service principal's Microsoft Entra AppId.
	AADAppID *string
}

// PrincipalServicePrincipalProfileDetails - Service principal profile details. Applicable when the principal type is ServicePrincipalProfile.
type PrincipalServicePrincipalProfileDetails struct {
	// The service principal profile's parent principal.
	ParentPrincipal *Principal
}

// PrincipalUserDetails - User principal specific details. Applicable when the principal type is User.
type PrincipalUserDetails struct {
	// READ-ONLY; The user principal name.
	UserPrincipalName *string
}

// PrivateEndpointConnectionState - Private endpoint connection state
type PrivateEndpointConnectionState struct {
	// Actions required to establish connection.
	ActionsRequired *string

	// Description message (if any) provided on approving or rejecting the end point.
	Description *string

	// Connection status
	Status *ConnectionStatus
}

// PublicKey - The public key of the on-premises gateway.
type PublicKey struct {
	// REQUIRED; The exponent of the public key.
	Exponent *string

	// REQUIRED; The modulus of the public key.
	Modulus *string
}

// RowConstraint indicates a constraint that determines the rows in a table that users can see. Roles defined with RowConstraints
// use T-SQL to define a predicate that filters data in a table. Rows that
// do not meet the predicate’s conditions are filtered out, leaving a subset of the original rows. RowConstraints can also
// be used to specify dynamic and multi-table flavors of RLS using T-SQL.
type RowConstraint struct {
	// REQUIRED; A relative file path specifying which table the row constraint applies to. This should be in the form of /Tables/{optionalSchema}/{tableName}.
	// Only one value can be given here and the tableName must
	// be a table included in the PermissionScope.
	TablePath *string

	// REQUIRED; A T-SQL expression that is used to evaluate which rows the role members can see. Only a subset of T-SQL can be
	// used as a predicate.
	Value *string
}

// RunOnDemandItemJobRequest - Run on demand item job instance payload
type RunOnDemandItemJobRequest struct {
	// Payload for run on-demand job request. Needed only if the job type requires a payload.
	ExecutionData any
}

// S3Compatible - An object containing the properties of the target S3 compatible data source.
type S3Compatible struct {
	// REQUIRED; Specifies the target bucket within the S3 compatible location.
	Bucket *string

	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource.
	ConnectionID *string

	// REQUIRED; HTTP URL of the S3 compatible endpoint. This endpoint must be able to receive ListBuckets S3 API calls. The URL
	// must be in the non-bucket specific format; no bucket should be specified here. For
	// example: https://s3endpoint.contoso.com
	Location *string

	// REQUIRED; Specifies a target folder or subfolder within the S3 compatible bucket. For example: /folder
	Subpath *string
}

// ScheduleConfig - Item schedule plan detail settings.
type ScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type ScheduleConfig.
func (s *ScheduleConfig) GetScheduleConfig() *ScheduleConfig { return s }

// ServicePrincipalCredentials - Credentials for ServicePrincipal CredentialType.
type ServicePrincipalCredentials struct {
	// REQUIRED; The credential type of the connection.
	CredentialType *CredentialType

	// REQUIRED; The client ID of the service principal.
	ServicePrincipalClientID *string

	// REQUIRED; The secret of the service principal.
	ServicePrincipalSecret *string

	// REQUIRED; The tenant ID of the service principal.
	TenantID *string
}

// GetCredentials implements the CredentialsClassification interface for type ServicePrincipalCredentials.
func (s *ServicePrincipalCredentials) GetCredentials() *Credentials {
	return &Credentials{
		CredentialType: s.CredentialType,
	}
}

// ShareableCloudConnection - A connection that connects through the cloud.
type ShareableCloudConnection struct {
	// REQUIRED; The connection details of the connection.
	ConnectionDetails *ListConnectionDetails

	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// REQUIRED; The object ID of the connection.
	ID *string

	// Allow this connection to be utilized with either on-premises data gateways or VNet data gateways.
	AllowConnectionUsageInGateway *bool

	// The credential details of the connection.
	CredentialDetails *ListCredentialDetails

	// The display name of the connection.
	DisplayName *string

	// The privacy level of the connection.
	PrivacyLevel *PrivacyLevel
}

// GetConnection implements the ConnectionClassification interface for type ShareableCloudConnection.
func (s *ShareableCloudConnection) GetConnection() *Connection {
	return &Connection{
		ConnectionDetails: s.ConnectionDetails,
		ConnectivityType:  s.ConnectivityType,
		CredentialDetails: s.CredentialDetails,
		DisplayName:       s.DisplayName,
		ID:                s.ID,
		PrivacyLevel:      s.PrivacyLevel,
	}
}

// SharedAccessSignatureCredentials - Credentials for SharedAccessSignature CredentialType.
type SharedAccessSignatureCredentials struct {
	// REQUIRED; The credential type of the connection.
	CredentialType *CredentialType

	// REQUIRED; The token.
	Token *string
}

// GetCredentials implements the CredentialsClassification interface for type SharedAccessSignatureCredentials.
func (s *SharedAccessSignatureCredentials) GetCredentials() *Credentials {
	return &Credentials{
		CredentialType: s.CredentialType,
	}
}

// Shortcut - An object representing a reference that points to other storage locations which can be internal or external
// to OneLake. Shortcut is defined by name, path where the shortcut is created and target
// specifying the target storage location.
type Shortcut struct {
	// REQUIRED; Name of the shortcut.
	Name *string

	// REQUIRED; A string representing the full path where the shortcut is created, including either "Files" or "Tables".
	Path *string

	// REQUIRED; An object that contains the target datasource, and must specify exactly one of the supported destinations.
	Target *Target

	// An object that contains the transform name and its corresponding properties to be applied to target data, and must specify
	// exactly one of the supported transformations.
	Transform TransformClassification
}

// ShortcutCreationPayload - Request payload for shortcut creation
type ShortcutCreationPayload struct {
	// REQUIRED; The external data share acceptance type. Additional types may be added over time.
	PayloadType *ExternalDataShareAcceptRequestPayloadType

	// A list of definitions for creating the external data share shortcuts.
	CreateShortcutRequests []CreateExternalDataShareShortcutRequest

	// A full path in a data item, in which to create the shortcut pointing to the external data. A valid path to accept an external
	// data share in must start with "Files/" or "Tables/".
	// For example, these paths are valid:
	// * "Files/"
	//
	//
	// * "Files/MyFolder1"
	//
	//
	// * "Tables/"
	Path *string
}

// GetExternalDataShareAcceptRequestPayload implements the ExternalDataShareAcceptRequestPayloadClassification interface for
// type ShortcutCreationPayload.
func (s *ShortcutCreationPayload) GetExternalDataShareAcceptRequestPayload() *ExternalDataShareAcceptRequestPayload {
	return &ExternalDataShareAcceptRequestPayload{
		PayloadType: s.PayloadType,
	}
}

// ShortcutTransformFlagged - An object representing a reference that points to other storage locations which can be internal
// or external to OneLake. Shortcut is defined by name, path where the shortcut is created and target
// specifying the target storage location.
type ShortcutTransformFlagged struct {
	// REQUIRED; Name of the shortcut.
	Name *string

	// REQUIRED; A string representing the full path where the shortcut is created, including either "Files" or "Tables".
	Path *string

	// REQUIRED; An object that contains the target datasource, and must specify exactly one of the supported destinations.
	Target *Target

	// Determines whether this shortcut is a transform shortcut. True - A shortcut transform, False - A regular shortcut. You
	// can get the shortcut transform properties using Get Shortcut
	// [rest/api/fabric/core/onelake-shortcuts/get-shortcut].
	IsShortcutTransform *bool

	// An object that contains the transform name and its corresponding properties to be applied to target data, and must specify
	// exactly one of the supported transformations.
	Transform TransformClassification
}

type Shortcuts struct {
	// REQUIRED; A list of shortcuts.
	Value []ShortcutTransformFlagged

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// Tag - Represents a tag.
type Tag struct {
	// REQUIRED; The name of the tag.
	DisplayName *string

	// REQUIRED; The tag object ID.
	ID *string

	// REQUIRED; The scope of the tag.
	Scope TagScopeClassification
}

// TagScope - Represents a tag scope
type TagScope struct {
	// REQUIRED; Denotes tag scope. Additional tag scopes may be added over time.
	Type *TagScopeType
}

// GetTagScope implements the TagScopeClassification interface for type TagScope.
func (t *TagScope) GetTagScope() *TagScope { return t }

// Tags - A response wrapper for a list of tags.
type Tags struct {
	// REQUIRED; An array of tags
	Value []Tag

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// Target - An object that contains the target datasource, and must specify exactly one of the supported destinations as described
// in the table below.
type Target struct {
	// REQUIRED; The type object contains properties like target shortcut account type. Additional types may be added over time.
	Type *Type

	// An object containing the properties of the target ADLS Gen2 data source.
	AdlsGen2 *AdlsGen2

	// An object containing the properties of the target Amazon S3 data source.
	AmazonS3 *AmazonS3

	// An object containing the properties of the target Azure Blob Storage data source.
	AzureBlobStorage *AzureBlobStorage

	// An object containing the properties of the target Dataverse data source.
	Dataverse *Dataverse

	// An object containing the properties of the target external data share.
	ExternalDataShare *ExternalDataShareTarget

	// An object containing the properties of the target Google Cloud Storage data source.
	GoogleCloudStorage *GoogleCloudStorage

	// An object containing the properties of the target OneLake data source.
	OneLake *OneLake

	// An object containing the properties of the target S3 compatible data source.
	S3Compatible *S3Compatible
}

// TenantTagScope - Represents tenant tag scope.
type TenantTagScope struct {
	// REQUIRED; Denotes tag scope. Additional tag scopes may be added over time.
	Type *TagScopeType
}

// GetTagScope implements the TagScopeClassification interface for type TenantTagScope.
func (t *TenantTagScope) GetTagScope() *TagScope {
	return &TagScope{
		Type: t.Type,
	}
}

// Transform - An object that contains the transform name and its corresponding properties to be applied to target data.
type Transform struct {
	// REQUIRED; The type of transform. Additional transform types may be added over time.
	Type *TransformType
}

// GetTransform implements the TransformClassification interface for type Transform.
func (t *Transform) GetTransform() *Transform { return t }

// UnapplyTagsRequest - The request payload for unapplying tags.
type UnapplyTagsRequest struct {
	// REQUIRED; The array of tag IDs.
	Tags []string
}

// UpdateConnectionRequest - The base object of update connection request.
type UpdateConnectionRequest struct {
	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// The privacy level of the connection.
	PrivacyLevel *PrivacyLevel
}

// GetUpdateConnectionRequest implements the UpdateConnectionRequestClassification interface for type UpdateConnectionRequest.
func (u *UpdateConnectionRequest) GetUpdateConnectionRequest() *UpdateConnectionRequest { return u }

// UpdateConnectionRoleAssignmentRequest - An update connection role assignment request payload.
type UpdateConnectionRoleAssignmentRequest struct {
	// REQUIRED; The connection role of the principal.
	Role *ConnectionRole
}

// UpdateCredentialDetails - The credential details input for updating a connection.
type UpdateCredentialDetails struct {
	// The connection encryption setting that is used during the test connection.
	ConnectionEncryption *ConnectionEncryption

	// The credentials of the connection.
	Credentials CredentialsClassification

	// The single sign-on type of the connection.
	SingleSignOnType *SingleSignOnType

	// Whether the connection should skip the test connection during creation and update. True - Skip the test connection, False
	// - Do not skip the test connection.
	SkipTestConnection *bool
}

// UpdateDeploymentPipelineRequest - A request to update an existing deployment pipeline. An updated display name and/or a
// description is required.
type UpdateDeploymentPipelineRequest struct {
	// The description for the deployment pipeline.
	// The description cannot contain more than 1024 characters.
	Description *string

	// The display name for the deployment pipeline.
	// The display name cannot contain more than 256 characters.
	DisplayName *string
}

// UpdateFolderRequest - Update folder request.
type UpdateFolderRequest struct {
	// REQUIRED; The folder display name. The name must meet Folder name requirements [/fabric/get-started/workspaces-folders#folder-name-requirements]
	DisplayName *string
}

// UpdateFromGitRequest - Contains the update from Git request data.
type UpdateFromGitRequest struct {
	// REQUIRED; Remote full SHA commit hash.
	RemoteCommitHash *string

	// Conflict resolution to be used in the update from Git operation. If items are in conflict and a conflict resolution is
	// not specified, the update operation will not start.
	ConflictResolution *WorkspaceConflictResolution

	// Options to be used in the update from Git operation
	Options *UpdateOptions

	// Full SHA hash that the workspace is synced to. This value may be null only after Initialize Connection. In other cases,
	// the system will validate that the given value is aligned with the head known to
	// the system.
	WorkspaceHead *string
}

type UpdateGatewayMemberRequest struct {
	// The display name of the gateway member. Maximum length is 200 characters.
	DisplayName *string

	// Whether the gateway member is enabled. True - Enabled, False - Not enabled.
	Enabled *bool
}

// UpdateGatewayRequest - The base object of update gateway request.
type UpdateGatewayRequest struct {
	// REQUIRED; The type of the gateway.
	Type *GatewayType

	// The name of the gateway. Maximum length is 200 characters.
	DisplayName *string
}

// GetUpdateGatewayRequest implements the UpdateGatewayRequestClassification interface for type UpdateGatewayRequest.
func (u *UpdateGatewayRequest) GetUpdateGatewayRequest() *UpdateGatewayRequest { return u }

// UpdateGatewayRoleAssignmentRequest - An update gateway role assignment request payload.
type UpdateGatewayRoleAssignmentRequest struct {
	// REQUIRED; The gateway role of the principal.
	Role *GatewayRole
}

// UpdateGitCredentialsRequest - Contains the request data to update the Git credentials configuration.
type UpdateGitCredentialsRequest struct {
	// REQUIRED; The Git credentials source.
	Source *GitCredentialsSource
}

// GetUpdateGitCredentialsRequest implements the UpdateGitCredentialsRequestClassification interface for type UpdateGitCredentialsRequest.
func (u *UpdateGitCredentialsRequest) GetUpdateGitCredentialsRequest() *UpdateGitCredentialsRequest {
	return u
}

// UpdateGitCredentialsToAutomaticRequest - Contains the request data to update the Git credentials to automatic.
type UpdateGitCredentialsToAutomaticRequest struct {
	// REQUIRED; The Git credentials source.
	Source *GitCredentialsSource
}

// GetUpdateGitCredentialsRequest implements the UpdateGitCredentialsRequestClassification interface for type UpdateGitCredentialsToAutomaticRequest.
func (u *UpdateGitCredentialsToAutomaticRequest) GetUpdateGitCredentialsRequest() *UpdateGitCredentialsRequest {
	return &UpdateGitCredentialsRequest{
		Source: u.Source,
	}
}

// UpdateGitCredentialsToConfiguredConnectionRequest - Contains the request data to update the Git credentials to configured
// connection.
type UpdateGitCredentialsToConfiguredConnectionRequest struct {
	// REQUIRED; The object ID of the connection.
	ConnectionID *string

	// REQUIRED; The Git credentials source.
	Source *GitCredentialsSource
}

// GetUpdateGitCredentialsRequest implements the UpdateGitCredentialsRequestClassification interface for type UpdateGitCredentialsToConfiguredConnectionRequest.
func (u *UpdateGitCredentialsToConfiguredConnectionRequest) GetUpdateGitCredentialsRequest() *UpdateGitCredentialsRequest {
	return &UpdateGitCredentialsRequest{
		Source: u.Source,
	}
}

// UpdateGitCredentialsToNoneRequest - Contains the request data to update the Git credentials to none.
type UpdateGitCredentialsToNoneRequest struct {
	// REQUIRED; The Git credentials source.
	Source *GitCredentialsSource
}

// GetUpdateGitCredentialsRequest implements the UpdateGitCredentialsRequestClassification interface for type UpdateGitCredentialsToNoneRequest.
func (u *UpdateGitCredentialsToNoneRequest) GetUpdateGitCredentialsRequest() *UpdateGitCredentialsRequest {
	return &UpdateGitCredentialsRequest{
		Source: u.Source,
	}
}

// UpdateItemDefinitionRequest - Update item definition request payload.
type UpdateItemDefinitionRequest struct {
	// REQUIRED; An item definition object.
	Definition *ItemDefinition
}

// UpdateItemRequest - Update item request.
type UpdateItemRequest struct {
	// The item description. Maximum length is 256 characters.
	Description *string

	// The item display name. The display name must follow naming rules according to item type.
	DisplayName *string
}

type UpdateOnPremisesGatewayConnectionRequest struct {
	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// The credential details of the connection.
	CredentialDetails *UpdateOnPremisesGatewayCredentialDetails

	// The display name of the connection. Maximum length is 200 characters.
	DisplayName *string

	// The privacy level of the connection.
	PrivacyLevel *PrivacyLevel
}

// GetUpdateConnectionRequest implements the UpdateConnectionRequestClassification interface for type UpdateOnPremisesGatewayConnectionRequest.
func (u *UpdateOnPremisesGatewayConnectionRequest) GetUpdateConnectionRequest() *UpdateConnectionRequest {
	return &UpdateConnectionRequest{
		ConnectivityType: u.ConnectivityType,
		PrivacyLevel:     u.PrivacyLevel,
	}
}

// UpdateOnPremisesGatewayCredentialDetails - The credential details input for updating an on-premises gateway connection.
type UpdateOnPremisesGatewayCredentialDetails struct {
	// The connection encryption setting that is used during the test connection.
	ConnectionEncryption *ConnectionEncryption

	// The credentials of the connection.
	Credentials *OnPremisesGatewayCredentials

	// The single sign-on type of the connection.
	SingleSignOnType *SingleSignOnType

	// Whether the connection should skip the test connection during creation and update. True - Skip the test connection, False
	// - Do not skip the test connection.
	SkipTestConnection *bool
}

type UpdateOnPremisesGatewayPersonalConnectionRequest struct {
	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// The credential details of the connection.
	CredentialDetails *UpdateOnPremisesGatewayPersonalCredentialDetails

	// The privacy level of the connection.
	PrivacyLevel *PrivacyLevel
}

// GetUpdateConnectionRequest implements the UpdateConnectionRequestClassification interface for type UpdateOnPremisesGatewayPersonalConnectionRequest.
func (u *UpdateOnPremisesGatewayPersonalConnectionRequest) GetUpdateConnectionRequest() *UpdateConnectionRequest {
	return &UpdateConnectionRequest{
		ConnectivityType: u.ConnectivityType,
		PrivacyLevel:     u.PrivacyLevel,
	}
}

// UpdateOnPremisesGatewayPersonalCredentialDetails - The credential details input for updating an on-premises gateway connection.
type UpdateOnPremisesGatewayPersonalCredentialDetails struct {
	// The connection encryption setting that is used during the test connection.
	ConnectionEncryption *ConnectionEncryption

	// The credentials of the connection.
	Credentials *OnPremisesGatewayPersonalCredentials

	// The single sign-on type of the connection.
	SingleSignOnType *SingleSignOnType

	// Whether the connection should skip the test connection during creation and update. True - Skip the test connection, False
	// - Do not skip the test connection.
	SkipTestConnection *bool
}

type UpdateOnPremisesGatewayRequest struct {
	// REQUIRED; The type of the gateway.
	Type *GatewayType

	// Whether to allow cloud connections to refresh through this on-premises gateway. True - Allow, False - Do not allow.
	AllowCloudConnectionRefresh *bool

	// Whether to allow custom connectors to be used with this on-premises gateway. True - Allow, False - Do not allow.
	AllowCustomConnectors *bool

	// The name of the gateway. Maximum length is 200 characters.
	DisplayName *string

	// The load balancing setting of the on-premises gateway.
	LoadBalancingSetting *LoadBalancingSetting
}

// GetUpdateGatewayRequest implements the UpdateGatewayRequestClassification interface for type UpdateOnPremisesGatewayRequest.
func (u *UpdateOnPremisesGatewayRequest) GetUpdateGatewayRequest() *UpdateGatewayRequest {
	return &UpdateGatewayRequest{
		DisplayName: u.DisplayName,
		Type:        u.Type,
	}
}

// UpdateOptions - Contains the options that are enabled for the update from Git.
type UpdateOptions struct {
	// User consent to override incoming items during the update from Git process. When incoming items are present and the allow
	// override items is not specified or is provided as false, the update operation
	// will not start. Default value is false.
	AllowOverrideItems *bool
}

type UpdatePersonalCloudConnectionRequest struct {
	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// Allow this connection to be utilized with either on-premises data gateways or VNet data gateways.
	AllowConnectionUsageInGateway *bool

	// The credential details of the connection.
	CredentialDetails *UpdateCredentialDetails

	// The privacy level of the connection.
	PrivacyLevel *PrivacyLevel
}

// GetUpdateConnectionRequest implements the UpdateConnectionRequestClassification interface for type UpdatePersonalCloudConnectionRequest.
func (u *UpdatePersonalCloudConnectionRequest) GetUpdateConnectionRequest() *UpdateConnectionRequest {
	return &UpdateConnectionRequest{
		ConnectivityType: u.ConnectivityType,
		PrivacyLevel:     u.PrivacyLevel,
	}
}

// UpdateScheduleRequest - Update item schedule plan request payload.
type UpdateScheduleRequest struct {
	// REQUIRED; The actual data contains the time/weekdays of this schedule.
	Configuration ScheduleConfigClassification

	// REQUIRED; Whether this schedule is enabled. True - Enabled, False - Disabled.
	Enabled *bool
}

type UpdateShareableCloudConnectionRequest struct {
	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// Allow this connection to be utilized with either on-premises data gateways or VNet data gateways.
	AllowConnectionUsageInGateway *bool

	// The credential details of the connection.
	CredentialDetails *UpdateCredentialDetails

	// The display name of the connection. Maximum length is 200 characters.
	DisplayName *string

	// The privacy level of the connection.
	PrivacyLevel *PrivacyLevel
}

// GetUpdateConnectionRequest implements the UpdateConnectionRequestClassification interface for type UpdateShareableCloudConnectionRequest.
func (u *UpdateShareableCloudConnectionRequest) GetUpdateConnectionRequest() *UpdateConnectionRequest {
	return &UpdateConnectionRequest{
		ConnectivityType: u.ConnectivityType,
		PrivacyLevel:     u.PrivacyLevel,
	}
}

type UpdateVirtualNetworkGatewayConnectionRequest struct {
	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// The credential details of the connection.
	CredentialDetails *UpdateCredentialDetails

	// The display name of the connection. Maximum length is 200 characters.
	DisplayName *string

	// The privacy level of the connection.
	PrivacyLevel *PrivacyLevel
}

// GetUpdateConnectionRequest implements the UpdateConnectionRequestClassification interface for type UpdateVirtualNetworkGatewayConnectionRequest.
func (u *UpdateVirtualNetworkGatewayConnectionRequest) GetUpdateConnectionRequest() *UpdateConnectionRequest {
	return &UpdateConnectionRequest{
		ConnectivityType: u.ConnectivityType,
		PrivacyLevel:     u.PrivacyLevel,
	}
}

type UpdateVirtualNetworkGatewayRequest struct {
	// REQUIRED; The type of the gateway.
	Type *GatewayType

	// The object ID of the Fabric license capacity.
	CapacityID *string

	// The name of the gateway. Maximum length is 200 characters.
	DisplayName *string

	// The minutes of inactivity before the virtual network gateway goes into auto-sleep. Must be one of the following values:
	// 30, 60, 90, 120, 150, 240, 360, 480, 720, 1440.
	InactivityMinutesBeforeSleep *int32

	// The number of member gateways. A number between 1 and 7.
	NumberOfMemberGateways *int32
}

// GetUpdateGatewayRequest implements the UpdateGatewayRequestClassification interface for type UpdateVirtualNetworkGatewayRequest.
func (u *UpdateVirtualNetworkGatewayRequest) GetUpdateGatewayRequest() *UpdateGatewayRequest {
	return &UpdateGatewayRequest{
		DisplayName: u.DisplayName,
		Type:        u.Type,
	}
}

// UpdateWorkspaceRequest - Update workspace request payload.
type UpdateWorkspaceRequest struct {
	// The workspace description.
	// The description cannot contain more than 4000 characters.
	Description *string

	// The workspace display name.
	// The display name cannot contain more than 256 characters.
	// Workspace names must be unique within the tenant.
	// "Admin monitoring" is a reserved workspace name.
	DisplayName *string
}

// UpdateWorkspaceRoleAssignmentRequest - Update workspace role assignment request payload.
type UpdateWorkspaceRoleAssignmentRequest struct {
	// REQUIRED; The workspace role of the principal.
	Role *WorkspaceRole
}

// VirtualNetworkAzureResource - The properties of a Virtual Network Azure resource
type VirtualNetworkAzureResource struct {
	// REQUIRED; The name of the resource group
	ResourceGroupName *string

	// REQUIRED; The name of the subnet
	SubnetName *string

	// REQUIRED; The subscription ID
	SubscriptionID *string

	// REQUIRED; The name of the virtual network
	VirtualNetworkName *string
}

type VirtualNetworkGateway struct {
	// REQUIRED; The display name of the virtual network gateway.
	DisplayName *string

	// REQUIRED; The object ID of the gateway.
	ID *string

	// REQUIRED; The minutes of inactivity before the virtual network gateway goes into auto-sleep.
	InactivityMinutesBeforeSleep *int32

	// REQUIRED; The number of member gateways.
	NumberOfMemberGateways *int32

	// REQUIRED; The type of the gateway.
	Type *GatewayType

	// REQUIRED; The Azure virtual network resource.
	VirtualNetworkAzureResource *VirtualNetworkAzureResource

	// The object ID of the Fabric license capacity.
	CapacityID *string
}

// GetGateway implements the GatewayClassification interface for type VirtualNetworkGateway.
func (v *VirtualNetworkGateway) GetGateway() *Gateway {
	return &Gateway{
		ID:   v.ID,
		Type: v.Type,
	}
}

// VirtualNetworkGatewayConnection - A connection that connects through a virtual network data gateway.
type VirtualNetworkGatewayConnection struct {
	// REQUIRED; The connection details of the connection.
	ConnectionDetails *ListConnectionDetails

	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// REQUIRED; The object ID of the connection.
	ID *string

	// The credential details of the connection.
	CredentialDetails *ListCredentialDetails

	// The display name of the connection.
	DisplayName *string

	// The gateway object ID of the connection.
	GatewayID *string

	// The privacy level of the connection.
	PrivacyLevel *PrivacyLevel
}

// GetConnection implements the ConnectionClassification interface for type VirtualNetworkGatewayConnection.
func (v *VirtualNetworkGatewayConnection) GetConnection() *Connection {
	return &Connection{
		ConnectionDetails: v.ConnectionDetails,
		ConnectivityType:  v.ConnectivityType,
		CredentialDetails: v.CredentialDetails,
		DisplayName:       v.DisplayName,
		ID:                v.ID,
		PrivacyLevel:      v.PrivacyLevel,
	}
}

type WeeklyScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; A list of time slots in the hh:mm format. The maximum time slots you can use is 100.
	Times []string

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType

	// REQUIRED; A list of weekdays, at most seven elements are allowed.
	Weekdays []DayOfWeek
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type WeeklyScheduleConfig.
func (w *WeeklyScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     w.EndDateTime,
		LocalTimeZoneID: w.LocalTimeZoneID,
		StartDateTime:   w.StartDateTime,
		Type:            w.Type,
	}
}

// WindowsCredentials - Credentials for Windows CredentialType.
type WindowsCredentials struct {
	// REQUIRED; The credential type of the connection.
	CredentialType *CredentialType

	// REQUIRED; The password.
	Password *string

	// REQUIRED; The username.
	Username *string
}

// GetCredentials implements the CredentialsClassification interface for type WindowsCredentials.
func (w *WindowsCredentials) GetCredentials() *Credentials {
	return &Credentials{
		CredentialType: w.CredentialType,
	}
}

// WindowsWithoutImpersonationCredentials - Credentials for WindowsWithoutImpersonation CredentialType.
type WindowsWithoutImpersonationCredentials struct {
	// REQUIRED; The credential type of the connection.
	CredentialType *CredentialType
}

// GetCredentials implements the CredentialsClassification interface for type WindowsWithoutImpersonationCredentials.
func (w *WindowsWithoutImpersonationCredentials) GetCredentials() *Credentials {
	return &Credentials{
		CredentialType: w.CredentialType,
	}
}

// Workspace - A workspace object.
type Workspace struct {
	// REQUIRED; The workspace display name.
	DisplayName *string

	// READ-ONLY; The workspace description.
	Description *string

	// READ-ONLY; The workspace ID.
	ID *string

	// READ-ONLY; HTTP URL that represents the API endpoint specific to the workspace. This endpoint value is returned when the
	// user enables preferWorkspaceSpecificEndpoints. It allows for API access over private
	// links.
	APIEndpoint *string

	// READ-ONLY; The ID of the capacity the workspace is assigned to.
	CapacityID *string

	// READ-ONLY; The ID of the domain the workspace is assigned to.
	DomainID *string

	// READ-ONLY; The workspace type.
	Type *WorkspaceType
}

// WorkspaceConflictResolution - The basic conflict resolution data.
type WorkspaceConflictResolution struct {
	// REQUIRED; Conflict resolution policy. Additional conflict resolution policies may be added over time.
	ConflictResolutionPolicy *ConflictResolutionPolicy

	// REQUIRED; Conflict resolution type. Additional conflict resolution types may be added over time.
	ConflictResolutionType *ConflictResolutionType
}

// WorkspaceIdentity - A workspace identity object.
type WorkspaceIdentity struct {
	// READ-ONLY; The application ID.
	ApplicationID *string

	// READ-ONLY; The service principal ID.
	ServicePrincipalID *string
}

// WorkspaceIdentityCredentials - Credentials for WorkspaceIdentity CredentialType.
type WorkspaceIdentityCredentials struct {
	// REQUIRED; The credential type of the connection.
	CredentialType *CredentialType
}

// GetCredentials implements the CredentialsClassification interface for type WorkspaceIdentityCredentials.
func (w *WorkspaceIdentityCredentials) GetCredentials() *Credentials {
	return &Credentials{
		CredentialType: w.CredentialType,
	}
}

// WorkspaceInfo - A workspace object.
type WorkspaceInfo struct {
	// REQUIRED; The workspace display name.
	DisplayName *string

	// READ-ONLY; The workspace description.
	Description *string

	// READ-ONLY; The workspace ID.
	ID *string

	// READ-ONLY; HTTP URL that represents the API endpoint specific to the workspace. This endpoint value is returned when the
	// user enables preferWorkspaceSpecificEndpoints. It allows for API access over private
	// links.
	APIEndpoint *string

	// READ-ONLY; The status of the workspace's capacity assignment progress.
	CapacityAssignmentProgress *CapacityAssignmentProgress

	// READ-ONLY; The ID of the capacity the workspace is assigned to.
	CapacityID *string

	// READ-ONLY; The region of the capacity associated with this workspace.
	CapacityRegion *CapacityRegion

	// READ-ONLY; The ID of the domain the workspace is assigned to.
	DomainID *string

	// READ-ONLY; The OneLake API endpoints associated with this workspace.
	OneLakeEndpoints *OneLakeEndpoints

	// READ-ONLY; The workspace type.
	Type *WorkspaceType

	// READ-ONLY; The workspace identity.
	WorkspaceIdentity *WorkspaceIdentity
}

// WorkspaceNetworkingCommunicationPolicy - The networking communication policy for a workspace.
type WorkspaceNetworkingCommunicationPolicy struct {
	// The inbound network communications properties for a workspace.
	Inbound *InboundRules

	// The outbound network communications properties for a workspace.
	Outbound *OutboundRules
}

// WorkspaceRoleAssignment - A workspace role assignment object.
type WorkspaceRoleAssignment struct {
	// READ-ONLY; The workspace role assignment ID.
	ID *string

	// READ-ONLY; The principal.
	Principal *Principal

	// READ-ONLY; The workspace role of the principal.
	Role *WorkspaceRole
}

type WorkspaceRoleAssignments struct {
	// REQUIRED
	Value []WorkspaceRoleAssignment

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

type Workspaces struct {
	// REQUIRED; A list of workspaces.
	Value []Workspace

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}
