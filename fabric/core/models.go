// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import "time"

// AddWorkspaceRoleAssignmentRequest - Add workspace role assignment request payload.
type AddWorkspaceRoleAssignmentRequest struct {
	// REQUIRED; The principal.
	Principal *Principal

	// REQUIRED; The workspace role of the principal.
	Role *WorkspaceRole
}

// AdlsGen2 - An object containing the properties of the target ADLS Gen2 data source.
type AdlsGen2 struct {
	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource. To find
	// this connection ID, first create a cloud connection [/fabric/data-factory/data-source-management#add-a-data-source] to
	// be used by the shortcut when connecting to the ADLS data location. Open the cloud
	// connection's Settings view and copy the connection ID; this is a GUID.
	ConnectionID *string

	// REQUIRED; Specifies the location of the target ADLS container. The URI must be in the format https://[account-name].dfs.core.windows.net
	// where [account-name] is the name of the target ADLS account.
	Location *string

	// REQUIRED; Specifies the container and subfolder within the ADLS account where the target folder is located. Must be of
	// the format [container]/[subfolder] where [container] is the name of the container that
	// holds the files and folders; [subfolder] is the name of the subfolder within the container (optional). For example: /mycontainer/mysubfolder
	Subpath *string
}

// AmazonS3 - An object containing the properties of the target Amazon S3 data source.
type AmazonS3 struct {
	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource. To find
	// this connection ID, first create a cloud connection [/fabric/data-factory/data-source-management#add-a-data-source] to
	// be used by the shortcut when connecting to the Amazon S3 data location. Open the
	// cloud connection's Settings view and copy the connection ID; this is a GUID.
	ConnectionID *string

	// REQUIRED; HTTP URL that points to the target bucket in S3. The URL should be in the format https://[bucket-name].s3.[region-code].amazonaws.com,
	// where "bucket-name" is the name of the S3 bucket you want to
	// point to, and "region-code" is the code for the region where the bucket is located. For example: https://my-s3-bucket.s3.us-west-2.amazonaws.com
	Location *string

	// Specifies a target folder or subfolder within the S3 bucket.
	Subpath *string
}

// AssignWorkspaceToCapacityRequest - A capacity assignment request.
type AssignWorkspaceToCapacityRequest struct {
	// REQUIRED; The ID of the capacity the workspace should be assigned to.
	CapacityID *string
}

// AzureDevOpsDetails - Azure DevOps provider details.
type AzureDevOpsDetails struct {
	// REQUIRED; The branch name. Maximum length is 250 characters.
	BranchName *string

	// REQUIRED; The directory name. Maximum length is 256 characters.
	DirectoryName *string

	// REQUIRED; A Git provider type. Additional provider types may be added over time.
	GitProviderType *GitProviderType

	// REQUIRED; The organization name. Maximum length is 100 characters.
	OrganizationName *string

	// REQUIRED; The project name. Maximum length is 100 characters.
	ProjectName *string

	// REQUIRED; The repository name. Maximum length is 128 characters.
	RepositoryName *string
}

// GetGitProviderDetails implements the GitProviderDetailsClassification interface for type AzureDevOpsDetails.
func (a *AzureDevOpsDetails) GetGitProviderDetails() *GitProviderDetails {
	return &GitProviderDetails{
		BranchName:      a.BranchName,
		DirectoryName:   a.DirectoryName,
		GitProviderType: a.GitProviderType,
		RepositoryName:  a.RepositoryName,
	}
}

type Capacities struct {
	// REQUIRED; A list of capacities.
	Value []Capacity

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// Capacity - A capacity object.
type Capacity struct {
	// READ-ONLY; The capacity display name.
	DisplayName *string

	// READ-ONLY; The capacity ID.
	ID *string

	// READ-ONLY; The Azure region where the capacity was provisioned.
	Region *string

	// READ-ONLY; The capacity SKU.
	SKU *string

	// READ-ONLY; The capacity state.
	State *CapacityState
}

// CommitToGitRequest - Contains the commit request.
type CommitToGitRequest struct {
	// REQUIRED; The mode for the commit operation.
	Mode *CommitMode

	// Caller-free comment for this commit. Maximum length is 300 characters. If no comment is provided by the caller, use the
	// default Git provider comment.
	Comment *string
	Items   []ItemIdentifier

	// Full SHA hash that the workspace is synced to. The hash can be retrieved from the Git Status [/rest/api/fabric/core/git/get-status]
	// API.
	WorkspaceHead *string
}

// CreatableShortcutTarget - An object that contains the target datasource, and must specify exactly one of the supported
// destinations as described in the table below.
type CreatableShortcutTarget struct {
	// An object containing the properties of the target ADLS Gen2 data source.
	AdlsGen2 *AdlsGen2

	// An object containing the properties of the target Amazon S3 data source.
	AmazonS3 *AmazonS3

	// An object containing the properties of the target Dataverse data source.
	Dataverse *Dataverse

	// An object containing the properties of the target Google Cloud Storage data source.
	GoogleCloudStorage *GoogleCloudStorage

	// An object containing the properties of the target OneLake data source.
	OneLake *OneLake

	// An object containing the properties of the target S3 compatible data source.
	S3Compatible *S3Compatible
}

// CreateExternalDataShareRequest - The request payload for creating an external data share.
type CreateExternalDataShareRequest struct {
	// REQUIRED; The path or list of paths that are to be externally shared. Currently, only a single path is supported.
	Paths []string

	// REQUIRED; The recipient who is invited to accept the external data share.
	Recipient *ExternalDataShareRecipient
}

// CreateItemRequest - Create item request payload.
type CreateItemRequest struct {
	// REQUIRED; The item display name. The display name must follow naming rules according to item type.
	DisplayName *string

	// REQUIRED; The item type.
	Type *ItemType

	// A set of properties used to create the item. Use creationPayload or definition. You can't use both at the same time.
	CreationPayload any

	// The item definition. Use definition or creationPayload. You can't use both at the same time.
	Definition *ItemDefinition

	// The item description. Maximum length is 256 characters.
	Description *string
}

// CreateOrUpdateDataAccessRolesRequest - Contains definition of Roles that are used to manage data access security and ensure
// that only authorized users can view, edit, or delete certain data. Calling this API updates role definitions and
// creates, updates, or deletes roles to match the provided payload.
type CreateOrUpdateDataAccessRolesRequest struct {
	// A list of roles that are used to manage data access security and ensure that only authorized users can view certain data.
	// A role represents a set of permissions and permission scopes that define what
	// actions its members are allowed to perform for the data in scope. Members are users or groups who have been granted the
	// role, and they can read the data based on the permissions assigned to the role.
	// For example, a member can be a Microsoft Entra ID group and permission scope can be a Read Action applied on the given
	// Path to File, Folder(s) or Table(s) in OneLake.
	Value []DataAccessRole
}

// CreateScheduleRequest - Create item schedule plan request payload.
type CreateScheduleRequest struct {
	// REQUIRED; The actual data contains the time/weekdays of this schedule.
	Configuration ScheduleConfigClassification

	// REQUIRED; Whether this schedule is enabled. True - Enabled, False - Disabled.
	Enabled *bool
}

// CreateShortcutRequest - A shortcut creation request with an object representing a reference to another storage location.
type CreateShortcutRequest struct {
	// REQUIRED; Name of the shortcut.
	Name *string

	// REQUIRED; A string representing the full path where the shortcut is created, including either "Files" or "Tables".
	Path *string

	// REQUIRED; An object that contains the target datasource, and it must specify exactly one of the supported destinations:
	// OneLake, Amazon S3, ADLS Gen2, Google Cloud Storage, S3 compatible or Dataverse.
	Target *CreatableShortcutTarget
}

// CreateWorkspaceRequest - Create workspace request payload.
type CreateWorkspaceRequest struct {
	// REQUIRED; The workspace display name.
	// The display name cannot contain more than 256 characters.
	// Only unused workspace names are allowed.
	// "Admin monitoring" is a reserved workspace name.
	DisplayName *string

	// The ID of the capacity to assign the workspace to.
	CapacityID *string

	// The workspace description.
	// The description cannot contain more than 4000 characters.
	Description *string
}

type CronScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time.
	EndDateTime *time.Time

	// REQUIRED; The time interval in minutes. A number between 1 and 5270400 (10 years).
	Interval *int32

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly.
	StartDateTime *time.Time

	// REQUIRED; A string represents the type of the plan. Additional planType types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type CronScheduleConfig.
func (c *CronScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     c.EndDateTime,
		LocalTimeZoneID: c.LocalTimeZoneID,
		StartDateTime:   c.StartDateTime,
		Type:            c.Type,
	}
}

type DailyScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly.
	StartDateTime *time.Time

	// REQUIRED; A list of time slots in hh:mm format, at most 100 elements are allowed.
	Times []string

	// REQUIRED; A string represents the type of the plan. Additional planType types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type DailyScheduleConfig.
func (d *DailyScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     d.EndDateTime,
		LocalTimeZoneID: d.LocalTimeZoneID,
		StartDateTime:   d.StartDateTime,
		Type:            d.Type,
	}
}

// DataAccessRole - A Data access role represents a set of permissions and permission scopes that define what actions its
// members are allowed to perform for the data in scope. Data access roles are used to manage data
// access security and ensure that only authorized users can view, edit, or delete certain data. Members are users or groups
// who have been granted the role, and they can read the data based on the
// permissions assigned to the role. For example, a member can be an Microsoft Entra ID group and permission scope can be
// a Read Action applied on the given Path to File, Folder(s) or Table(s) in
// OneLake.
type DataAccessRole struct {
	// REQUIRED; The array of permissions that make up the Data access role.
	DecisionRules []DecisionRule

	// REQUIRED; The name of the Data access role.
	Name *string

	// The members object which contains the members of the role as arrays of different member types.
	Members *Members

	// READ-ONLY; The unique id for the Data access role.
	ID *string
}

type DataAccessRoles struct {
	// REQUIRED; A list of roles that are used to manage data access security and ensure that only authorized users can view certain
	// data. A role represents a set of permissions and permission scopes that define what
	// actions its members are allowed to perform for the data in scope. Members are users or groups who have been granted the
	// role, and they can read the data based on the permissions assigned to the role.
	// For example, a member can be a Microsoft Entra ID group and permission scope can be a Read Action applied on the given
	// Path to File, Folder(s) or Table(s) in OneLake.
	Value []DataAccessRole

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// Dataverse - An object containing the properties of the target Dataverse data source.
type Dataverse struct {
	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource. To find
	// this connection ID, first create a cloud connection [/fabric/data-factory/data-source-management#add-a-data-source] to
	// be used by the shortcut when connecting to the Dataverse data location. Open the
	// cloud connection's Settings view and copy the connection ID; this is a GUID.
	ConnectionID *string

	// REQUIRED; Specifies the DeltaLake folder path where the target data is stored.
	DeltaLakeFolder *string

	// REQUIRED; URI that indicates the Dataverse target environment's domain name. The URI should be formatted as "https://[orgname].crm[xx].dynamics.com",
	// where [orgname] represents the name of your Dataverse
	// organization.
	EnvironmentDomain *string

	// REQUIRED; Specifies the name of the target table in Dataverse
	TableName *string
}

// DecisionRule - Specifies a rule for matching the requested action. Contains effect (Permit) and Permission which determine
// whether a user or entity is authorized to perform a specific action (e.g., read) on a
// resource. Permission is a set of scopes, defined by attributes, that must match the requested action for the rule to apply.
type DecisionRule struct {
	// REQUIRED; The permission property is an array that specifies the scope and level of access for a requested action. The
	// array must contain exactly two PermissionScope objects: Path and Action. The scope is
	// defined using the PermissionScope object, with attributeValueIncludedIn specifying either the location of the resource
	// being accessed or the type of action being granted. The access refers to the
	// level of access being granted, such as Read.
	Permission []PermissionScope

	// The effect that a role has on access to the data resource. Currently, the only supported effect type is Permit, which grants
	// access to the resource. Additional effect types may be added over time.
	Effect *Effect
}

// DeployRequest - A request to deploy items from a deployment pipeline stage to another consecutive stage. Deploying to a
// previous stage can be done only when the target stage is empty. If no items were specified, will
// deploy all supported items from the deployment pipeline stage, otherwise will deploy only the specified items.
type DeployRequest struct {
	// REQUIRED; The ID of the source stage.
	SourceStageID *string

	// REQUIRED; The ID of the target stage.
	TargetStageID *string

	// The configuration details for creating a new workspace. Required when deploying to a stage that has no assigned workspaces,
	// otherwise it is ignored. The deployment will fail if the new workspace
	// configuration details aren't provided when required.
	CreatedWorkspaceDetails *DeploymentPipelineNewWorkspaceConfiguration

	// A list of items to be deployed. If not used, all supported stage items are deployed.
	Items []ItemDeploymentRequest

	// A note describing the deployment. The text size is limited to 1024 characters.
	Note *string
}

// DeploymentExecutionPlan - A deployment execution plan.
type DeploymentExecutionPlan struct {
	// READ-ONLY; The collection of execution plan steps.
	Steps []DeploymentExecutionStep
}

// DeploymentExecutionStep - A deployment execution step.
type DeploymentExecutionStep struct {
	// READ-ONLY; The deployment step description.
	Description *string

	// READ-ONLY; The step index.
	Index *int32

	// READ-ONLY; The source and target items of the step.
	SourceAndTarget *DeploymentSourceAndTarget

	// READ-ONLY; The status of the deployment pipeline operation. Additional statuses may be added over time.
	Status *DeploymentPipelineOperationStatus

	// READ-ONLY; The error details. Only applicable if the deployment pipeline operation failed.
	Error *ErrorResponse

	// READ-ONLY; Is an item new, different or identical to items in the target stage before deployment.
	PreDeploymentDiffState *ItemPreDeploymentDiffState
}

// DeploymentPipeline - A Fabric deployment pipeline.
type DeploymentPipeline struct {
	// REQUIRED; The deployment pipeline display name.
	DisplayName *string

	// READ-ONLY; The deployment pipeline ID.
	ID *string

	// The deployment pipeline description.
	Description *string
}

// DeploymentPipelineNewWorkspaceConfiguration - The configuration details for creating a new workspace. Required when deploying
// to a stage that has no assigned workspaces.
type DeploymentPipelineNewWorkspaceConfiguration struct {
	// REQUIRED; The name of the new workspace.
	Name *string

	// The ID of the capacity that the new workspace will be assigned to. If unspecified and the API caller has permissions for
	// the source stage workspace capacity, then that capacity will be used.
	// Otherwise, Fabric will select a capacity that the API caller has permissions for.
	CapacityID *string
}

// DeploymentPipelineOperation - A Fabric deployment pipeline operation.
type DeploymentPipelineOperation struct {
	// A note representing a description of the operation.
	Note *DeploymentPipelineOperationNote

	// The principal that performed the deployment pipeline operation.
	PerformedBy *Principal

	// READ-ONLY; The operation ID.
	ID *string

	// READ-ONLY; The date and time that the operation was last updated.
	LastUpdatedTime *time.Time

	// READ-ONLY; The deployment pipeline operation status. Additional statuses may be added over time.
	Status *DeploymentPipelineOperationStatus

	// READ-ONLY; The operation type. Additional types may be added over time.
	Type *DeploymentPipelineOperationType

	// READ-ONLY; The date and time that the operation ended.
	ExecutionEndTime *time.Time

	// READ-ONLY; The deployment execution plan.
	ExecutionPlan *DeploymentExecutionPlan

	// READ-ONLY; The date and time that the operation started.
	ExecutionStartTime *time.Time

	// READ-ONLY; The number of deployed items in the source stage, that are new, identical or different to items in the target
	// stage, before deployment.
	PreDeploymentDiffInformation *PreDeploymentDiffInformation

	// READ-ONLY; The ID of a source deployment pipeline stage.
	SourceStageID *string

	// READ-ONLY; The ID of a target deployment pipeline stage.
	TargetStageID *string
}

// DeploymentPipelineOperationNote - A note describing the deployment.
type DeploymentPipelineOperationNote struct {
	// REQUIRED; Text describing the deployment.
	Content *string
}

// DeploymentPipelineStage - A Fabric deployment pipeline stage.
type DeploymentPipelineStage struct {
	// REQUIRED; The deployment pipeline stage display name.
	DisplayName *string

	// Indicates whether the deployment pipeline stage is public. True - the stage is public, False - the stage isn't public.
	IsPublic *bool

	// The assigned workspace ID. Only applicable when there's an assigned workspace.
	WorkspaceID *string

	// The assigned workspace name. Only applicable when there's an assigned workspace and the user has access to the workspace.
	WorkspaceName *string

	// READ-ONLY; The deployment pipeline stage ID.
	ID *string

	// READ-ONLY; The stage order, starting from zero.
	Order *int32

	// The deployment pipeline stage description.
	Description *string
}

// DeploymentPipelineStageItem - Fabric item metadata for a deployment pipeline stage.
type DeploymentPipelineStageItem struct {
	// REQUIRED; The Fabric item display name.
	ItemDisplayName *string

	// REQUIRED; The Fabric item ID.
	ItemID *string

	// REQUIRED; The Fabric item type.
	ItemType *ItemType

	// The ID of the Fabric item from the workspace assigned to the source stage, which will update the current Fabric item upon
	// deployment. Applicable only when the user has at least contributor access to
	// the source stage workspace.
	SourceItemID *string

	// The ID of the Fabric item from the workspace of the target stage, which will be updated by the current Fabric item upon
	// deployment. Applicable only when the user has at least contributor access to the
	// target stage workspace.
	TargetItemID *string

	// READ-ONLY; The last deployment date and time of the Fabric item.
	LastDeploymentTime *time.Time
}

// DeploymentPipelineStageItems - Supported items from a workspace that's assigned to a deployment pipeline stage.
type DeploymentPipelineStageItems struct {
	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string

	// The items collection.
	Value []DeploymentPipelineStageItem
}

// DeploymentPipelineStages - A collection of Fabric deployment pipeline stages.
type DeploymentPipelineStages struct {
	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string

	// The collection of deployment pipeline stages
	Value []DeploymentPipelineStage
}

// DeploymentPipelines - A collection of Fabric deployment pipelines.
type DeploymentPipelines struct {
	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string

	// A collection of deployment pipelines.
	Value []DeploymentPipeline
}

// DeploymentSourceAndTarget - Source and target items.
type DeploymentSourceAndTarget struct {
	// READ-ONLY; The ID of the Fabric item that's deployed from the source stage.
	SourceItemID *string

	// READ-ONLY; The type of the Fabric item that will be overwritten in the target stage. Only applies when overwriting a Fabric
	// item.
	ItemType *ItemType

	// READ-ONLY; The display name of the Fabric item that's deployed from the source stage.
	SourceItemDisplayName *string

	// READ-ONLY; The name of the Fabric item that will be overwritten in the target stage. Only applies when overwriting a Fabric
	// item.
	TargetItemDisplayName *string

	// READ-ONLY; The ID of the Fabric item that will be overwritten in the target stage. Only applies when overwriting a Fabric
	// item.
	TargetItemID *string
}

// ErrorRelatedResource - The error related resource details object.
type ErrorRelatedResource struct {
	// READ-ONLY; The resource ID that's involved in the error.
	ResourceID *string

	// READ-ONLY; The type of the resource that's involved in the error.
	ResourceType *string
}

// ErrorResponse - The error response.
type ErrorResponse struct {
	// READ-ONLY; A specific identifier that provides information about an error condition, allowing for standardized communication
	// between our service and its users.
	ErrorCode *string

	// READ-ONLY; A human readable representation of the error.
	Message *string

	// READ-ONLY; List of additional error details.
	MoreDetails []ErrorResponseDetails

	// READ-ONLY; The error related resource details.
	RelatedResource *ErrorRelatedResource

	// READ-ONLY; ID of the request associated with the error.
	RequestID *string
}

// ErrorResponseDetails - The error response details.
type ErrorResponseDetails struct {
	// READ-ONLY; A specific identifier that provides information about an error condition, allowing for standardized communication
	// between our service and its users.
	ErrorCode *string

	// READ-ONLY; A human readable representation of the error.
	Message *string

	// READ-ONLY; The error related resource details.
	RelatedResource *ErrorRelatedResource
}

// ExternalDataShare - An external data share object.
type ExternalDataShare struct {
	// READ-ONLY; The principal that created the external data share.
	CreatorPrincipal *Principal

	// READ-ONLY; The external data share ID.
	ID *string

	// READ-ONLY; The item ID.
	ItemID *string

	// READ-ONLY; The path or list of paths that are externally shared.
	Paths []string

	// READ-ONLY; The recipient who was invited to accept the external data share.
	Recipient *ExternalDataShareRecipient

	// READ-ONLY; The status of the external data share.
	Status *ExternalDataShareStatus

	// READ-ONLY; The workspace ID.
	WorkspaceID *string

	// READ-ONLY; The tenant ID in which the external data share was accepted.
	AcceptedByTenantID *string

	// READ-ONLY; The expiration date and time (UTC) of the invitation to the external data share.
	ExpirationTimeUTC *time.Time

	// READ-ONLY; The URL for accepting the invitation to the external data share.
	InvitationURL *string
}

// ExternalDataShareRecipient - A representation of the the external data share recipient.
type ExternalDataShareRecipient struct {
	// REQUIRED; The recipient's email address.
	UserPrincipalName *string

	// The recipient's tenant ID.
	TenantID *string
}

// ExternalDataShareTarget - An object containing the properties of the target external data share.
type ExternalDataShareTarget struct {
	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource.
	ConnectionID *string
}

// ExternalDataShares - A list of external data shares with a continuation token.
type ExternalDataShares struct {
	// READ-ONLY; A list of external data shares.
	Value []ExternalDataShare

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// FabricItemMember - Fabric item member.
type FabricItemMember struct {
	// REQUIRED; A list specifying the access permissions for Fabric user to have to be automatically included in the role members.
	// Additional itemAccess types may be added over time.
	ItemAccess []ItemAccess

	// REQUIRED; The path to Fabric item having the specified item access.
	SourcePath *string
}

// GitConnectRequest - Contains the Git connect request data.
type GitConnectRequest struct {
	// REQUIRED; The Git provider details.
	GitProviderDetails GitProviderDetailsClassification
}

// GitConnection - Contains the Git connection details.
type GitConnection struct {
	// Git connection state. Additional connection state types may be added over time.
	GitConnectionState *GitConnectionState

	// The Git provider details.
	GitProviderDetails GitProviderDetailsClassification

	// Contains the sync details.
	GitSyncDetails *GitSyncDetails
}

// GitHubDetails - GitHub provider details.
type GitHubDetails struct {
	// REQUIRED; The branch name. Maximum length is 250 characters.
	BranchName *string

	// REQUIRED; The directory name. Maximum length is 256 characters.
	DirectoryName *string

	// REQUIRED; A Git provider type. Additional provider types may be added over time.
	GitProviderType *GitProviderType

	// REQUIRED; The owner name. Maximum length is 100 characters.
	OwnerName *string

	// REQUIRED; The repository name. Maximum length is 128 characters.
	RepositoryName *string
}

// GetGitProviderDetails implements the GitProviderDetailsClassification interface for type GitHubDetails.
func (g *GitHubDetails) GetGitProviderDetails() *GitProviderDetails {
	return &GitProviderDetails{
		BranchName:      g.BranchName,
		DirectoryName:   g.DirectoryName,
		GitProviderType: g.GitProviderType,
		RepositoryName:  g.RepositoryName,
	}
}

// GitProviderDetails - The Git provider details.
type GitProviderDetails struct {
	// REQUIRED; The branch name. Maximum length is 250 characters.
	BranchName *string

	// REQUIRED; The directory name. Maximum length is 256 characters.
	DirectoryName *string

	// REQUIRED; A Git provider type. Additional provider types may be added over time.
	GitProviderType *GitProviderType

	// REQUIRED; The repository name. Maximum length is 128 characters.
	RepositoryName *string
}

// GetGitProviderDetails implements the GitProviderDetailsClassification interface for type GitProviderDetails.
func (g *GitProviderDetails) GetGitProviderDetails() *GitProviderDetails { return g }

// GitStatusResponse - Contains the status response.
type GitStatusResponse struct {
	// REQUIRED
	Changes []ItemChange

	// READ-ONLY; Remote full SHA commit hash.
	RemoteCommitHash *string

	// READ-ONLY; Full SHA hash that the workspace is synced to.
	WorkspaceHead *string
}

// GitSyncDetails - Contains the sync details.
type GitSyncDetails struct {
	// READ-ONLY; The full Secure Hash Algorithm 1 (SHA-1) of the synced commit ID.
	Head *string

	// READ-ONLY; The date and time of last sync state.
	LastSyncTime *time.Time
}

// GoogleCloudStorage - An object containing the properties of the target Google Cloud Storage data source.
type GoogleCloudStorage struct {
	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource.
	ConnectionID *string

	// REQUIRED; HTTP URL that points to the target bucket in GCS. The URL should be in the format https://[bucket-name].storage.googleapis.com,
	// where [bucket-name] is the name of the bucket you want to point to. For
	// example: https://my-gcs-bucket.storage.googleapis.com
	Location *string

	// REQUIRED; Specifies a target folder or subfolder within the GCS bucket. For example: /folder
	Subpath *string
}

// InitializeGitConnectionRequest - Contains the initialize Git connection request data.
type InitializeGitConnectionRequest struct {
	// The strategy required for an initialization process when content exists on both the remote side and the workspace side.
	// Additional strategies may be added over time.
	InitializationStrategy *InitializationStrategy
}

// InitializeGitConnectionResponse - Contains the initialize Git connection response data.
type InitializeGitConnectionResponse struct {
	// READ-ONLY; Remote full SHA commit hash.
	RemoteCommitHash *string

	// READ-ONLY; Required action after the initialization process has finished. Additional actions may be added over time.
	RequiredAction *RequiredAction

	// READ-ONLY; Full SHA hash that the workspace is synced to.
	WorkspaceHead *string
}

// Item - An item object.
type Item struct {
	// REQUIRED; The item type.
	Type *ItemType

	// The item description.
	Description *string

	// The item display name.
	DisplayName *string

	// READ-ONLY; The item ID.
	ID *string

	// READ-ONLY; The workspace ID.
	WorkspaceID *string
}

// ItemChange - Contains the item's change information.
type ItemChange struct {
	// READ-ONLY; When there are changes on both the workspace side and the remote Git side.
	ConflictType *ConflictType

	// READ-ONLY; The item metadata.
	ItemMetadata *ItemMetadata

	// READ-ONLY; Change on the remote Git side.
	RemoteChange *ChangeType

	// READ-ONLY; Change on the workspace side.
	WorkspaceChange *ChangeType
}

type ItemConnection struct {
	// REQUIRED; The connection details of the connection.
	ConnectionDetails *ListConnectionDetails

	// REQUIRED; The connectivity type of the connection.
	ConnectivityType *ConnectivityType

	// The display name of the connection. Maximum length is 200 characters.
	DisplayName *string

	// The gateway object ID of the connection.
	GatewayID *string

	// The object ID of the connection.
	ID *string
}

type ItemConnections struct {
	// REQUIRED; A list of item connections
	Value []ItemConnection

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// ItemDefinition - An item definition object.
type ItemDefinition struct {
	// REQUIRED; A list of definition parts.
	Parts []ItemDefinitionPart

	// The format of the item definition.
	Format *string
}

// ItemDefinitionPart - An item definition part object.
type ItemDefinitionPart struct {
	// REQUIRED; The item part path.
	Path *string

	// REQUIRED; The item part payload.
	Payload *string

	// REQUIRED; The payload type.
	PayloadType *PayloadType
}

// ItemDefinitionResponse - Item public definition response.
type ItemDefinitionResponse struct {
	// READ-ONLY; An item definition object.
	Definition *ItemDefinition
}

// ItemDeploymentRequest - A request to deploy a Fabric item (such as a report or a dashboard).
type ItemDeploymentRequest struct {
	// REQUIRED; The Fabric item type.
	ItemType *ItemType

	// REQUIRED; The ID of the Fabric item to be deployed.
	SourceItemID *string
}

// ItemIdentifier - Contains the item identifier. At least one of the properties must be defined.
type ItemIdentifier struct {
	// The logical ID of the item. When the logical ID isn't available because the item is not yet added to the workspace, you
	// can use the object ID.
	LogicalID *string

	// The object ID of the item. When the object ID isn't available because the item was deleted from the workspace, you can
	// use the logical ID.
	ObjectID *string
}

// ItemJobInstance - An object representing item job instance
type ItemJobInstance struct {
	// Job end time in UTC
	EndTimeUTC *string

	// Job instance Id
	ID *string

	// The item job invoke type. Additional invokeTypes may be added over time.
	InvokeType *InvokeType

	// Item Id
	ItemID *string

	// Job type
	JobType *string

	// Root activity id to trace requests across services
	RootActivityID *string

	// Job start time in UTC
	StartTimeUTC *string

	// The item job status. Additional statuses may be added over time.
	Status *Status

	// READ-ONLY; Error response when job is failed
	FailureReason *ErrorResponse
}

type ItemJobInstances struct {
	// REQUIRED; A list of item job instances.
	Value []ItemJobInstance

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// ItemMetadata - Contains the item metadata.
type ItemMetadata struct {
	// READ-ONLY; The display name of the item. Prefers the workspace item's display name if it exists, otherwise displayName
	// uses the remote item's display name.
	DisplayName *string

	// READ-ONLY; The item identifier.
	ItemIdentifier *ItemIdentifier

	// READ-ONLY; The item type.
	ItemType *ItemType
}

// ItemSchedule - Item schedule.
type ItemSchedule struct {
	// REQUIRED; Whether this schedule is enabled. True - Enabled, False - Disabled.
	Enabled *bool

	// REQUIRED; The schedule ID.
	ID *string

	// The actual data contains the time/weekdays of this schedule.
	Configuration ScheduleConfigClassification

	// The created time stamp of this schedule in Utc.
	CreatedDateTime *time.Time

	// The user identity that created this schedule or last modified.
	Owner *Principal
}

// ItemSchedules - list of schedules for this item.
type ItemSchedules struct {
	// REQUIRED; list of schedules for this item.
	Value []ItemSchedule

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

type Items struct {
	// REQUIRED; A list of items.
	Value []Item

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// ListConnectionDetails - The connection details output for list operations.
type ListConnectionDetails struct {
	// REQUIRED; The path of the connection.
	Path *string

	// REQUIRED; The type of the connection.
	Type *string
}

// Members - The members object which contains the members of the role as arrays of different member types.
type Members struct {
	// A list of members who have a certain permission set in Microsoft Fabric. All members with that permission set are added
	// as members of this Data Access Role.
	FabricItemMembers []FabricItemMember

	// The list of Microsoft Entra ID members.
	MicrosoftEntraMembers []MicrosoftEntraMember
}

// MicrosoftEntraMember - Microsoft Entra ID member assigned to the role.
type MicrosoftEntraMember struct {
	// REQUIRED; The object id.
	ObjectID *string

	// REQUIRED; The tenant id.
	TenantID *string

	// The type of Microsoft Entra ID object. Additional objectType types may be added over time.
	ObjectType *ObjectType
}

// OneLake - An object containing the properties of the target OneLake data source.
type OneLake struct {
	// REQUIRED; The ID of the target in OneLake. The target can be an item of Lakehouse, KQLDatabase, or Warehouse.
	ItemID *string

	// REQUIRED; A string representing the full path to the target folder within the Item. This path should be relative to the
	// root of the OneLake directory structure. For example:
	// "Tables/myTablesFolder/someTableSubFolder".
	Path *string

	// REQUIRED; The ID of the target workspace.
	WorkspaceID *string
}

// OneLakeEndpoints - The OneLake API endpoints associated with this workspace.
type OneLakeEndpoints struct {
	// READ-ONLY; The OneLake API endpoint available for Blob API operations. This is a region specific endpoint, unless the tenant
	// has Private Link enabled and public access disabled, in which case the global endpoint
	// is provided.
	BlobEndpoint *string

	// READ-ONLY; The OneLake API endpoint available for Distributed File System (DFS) or ADLSgen2 filesystem API operations.
	// This is a region specific endpoint, unless the tenant has Private Link enabled and public
	// access disabled, in which case the global endpoint is provided.
	DfsEndpoint *string
}

// OperationState - An object describing the details and current state of a long running operation
type OperationState struct {
	// REQUIRED; The start date and time of the operation
	CreatedTimeUTC *time.Time

	// REQUIRED; The date and time of the last change to the operation
	LastUpdatedTimeUTC *time.Time

	// REQUIRED; The current status of the operation. Additional operation statuses may be added over time.
	Status *LongRunningOperationStatus

	// Operation progress as a percentage
	PercentComplete *int32

	// READ-ONLY; The error details in case the operation is in failed state
	Error *ErrorResponse
}

// PermissionScope - Defines a set of attributes (properties) that determine the scope and level of access to a resource.
// When attributeName property is set to Path, the attributeValueIncludedIn property must specify the
// location of the resource being accessed, such as "Tables/Table1". When the attributeName property is set to Action, the
// attributeValueIncludedIn property must specify the type of access being granted,
// such as Read.
type PermissionScope struct {
	// REQUIRED; Specifies the name of the attribute that is being evaluated for access permissions. AttributeName can be Path
	// or Action. Additional attributeName types may be added over time.
	AttributeName *AttributeName

	// REQUIRED; Specifies a list of values for the attributeName to define the scope and the level of access to a resource. When
	// attributeName is Path, attributeValueIncludedIn must specify the location of the
	// resource being accessed, such as "Tables/Table1". When attributeName is Action, the attributeValueIncludedIn must specify
	// the type of access being granted, such as Read.
	AttributeValueIncludedIn []string
}

// PreDeploymentDiffInformation - The number of new, different and identical deployed items before deployment.
type PreDeploymentDiffInformation struct {
	// READ-ONLY; The number of deployed items with differences between source and target stages, before deployment.
	DifferentItemsCount *int32

	// READ-ONLY; The number of new items deployed to the target stage.
	NewItemsCount *int32

	// READ-ONLY; The number of identical deployed items in the source and target stages, before deployment.
	NoDifferenceItemsCount *int32
}

// Principal - Represents an identity or a Microsoft Entra group.
type Principal struct {
	// REQUIRED; The principal's ID.
	ID *string

	// REQUIRED; The type of the principal. Additional principal types may be added over time.
	Type *PrincipalType

	// Group specific details. Applicable when the principal type is Group.
	GroupDetails *PrincipalGroupDetails

	// Service principal profile details. Applicable when the principal type is ServicePrincipalProfile.
	ServicePrincipalProfileDetails *PrincipalServicePrincipalProfileDetails

	// READ-ONLY; The principal's display name.
	DisplayName *string

	// READ-ONLY; Service principal specific details. Applicable when the principal type is ServicePrincipal.
	ServicePrincipalDetails *PrincipalServicePrincipalDetails

	// READ-ONLY; User principal specific details. Applicable when the principal type is User.
	UserDetails *PrincipalUserDetails
}

// PrincipalGroupDetails - Group specific details. Applicable when the principal type is Group.
type PrincipalGroupDetails struct {
	// The type of the group. Additional group types may be added over time.
	GroupType *GroupType
}

// PrincipalServicePrincipalDetails - Service principal specific details. Applicable when the principal type is ServicePrincipal.
type PrincipalServicePrincipalDetails struct {
	// READ-ONLY; The service principal's Microsoft Entra AppId.
	AADAppID *string
}

// PrincipalServicePrincipalProfileDetails - Service principal profile details. Applicable when the principal type is ServicePrincipalProfile.
type PrincipalServicePrincipalProfileDetails struct {
	// The service principal profile's parent principal.
	ParentPrincipal *Principal
}

// PrincipalUserDetails - User principal specific details. Applicable when the principal type is User.
type PrincipalUserDetails struct {
	// READ-ONLY; The user principal name.
	UserPrincipalName *string
}

// RunOnDemandItemJobRequest - Run on demand item job instance payload
type RunOnDemandItemJobRequest struct {
	// Payload for run on-demand job request. Needed only if the job type requires a payload.
	ExecutionData any
}

// S3Compatible - An object containing the properties of the target S3 compatible data source.
type S3Compatible struct {
	// REQUIRED; Specifies the target bucket within the S3 compatible location.
	Bucket *string

	// REQUIRED; A string representing the connection that is bound with the shortcut. The connectionId is a unique identifier
	// used to establish a connection between the shortcut and the target datasource.
	ConnectionID *string

	// REQUIRED; HTTP URL of the S3 compatible endpoint. This endpoint must be able to receive ListBuckets S3 API calls. The URL
	// must be in the non-bucket specific format; no bucket should be specified here. For
	// example: https://s3endpoint.contoso.com
	Location *string

	// REQUIRED; Specifies a target folder or subfolder within the S3 compatible bucket. For example: /folder
	Subpath *string
}

// ScheduleConfig - Item schedule plan detail settings.
type ScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly.
	StartDateTime *time.Time

	// REQUIRED; A string represents the type of the plan. Additional planType types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type ScheduleConfig.
func (s *ScheduleConfig) GetScheduleConfig() *ScheduleConfig { return s }

// Shortcut - An object representing a reference that points to other storage locations which can be internal or external
// to OneLake. Shortcut is defined by name, path where the shortcut is created and target
// specifying the target storage location.
type Shortcut struct {
	// REQUIRED; Name of the shortcut.
	Name *string

	// REQUIRED; A string representing the full path where the shortcut is created, including either "Files" or "Tables".
	Path *string

	// REQUIRED; An object that contains the target datasource, and must specify exactly one of the supported destinations.
	Target *Target
}

type Shortcuts struct {
	// REQUIRED; A list of shortcuts.
	Value []Shortcut

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// Target - An object that contains the target datasource, and must specify exactly one of the supported destinations as described
// in the table below.
type Target struct {
	// REQUIRED; The type object contains properties like target shortcut account type. Additional types may be added over time.
	Type *Type

	// An object containing the properties of the target ADLS Gen2 data source.
	AdlsGen2 *AdlsGen2

	// An object containing the properties of the target Amazon S3 data source.
	AmazonS3 *AmazonS3

	// An object containing the properties of the target Dataverse data source.
	Dataverse *Dataverse

	// An object containing the properties of the target external data share.
	ExternalDataShare *ExternalDataShareTarget

	// An object containing the properties of the target Google Cloud Storage data source.
	GoogleCloudStorage *GoogleCloudStorage

	// An object containing the properties of the target OneLake data source.
	OneLake *OneLake

	// An object containing the properties of the target S3 compatible data source.
	S3Compatible *S3Compatible
}

// UpdateFromGitRequest - Contains the update from Git request data.
type UpdateFromGitRequest struct {
	// REQUIRED; Remote full SHA commit hash.
	RemoteCommitHash *string

	// Conflict resolution to be used in the update from Git operation. If items are in conflict and a conflict resolution is
	// not specified, the update operation will not start.
	ConflictResolution *WorkspaceConflictResolution

	// Options to be used in the update from Git operation
	Options *UpdateOptions

	// Full SHA hash that the workspace is synced to. This value may be null only after Initialize Connection. In other cases,
	// the system will validate that the given value is aligned with the head known to
	// the system.
	WorkspaceHead *string
}

// UpdateItemDefinitionRequest - Update item definition request payload.
type UpdateItemDefinitionRequest struct {
	// REQUIRED; An item definition object.
	Definition *ItemDefinition
}

// UpdateItemRequest - Update item request.
type UpdateItemRequest struct {
	// The item description. Maximum length is 256 characters.
	Description *string

	// The item display name. The display name must follow naming rules according to item type.
	DisplayName *string
}

// UpdateOptions - Contains the options that are enabled for the update from Git.
type UpdateOptions struct {
	// User consent to override incoming items during the update from Git process. When incoming items are present and the allow
	// override items is not specified or is provided as false, the update operation
	// will not start. Default value is false.
	AllowOverrideItems *bool
}

// UpdateScheduleRequest - Update item schedule plan request payload.
type UpdateScheduleRequest struct {
	// REQUIRED; The actual data contains the time/weekdays of this schedule.
	Configuration ScheduleConfigClassification

	// REQUIRED; Whether this schedule is enabled. True - Enabled, False - Disabled.
	Enabled *bool
}

// UpdateWorkspaceRequest - Update workspace request payload.
type UpdateWorkspaceRequest struct {
	// The workspace description.
	// The description cannot contain more than 4000 characters.
	Description *string

	// The workspace display name.
	// The display name cannot contain more than 256 characters.
	// Workspace names must be unique within the tenant.
	// "Admin monitoring" is a reserved workspace name.
	DisplayName *string
}

// UpdateWorkspaceRoleAssignmentRequest - Update workspace role assignment request payload.
type UpdateWorkspaceRoleAssignmentRequest struct {
	// REQUIRED; The workspace role of the principal.
	Role *WorkspaceRole
}

type WeeklyScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly.
	StartDateTime *time.Time

	// REQUIRED; A list of time slots in hh:mm format, at most 100 elements are allowed.
	Times []string

	// REQUIRED; A string represents the type of the plan. Additional planType types may be added over time.
	Type *ScheduleType

	// REQUIRED; A list of weekdays, at most seven elements are allowed.
	Weekdays []DayOfWeek
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type WeeklyScheduleConfig.
func (w *WeeklyScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     w.EndDateTime,
		LocalTimeZoneID: w.LocalTimeZoneID,
		StartDateTime:   w.StartDateTime,
		Type:            w.Type,
	}
}

// Workspace - A workspace object.
type Workspace struct {
	// REQUIRED; The workspace display name.
	DisplayName *string

	// READ-ONLY; The workspace description.
	Description *string

	// READ-ONLY; The workspace ID.
	ID *string

	// READ-ONLY; The ID of the capacity the workspace is assigned to.
	CapacityID *string

	// READ-ONLY; The workspace type.
	Type *WorkspaceType
}

// WorkspaceConflictResolution - The basic conflict resolution data.
type WorkspaceConflictResolution struct {
	// REQUIRED; Conflict resolution policy. Additional conflict resolution policies may be added over time.
	ConflictResolutionPolicy *ConflictResolutionPolicy

	// REQUIRED; Conflict resolution type. Additional conflict resolution types may be added over time.
	ConflictResolutionType *ConflictResolutionType
}

// WorkspaceIdentity - A workspace identity object.
type WorkspaceIdentity struct {
	// READ-ONLY; The application ID.
	ApplicationID *string

	// READ-ONLY; The service principal ID.
	ServicePrincipalID *string
}

// WorkspaceInfo - A workspace object.
type WorkspaceInfo struct {
	// REQUIRED; The workspace display name.
	DisplayName *string

	// READ-ONLY; The workspace description.
	Description *string

	// READ-ONLY; The workspace ID.
	ID *string

	// READ-ONLY; The status of the workspace's capacity assignment progress.
	CapacityAssignmentProgress *CapacityAssignmentProgress

	// READ-ONLY; The ID of the capacity the workspace is assigned to.
	CapacityID *string

	// READ-ONLY; The region of the capacity associated with this workspace.
	CapacityRegion *CapacityRegion

	// READ-ONLY; The OneLake API endpoints associated with this workspace.
	OneLakeEndpoints *OneLakeEndpoints

	// READ-ONLY; The workspace type.
	Type *WorkspaceType

	// READ-ONLY; The workspace identity.
	WorkspaceIdentity *WorkspaceIdentity
}

// WorkspaceRoleAssignment - A workspace role assignment object.
type WorkspaceRoleAssignment struct {
	// READ-ONLY; The workspace role assignment ID.
	ID *string

	// READ-ONLY; The principal.
	Principal *Principal

	// READ-ONLY; The workspace role of the principal.
	Role *WorkspaceRole
}

type WorkspaceRoleAssignments struct {
	// REQUIRED
	Value []WorkspaceRoleAssignment

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

type Workspaces struct {
	// REQUIRED; A list of workspaces.
	Value []Workspace

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}
