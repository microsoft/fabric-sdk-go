// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
)

// OneLakeShortcutsClient contains the methods for the OneLakeShortcuts group.
// Don't use this type directly, use a constructor function instead.
type OneLakeShortcutsClient struct {
	internal *azcore.Client
	endpoint string
}

// CreateShortcut - REQUIRED DELEGATED SCOPES OneLake.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The ID of the workspace.
//   - itemID - The ID of the data item.
//   - createShortcutRequest - A shortcut create request includes a shortcut object representing a reference pointing to internal
//     or external storage locations within OneLake. The shortcut is defined by its name, the path where
//     it's created, and the target indicating the destination storage location.
//   - options - OneLakeShortcutsClientCreateShortcutOptions contains the optional parameters for the OneLakeShortcutsClient.CreateShortcut
//     method.
func (client *OneLakeShortcutsClient) CreateShortcut(ctx context.Context, workspaceID string, itemID string, createShortcutRequest CreateShortcutRequest, options *OneLakeShortcutsClientCreateShortcutOptions) (OneLakeShortcutsClientCreateShortcutResponse, error) {
	var err error
	const operationName = "core.OneLakeShortcutsClient.CreateShortcut"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createShortcutCreateRequest(ctx, workspaceID, itemID, createShortcutRequest, options)
	if err != nil {
		return OneLakeShortcutsClientCreateShortcutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OneLakeShortcutsClientCreateShortcutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = NewResponseError(httpResp)
		return OneLakeShortcutsClientCreateShortcutResponse{}, err
	}
	resp, err := client.createShortcutHandleResponse(httpResp)
	return resp, err
}

// createShortcutCreateRequest creates the CreateShortcut request.
func (client *OneLakeShortcutsClient) createShortcutCreateRequest(ctx context.Context, workspaceID string, itemID string, createShortcutRequest CreateShortcutRequest, options *OneLakeShortcutsClientCreateShortcutOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}/shortcuts"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ShortcutConflictPolicy != nil {
		reqQP.Set("shortcutConflictPolicy", string(*options.ShortcutConflictPolicy))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createShortcutRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// createShortcutHandleResponse handles the CreateShortcut response.
func (client *OneLakeShortcutsClient) createShortcutHandleResponse(resp *http.Response) (OneLakeShortcutsClientCreateShortcutResponse, error) {
	result := OneLakeShortcutsClientCreateShortcutResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Shortcut); err != nil {
		return OneLakeShortcutsClientCreateShortcutResponse{}, err
	}
	return result, nil
}

// DeleteShortcut - REQUIRED DELEGATED SCOPES OneLake.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The ID of the workspace.
//   - itemID - The ID of the data item.
//   - shortcutPath - The path of the shortcut to be deleted. For more information see: Directory and file names
//     [/rest/api/storageservices/Naming-and-Referencing-Shares--Directories--Files--and-Metadata#directory-and-file-names].
//   - shortcutName - The name of the shortcut to delete. For more information see: Directory and file names
//     [/rest/api/storageservices/Naming-and-Referencing-Shares--Directories--Files--and-Metadata#directory-and-file-names].
//   - options - OneLakeShortcutsClientDeleteShortcutOptions contains the optional parameters for the OneLakeShortcutsClient.DeleteShortcut
//     method.
func (client *OneLakeShortcutsClient) DeleteShortcut(ctx context.Context, workspaceID string, itemID string, shortcutPath string, shortcutName string, options *OneLakeShortcutsClientDeleteShortcutOptions) (OneLakeShortcutsClientDeleteShortcutResponse, error) {
	var err error
	const operationName = "core.OneLakeShortcutsClient.DeleteShortcut"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteShortcutCreateRequest(ctx, workspaceID, itemID, shortcutPath, shortcutName, options)
	if err != nil {
		return OneLakeShortcutsClientDeleteShortcutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OneLakeShortcutsClientDeleteShortcutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return OneLakeShortcutsClientDeleteShortcutResponse{}, err
	}
	return OneLakeShortcutsClientDeleteShortcutResponse{}, nil
}

// deleteShortcutCreateRequest creates the DeleteShortcut request.
func (client *OneLakeShortcutsClient) deleteShortcutCreateRequest(ctx context.Context, workspaceID string, itemID string, shortcutPath string, shortcutName string, _ *OneLakeShortcutsClientDeleteShortcutOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}/shortcuts/{shortcutPath}/{shortcutName}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	if shortcutPath == "" {
		return nil, errors.New("parameter shortcutPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{shortcutPath}", url.PathEscape(shortcutPath))
	if shortcutName == "" {
		return nil, errors.New("parameter shortcutName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{shortcutName}", url.PathEscape(shortcutName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetShortcut - REQUIRED DELEGATED SCOPES OneLake.Read.All or OneLake.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The ID of the workspace.
//   - itemID - The ID of the data item.
//   - shortcutPath - The creation path of the shortcut. For more information see: Directory and file names
//     [/rest/api/storageservices/Naming-and-Referencing-Shares--Directories--Files--and-Metadata#directory-and-file-names].
//   - shortcutName - The name of the shortcut. For more information see: Directory and file names [/rest/api/storageservices/Naming-and-Referencing-Shares--Directories--Files--and-Metadata#directory-and-file-names].
//   - options - OneLakeShortcutsClientGetShortcutOptions contains the optional parameters for the OneLakeShortcutsClient.GetShortcut
//     method.
func (client *OneLakeShortcutsClient) GetShortcut(ctx context.Context, workspaceID string, itemID string, shortcutPath string, shortcutName string, options *OneLakeShortcutsClientGetShortcutOptions) (OneLakeShortcutsClientGetShortcutResponse, error) {
	var err error
	const operationName = "core.OneLakeShortcutsClient.GetShortcut"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getShortcutCreateRequest(ctx, workspaceID, itemID, shortcutPath, shortcutName, options)
	if err != nil {
		return OneLakeShortcutsClientGetShortcutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OneLakeShortcutsClientGetShortcutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return OneLakeShortcutsClientGetShortcutResponse{}, err
	}
	resp, err := client.getShortcutHandleResponse(httpResp)
	return resp, err
}

// getShortcutCreateRequest creates the GetShortcut request.
func (client *OneLakeShortcutsClient) getShortcutCreateRequest(ctx context.Context, workspaceID string, itemID string, shortcutPath string, shortcutName string, _ *OneLakeShortcutsClientGetShortcutOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}/shortcuts/{shortcutPath}/{shortcutName}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	if shortcutPath == "" {
		return nil, errors.New("parameter shortcutPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{shortcutPath}", url.PathEscape(shortcutPath))
	if shortcutName == "" {
		return nil, errors.New("parameter shortcutName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{shortcutName}", url.PathEscape(shortcutName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getShortcutHandleResponse handles the GetShortcut response.
func (client *OneLakeShortcutsClient) getShortcutHandleResponse(resp *http.Response) (OneLakeShortcutsClientGetShortcutResponse, error) {
	result := OneLakeShortcutsClientGetShortcutResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Shortcut); err != nil {
		return OneLakeShortcutsClientGetShortcutResponse{}, err
	}
	return result, nil
}

// NewListShortcutsPager - REQUIRED DELEGATED SCOPES OneLake.Read.All or OneLake.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - options - OneLakeShortcutsClientListShortcutsOptions contains the optional parameters for the OneLakeShortcutsClient.NewListShortcutsPager
//     method.
func (client *OneLakeShortcutsClient) NewListShortcutsPager(workspaceID string, itemID string, options *OneLakeShortcutsClientListShortcutsOptions) *runtime.Pager[OneLakeShortcutsClientListShortcutsResponse] {
	return runtime.NewPager(runtime.PagingHandler[OneLakeShortcutsClientListShortcutsResponse]{
		More: func(page OneLakeShortcutsClientListShortcutsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *OneLakeShortcutsClientListShortcutsResponse) (OneLakeShortcutsClientListShortcutsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "core.OneLakeShortcutsClient.NewListShortcutsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listShortcutsCreateRequest(ctx, workspaceID, itemID, options)
			}, nil)
			if err != nil {
				return OneLakeShortcutsClientListShortcutsResponse{}, err
			}
			return client.listShortcutsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listShortcutsCreateRequest creates the ListShortcuts request.
func (client *OneLakeShortcutsClient) listShortcutsCreateRequest(ctx context.Context, workspaceID string, itemID string, options *OneLakeShortcutsClientListShortcutsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}/shortcuts"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	if options != nil && options.ParentPath != nil {
		reqQP.Set("parentPath", *options.ParentPath)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listShortcutsHandleResponse handles the ListShortcuts response.
func (client *OneLakeShortcutsClient) listShortcutsHandleResponse(resp *http.Response) (OneLakeShortcutsClientListShortcutsResponse, error) {
	result := OneLakeShortcutsClientListShortcutsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Shortcuts); err != nil {
		return OneLakeShortcutsClientListShortcutsResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// ListShortcuts - returns array of Shortcut from all pages.
// REQUIRED DELEGATED SCOPES OneLake.Read.All or OneLake.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - options - OneLakeShortcutsClientListShortcutsOptions contains the optional parameters for the OneLakeShortcutsClient.NewListShortcutsPager method.
func (client *OneLakeShortcutsClient) ListShortcuts(ctx context.Context, workspaceID string, itemID string, options *OneLakeShortcutsClientListShortcutsOptions) ([]Shortcut, error) {
	pager := client.NewListShortcutsPager(workspaceID, itemID, options)
	mapper := func(resp OneLakeShortcutsClientListShortcutsResponse) []Shortcut {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Shortcut{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return []Shortcut{}, err
	}
	return list, nil
}
