// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"
	"time"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/fabric/core/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *core.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = core.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestWorkspaces_CreateWorkspace() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a workspace example"},
	})
	var exampleCreateWorkspaceRequest core.CreateWorkspaceRequest
	exampleCreateWorkspaceRequest = core.CreateWorkspaceRequest{
		DisplayName: to.Ptr("New workspace"),
	}

	testsuite.serverFactory.WorkspacesServer.CreateWorkspace = func(ctx context.Context, createWorkspaceRequest core.CreateWorkspaceRequest, options *core.WorkspacesClientCreateWorkspaceOptions) (resp azfake.Responder[core.WorkspacesClientCreateWorkspaceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleCreateWorkspaceRequest, createWorkspaceRequest))
		resp = azfake.Responder[core.WorkspacesClientCreateWorkspaceResponse]{}
		resp.SetResponse(http.StatusCreated, core.WorkspacesClientCreateWorkspaceResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	_, err = client.CreateWorkspace(ctx, exampleCreateWorkspaceRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestWorkspaces_ListWorkspaces() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List workspaces example"},
	})

	exampleRes := core.Workspaces{
		Value: []core.Workspace{
			{
				Type:        to.Ptr(core.WorkspaceTypePersonal),
				Description: to.Ptr(""),
				DisplayName: to.Ptr("My workspace"),
				ID:          to.Ptr("fa9ad228-3e6b-44d4-b5f4-e275f337afa9"),
			},
			{
				Type:        to.Ptr(core.WorkspaceTypeWorkspace),
				Description: to.Ptr("A  workspace used by the marketing team"),
				DisplayName: to.Ptr("Marketing"),
				ID:          to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff227"),
			},
			{
				Type:        to.Ptr(core.WorkspaceTypeWorkspace),
				Description: to.Ptr("A workspace used by the finance team"),
				CapacityID:  to.Ptr("171018af-1531-4e61-942a-74f024b7f9fd"),
				DisplayName: to.Ptr("Finance"),
				ID:          to.Ptr("f2d70dc6-8f3e-4f2c-b00e-e2d336d7d711"),
			}},
	}

	testsuite.serverFactory.WorkspacesServer.NewListWorkspacesPager = func(options *core.WorkspacesClientListWorkspacesOptions) (resp azfake.PagerResponder[core.WorkspacesClientListWorkspacesResponse]) {
		resp = azfake.PagerResponder[core.WorkspacesClientListWorkspacesResponse]{}
		resp.AddPage(http.StatusOK, core.WorkspacesClientListWorkspacesResponse{Workspaces: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	pager := client.NewListWorkspacesPager(&core.WorkspacesClientListWorkspacesOptions{Roles: nil,
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Workspaces))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List workspaces with continuation example"},
	})

	exampleRes = core.Workspaces{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/workspaces?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.Workspace{
			{
				Type:        to.Ptr(core.WorkspaceTypePersonal),
				Description: to.Ptr(""),
				DisplayName: to.Ptr("My workspace"),
				ID:          to.Ptr("fa9ad228-3e6b-44d4-b5f4-e275f337afa9"),
			},
			{
				Type:        to.Ptr(core.WorkspaceTypeWorkspace),
				Description: to.Ptr("A  workspace used by the marketing team"),
				DisplayName: to.Ptr("Marketing"),
				ID:          to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff227"),
			},
			{
				Type:        to.Ptr(core.WorkspaceTypeWorkspace),
				Description: to.Ptr("A workspace used by the finance team"),
				CapacityID:  to.Ptr("171018af-1531-4e61-942a-74f024b7f9fd"),
				DisplayName: to.Ptr("Finance"),
				ID:          to.Ptr("f2d70dc6-8f3e-4f2c-b00e-e2d336d7d711"),
			}},
	}

	testsuite.serverFactory.WorkspacesServer.NewListWorkspacesPager = func(options *core.WorkspacesClientListWorkspacesOptions) (resp azfake.PagerResponder[core.WorkspacesClientListWorkspacesResponse]) {
		resp = azfake.PagerResponder[core.WorkspacesClientListWorkspacesResponse]{}
		resp.AddPage(http.StatusOK, core.WorkspacesClientListWorkspacesResponse{Workspaces: exampleRes}, nil)
		return
	}

	pager = client.NewListWorkspacesPager(&core.WorkspacesClientListWorkspacesOptions{Roles: nil,
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Workspaces))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List workspaces with roles filter example"},
	})

	exampleRes = core.Workspaces{
		Value: []core.Workspace{
			{
				Type:        to.Ptr(core.WorkspaceTypePersonal),
				Description: to.Ptr("A workspace for admins"),
				DisplayName: to.Ptr("Admins workspace"),
				ID:          to.Ptr("fa9ad228-3e6b-44d4-b5f4-e275f337afa9"),
			},
			{
				Type:        to.Ptr(core.WorkspaceTypeWorkspace),
				Description: to.Ptr("A workspace for members"),
				DisplayName: to.Ptr("Members workspace"),
				ID:          to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff227"),
			},
			{
				Type:        to.Ptr(core.WorkspaceTypeWorkspace),
				Description: to.Ptr("A workspace for contributors"),
				DisplayName: to.Ptr("Contributors workspace"),
				ID:          to.Ptr("0c02a0cd-71bc-410f-aa05-5a7bc98765f7"),
			},
			{
				Type:        to.Ptr(core.WorkspaceTypeWorkspace),
				Description: to.Ptr("A workspace for viewers"),
				DisplayName: to.Ptr("Viewers workspace"),
				ID:          to.Ptr("99d58687-8903-4dbd-8a78-40f95dca7177"),
			}},
	}

	testsuite.serverFactory.WorkspacesServer.NewListWorkspacesPager = func(options *core.WorkspacesClientListWorkspacesOptions) (resp azfake.PagerResponder[core.WorkspacesClientListWorkspacesResponse]) {
		resp = azfake.PagerResponder[core.WorkspacesClientListWorkspacesResponse]{}
		resp.AddPage(http.StatusOK, core.WorkspacesClientListWorkspacesResponse{Workspaces: exampleRes}, nil)
		return
	}

	pager = client.NewListWorkspacesPager(&core.WorkspacesClientListWorkspacesOptions{Roles: to.Ptr("Admin,Member,Contributor,Viewer"),
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Workspaces))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestWorkspaces_GetWorkspace() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff227"

	exampleRes := core.WorkspaceInfo{
		Type:                       to.Ptr(core.WorkspaceTypeWorkspace),
		Description:                to.Ptr("New workspace description"),
		CapacityID:                 to.Ptr("56bac802-080d-4f73-8a42-1b406eb1fcac"),
		DisplayName:                to.Ptr("New workspace"),
		ID:                         to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff227"),
		CapacityAssignmentProgress: to.Ptr(core.CapacityAssignmentProgressCompleted),
		CapacityRegion:             to.Ptr(core.CapacityRegionEastUS),
		OneLakeEndpoints: &core.OneLakeEndpoints{
			BlobEndpoint: to.Ptr("https://eastus-onelake.blob.fabric.microsoft.com"),
			DfsEndpoint:  to.Ptr("https://eastus-onelake.dfs.fabric.microsoft.com"),
		},
		WorkspaceIdentity: &core.WorkspaceIdentity{
			ApplicationID:      to.Ptr("00a4a8f9-78d3-41b3-b87a-6ae5271c8d0d"),
			ServicePrincipalID: to.Ptr("5ba4ae58-d402-45c6-a848-0253e834fd78"),
		},
	}

	testsuite.serverFactory.WorkspacesServer.GetWorkspace = func(ctx context.Context, workspaceID string, options *core.WorkspacesClientGetWorkspaceOptions) (resp azfake.Responder[core.WorkspacesClientGetWorkspaceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.Responder[core.WorkspacesClientGetWorkspaceResponse]{}
		resp.SetResponse(http.StatusOK, core.WorkspacesClientGetWorkspaceResponse{WorkspaceInfo: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	res, err := client.GetWorkspace(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.WorkspaceInfo))
}

func (testsuite *FakeTestSuite) TestWorkspaces_UpdateWorkspace() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a workspace example"},
	})
	var exampleWorkspaceID string
	var exampleUpdateWorkspaceRequest core.UpdateWorkspaceRequest
	exampleWorkspaceID = "33bae707-5fe7-4352-89bd-061a1318b60a"
	exampleUpdateWorkspaceRequest = core.UpdateWorkspaceRequest{
		Description: to.Ptr("Workspace New description"),
		DisplayName: to.Ptr("Workspace New displayName"),
	}

	exampleRes := core.Workspace{
		Type:        to.Ptr(core.WorkspaceTypeWorkspace),
		Description: to.Ptr("Workspace New description"),
		DisplayName: to.Ptr("Workspace New displayName"),
		ID:          to.Ptr("33bae707-5fe7-4352-89bd-061a1318b60a"),
	}

	testsuite.serverFactory.WorkspacesServer.UpdateWorkspace = func(ctx context.Context, workspaceID string, updateWorkspaceRequest core.UpdateWorkspaceRequest, options *core.WorkspacesClientUpdateWorkspaceOptions) (resp azfake.Responder[core.WorkspacesClientUpdateWorkspaceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateWorkspaceRequest, updateWorkspaceRequest))
		resp = azfake.Responder[core.WorkspacesClientUpdateWorkspaceResponse]{}
		resp.SetResponse(http.StatusOK, core.WorkspacesClientUpdateWorkspaceResponse{Workspace: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	res, err := client.UpdateWorkspace(ctx, exampleWorkspaceID, exampleUpdateWorkspaceRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Workspace))
}

func (testsuite *FakeTestSuite) TestWorkspaces_DeleteWorkspace() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"

	testsuite.serverFactory.WorkspacesServer.DeleteWorkspace = func(ctx context.Context, workspaceID string, options *core.WorkspacesClientDeleteWorkspaceOptions) (resp azfake.Responder[core.WorkspacesClientDeleteWorkspaceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.Responder[core.WorkspacesClientDeleteWorkspaceResponse]{}
		resp.SetResponse(http.StatusOK, core.WorkspacesClientDeleteWorkspaceResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	_, err = client.DeleteWorkspace(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestWorkspaces_AddWorkspaceRoleAssignment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Add workspace role assignment example"},
	})
	var exampleWorkspaceID string
	var exampleWorkspaceRoleAssignmentRequest core.AddWorkspaceRoleAssignmentRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff512"
	exampleWorkspaceRoleAssignmentRequest = core.AddWorkspaceRoleAssignmentRequest{
		Principal: &core.Principal{
			Type: to.Ptr(core.PrincipalTypeUser),
			ID:   to.Ptr("8eedb1b0-3af8-4b17-8e7e-663e61e12211"),
		},
		Role: to.Ptr(core.WorkspaceRoleMember),
	}

	testsuite.serverFactory.WorkspacesServer.AddWorkspaceRoleAssignment = func(ctx context.Context, workspaceID string, workspaceRoleAssignmentRequest core.AddWorkspaceRoleAssignmentRequest, options *core.WorkspacesClientAddWorkspaceRoleAssignmentOptions) (resp azfake.Responder[core.WorkspacesClientAddWorkspaceRoleAssignmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleWorkspaceRoleAssignmentRequest, workspaceRoleAssignmentRequest))
		resp = azfake.Responder[core.WorkspacesClientAddWorkspaceRoleAssignmentResponse]{}
		resp.SetResponse(http.StatusCreated, core.WorkspacesClientAddWorkspaceRoleAssignmentResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	_, err = client.AddWorkspaceRoleAssignment(ctx, exampleWorkspaceID, exampleWorkspaceRoleAssignmentRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestWorkspaces_ListWorkspaceRoleAssignments() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get workspace role assignments example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "e4ae4765-02a0-4cd8-bbef-65be17dd5a22"

	exampleRes := core.WorkspaceRoleAssignments{
		Value: []core.WorkspaceRoleAssignment{
			{
				ID: to.Ptr("81fac5e1-2a81-421b-a168-110b1c72fa11"),
				Principal: &core.Principal{
					Type:        to.Ptr(core.PrincipalTypeUser),
					DisplayName: to.Ptr("Eric Solomon"),
					ID:          to.Ptr("81fac5e1-2a81-421b-a168-110b1c72fa11"),
					UserDetails: &core.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("eric@microsoft.com"),
					},
				},
				Role: to.Ptr(core.WorkspaceRoleAdmin),
			},
			{
				ID: to.Ptr("dbc4f130-681f-46b9-b19a-ca19ea5daa31"),
				Principal: &core.Principal{
					Type:        to.Ptr(core.PrincipalTypeServicePrincipal),
					DisplayName: to.Ptr("ServicePrincipal"),
					ID:          to.Ptr("dbc4f130-681f-46b9-b19a-ca19ea5daa31"),
					ServicePrincipalDetails: &core.PrincipalServicePrincipalDetails{
						AADAppID: to.Ptr("7ac9c70b-69f1-48c5-bf5b-69ac50578a55"),
					},
				},
				Role: to.Ptr(core.WorkspaceRoleMember),
			}},
	}

	testsuite.serverFactory.WorkspacesServer.NewListWorkspaceRoleAssignmentsPager = func(workspaceID string, options *core.WorkspacesClientListWorkspaceRoleAssignmentsOptions) (resp azfake.PagerResponder[core.WorkspacesClientListWorkspaceRoleAssignmentsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[core.WorkspacesClientListWorkspaceRoleAssignmentsResponse]{}
		resp.AddPage(http.StatusOK, core.WorkspacesClientListWorkspaceRoleAssignmentsResponse{WorkspaceRoleAssignments: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	pager := client.NewListWorkspaceRoleAssignmentsPager(exampleWorkspaceID, &core.WorkspacesClientListWorkspaceRoleAssignmentsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.WorkspaceRoleAssignments))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get workspace role assignments with continuation example"},
	})
	exampleWorkspaceID = "e4ae4765-02a0-4cd8-bbef-65be17dd5a22"

	exampleRes = core.WorkspaceRoleAssignments{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/workspaces/e4ae4765-02a0-4cd8-bbef-65be17dd5a22/roleAssignments?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.WorkspaceRoleAssignment{
			{
				ID: to.Ptr("81fac5e1-2a81-421b-a168-110b1c72fa11"),
				Principal: &core.Principal{
					Type:        to.Ptr(core.PrincipalTypeUser),
					DisplayName: to.Ptr("Eric Solomon"),
					ID:          to.Ptr("81fac5e1-2a81-421b-a168-110b1c72fa11"),
					UserDetails: &core.PrincipalUserDetails{
						UserPrincipalName: to.Ptr("eric@microsoft.com"),
					},
				},
				Role: to.Ptr(core.WorkspaceRoleAdmin),
			},
			{
				ID: to.Ptr("dbc4f130-681f-46b9-b19a-ca19ea5daa31"),
				Principal: &core.Principal{
					Type:        to.Ptr(core.PrincipalTypeServicePrincipal),
					DisplayName: to.Ptr("ServicePrincipal"),
					ID:          to.Ptr("dbc4f130-681f-46b9-b19a-ca19ea5daa31"),
					ServicePrincipalDetails: &core.PrincipalServicePrincipalDetails{
						AADAppID: to.Ptr("7ac9c70b-69f1-48c5-bf5b-69ac50578a55"),
					},
				},
				Role: to.Ptr(core.WorkspaceRoleMember),
			}},
	}

	testsuite.serverFactory.WorkspacesServer.NewListWorkspaceRoleAssignmentsPager = func(workspaceID string, options *core.WorkspacesClientListWorkspaceRoleAssignmentsOptions) (resp azfake.PagerResponder[core.WorkspacesClientListWorkspaceRoleAssignmentsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[core.WorkspacesClientListWorkspaceRoleAssignmentsResponse]{}
		resp.AddPage(http.StatusOK, core.WorkspacesClientListWorkspaceRoleAssignmentsResponse{WorkspaceRoleAssignments: exampleRes}, nil)
		return
	}

	pager = client.NewListWorkspaceRoleAssignmentsPager(exampleWorkspaceID, &core.WorkspacesClientListWorkspaceRoleAssignmentsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.WorkspaceRoleAssignments))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestWorkspaces_DeleteWorkspaceRoleAssignment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete workspace role assignment example"},
	})
	var exampleWorkspaceID string
	var exampleWorkspaceRoleAssignmentID string
	exampleWorkspaceID = "ba33a98a-2b66-49f1-bb71-80c38e4b3756"
	exampleWorkspaceRoleAssignmentID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"

	testsuite.serverFactory.WorkspacesServer.DeleteWorkspaceRoleAssignment = func(ctx context.Context, workspaceID string, workspaceRoleAssignmentID string, options *core.WorkspacesClientDeleteWorkspaceRoleAssignmentOptions) (resp azfake.Responder[core.WorkspacesClientDeleteWorkspaceRoleAssignmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWorkspaceRoleAssignmentID, workspaceRoleAssignmentID)
		resp = azfake.Responder[core.WorkspacesClientDeleteWorkspaceRoleAssignmentResponse]{}
		resp.SetResponse(http.StatusOK, core.WorkspacesClientDeleteWorkspaceRoleAssignmentResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	_, err = client.DeleteWorkspaceRoleAssignment(ctx, exampleWorkspaceID, exampleWorkspaceRoleAssignmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestWorkspaces_UpdateWorkspaceRoleAssignment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update workspace role assignment example"},
	})
	var exampleWorkspaceID string
	var exampleWorkspaceRoleAssignmentID string
	var exampleUpdateWorkspaceRoleAssignmentRequest core.UpdateWorkspaceRoleAssignmentRequest
	exampleWorkspaceID = "0ac682f5-aee3-4968-9d21-692eb3fd4056"
	exampleWorkspaceRoleAssignmentID = "0218b8c4-f5a2-4a1e-bbbd-a986dd8aeb81"
	exampleUpdateWorkspaceRoleAssignmentRequest = core.UpdateWorkspaceRoleAssignmentRequest{
		Role: to.Ptr(core.WorkspaceRoleContributor),
	}

	exampleRes := core.WorkspaceRoleAssignment{
		ID: to.Ptr("0218b8c4-f5a2-4a1e-bbbd-a986dd8aeb81"),
		Principal: &core.Principal{
			Type:        to.Ptr(core.PrincipalTypeUser),
			DisplayName: to.Ptr("user1"),
			ID:          to.Ptr("0218b8c4-f5a2-4a1e-bbbd-a986dd8aeb81"),
			UserDetails: &core.PrincipalUserDetails{
				UserPrincipalName: to.Ptr("user1@microsoft.com"),
			},
		},
		Role: to.Ptr(core.WorkspaceRoleContributor),
	}

	testsuite.serverFactory.WorkspacesServer.UpdateWorkspaceRoleAssignment = func(ctx context.Context, workspaceID string, workspaceRoleAssignmentID string, updateWorkspaceRoleAssignmentRequest core.UpdateWorkspaceRoleAssignmentRequest, options *core.WorkspacesClientUpdateWorkspaceRoleAssignmentOptions) (resp azfake.Responder[core.WorkspacesClientUpdateWorkspaceRoleAssignmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWorkspaceRoleAssignmentID, workspaceRoleAssignmentID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateWorkspaceRoleAssignmentRequest, updateWorkspaceRoleAssignmentRequest))
		resp = azfake.Responder[core.WorkspacesClientUpdateWorkspaceRoleAssignmentResponse]{}
		resp.SetResponse(http.StatusOK, core.WorkspacesClientUpdateWorkspaceRoleAssignmentResponse{WorkspaceRoleAssignment: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	res, err := client.UpdateWorkspaceRoleAssignment(ctx, exampleWorkspaceID, exampleWorkspaceRoleAssignmentID, exampleUpdateWorkspaceRoleAssignmentRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.WorkspaceRoleAssignment))
}

func (testsuite *FakeTestSuite) TestWorkspaces_GetWorkspaceRoleAssignment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get workspace role assignment example"},
	})
	var exampleWorkspaceID string
	var exampleWorkspaceRoleAssignmentID string
	exampleWorkspaceID = "0ac682f5-aee3-4968-9d21-692eb3fd4056"
	exampleWorkspaceRoleAssignmentID = "259b6674-74cf-4197-ac05-1bf391800ec2"

	exampleRes := core.WorkspaceRoleAssignment{
		ID: to.Ptr("259b6674-74cf-4197-ac05-1bf391800ec2"),
		Principal: &core.Principal{
			Type: to.Ptr(core.PrincipalTypeUser),
			ID:   to.Ptr("259b6674-74cf-4197-ac05-1bf391800ec2"),
		},
		Role: to.Ptr(core.WorkspaceRoleMember),
	}

	testsuite.serverFactory.WorkspacesServer.GetWorkspaceRoleAssignment = func(ctx context.Context, workspaceID string, workspaceRoleAssignmentID string, options *core.WorkspacesClientGetWorkspaceRoleAssignmentOptions) (resp azfake.Responder[core.WorkspacesClientGetWorkspaceRoleAssignmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWorkspaceRoleAssignmentID, workspaceRoleAssignmentID)
		resp = azfake.Responder[core.WorkspacesClientGetWorkspaceRoleAssignmentResponse]{}
		resp.SetResponse(http.StatusOK, core.WorkspacesClientGetWorkspaceRoleAssignmentResponse{WorkspaceRoleAssignment: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	res, err := client.GetWorkspaceRoleAssignment(ctx, exampleWorkspaceID, exampleWorkspaceRoleAssignmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.WorkspaceRoleAssignment))
}

func (testsuite *FakeTestSuite) TestWorkspaces_AssignToCapacity() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Assign a workspace to capacity example"},
	})
	var exampleWorkspaceID string
	var exampleAssignWorkspaceToCapacityRequest core.AssignWorkspaceToCapacityRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff512"
	exampleAssignWorkspaceToCapacityRequest = core.AssignWorkspaceToCapacityRequest{
		CapacityID: to.Ptr("0f084df7-c13d-451b-af5f-ed0c466403b2"),
	}

	testsuite.serverFactory.WorkspacesServer.AssignToCapacity = func(ctx context.Context, workspaceID string, assignWorkspaceToCapacityRequest core.AssignWorkspaceToCapacityRequest, options *core.WorkspacesClientAssignToCapacityOptions) (resp azfake.Responder[core.WorkspacesClientAssignToCapacityResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleAssignWorkspaceToCapacityRequest, assignWorkspaceToCapacityRequest))
		resp = azfake.Responder[core.WorkspacesClientAssignToCapacityResponse]{}
		resp.SetResponse(http.StatusAccepted, core.WorkspacesClientAssignToCapacityResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	_, err = client.AssignToCapacity(ctx, exampleWorkspaceID, exampleAssignWorkspaceToCapacityRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestWorkspaces_UnassignFromCapacity() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Assign a workspace to capacity example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff512"

	testsuite.serverFactory.WorkspacesServer.UnassignFromCapacity = func(ctx context.Context, workspaceID string, options *core.WorkspacesClientUnassignFromCapacityOptions) (resp azfake.Responder[core.WorkspacesClientUnassignFromCapacityResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.Responder[core.WorkspacesClientUnassignFromCapacityResponse]{}
		resp.SetResponse(http.StatusAccepted, core.WorkspacesClientUnassignFromCapacityResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	_, err = client.UnassignFromCapacity(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestWorkspaces_ProvisionIdentity() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Provision workspace identity example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff227"

	exampleRes := core.WorkspaceIdentity{
		ApplicationID:      to.Ptr("00a4a8f9-78d3-41b3-b87a-6ae5271c8d0d"),
		ServicePrincipalID: to.Ptr("5ba4ae58-d402-45c6-a848-0253e834fd78"),
	}

	testsuite.serverFactory.WorkspacesServer.BeginProvisionIdentity = func(ctx context.Context, workspaceID string, options *core.WorkspacesClientBeginProvisionIdentityOptions) (resp azfake.PollerResponder[core.WorkspacesClientProvisionIdentityResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PollerResponder[core.WorkspacesClientProvisionIdentityResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.WorkspacesClientProvisionIdentityResponse{WorkspaceIdentity: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	poller, err := client.BeginProvisionIdentity(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.WorkspaceIdentity))
}

func (testsuite *FakeTestSuite) TestItems_ListItems() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List item in workspace with continuation example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := core.Items{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/workspaces/cfafbeb1-8037-4d0c-896e-a46fb27ff229/items?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.Item{
			{
				Type:        to.Ptr(core.ItemTypeLakehouse),
				Description: to.Ptr("A lakehouse used by the analytics team."),
				DisplayName: to.Ptr("Lakehouse"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(core.ItemType("KustoDashboard")),
				Description: to.Ptr("A notebook for refining medical data analysis through machine learning algorithms."),
				DisplayName: to.Ptr("Notebook"),
				ID:          to.Ptr("58fa1eac-9694-4a6b-ba25-3520288e8fea"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListItemsPager = func(workspaceID string, options *core.ItemsClientListItemsOptions) (resp azfake.PagerResponder[core.ItemsClientListItemsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[core.ItemsClientListItemsResponse]{}
		resp.AddPage(http.StatusOK, core.ItemsClientListItemsResponse{Items: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListItemsPager(exampleWorkspaceID, &core.ItemsClientListItemsOptions{Type: nil,
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Items))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List items in workspace by type query parameter example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes = core.Items{
		Value: []core.Item{
			{
				Type:        to.Ptr(core.ItemTypeLakehouse),
				Description: to.Ptr("A lakehouse used by the analytics team."),
				DisplayName: to.Ptr("Lakehouse Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListItemsPager = func(workspaceID string, options *core.ItemsClientListItemsOptions) (resp azfake.PagerResponder[core.ItemsClientListItemsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[core.ItemsClientListItemsResponse]{}
		resp.AddPage(http.StatusOK, core.ItemsClientListItemsResponse{Items: exampleRes}, nil)
		return
	}

	pager = client.NewListItemsPager(exampleWorkspaceID, &core.ItemsClientListItemsOptions{Type: to.Ptr("Lakehouse"),
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Items))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List items in workspace example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes = core.Items{
		Value: []core.Item{
			{
				Type:        to.Ptr(core.ItemTypeLakehouse),
				Description: to.Ptr("A lakehouse used by the analytics team."),
				DisplayName: to.Ptr("Lakehouse"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(core.ItemType("KustoDashboard")),
				Description: to.Ptr("A notebook for refining medical data analysis through machine learning algorithms."),
				DisplayName: to.Ptr("Notebook"),
				ID:          to.Ptr("58fa1eac-9694-4a6b-ba25-3520288e8fea"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListItemsPager = func(workspaceID string, options *core.ItemsClientListItemsOptions) (resp azfake.PagerResponder[core.ItemsClientListItemsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[core.ItemsClientListItemsResponse]{}
		resp.AddPage(http.StatusOK, core.ItemsClientListItemsResponse{Items: exampleRes}, nil)
		return
	}

	pager = client.NewListItemsPager(exampleWorkspaceID, &core.ItemsClientListItemsOptions{Type: nil,
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Items))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateItem() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create an item example"},
	})
	var exampleWorkspaceID string
	var exampleCreateItemRequest core.CreateItemRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateItemRequest = core.CreateItemRequest{
		Type:        to.Ptr(core.ItemTypeLakehouse),
		DisplayName: to.Ptr("Item 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateItem = func(ctx context.Context, workspaceID string, createItemRequest core.CreateItemRequest, options *core.ItemsClientBeginCreateItemOptions) (resp azfake.PollerResponder[core.ItemsClientCreateItemResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateItemRequest, createItemRequest))
		resp = azfake.PollerResponder[core.ItemsClientCreateItemResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, core.ItemsClientCreateItemResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateItem(ctx, exampleWorkspaceID, exampleCreateItemRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetItem() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get an item example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := core.Item{
		Type:        to.Ptr(core.ItemTypeLakehouse),
		Description: to.Ptr("Item 1 description"),
		DisplayName: to.Ptr("Item 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetItem = func(ctx context.Context, workspaceID string, itemID string, options *core.ItemsClientGetItemOptions) (resp azfake.Responder[core.ItemsClientGetItemResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.Responder[core.ItemsClientGetItemResponse]{}
		resp.SetResponse(http.StatusOK, core.ItemsClientGetItemResponse{Item: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetItem(ctx, exampleWorkspaceID, exampleItemID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Item))
}

func (testsuite *FakeTestSuite) TestItems_UpdateItem() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update an item example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleUpdateItemRequest core.UpdateItemRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateItemRequest = core.UpdateItemRequest{
		Description: to.Ptr("Item's New description"),
		DisplayName: to.Ptr("Item's New name"),
	}

	exampleRes := core.Item{
		Type:        to.Ptr(core.ItemTypeLakehouse),
		Description: to.Ptr("Item's New description"),
		DisplayName: to.Ptr("Item's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateItem = func(ctx context.Context, workspaceID string, itemID string, updateItemRequest core.UpdateItemRequest, options *core.ItemsClientUpdateItemOptions) (resp azfake.Responder[core.ItemsClientUpdateItemResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateItemRequest, updateItemRequest))
		resp = azfake.Responder[core.ItemsClientUpdateItemResponse]{}
		resp.SetResponse(http.StatusOK, core.ItemsClientUpdateItemResponse{Item: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateItem(ctx, exampleWorkspaceID, exampleItemID, exampleUpdateItemRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Item))
}

func (testsuite *FakeTestSuite) TestItems_DeleteItem() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete an item example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteItem = func(ctx context.Context, workspaceID string, itemID string, options *core.ItemsClientDeleteItemOptions) (resp azfake.Responder[core.ItemsClientDeleteItemResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.Responder[core.ItemsClientDeleteItemResponse]{}
		resp.SetResponse(http.StatusOK, core.ItemsClientDeleteItemResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteItem(ctx, exampleWorkspaceID, exampleItemID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetItemDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get an item definition example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleItemID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := core.ItemDefinitionResponse{
		Definition: &core.ItemDefinition{
			Parts: []core.ItemDefinitionPart{
				{
					Path:        to.Ptr("report.json"),
					Payload:     to.Ptr("QmFzZTY0U3RyaW5n"),
					PayloadType: to.Ptr(core.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("definition.pbir"),
					Payload:     to.Ptr("QW5vdGhlckJhc2U2NFN0cmluZw"),
					PayloadType: to.Ptr(core.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(core.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetItemDefinition = func(ctx context.Context, workspaceID string, itemID string, options *core.ItemsClientBeginGetItemDefinitionOptions) (resp azfake.PollerResponder[core.ItemsClientGetItemDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.PollerResponder[core.ItemsClientGetItemDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.ItemsClientGetItemDefinitionResponse{ItemDefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetItemDefinition(ctx, exampleWorkspaceID, exampleItemID, &core.ItemsClientBeginGetItemDefinitionOptions{Format: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ItemDefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateItemDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update an item definition example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleUpdateItemDefinitionRequest core.UpdateItemDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateItemDefinitionRequest = core.UpdateItemDefinitionRequest{
		Definition: &core.ItemDefinition{
			Parts: []core.ItemDefinitionPart{
				{
					Path:        to.Ptr("report.json"),
					Payload:     to.Ptr("QmFzZTY0U3RyaW5n"),
					PayloadType: to.Ptr(core.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("definition.pbir"),
					Payload:     to.Ptr("QW5vdGhlckJhc2U2NFN0cmluZw"),
					PayloadType: to.Ptr(core.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(core.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateItemDefinition = func(ctx context.Context, workspaceID string, itemID string, updateItemDefinitionRequest core.UpdateItemDefinitionRequest, options *core.ItemsClientBeginUpdateItemDefinitionOptions) (resp azfake.PollerResponder[core.ItemsClientUpdateItemDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateItemDefinitionRequest, updateItemDefinitionRequest))
		resp = azfake.PollerResponder[core.ItemsClientUpdateItemDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.ItemsClientUpdateItemDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateItemDefinition(ctx, exampleWorkspaceID, exampleItemID, exampleUpdateItemDefinitionRequest, &core.ItemsClientBeginUpdateItemDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_ListItemConnections() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List item connections - Semantic Model Direct Lake example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	exampleWorkspaceID = "4b218778-e7a5-4d73-8187-f10824047715"
	exampleItemID = "431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"

	exampleRes := core.ItemConnections{
		Value: []core.ItemConnection{
			{
				ConnectionDetails: &core.ListConnectionDetails{
					Type: to.Ptr("SQL"),
					Path: to.Ptr("xqoruksalslrtkdxe2bvrlwgsi-5j2iqepw1i3ucdp6bepe62hcii.datawarehouse.fabric.microsoft.com;532183f5-ac60-4d12-0fc5-4094532f14b5"),
				},
				ConnectivityType: to.Ptr(core.ConnectivityTypeAutomatic),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListItemConnectionsPager = func(workspaceID string, itemID string, options *core.ItemsClientListItemConnectionsOptions) (resp azfake.PagerResponder[core.ItemsClientListItemConnectionsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.PagerResponder[core.ItemsClientListItemConnectionsResponse]{}
		resp.AddPage(http.StatusOK, core.ItemsClientListItemConnectionsResponse{ItemConnections: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListItemConnectionsPager(exampleWorkspaceID, exampleItemID, &core.ItemsClientListItemConnectionsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ItemConnections))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List item connections example"},
	})
	exampleWorkspaceID = "4b218778-e7a5-4d73-8187-f10824047715"
	exampleItemID = "431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"

	exampleRes = core.ItemConnections{
		Value: []core.ItemConnection{
			{
				ConnectionDetails: &core.ListConnectionDetails{
					Type: to.Ptr("Web"),
					Path: to.Ptr("https://www.contoso.com"),
				},
				ConnectivityType: to.Ptr(core.ConnectivityTypeShareableCloud),
				DisplayName:      to.Ptr("ContosoConnection1"),
				ID:               to.Ptr("6952a7b2-aea3-414f-9d85-6c0fe5d34539"),
			},
			{
				ConnectionDetails: &core.ListConnectionDetails{
					Type: to.Ptr("SQL"),
					Path: to.Ptr("contoso.database.windows.net;sales"),
				},
				ConnectivityType: to.Ptr(core.ConnectivityType("OnPremisesDataGateway")),
				DisplayName:      to.Ptr("ContosoConnection2"),
				GatewayID:        to.Ptr("58376c10-5f61-4024-887e-748df4beae45"),
				ID:               to.Ptr("0b9af1bd-e974-4893-8947-d89d5a560385"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListItemConnectionsPager = func(workspaceID string, itemID string, options *core.ItemsClientListItemConnectionsOptions) (resp azfake.PagerResponder[core.ItemsClientListItemConnectionsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.PagerResponder[core.ItemsClientListItemConnectionsResponse]{}
		resp.AddPage(http.StatusOK, core.ItemsClientListItemConnectionsResponse{ItemConnections: exampleRes}, nil)
		return
	}

	pager = client.NewListItemConnectionsPager(exampleWorkspaceID, exampleItemID, &core.ItemsClientListItemConnectionsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ItemConnections))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List item connections with continuation example"},
	})
	exampleWorkspaceID = "4b218778-e7a5-4d73-8187-f10824047715"
	exampleItemID = "431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"

	exampleRes = core.ItemConnections{
		Value: []core.ItemConnection{
			{
				ConnectionDetails: &core.ListConnectionDetails{
					Type: to.Ptr("SQL"),
					Path: to.Ptr("xqoruksalslrtkdxe2bvrlwgsi-5j2iqepw1i3ucdp6bepe62hcii.datawarehouse.fabric.microsoft.com;532183f5-ac60-4d12-0fc5-4094532f14b5"),
				},
				ConnectivityType: to.Ptr(core.ConnectivityTypeAutomatic),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListItemConnectionsPager = func(workspaceID string, itemID string, options *core.ItemsClientListItemConnectionsOptions) (resp azfake.PagerResponder[core.ItemsClientListItemConnectionsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.PagerResponder[core.ItemsClientListItemConnectionsResponse]{}
		resp.AddPage(http.StatusOK, core.ItemsClientListItemConnectionsResponse{ItemConnections: exampleRes}, nil)
		return
	}

	pager = client.NewListItemConnectionsPager(exampleWorkspaceID, exampleItemID, &core.ItemsClientListItemConnectionsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ItemConnections))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestJobScheduler_ListItemSchedules() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List item schedules example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleJobType string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "3546052c-ae64-4526-b1a8-52af7761426f"
	exampleJobType = "DefaultJob"

	exampleRes := core.ItemSchedules{
		Value: []core.ItemSchedule{
			{
				Configuration: &core.CronScheduleConfig{
					Type:            to.Ptr(core.ScheduleTypeCron),
					EndDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-30T23:59:00.000Z"); return t }()),
					LocalTimeZoneID: to.Ptr("Central Standard Time"),
					StartDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-28T00:00:00.000Z"); return t }()),
					Interval:        to.Ptr[int32](10),
				},
				CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-28T05:35:20.536Z"); return t }()),
				Enabled:         to.Ptr(true),
				ID:              to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
				Owner: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("8eedb1b0-3af8-4b17-8e7e-663e61e12211"),
				},
			},
			{
				Configuration: &core.WeeklyScheduleConfig{
					Type:            to.Ptr(core.ScheduleTypeWeekly),
					EndDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-30T23:59:00.000Z"); return t }()),
					LocalTimeZoneID: to.Ptr("Central Standard Time"),
					StartDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-28T00:00:00.000Z"); return t }()),
					Times: []string{
						"18:09",
						"17:12"},
					Weekdays: []core.DayOfWeek{
						core.DayOfWeekMonday,
						core.DayOfWeekTuesday},
				},
				CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-28T05:35:20.536Z"); return t }()),
				Enabled:         to.Ptr(true),
				ID:              to.Ptr("96f3f0ff-4fe2-4712-b61b-05a456ba9357"),
				Owner: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("8eedb1b0-3af8-4b17-8e7e-663e61e12211"),
				},
			},
			{
				Configuration: &core.DailyScheduleConfig{
					Type:            to.Ptr(core.ScheduleTypeDaily),
					EndDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-30T23:59:00.000Z"); return t }()),
					LocalTimeZoneID: to.Ptr("Central Standard Time"),
					StartDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-28T00:00:00.000Z"); return t }()),
					Times: []string{
						"18:09",
						"17:12"},
				},
				CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-28T05:35:20.536Z"); return t }()),
				Enabled:         to.Ptr(true),
				ID:              to.Ptr("c0ed1d27-32dc-49e6-90ba-cac9b6248c7f"),
				Owner: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("8eedb1b0-3af8-4b17-8e7e-663e61e12211"),
				},
			}},
	}

	testsuite.serverFactory.JobSchedulerServer.NewListItemSchedulesPager = func(workspaceID string, itemID string, jobType string, options *core.JobSchedulerClientListItemSchedulesOptions) (resp azfake.PagerResponder[core.JobSchedulerClientListItemSchedulesResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleJobType, jobType)
		resp = azfake.PagerResponder[core.JobSchedulerClientListItemSchedulesResponse]{}
		resp.AddPage(http.StatusOK, core.JobSchedulerClientListItemSchedulesResponse{ItemSchedules: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobSchedulerClient()
	pager := client.NewListItemSchedulesPager(exampleWorkspaceID, exampleItemID, exampleJobType, &core.JobSchedulerClientListItemSchedulesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ItemSchedules))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestJobScheduler_CreateItemSchedule() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"create item schedule example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleJobType string
	var exampleCreateScheduleRequest core.CreateScheduleRequest
	exampleWorkspaceID = "4b218778-e7a5-4d73-8187-f10824047715"
	exampleItemID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleJobType = "DefaultJob"
	exampleCreateScheduleRequest = core.CreateScheduleRequest{
		Configuration: &core.CronScheduleConfig{
			Type:            to.Ptr(core.ScheduleTypeCron),
			EndDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-30T23:59:00.000Z"); return t }()),
			LocalTimeZoneID: to.Ptr("Central Standard Time"),
			StartDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-28T00:00:00.000Z"); return t }()),
			Interval:        to.Ptr[int32](10),
		},
		Enabled: to.Ptr(true),
	}

	testsuite.serverFactory.JobSchedulerServer.CreateItemSchedule = func(ctx context.Context, workspaceID string, itemID string, jobType string, createScheduleRequest core.CreateScheduleRequest, options *core.JobSchedulerClientCreateItemScheduleOptions) (resp azfake.Responder[core.JobSchedulerClientCreateItemScheduleResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleJobType, jobType)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateScheduleRequest, createScheduleRequest))
		resp = azfake.Responder[core.JobSchedulerClientCreateItemScheduleResponse]{}
		resp.SetResponse(http.StatusCreated, core.JobSchedulerClientCreateItemScheduleResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobSchedulerClient()
	_, err = client.CreateItemSchedule(ctx, exampleWorkspaceID, exampleItemID, exampleJobType, exampleCreateScheduleRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestJobScheduler_GetItemSchedule() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"get item schedule example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleJobType string
	var exampleScheduleID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleJobType = "DefaultJob"
	exampleScheduleID = "3546052c-ae64-4526-b1a8-52af7761426f"

	exampleRes := core.ItemSchedule{
		Configuration: &core.CronScheduleConfig{
			Type:            to.Ptr(core.ScheduleTypeCron),
			EndDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-30T23:59:00.000Z"); return t }()),
			LocalTimeZoneID: to.Ptr("Central Standard Time"),
			StartDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-28T00:00:00.000Z"); return t }()),
			Interval:        to.Ptr[int32](10),
		},
		CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-28T05:35:20.536Z"); return t }()),
		Enabled:         to.Ptr(true),
		ID:              to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		Owner: &core.Principal{
			Type: to.Ptr(core.PrincipalTypeUser),
			ID:   to.Ptr("8eedb1b0-3af8-4b17-8e7e-663e61e12211"),
		},
	}

	testsuite.serverFactory.JobSchedulerServer.GetItemSchedule = func(ctx context.Context, workspaceID string, itemID string, jobType string, scheduleID string, options *core.JobSchedulerClientGetItemScheduleOptions) (resp azfake.Responder[core.JobSchedulerClientGetItemScheduleResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleJobType, jobType)
		testsuite.Require().Equal(exampleScheduleID, scheduleID)
		resp = azfake.Responder[core.JobSchedulerClientGetItemScheduleResponse]{}
		resp.SetResponse(http.StatusOK, core.JobSchedulerClientGetItemScheduleResponse{ItemSchedule: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobSchedulerClient()
	res, err := client.GetItemSchedule(ctx, exampleWorkspaceID, exampleItemID, exampleJobType, exampleScheduleID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ItemSchedule))
}

func (testsuite *FakeTestSuite) TestJobScheduler_UpdateItemSchedule() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"update item schedule plan example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleJobType string
	var exampleScheduleID string
	var exampleUpdateScheduleRequest core.UpdateScheduleRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleJobType = "DefaultJob"
	exampleScheduleID = "3546052c-ae64-4526-b1a8-52af7761426f"
	exampleUpdateScheduleRequest = core.UpdateScheduleRequest{
		Configuration: &core.CronScheduleConfig{
			Type:            to.Ptr(core.ScheduleTypeCron),
			EndDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-30T23:59:00.000Z"); return t }()),
			LocalTimeZoneID: to.Ptr("Central Standard Time"),
			StartDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-28T00:00:00.000Z"); return t }()),
			Interval:        to.Ptr[int32](10),
		},
		Enabled: to.Ptr(true),
	}

	exampleRes := core.ItemSchedule{
		Configuration: &core.CronScheduleConfig{
			Type:            to.Ptr(core.ScheduleTypeCron),
			EndDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-30T23:59:00.000Z"); return t }()),
			LocalTimeZoneID: to.Ptr("Central Standard Time"),
			StartDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-28T00:00:00.000Z"); return t }()),
			Interval:        to.Ptr[int32](10),
		},
		CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-28T05:35:20.536Z"); return t }()),
		Enabled:         to.Ptr(true),
		ID:              to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		Owner: &core.Principal{
			Type: to.Ptr(core.PrincipalTypeUser),
			ID:   to.Ptr("8eedb1b0-3af8-4b17-8e7e-663e61e12211"),
		},
	}

	testsuite.serverFactory.JobSchedulerServer.UpdateItemSchedule = func(ctx context.Context, workspaceID string, itemID string, jobType string, scheduleID string, updateScheduleRequest core.UpdateScheduleRequest, options *core.JobSchedulerClientUpdateItemScheduleOptions) (resp azfake.Responder[core.JobSchedulerClientUpdateItemScheduleResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleJobType, jobType)
		testsuite.Require().Equal(exampleScheduleID, scheduleID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateScheduleRequest, updateScheduleRequest))
		resp = azfake.Responder[core.JobSchedulerClientUpdateItemScheduleResponse]{}
		resp.SetResponse(http.StatusOK, core.JobSchedulerClientUpdateItemScheduleResponse{ItemSchedule: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobSchedulerClient()
	res, err := client.UpdateItemSchedule(ctx, exampleWorkspaceID, exampleItemID, exampleJobType, exampleScheduleID, exampleUpdateScheduleRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ItemSchedule))
}

func (testsuite *FakeTestSuite) TestJobScheduler_GetItemJobInstance() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get item job instance example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleJobInstanceID string
	exampleWorkspaceID = "4b218778-e7a5-4d73-8187-f10824047715"
	exampleItemID = "431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"
	exampleJobInstanceID = "f2d65699-dd22-4889-980c-15226deb0e1b"

	exampleRes := core.ItemJobInstance{
		EndTimeUTC:     to.Ptr("2023-04-22T06:35:00.8033333"),
		ID:             to.Ptr("f2d65699-dd22-4889-980c-15226deb0e1b"),
		InvokeType:     to.Ptr(core.InvokeTypeManual),
		ItemID:         to.Ptr("431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"),
		JobType:        to.Ptr("DefaultJob"),
		RootActivityID: to.Ptr("8c2ee553-53a4-7edb-1042-0d8189a9e0ca"),
		StartTimeUTC:   to.Ptr("2023-04-22T06:35:00.7812154"),
		Status:         to.Ptr(core.StatusCompleted),
	}

	testsuite.serverFactory.JobSchedulerServer.GetItemJobInstance = func(ctx context.Context, workspaceID string, itemID string, jobInstanceID string, options *core.JobSchedulerClientGetItemJobInstanceOptions) (resp azfake.Responder[core.JobSchedulerClientGetItemJobInstanceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleJobInstanceID, jobInstanceID)
		resp = azfake.Responder[core.JobSchedulerClientGetItemJobInstanceResponse]{}
		resp.SetResponse(http.StatusOK, core.JobSchedulerClientGetItemJobInstanceResponse{ItemJobInstance: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobSchedulerClient()
	res, err := client.GetItemJobInstance(ctx, exampleWorkspaceID, exampleItemID, exampleJobInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ItemJobInstance))
}

func (testsuite *FakeTestSuite) TestJobScheduler_ListItemJobInstances() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List item job instances example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	exampleWorkspaceID = "4b218778-e7a5-4d73-8187-f10824047715"
	exampleItemID = "431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"

	exampleRes := core.ItemJobInstances{
		Value: []core.ItemJobInstance{
			{
				EndTimeUTC:     to.Ptr("2024-06-22T06:35:00.8033333"),
				ID:             to.Ptr("f2d65699-dd22-4889-980c-15226deb0e1b"),
				InvokeType:     to.Ptr(core.InvokeTypeManual),
				ItemID:         to.Ptr("431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"),
				JobType:        to.Ptr("DefaultJob"),
				RootActivityID: to.Ptr("8c2ee553-53a4-7edb-1042-0d8189a9e0ca"),
				StartTimeUTC:   to.Ptr("2024-06-22T06:35:00.7812154"),
				Status:         to.Ptr(core.StatusCompleted),
			},
			{
				EndTimeUTC:     to.Ptr("2024-06-22T07:35:00.8033333"),
				ID:             to.Ptr("c0c99aed-be56-4fe0-a6e5-6de5fe277f16"),
				InvokeType:     to.Ptr(core.InvokeTypeManual),
				ItemID:         to.Ptr("431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"),
				JobType:        to.Ptr("DefaultJob"),
				RootActivityID: to.Ptr("c0c99aed-be56-4fe0-a6e5-6de5fe277f16"),
				StartTimeUTC:   to.Ptr("2024-06-22T06:35:00.7812154"),
				Status:         to.Ptr(core.StatusCompleted),
			}},
	}

	testsuite.serverFactory.JobSchedulerServer.NewListItemJobInstancesPager = func(workspaceID string, itemID string, options *core.JobSchedulerClientListItemJobInstancesOptions) (resp azfake.PagerResponder[core.JobSchedulerClientListItemJobInstancesResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.PagerResponder[core.JobSchedulerClientListItemJobInstancesResponse]{}
		resp.AddPage(http.StatusOK, core.JobSchedulerClientListItemJobInstancesResponse{ItemJobInstances: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobSchedulerClient()
	pager := client.NewListItemJobInstancesPager(exampleWorkspaceID, exampleItemID, &core.JobSchedulerClientListItemJobInstancesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ItemJobInstances))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List item job instances with continuation example"},
	})
	exampleWorkspaceID = "4b218778-e7a5-4d73-8187-f10824047715"
	exampleItemID = "431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"

	exampleRes = core.ItemJobInstances{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/workspaces/4b218778-e7a5-4d73-8187-f10824047715/items/431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7/jobs/instances?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.ItemJobInstance{
			{
				EndTimeUTC:     to.Ptr("2024-06-22T06:35:00.8033333"),
				ID:             to.Ptr("f2d65699-dd22-4889-980c-15226deb0e1b"),
				InvokeType:     to.Ptr(core.InvokeTypeManual),
				ItemID:         to.Ptr("431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"),
				JobType:        to.Ptr("DefaultJob"),
				RootActivityID: to.Ptr("8c2ee553-53a4-7edb-1042-0d8189a9e0ca"),
				StartTimeUTC:   to.Ptr("2024-06-22T06:35:00.7812154"),
				Status:         to.Ptr(core.StatusCompleted),
			},
			{
				EndTimeUTC:     to.Ptr("2024-06-22T07:35:00.8033333"),
				ID:             to.Ptr("c0c99aed-be56-4fe0-a6e5-6de5fe277f16"),
				InvokeType:     to.Ptr(core.InvokeTypeManual),
				ItemID:         to.Ptr("431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"),
				JobType:        to.Ptr("DefaultJob"),
				RootActivityID: to.Ptr("c0c99aed-be56-4fe0-a6e5-6de5fe277f16"),
				StartTimeUTC:   to.Ptr("2024-06-22T06:35:00.7812154"),
				Status:         to.Ptr(core.StatusCompleted),
			}},
	}

	testsuite.serverFactory.JobSchedulerServer.NewListItemJobInstancesPager = func(workspaceID string, itemID string, options *core.JobSchedulerClientListItemJobInstancesOptions) (resp azfake.PagerResponder[core.JobSchedulerClientListItemJobInstancesResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.PagerResponder[core.JobSchedulerClientListItemJobInstancesResponse]{}
		resp.AddPage(http.StatusOK, core.JobSchedulerClientListItemJobInstancesResponse{ItemJobInstances: exampleRes}, nil)
		return
	}

	pager = client.NewListItemJobInstancesPager(exampleWorkspaceID, exampleItemID, &core.JobSchedulerClientListItemJobInstancesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ItemJobInstances))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestJobScheduler_RunOnDemandItemJob() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Run item job instance with no request body example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleJobType string
	exampleWorkspaceID = "4b218778-e7a5-4d73-8187-f10824047715"
	exampleItemID = "431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"
	exampleJobType = "DefaultJob"

	testsuite.serverFactory.JobSchedulerServer.RunOnDemandItemJob = func(ctx context.Context, workspaceID string, itemID string, jobType string, options *core.JobSchedulerClientRunOnDemandItemJobOptions) (resp azfake.Responder[core.JobSchedulerClientRunOnDemandItemJobResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleJobType, jobType)
		resp = azfake.Responder[core.JobSchedulerClientRunOnDemandItemJobResponse]{}
		resp.SetResponse(http.StatusAccepted, core.JobSchedulerClientRunOnDemandItemJobResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobSchedulerClient()
	_, err = client.RunOnDemandItemJob(ctx, exampleWorkspaceID, exampleItemID, exampleJobType, &core.JobSchedulerClientRunOnDemandItemJobOptions{RunOnDemandItemJobRequest: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Run item job instance with request body containing executionData example"},
	})
	exampleWorkspaceID = "4b218778-e7a5-4d73-8187-f10824047715"
	exampleItemID = "431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"
	exampleJobType = "DefaultJob"

	testsuite.serverFactory.JobSchedulerServer.RunOnDemandItemJob = func(ctx context.Context, workspaceID string, itemID string, jobType string, options *core.JobSchedulerClientRunOnDemandItemJobOptions) (resp azfake.Responder[core.JobSchedulerClientRunOnDemandItemJobResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleJobType, jobType)
		resp = azfake.Responder[core.JobSchedulerClientRunOnDemandItemJobResponse]{}
		resp.SetResponse(http.StatusAccepted, core.JobSchedulerClientRunOnDemandItemJobResponse{}, nil)
		return
	}

	_, err = client.RunOnDemandItemJob(ctx, exampleWorkspaceID, exampleItemID, exampleJobType, &core.JobSchedulerClientRunOnDemandItemJobOptions{RunOnDemandItemJobRequest: &core.RunOnDemandItemJobRequest{
		ExecutionData: map[string]any{
			"optimizeSettings": map[string]any{
				"vOrder": true,
			},
			"tableName": "Table1",
		},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestJobScheduler_CancelItemJobInstance() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Cancel item job instance example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleJobInstanceID string
	exampleWorkspaceID = "4b218778-e7a5-4d73-8187-f10824047715"
	exampleItemID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleJobInstanceID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.JobSchedulerServer.CancelItemJobInstance = func(ctx context.Context, workspaceID string, itemID string, jobInstanceID string, options *core.JobSchedulerClientCancelItemJobInstanceOptions) (resp azfake.Responder[core.JobSchedulerClientCancelItemJobInstanceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleJobInstanceID, jobInstanceID)
		resp = azfake.Responder[core.JobSchedulerClientCancelItemJobInstanceResponse]{}
		resp.SetResponse(http.StatusAccepted, core.JobSchedulerClientCancelItemJobInstanceResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobSchedulerClient()
	_, err = client.CancelItemJobInstance(ctx, exampleWorkspaceID, exampleItemID, exampleJobInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestGit_GetConnection() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Git connection details example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "1455b6a2-c120-4c1c-dda7-92bafe99bec3"

	exampleRes := core.GitConnection{
		GitConnectionState: to.Ptr(core.GitConnectionStateConnectedAndInitialized),
		GitProviderDetails: &core.AzureDevOpsDetails{
			BranchName:       to.Ptr("Test Branch"),
			DirectoryName:    to.Ptr(""),
			GitProviderType:  to.Ptr(core.GitProviderTypeAzureDevOps),
			RepositoryName:   to.Ptr("Test Repo"),
			OrganizationName: to.Ptr("Test Organization"),
			ProjectName:      to.Ptr("Test Project"),
		},
		GitSyncDetails: &core.GitSyncDetails{
			Head:         to.Ptr("eaa737b48cda41b37ffefac772ea48f6fed3eac4"),
			LastSyncTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-20T09:26:43.153Z"); return t }()),
		},
	}

	testsuite.serverFactory.GitServer.GetConnection = func(ctx context.Context, workspaceID string, options *core.GitClientGetConnectionOptions) (resp azfake.Responder[core.GitClientGetConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.Responder[core.GitClientGetConnectionResponse]{}
		resp.SetResponse(http.StatusOK, core.GitClientGetConnectionResponse{GitConnection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewGitClient()
	res, err := client.GetConnection(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GitConnection))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Workspace not connected to git example"},
	})
	exampleWorkspaceID = "1455b6a2-c120-4c1c-dda7-92bafe99bec3"

	exampleRes = core.GitConnection{
		GitConnectionState: to.Ptr(core.GitConnectionStateNotConnected),
	}

	testsuite.serverFactory.GitServer.GetConnection = func(ctx context.Context, workspaceID string, options *core.GitClientGetConnectionOptions) (resp azfake.Responder[core.GitClientGetConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.Responder[core.GitClientGetConnectionResponse]{}
		resp.SetResponse(http.StatusOK, core.GitClientGetConnectionResponse{GitConnection: exampleRes}, nil)
		return
	}

	res, err = client.GetConnection(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GitConnection))
}

func (testsuite *FakeTestSuite) TestGit_Connect() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Connect a workspace to Azure DevOps example"},
	})
	var exampleWorkspaceID string
	var exampleGitConnectRequest core.GitConnectRequest
	exampleWorkspaceID = "1565e6a3-c020-4c0c-dda7-92bafe99eec5"
	exampleGitConnectRequest = core.GitConnectRequest{
		GitProviderDetails: &core.AzureDevOpsDetails{
			BranchName:       to.Ptr("Test Branch"),
			DirectoryName:    to.Ptr("Test Directory"),
			GitProviderType:  to.Ptr(core.GitProviderTypeAzureDevOps),
			RepositoryName:   to.Ptr("Test Repo"),
			OrganizationName: to.Ptr("Test Organization"),
			ProjectName:      to.Ptr("Test Project"),
		},
	}

	testsuite.serverFactory.GitServer.Connect = func(ctx context.Context, workspaceID string, gitConnectRequest core.GitConnectRequest, options *core.GitClientConnectOptions) (resp azfake.Responder[core.GitClientConnectResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleGitConnectRequest, gitConnectRequest))
		resp = azfake.Responder[core.GitClientConnectResponse]{}
		resp.SetResponse(http.StatusOK, core.GitClientConnectResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewGitClient()
	_, err = client.Connect(ctx, exampleWorkspaceID, exampleGitConnectRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Connect a workspace to GitHub example"},
	})
	exampleWorkspaceID = "1565e6a3-c020-4c0c-dda7-92bafe99eec5"
	exampleGitConnectRequest = core.GitConnectRequest{
		GitProviderDetails: &core.GitHubDetails{
			BranchName:      to.Ptr("Test Branch"),
			DirectoryName:   to.Ptr("Test Directory/Test Subdirectory"),
			GitProviderType: to.Ptr(core.GitProviderTypeGitHub),
			RepositoryName:  to.Ptr("Test Repo"),
			OwnerName:       to.Ptr("Test Owner"),
		},
		MyGitCredentials: &core.ConfiguredConnectionGitCredentials{
			Source:       to.Ptr(core.GitCredentialsSourceConfiguredConnection),
			ConnectionID: to.Ptr("3f2504e0-4f89-11d3-9a0c-0305e82c3301"),
		},
	}

	testsuite.serverFactory.GitServer.Connect = func(ctx context.Context, workspaceID string, gitConnectRequest core.GitConnectRequest, options *core.GitClientConnectOptions) (resp azfake.Responder[core.GitClientConnectResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleGitConnectRequest, gitConnectRequest))
		resp = azfake.Responder[core.GitClientConnectResponse]{}
		resp.SetResponse(http.StatusOK, core.GitClientConnectResponse{}, nil)
		return
	}

	_, err = client.Connect(ctx, exampleWorkspaceID, exampleGitConnectRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestGit_Disconnect() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Disconnect a workspace from a Git example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "1565e6a3-c020-4c0c-dda7-92bafe99eec5"

	testsuite.serverFactory.GitServer.Disconnect = func(ctx context.Context, workspaceID string, options *core.GitClientDisconnectOptions) (resp azfake.Responder[core.GitClientDisconnectResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.Responder[core.GitClientDisconnectResponse]{}
		resp.SetResponse(http.StatusOK, core.GitClientDisconnectResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewGitClient()
	_, err = client.Disconnect(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestGit_InitializeConnection() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Initialize the connection of a workspace connected to a Git example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "1565e6a3-c020-4c0c-dda7-92bafe99eec5"

	exampleRes := core.InitializeGitConnectionResponse{
		RemoteCommitHash: to.Ptr("7d03b2918bf6aa62f96d0a4307293f3853201705"),
		RequiredAction:   to.Ptr(core.RequiredActionUpdateFromGit),
		WorkspaceHead:    to.Ptr("eaa737b48cda41b37ffefac772ea48f6fed3eac4"),
	}

	testsuite.serverFactory.GitServer.BeginInitializeConnection = func(ctx context.Context, workspaceID string, options *core.GitClientBeginInitializeConnectionOptions) (resp azfake.PollerResponder[core.GitClientInitializeConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PollerResponder[core.GitClientInitializeConnectionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.GitClientInitializeConnectionResponse{InitializeGitConnectionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewGitClient()
	poller, err := client.BeginInitializeConnection(ctx, exampleWorkspaceID, &core.GitClientBeginInitializeConnectionOptions{GitInitializeConnectionRequest: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.InitializeGitConnectionResponse))
}

func (testsuite *FakeTestSuite) TestGit_UpdateFromGit() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a workspace using data from a Git example"},
	})
	var exampleWorkspaceID string
	var exampleUpdateFromGitRequest core.UpdateFromGitRequest
	exampleWorkspaceID = "1565e6a3-c020-4c0c-dda7-92bafe99eec5"
	exampleUpdateFromGitRequest = core.UpdateFromGitRequest{
		ConflictResolution: &core.WorkspaceConflictResolution{
			ConflictResolutionPolicy: to.Ptr(core.ConflictResolutionPolicyPreferWorkspace),
			ConflictResolutionType:   to.Ptr(core.ConflictResolutionTypeWorkspace),
		},
		Options: &core.UpdateOptions{
			AllowOverrideItems: to.Ptr(true),
		},
		RemoteCommitHash: to.Ptr("7d03b2918bf6aa62f96d0a4307293f3853201705"),
		WorkspaceHead:    to.Ptr("eaa737b48cda41b37ffefac772ea48f6fed3eac4"),
	}

	testsuite.serverFactory.GitServer.BeginUpdateFromGit = func(ctx context.Context, workspaceID string, updateFromGitRequest core.UpdateFromGitRequest, options *core.GitClientBeginUpdateFromGitOptions) (resp azfake.PollerResponder[core.GitClientUpdateFromGitResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateFromGitRequest, updateFromGitRequest))
		resp = azfake.PollerResponder[core.GitClientUpdateFromGitResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.GitClientUpdateFromGitResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewGitClient()
	poller, err := client.BeginUpdateFromGit(ctx, exampleWorkspaceID, exampleUpdateFromGitRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestGit_GetStatus() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get status example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "1455b6a2-c120-4c1c-dda7-92bafe99bec3"

	exampleRes := core.GitStatusResponse{
		Changes: []core.ItemChange{
			{
				ConflictType: to.Ptr(core.ConflictTypeNone),
				ItemMetadata: &core.ItemMetadata{
					DisplayName: to.Ptr("My new dataset in the workspace"),
					ItemIdentifier: &core.ItemIdentifier{
						ObjectID: to.Ptr("7753f3b4-dbb8-44c1-a94f-6ae4d776369e"),
					},
					ItemType: to.Ptr(core.ItemTypeSemanticModel),
				},
				WorkspaceChange: to.Ptr(core.ChangeTypeAdded),
			},
			{
				ConflictType: to.Ptr(core.ConflictTypeNone),
				ItemMetadata: &core.ItemMetadata{
					DisplayName: to.Ptr("My deleted report in Git"),
					ItemIdentifier: &core.ItemIdentifier{
						LogicalID: to.Ptr("1423f3b4-dba5-44c1-a94f-6ae4d776369a"),
					},
					ItemType: to.Ptr(core.ItemTypeReport),
				},
				RemoteChange: to.Ptr(core.ChangeTypeDeleted),
			},
			{
				ConflictType: to.Ptr(core.ConflictTypeNone),
				ItemMetadata: &core.ItemMetadata{
					DisplayName: to.Ptr("Modified dataset in the workspace"),
					ItemIdentifier: &core.ItemIdentifier{
						LogicalID: to.Ptr("111e8d7b-4a95-4c02-8ccd-6faef5ba1bd1"),
						ObjectID:  to.Ptr("1153f3b4-dbb8-33c1-a84f-6ae4d776362d"),
					},
					ItemType: to.Ptr(core.ItemTypeSemanticModel),
				},
				WorkspaceChange: to.Ptr(core.ChangeTypeModified),
			}},
		RemoteCommitHash: to.Ptr("7d03b2918bf6aa62f96d0a4307293f3853201705"),
		WorkspaceHead:    to.Ptr("eaa737b48cda41b37ffefac772ea48f6fed3eac4"),
	}

	testsuite.serverFactory.GitServer.BeginGetStatus = func(ctx context.Context, workspaceID string, options *core.GitClientBeginGetStatusOptions) (resp azfake.PollerResponder[core.GitClientGetStatusResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PollerResponder[core.GitClientGetStatusResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.GitClientGetStatusResponse{GitStatusResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewGitClient()
	poller, err := client.BeginGetStatus(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GitStatusResponse))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get status no changes example"},
	})
	exampleWorkspaceID = "1455b6a2-c120-4c1c-dda7-92bafe99bec3"

	exampleRes = core.GitStatusResponse{
		Changes:          []core.ItemChange{},
		RemoteCommitHash: to.Ptr("eaa737b48cda41b37ffefac772ea48f6fed3eac4"),
		WorkspaceHead:    to.Ptr("eaa737b48cda41b37ffefac772ea48f6fed3eac4"),
	}

	testsuite.serverFactory.GitServer.BeginGetStatus = func(ctx context.Context, workspaceID string, options *core.GitClientBeginGetStatusOptions) (resp azfake.PollerResponder[core.GitClientGetStatusResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PollerResponder[core.GitClientGetStatusResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.GitClientGetStatusResponse{GitStatusResponse: exampleRes}, nil)
		return
	}

	poller, err = client.BeginGetStatus(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GitStatusResponse))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get status with conflict example"},
	})
	exampleWorkspaceID = "1455b6a2-c120-4c1c-dda7-92bafe99bec3"

	exampleRes = core.GitStatusResponse{
		Changes: []core.ItemChange{
			{
				ConflictType: to.Ptr(core.ConflictTypeConflict),
				ItemMetadata: &core.ItemMetadata{
					DisplayName: to.Ptr("Modified report on both sides"),
					ItemIdentifier: &core.ItemIdentifier{
						LogicalID: to.Ptr("222e8d7b-4a95-4c02-8ccd-6faef5ba1bd2"),
						ObjectID:  to.Ptr("8853f3b4-dbb8-33c1-a84f-6ae4d776362a"),
					},
					ItemType: to.Ptr(core.ItemTypeReport),
				},
				RemoteChange:    to.Ptr(core.ChangeTypeModified),
				WorkspaceChange: to.Ptr(core.ChangeTypeModified),
			}},
		RemoteCommitHash: to.Ptr("7d03b2918bf6aa62f96d0a4307293f3853201705"),
		WorkspaceHead:    to.Ptr("eaa737b48cda41b37ffefac772ea48f6fed3eac4"),
	}

	testsuite.serverFactory.GitServer.BeginGetStatus = func(ctx context.Context, workspaceID string, options *core.GitClientBeginGetStatusOptions) (resp azfake.PollerResponder[core.GitClientGetStatusResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PollerResponder[core.GitClientGetStatusResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.GitClientGetStatusResponse{GitStatusResponse: exampleRes}, nil)
		return
	}

	poller, err = client.BeginGetStatus(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GitStatusResponse))
}

func (testsuite *FakeTestSuite) TestGit_CommitToGit() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Commit all to Git example"},
	})
	var exampleWorkspaceID string
	var exampleCommitToGitRequest core.CommitToGitRequest
	exampleWorkspaceID = "1565e6a3-c020-4c0c-dda7-92bafe99eec5"
	exampleCommitToGitRequest = core.CommitToGitRequest{
		Comment:       to.Ptr("I'm committing all my changes."),
		Mode:          to.Ptr(core.CommitModeAll),
		WorkspaceHead: to.Ptr("eaa737b48cda41b37ffefac772ea48f6fed3eac4"),
	}

	testsuite.serverFactory.GitServer.BeginCommitToGit = func(ctx context.Context, workspaceID string, commitToGitRequest core.CommitToGitRequest, options *core.GitClientBeginCommitToGitOptions) (resp azfake.PollerResponder[core.GitClientCommitToGitResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCommitToGitRequest, commitToGitRequest))
		resp = azfake.PollerResponder[core.GitClientCommitToGitResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.GitClientCommitToGitResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewGitClient()
	poller, err := client.BeginCommitToGit(ctx, exampleWorkspaceID, exampleCommitToGitRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Commit selective items to Git example"},
	})
	exampleWorkspaceID = "1565e6a3-c020-4c0c-dda7-92bafe99eec5"
	exampleCommitToGitRequest = core.CommitToGitRequest{
		Comment: to.Ptr("I'm committing specific changes."),
		Items: []core.ItemIdentifier{
			{
				LogicalID: to.Ptr("111e8d7b-4a95-4c02-8ccd-6faef5ba1bd1"),
				ObjectID:  to.Ptr("1153f3b4-dbb8-33c1-a84f-6ae4d776362d"),
			},
			{
				ObjectID: to.Ptr("7753f3b4-dbb8-44c1-a94f-6ae4d776369e"),
			}},
		Mode:          to.Ptr(core.CommitModeSelective),
		WorkspaceHead: to.Ptr("eaa737b48cda41b37ffefac772ea48f6fed3eac4"),
	}

	testsuite.serverFactory.GitServer.BeginCommitToGit = func(ctx context.Context, workspaceID string, commitToGitRequest core.CommitToGitRequest, options *core.GitClientBeginCommitToGitOptions) (resp azfake.PollerResponder[core.GitClientCommitToGitResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCommitToGitRequest, commitToGitRequest))
		resp = azfake.PollerResponder[core.GitClientCommitToGitResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.GitClientCommitToGitResponse{}, nil)
		return
	}

	poller, err = client.BeginCommitToGit(ctx, exampleWorkspaceID, exampleCommitToGitRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestGit_GetMyGitCredentials() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get the user's Git credentials configuration for Azure DevOps when it is automatic example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "1565e6a3-c020-4c0c-dda7-92bafe99eec5"

	exampleRes := core.GitClientGetMyGitCredentialsResponse{
		GitCredentialsConfigurationResponseClassification: &core.AutomaticGitCredentialsResponse{
			Source: to.Ptr(core.GitCredentialsSourceAutomatic),
		},
	}

	testsuite.serverFactory.GitServer.GetMyGitCredentials = func(ctx context.Context, workspaceID string, options *core.GitClientGetMyGitCredentialsOptions) (resp azfake.Responder[core.GitClientGetMyGitCredentialsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.Responder[core.GitClientGetMyGitCredentialsResponse]{}
		resp.SetResponse(http.StatusOK, exampleRes, nil)
		return
	}

	client := testsuite.clientFactory.NewGitClient()
	res, err := client.GetMyGitCredentials(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get the user's Git credentials configuration for GitHub when it is configured by connection example"},
	})
	exampleWorkspaceID = "1565e6a3-c020-4c0c-dda7-92bafe99eec5"

	exampleRes = core.GitClientGetMyGitCredentialsResponse{
		GitCredentialsConfigurationResponseClassification: &core.ConfiguredConnectionGitCredentialsResponse{
			Source:       to.Ptr(core.GitCredentialsSourceConfiguredConnection),
			ConnectionID: to.Ptr("3f2504e0-4f89-11d3-9a0c-0305e82c3301"),
		},
	}

	testsuite.serverFactory.GitServer.GetMyGitCredentials = func(ctx context.Context, workspaceID string, options *core.GitClientGetMyGitCredentialsOptions) (resp azfake.Responder[core.GitClientGetMyGitCredentialsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.Responder[core.GitClientGetMyGitCredentialsResponse]{}
		resp.SetResponse(http.StatusOK, exampleRes, nil)
		return
	}

	res, err = client.GetMyGitCredentials(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get the user's Git credentials configuration for GitHub when it is not configured example"},
	})
	exampleWorkspaceID = "1565e6a3-c020-4c0c-dda7-92bafe99eec5"

	exampleRes = core.GitClientGetMyGitCredentialsResponse{
		GitCredentialsConfigurationResponseClassification: &core.NoneGitCredentialsResponse{
			Source: to.Ptr(core.GitCredentialsSourceNone),
		},
	}

	testsuite.serverFactory.GitServer.GetMyGitCredentials = func(ctx context.Context, workspaceID string, options *core.GitClientGetMyGitCredentialsOptions) (resp azfake.Responder[core.GitClientGetMyGitCredentialsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.Responder[core.GitClientGetMyGitCredentialsResponse]{}
		resp.SetResponse(http.StatusOK, exampleRes, nil)
		return
	}

	res, err = client.GetMyGitCredentials(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res))
}

func (testsuite *FakeTestSuite) TestGit_UpdateMyGitCredentials() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update user's Git credentials to ConfiguredConnection example"},
	})
	var exampleWorkspaceID string
	var exampleUpdateGitCredentialsRequest core.UpdateGitCredentialsRequestClassification
	exampleWorkspaceID = "1565e6a3-c020-4c0c-dda7-92bafe99eec5"
	exampleUpdateGitCredentialsRequest = &core.UpdateGitCredentialsToConfiguredConnectionRequest{
		Source:       to.Ptr(core.GitCredentialsSourceConfiguredConnection),
		ConnectionID: to.Ptr("3f2504e0-4f89-11d3-9a0c-0305e82c3301"),
	}

	exampleRes := core.GitClientUpdateMyGitCredentialsResponse{
		GitCredentialsConfigurationResponseClassification: &core.ConfiguredConnectionGitCredentialsResponse{
			Source:       to.Ptr(core.GitCredentialsSourceConfiguredConnection),
			ConnectionID: to.Ptr("3f2504e0-4f89-11d3-9a0c-0305e82c3301"),
		},
	}

	testsuite.serverFactory.GitServer.UpdateMyGitCredentials = func(ctx context.Context, workspaceID string, updateGitCredentialsRequest core.UpdateGitCredentialsRequestClassification, options *core.GitClientUpdateMyGitCredentialsOptions) (resp azfake.Responder[core.GitClientUpdateMyGitCredentialsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateGitCredentialsRequest, updateGitCredentialsRequest))
		resp = azfake.Responder[core.GitClientUpdateMyGitCredentialsResponse]{}
		resp.SetResponse(http.StatusOK, exampleRes, nil)
		return
	}

	client := testsuite.clientFactory.NewGitClient()
	res, err := client.UpdateMyGitCredentials(ctx, exampleWorkspaceID, exampleUpdateGitCredentialsRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update user's Git credentials to None example"},
	})
	exampleWorkspaceID = "1565e6a3-c020-4c0c-dda7-92bafe99eec5"
	exampleUpdateGitCredentialsRequest = &core.UpdateGitCredentialsToNoneRequest{
		Source: to.Ptr(core.GitCredentialsSourceNone),
	}

	exampleRes = core.GitClientUpdateMyGitCredentialsResponse{
		GitCredentialsConfigurationResponseClassification: &core.NoneGitCredentialsResponse{
			Source: to.Ptr(core.GitCredentialsSourceNone),
		},
	}

	testsuite.serverFactory.GitServer.UpdateMyGitCredentials = func(ctx context.Context, workspaceID string, updateGitCredentialsRequest core.UpdateGitCredentialsRequestClassification, options *core.GitClientUpdateMyGitCredentialsOptions) (resp azfake.Responder[core.GitClientUpdateMyGitCredentialsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateGitCredentialsRequest, updateGitCredentialsRequest))
		resp = azfake.Responder[core.GitClientUpdateMyGitCredentialsResponse]{}
		resp.SetResponse(http.StatusOK, exampleRes, nil)
		return
	}

	res, err = client.UpdateMyGitCredentials(ctx, exampleWorkspaceID, exampleUpdateGitCredentialsRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res))
}

func (testsuite *FakeTestSuite) TestCapacities_ListCapacities() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List capacities example"},
	})

	exampleRes := core.Capacities{
		Value: []core.Capacity{
			{
				DisplayName: to.Ptr("F4 Capacity"),
				ID:          to.Ptr("96f3f0ff-4fe2-4712-b61b-05a456ba9357"),
				Region:      to.Ptr("West Central US"),
				SKU:         to.Ptr("F4"),
				State:       to.Ptr(core.CapacityStateActive),
			},
			{
				DisplayName: to.Ptr("F8 Capacity"),
				ID:          to.Ptr("0b9a4952-b5e7-4a55-8739-3e7251a2fd43"),
				Region:      to.Ptr("West Central US"),
				SKU:         to.Ptr("F8"),
				State:       to.Ptr(core.CapacityStateInactive),
			},
			{
				DisplayName: to.Ptr("F16 Capacity"),
				ID:          to.Ptr("af196b7b-0bf8-4430-b383-ad48d14f4edf"),
				Region:      to.Ptr("West Central US"),
				SKU:         to.Ptr("F16"),
				State:       to.Ptr(core.CapacityStateActive),
			}},
	}

	testsuite.serverFactory.CapacitiesServer.NewListCapacitiesPager = func(options *core.CapacitiesClientListCapacitiesOptions) (resp azfake.PagerResponder[core.CapacitiesClientListCapacitiesResponse]) {
		resp = azfake.PagerResponder[core.CapacitiesClientListCapacitiesResponse]{}
		resp.AddPage(http.StatusOK, core.CapacitiesClientListCapacitiesResponse{Capacities: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCapacitiesClient()
	pager := client.NewListCapacitiesPager(&core.CapacitiesClientListCapacitiesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Capacities))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List capacities with continuation example"},
	})

	exampleRes = core.Capacities{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/capacities?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.Capacity{
			{
				DisplayName: to.Ptr("F4 Capacity"),
				ID:          to.Ptr("96f3f0ff-4fe2-4712-b61b-05a456ba9357"),
				Region:      to.Ptr("West Central US"),
				SKU:         to.Ptr("F4"),
				State:       to.Ptr(core.CapacityStateActive),
			},
			{
				DisplayName: to.Ptr("F8 Capacity"),
				ID:          to.Ptr("0b9a4952-b5e7-4a55-8739-3e7251a2fd43"),
				Region:      to.Ptr("West Central US"),
				SKU:         to.Ptr("F8"),
				State:       to.Ptr(core.CapacityStateInactive),
			},
			{
				DisplayName: to.Ptr("F16 Capacity"),
				ID:          to.Ptr("af196b7b-0bf8-4430-b383-ad48d14f4edf"),
				Region:      to.Ptr("West Central US"),
				SKU:         to.Ptr("F16"),
				State:       to.Ptr(core.CapacityStateActive),
			}},
	}

	testsuite.serverFactory.CapacitiesServer.NewListCapacitiesPager = func(options *core.CapacitiesClientListCapacitiesOptions) (resp azfake.PagerResponder[core.CapacitiesClientListCapacitiesResponse]) {
		resp = azfake.PagerResponder[core.CapacitiesClientListCapacitiesResponse]{}
		resp.AddPage(http.StatusOK, core.CapacitiesClientListCapacitiesResponse{Capacities: exampleRes}, nil)
		return
	}

	pager = client.NewListCapacitiesPager(&core.CapacitiesClientListCapacitiesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Capacities))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestLongRunningOperations_GetOperationState() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get active long running operation example"},
	})
	var exampleOperationID string
	exampleOperationID = "cfafbeb1-8037-4d0c-896e-a46fb27ff227"

	exampleRes := core.OperationState{
		CreatedTimeUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-09-13T14:56:18.477Z"); return t }()),
		LastUpdatedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-09-13T15:01:10.532Z"); return t }()),
		PercentComplete:    to.Ptr[int32](25),
		Status:             to.Ptr(core.LongRunningOperationStatusRunning),
	}

	testsuite.serverFactory.LongRunningOperationsServer.GetOperationState = func(ctx context.Context, operationID string, options *core.LongRunningOperationsClientGetOperationStateOptions) (resp azfake.Responder[core.LongRunningOperationsClientGetOperationStateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleOperationID, operationID)
		resp = azfake.Responder[core.LongRunningOperationsClientGetOperationStateResponse]{}
		resp.SetResponse(http.StatusOK, core.LongRunningOperationsClientGetOperationStateResponse{OperationState: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewLongRunningOperationsClient()
	res, err := client.GetOperationState(ctx, exampleOperationID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OperationState))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get completed long running operation example"},
	})
	exampleOperationID = "cfafbeb1-8037-4d0c-896e-a46fb27ff227"

	exampleRes = core.OperationState{
		CreatedTimeUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-09-13T14:56:18.477Z"); return t }()),
		LastUpdatedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-09-13T15:01:10.532Z"); return t }()),
		PercentComplete:    to.Ptr[int32](100),
		Status:             to.Ptr(core.LongRunningOperationStatusSucceeded),
	}

	testsuite.serverFactory.LongRunningOperationsServer.GetOperationState = func(ctx context.Context, operationID string, options *core.LongRunningOperationsClientGetOperationStateOptions) (resp azfake.Responder[core.LongRunningOperationsClientGetOperationStateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleOperationID, operationID)
		resp = azfake.Responder[core.LongRunningOperationsClientGetOperationStateResponse]{}
		resp.SetResponse(http.StatusOK, core.LongRunningOperationsClientGetOperationStateResponse{OperationState: exampleRes}, nil)
		return
	}

	res, err = client.GetOperationState(ctx, exampleOperationID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OperationState))
}

func (testsuite *FakeTestSuite) TestLongRunningOperations_GetOperationResult() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get long running operation result example"},
	})
	var exampleOperationID string
	exampleOperationID = "431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"

	testsuite.serverFactory.LongRunningOperationsServer.GetOperationResult = func(ctx context.Context, operationID string, options *core.LongRunningOperationsClientGetOperationResultOptions) (resp azfake.Responder[core.LongRunningOperationsClientGetOperationResultResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleOperationID, operationID)
		resp = azfake.Responder[core.LongRunningOperationsClientGetOperationResultResponse]{}
		resp.SetResponse(http.StatusOK, core.LongRunningOperationsClientGetOperationResultResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewLongRunningOperationsClient()
	_, err = client.GetOperationResult(ctx, exampleOperationID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestOneLakeShortcuts_ListShortcuts() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List shortcuts example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "56bac802-080d-4f73-8a42-1b406eb1fcac"

	exampleRes := core.Shortcuts{
		Value: []core.Shortcut{
			{
				Name: to.Ptr("MyOneLakeShortcut"),
				Path: to.Ptr("Files/blafolder/folder3"),
				Target: &core.Target{
					Type: to.Ptr(core.TypeOneLake),
					OneLake: &core.OneLake{
						Path:        to.Ptr("Tables/myTablesFolder/someTableSubFolder"),
						ItemID:      to.Ptr("56bac802-080d-4f73-8a42-1b406eb1fcac"),
						WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
					},
				},
			},
			{
				Name: to.Ptr("MyS3Shortcut"),
				Path: to.Ptr("Files/noaccess"),
				Target: &core.Target{
					Type: to.Ptr(core.TypeAmazonS3),
				},
			},
			{
				Name: to.Ptr("MyS3CompatibleShortcut"),
				Path: to.Ptr("Files/blafolder/folder3"),
				Target: &core.Target{
					Type: to.Ptr(core.TypeS3Compatible),
					S3Compatible: &core.S3Compatible{
						Bucket:       to.Ptr("contosoBucket"),
						ConnectionID: to.Ptr("3c976446-0bda-472e-8800-f1d6e4f162dc"),
						Location:     to.Ptr("https://s3endpoint.contoso.com"),
						Subpath:      to.Ptr("s3CompatibleDirectory"),
					},
				},
			},
			{
				Name: to.Ptr("MyGCSShortcut"),
				Path: to.Ptr("Files/blafolder/folder3"),
				Target: &core.Target{
					Type: to.Ptr(core.TypeGoogleCloudStorage),
					GoogleCloudStorage: &core.GoogleCloudStorage{
						ConnectionID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
						Location:     to.Ptr("https://gcs-contosoBucket.storage.googleapis.com"),
						Subpath:      to.Ptr("gcsDirectory"),
					},
				},
			},
			{
				Name: to.Ptr("MyExternalDataShareShortcut"),
				Path: to.Ptr("Files/blafolder/folder3"),
				Target: &core.Target{
					Type: to.Ptr(core.TypeExternalDataShare),
					ExternalDataShare: &core.ExternalDataShareTarget{
						ConnectionID: to.Ptr("af196b7b-0bf8-4430-b383-ad48d14f4edf"),
					},
				},
			},
			{
				Name: to.Ptr("MyDataShareShortcutWithREAD"),
				Path: to.Ptr("Files/bla1folder/folder4"),
				Target: &core.Target{
					Type: to.Ptr(core.TypeExternalDataShare),
				},
			}},
	}

	testsuite.serverFactory.OneLakeShortcutsServer.NewListShortcutsPager = func(workspaceID string, itemID string, options *core.OneLakeShortcutsClientListShortcutsOptions) (resp azfake.PagerResponder[core.OneLakeShortcutsClientListShortcutsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.PagerResponder[core.OneLakeShortcutsClientListShortcutsResponse]{}
		resp.AddPage(http.StatusOK, core.OneLakeShortcutsClientListShortcutsResponse{Shortcuts: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOneLakeShortcutsClient()
	pager := client.NewListShortcutsPager(exampleWorkspaceID, exampleItemID, &core.OneLakeShortcutsClientListShortcutsOptions{ParentPath: nil,
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Shortcuts))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List shortcuts with continuation example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "56bac802-080d-4f73-8a42-1b406eb1fcac"

	exampleRes = core.Shortcuts{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/workspaces/cfafbeb1-8037-4d0c-896e-a46fb27ff229/items/56bac802-080d-4f73-8a42-1b406eb1fcac/shortcuts?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.Shortcut{
			{
				Name: to.Ptr("MyOneLakeShortcut"),
				Path: to.Ptr("Files/blafolder/folder3"),
				Target: &core.Target{
					Type: to.Ptr(core.TypeOneLake),
					OneLake: &core.OneLake{
						Path:        to.Ptr("Tables/myTablesFolder/someTableSubFolder"),
						ItemID:      to.Ptr("56bac802-080d-4f73-8a42-1b406eb1fcac"),
						WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
					},
				},
			},
			{
				Name: to.Ptr("MyS3Shortcut"),
				Path: to.Ptr("Files/noaccess"),
				Target: &core.Target{
					Type: to.Ptr(core.TypeAmazonS3),
				},
			},
			{
				Name: to.Ptr("MyS3CompatibleShortcut"),
				Path: to.Ptr("Files/blafolder/folder3"),
				Target: &core.Target{
					Type: to.Ptr(core.TypeS3Compatible),
					S3Compatible: &core.S3Compatible{
						Bucket:       to.Ptr("contosoBucket"),
						ConnectionID: to.Ptr("3c976446-0bda-472e-8800-f1d6e4f162dc"),
						Location:     to.Ptr("https://s3endpoint.contoso.com"),
						Subpath:      to.Ptr("s3CompatibleDirectory"),
					},
				},
			},
			{
				Name: to.Ptr("MyGCSShortcut"),
				Path: to.Ptr("Files/blafolder/folder3"),
				Target: &core.Target{
					Type: to.Ptr(core.TypeGoogleCloudStorage),
					GoogleCloudStorage: &core.GoogleCloudStorage{
						ConnectionID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
						Location:     to.Ptr("https://gcs-contosoBucket.storage.googleapis.com"),
						Subpath:      to.Ptr("gcsDirectory"),
					},
				},
			},
			{
				Name: to.Ptr("MyExternalDataShareShortcut"),
				Path: to.Ptr("Files/blafolder/folder3"),
				Target: &core.Target{
					Type: to.Ptr(core.TypeExternalDataShare),
					ExternalDataShare: &core.ExternalDataShareTarget{
						ConnectionID: to.Ptr("af196b7b-0bf8-4430-b383-ad48d14f4edf"),
					},
				},
			},
			{
				Name: to.Ptr("MyDataShareShortcutWithREAD"),
				Path: to.Ptr("Files/bla1folder/folder4"),
				Target: &core.Target{
					Type: to.Ptr(core.TypeExternalDataShare),
				},
			}},
	}

	testsuite.serverFactory.OneLakeShortcutsServer.NewListShortcutsPager = func(workspaceID string, itemID string, options *core.OneLakeShortcutsClientListShortcutsOptions) (resp azfake.PagerResponder[core.OneLakeShortcutsClientListShortcutsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.PagerResponder[core.OneLakeShortcutsClientListShortcutsResponse]{}
		resp.AddPage(http.StatusOK, core.OneLakeShortcutsClientListShortcutsResponse{Shortcuts: exampleRes}, nil)
		return
	}

	pager = client.NewListShortcutsPager(exampleWorkspaceID, exampleItemID, &core.OneLakeShortcutsClientListShortcutsOptions{ParentPath: nil,
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Shortcuts))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestOneLakeShortcuts_CreateShortcut() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create shortcut AdlsGen2 target example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleCreateShortcutRequest core.CreateShortcutRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"
	exampleCreateShortcutRequest = core.CreateShortcutRequest{
		Name: to.Ptr("PartnerProducts"),
		Path: to.Ptr("Files/landingZone"),
		Target: &core.CreatableShortcutTarget{
			AdlsGen2: &core.AdlsGen2{
				ConnectionID: to.Ptr("91324db9-8dc4-4730-a1e5-bafabf1fb91e"),
				Location:     to.Ptr("https://contosoadlsaccount.dfs.core.windows.net"),
				Subpath:      to.Ptr("/mycontainer/data/ContosoProducts"),
			},
		},
	}

	testsuite.serverFactory.OneLakeShortcutsServer.CreateShortcut = func(ctx context.Context, workspaceID string, itemID string, createShortcutRequest core.CreateShortcutRequest, options *core.OneLakeShortcutsClientCreateShortcutOptions) (resp azfake.Responder[core.OneLakeShortcutsClientCreateShortcutResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateShortcutRequest, createShortcutRequest))
		resp = azfake.Responder[core.OneLakeShortcutsClientCreateShortcutResponse]{}
		resp.SetResponse(http.StatusCreated, core.OneLakeShortcutsClientCreateShortcutResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewOneLakeShortcutsClient()
	_, err = client.CreateShortcut(ctx, exampleWorkspaceID, exampleItemID, exampleCreateShortcutRequest, &core.OneLakeShortcutsClientCreateShortcutOptions{ShortcutConflictPolicy: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create shortcut AmazonS3 target example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"
	exampleCreateShortcutRequest = core.CreateShortcutRequest{
		Name: to.Ptr("PartnerEmployees"),
		Path: to.Ptr("Files/landingZone"),
		Target: &core.CreatableShortcutTarget{
			AmazonS3: &core.AmazonS3{
				ConnectionID: to.Ptr("cf480513-2c1c-46b2-958a-42556ee584c3"),
				Location:     to.Ptr("https://my-s3-bucket.s3.us-west-2.amazonaws.com"),
				Subpath:      to.Ptr("/data/ContosoEmployees"),
			},
		},
	}

	testsuite.serverFactory.OneLakeShortcutsServer.CreateShortcut = func(ctx context.Context, workspaceID string, itemID string, createShortcutRequest core.CreateShortcutRequest, options *core.OneLakeShortcutsClientCreateShortcutOptions) (resp azfake.Responder[core.OneLakeShortcutsClientCreateShortcutResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateShortcutRequest, createShortcutRequest))
		resp = azfake.Responder[core.OneLakeShortcutsClientCreateShortcutResponse]{}
		resp.SetResponse(http.StatusCreated, core.OneLakeShortcutsClientCreateShortcutResponse{}, nil)
		return
	}

	_, err = client.CreateShortcut(ctx, exampleWorkspaceID, exampleItemID, exampleCreateShortcutRequest, &core.OneLakeShortcutsClientCreateShortcutOptions{ShortcutConflictPolicy: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create shortcut Google Cloud Storage target example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"
	exampleCreateShortcutRequest = core.CreateShortcutRequest{
		Name: to.Ptr("MyGCSShortcut1"),
		Path: to.Ptr("Files/landingZone"),
		Target: &core.CreatableShortcutTarget{
			GoogleCloudStorage: &core.GoogleCloudStorage{
				ConnectionID: to.Ptr("3c976446-0bda-472e-8800-f1d6e4f162dc"),
				Location:     to.Ptr("https://gcs-contosoBucket.storage.googleapis.com"),
				Subpath:      to.Ptr("/gcsDirectory/data/ContosoProducts"),
			},
		},
	}

	testsuite.serverFactory.OneLakeShortcutsServer.CreateShortcut = func(ctx context.Context, workspaceID string, itemID string, createShortcutRequest core.CreateShortcutRequest, options *core.OneLakeShortcutsClientCreateShortcutOptions) (resp azfake.Responder[core.OneLakeShortcutsClientCreateShortcutResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateShortcutRequest, createShortcutRequest))
		resp = azfake.Responder[core.OneLakeShortcutsClientCreateShortcutResponse]{}
		resp.SetResponse(http.StatusCreated, core.OneLakeShortcutsClientCreateShortcutResponse{}, nil)
		return
	}

	_, err = client.CreateShortcut(ctx, exampleWorkspaceID, exampleItemID, exampleCreateShortcutRequest, &core.OneLakeShortcutsClientCreateShortcutOptions{ShortcutConflictPolicy: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create shortcut One Lake target example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"
	exampleCreateShortcutRequest = core.CreateShortcutRequest{
		Name: to.Ptr("MyOneLakeShortcut"),
		Path: to.Ptr("Files/blafolder/folder3"),
		Target: &core.CreatableShortcutTarget{
			OneLake: &core.OneLake{
				Path:        to.Ptr("Tables/myTablesFolder/someTableSubFolder"),
				ItemID:      to.Ptr("56bac802-080d-4f73-8a42-1b406eb1fcac"),
				WorkspaceID: to.Ptr("acafbeb1-8037-4d0c-896e-a46fb27ff256"),
			},
		},
	}

	testsuite.serverFactory.OneLakeShortcutsServer.CreateShortcut = func(ctx context.Context, workspaceID string, itemID string, createShortcutRequest core.CreateShortcutRequest, options *core.OneLakeShortcutsClientCreateShortcutOptions) (resp azfake.Responder[core.OneLakeShortcutsClientCreateShortcutResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateShortcutRequest, createShortcutRequest))
		resp = azfake.Responder[core.OneLakeShortcutsClientCreateShortcutResponse]{}
		resp.SetResponse(http.StatusCreated, core.OneLakeShortcutsClientCreateShortcutResponse{}, nil)
		return
	}

	_, err = client.CreateShortcut(ctx, exampleWorkspaceID, exampleItemID, exampleCreateShortcutRequest, &core.OneLakeShortcutsClientCreateShortcutOptions{ShortcutConflictPolicy: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create shortcut S3 Compatible target example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"
	exampleCreateShortcutRequest = core.CreateShortcutRequest{
		Name: to.Ptr("MyS3CompatibleShortcut1"),
		Path: to.Ptr("Files/landingZone"),
		Target: &core.CreatableShortcutTarget{
			S3Compatible: &core.S3Compatible{
				Bucket:       to.Ptr("contosoBucket1"),
				ConnectionID: to.Ptr("3c976446-0bda-472e-8800-f1d6e4f162dc"),
				Location:     to.Ptr("https://s3endpoint.contoso.com"),
				Subpath:      to.Ptr("/s3CompatibleDirectory/data/ContosoProducts"),
			},
		},
	}

	testsuite.serverFactory.OneLakeShortcutsServer.CreateShortcut = func(ctx context.Context, workspaceID string, itemID string, createShortcutRequest core.CreateShortcutRequest, options *core.OneLakeShortcutsClientCreateShortcutOptions) (resp azfake.Responder[core.OneLakeShortcutsClientCreateShortcutResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateShortcutRequest, createShortcutRequest))
		resp = azfake.Responder[core.OneLakeShortcutsClientCreateShortcutResponse]{}
		resp.SetResponse(http.StatusCreated, core.OneLakeShortcutsClientCreateShortcutResponse{}, nil)
		return
	}

	_, err = client.CreateShortcut(ctx, exampleWorkspaceID, exampleItemID, exampleCreateShortcutRequest, &core.OneLakeShortcutsClientCreateShortcutOptions{ShortcutConflictPolicy: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestOneLakeShortcuts_GetShortcut() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get shortcut ExternalDataShare target example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleShortcutPath string
	var exampleShortcutName string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"
	exampleShortcutPath = "Files/blafolder/folder3"
	exampleShortcutName = "MyExternalDataShareShortcut"

	exampleRes := core.Shortcut{
		Name: to.Ptr("MyExternalDataShareShortcut"),
		Path: to.Ptr("Files/blafolder/folder3"),
		Target: &core.Target{
			Type: to.Ptr(core.TypeExternalDataShare),
			ExternalDataShare: &core.ExternalDataShareTarget{
				ConnectionID: to.Ptr("3c976446-0bda-472e-8800-f1d6e4f162dc"),
			},
		},
	}

	testsuite.serverFactory.OneLakeShortcutsServer.GetShortcut = func(ctx context.Context, workspaceID string, itemID string, shortcutPath string, shortcutName string, options *core.OneLakeShortcutsClientGetShortcutOptions) (resp azfake.Responder[core.OneLakeShortcutsClientGetShortcutResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleShortcutPath, shortcutPath)
		testsuite.Require().Equal(exampleShortcutName, shortcutName)
		resp = azfake.Responder[core.OneLakeShortcutsClientGetShortcutResponse]{}
		resp.SetResponse(http.StatusOK, core.OneLakeShortcutsClientGetShortcutResponse{Shortcut: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOneLakeShortcutsClient()
	res, err := client.GetShortcut(ctx, exampleWorkspaceID, exampleItemID, exampleShortcutPath, exampleShortcutName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Shortcut))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get shortcut Google Cloud Storage target example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"
	exampleShortcutPath = "Files/blafolder/folder3"
	exampleShortcutName = "MyGCSShortcut"

	exampleRes = core.Shortcut{
		Name: to.Ptr("MyGCSShortcut"),
		Path: to.Ptr("Files/blafolder/folder3"),
		Target: &core.Target{
			Type: to.Ptr(core.TypeGoogleCloudStorage),
			GoogleCloudStorage: &core.GoogleCloudStorage{
				ConnectionID: to.Ptr("3c976446-0bda-472e-8800-f1d6e4f162dc"),
				Location:     to.Ptr("https://gcs-contosoBucket.storage.googleapis.com"),
				Subpath:      to.Ptr("gcsDirectory"),
			},
		},
	}

	testsuite.serverFactory.OneLakeShortcutsServer.GetShortcut = func(ctx context.Context, workspaceID string, itemID string, shortcutPath string, shortcutName string, options *core.OneLakeShortcutsClientGetShortcutOptions) (resp azfake.Responder[core.OneLakeShortcutsClientGetShortcutResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleShortcutPath, shortcutPath)
		testsuite.Require().Equal(exampleShortcutName, shortcutName)
		resp = azfake.Responder[core.OneLakeShortcutsClientGetShortcutResponse]{}
		resp.SetResponse(http.StatusOK, core.OneLakeShortcutsClientGetShortcutResponse{Shortcut: exampleRes}, nil)
		return
	}

	res, err = client.GetShortcut(ctx, exampleWorkspaceID, exampleItemID, exampleShortcutPath, exampleShortcutName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Shortcut))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get shortcut One Lake target example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"
	exampleShortcutPath = "Files/blafolder/folder3"
	exampleShortcutName = "MyOneLakeShortcut"

	exampleRes = core.Shortcut{
		Name: to.Ptr("MyOneLakeShortcut"),
		Path: to.Ptr("Files/blafolder/folder3"),
		Target: &core.Target{
			Type: to.Ptr(core.TypeOneLake),
			OneLake: &core.OneLake{
				Path:        to.Ptr("Tables/myTablesFolder/someTableSubFolder"),
				ItemID:      to.Ptr("56bac802-080d-4f73-8a42-1b406eb1fcac"),
				WorkspaceID: to.Ptr("acafbeb1-8037-4d0c-896e-a46fb27ff256"),
			},
		},
	}

	testsuite.serverFactory.OneLakeShortcutsServer.GetShortcut = func(ctx context.Context, workspaceID string, itemID string, shortcutPath string, shortcutName string, options *core.OneLakeShortcutsClientGetShortcutOptions) (resp azfake.Responder[core.OneLakeShortcutsClientGetShortcutResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleShortcutPath, shortcutPath)
		testsuite.Require().Equal(exampleShortcutName, shortcutName)
		resp = azfake.Responder[core.OneLakeShortcutsClientGetShortcutResponse]{}
		resp.SetResponse(http.StatusOK, core.OneLakeShortcutsClientGetShortcutResponse{Shortcut: exampleRes}, nil)
		return
	}

	res, err = client.GetShortcut(ctx, exampleWorkspaceID, exampleItemID, exampleShortcutPath, exampleShortcutName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Shortcut))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get shortcut S3 Compatible target example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"
	exampleShortcutPath = "Files/blafolder/folder3"
	exampleShortcutName = "MyS3CompatibleShortcut"

	exampleRes = core.Shortcut{
		Name: to.Ptr("MyS3CompatibleShortcut"),
		Path: to.Ptr("Files/blafolder/folder3"),
		Target: &core.Target{
			Type: to.Ptr(core.TypeS3Compatible),
			S3Compatible: &core.S3Compatible{
				Bucket:       to.Ptr("contosoBucket"),
				ConnectionID: to.Ptr("3c976446-0bda-472e-8800-f1d6e4f162dc"),
				Location:     to.Ptr("https://s3endpoint.contoso.com"),
				Subpath:      to.Ptr("s3CompatibleDirectory"),
			},
		},
	}

	testsuite.serverFactory.OneLakeShortcutsServer.GetShortcut = func(ctx context.Context, workspaceID string, itemID string, shortcutPath string, shortcutName string, options *core.OneLakeShortcutsClientGetShortcutOptions) (resp azfake.Responder[core.OneLakeShortcutsClientGetShortcutResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleShortcutPath, shortcutPath)
		testsuite.Require().Equal(exampleShortcutName, shortcutName)
		resp = azfake.Responder[core.OneLakeShortcutsClientGetShortcutResponse]{}
		resp.SetResponse(http.StatusOK, core.OneLakeShortcutsClientGetShortcutResponse{Shortcut: exampleRes}, nil)
		return
	}

	res, err = client.GetShortcut(ctx, exampleWorkspaceID, exampleItemID, exampleShortcutPath, exampleShortcutName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Shortcut))
}

func (testsuite *FakeTestSuite) TestOneLakeShortcuts_DeleteShortcut() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete shortcut One Lake target example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleShortcutPath string
	var exampleShortcutName string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"
	exampleShortcutPath = "Files/blafolder/folder3"
	exampleShortcutName = "MyOneLakeShortcut"

	testsuite.serverFactory.OneLakeShortcutsServer.DeleteShortcut = func(ctx context.Context, workspaceID string, itemID string, shortcutPath string, shortcutName string, options *core.OneLakeShortcutsClientDeleteShortcutOptions) (resp azfake.Responder[core.OneLakeShortcutsClientDeleteShortcutResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleShortcutPath, shortcutPath)
		testsuite.Require().Equal(exampleShortcutName, shortcutName)
		resp = azfake.Responder[core.OneLakeShortcutsClientDeleteShortcutResponse]{}
		resp.SetResponse(http.StatusOK, core.OneLakeShortcutsClientDeleteShortcutResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewOneLakeShortcutsClient()
	_, err = client.DeleteShortcut(ctx, exampleWorkspaceID, exampleItemID, exampleShortcutPath, exampleShortcutName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestOneLakeShortcuts_ResetShortcutCache() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Reset shortcut cache example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"

	testsuite.serverFactory.OneLakeShortcutsServer.BeginResetShortcutCache = func(ctx context.Context, workspaceID string, options *core.OneLakeShortcutsClientBeginResetShortcutCacheOptions) (resp azfake.PollerResponder[core.OneLakeShortcutsClientResetShortcutCacheResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PollerResponder[core.OneLakeShortcutsClientResetShortcutCacheResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.OneLakeShortcutsClientResetShortcutCacheResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewOneLakeShortcutsClient()
	poller, err := client.BeginResetShortcutCache(ctx, exampleWorkspaceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestDeploymentPipelines_ListDeploymentPipelines() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List deployment pipelines example"},
	})

	exampleRes := core.DeploymentPipelines{
		Value: []core.DeploymentPipeline{
			{
				Description: to.Ptr("Fabric deployment pipeline to manage marketing reports."),
				DisplayName: to.Ptr("Marketing Deployment Pipeline"),
				ID:          to.Ptr("a5ded933-57b7-41f4-b072-ed4c1f9d5824"),
			},
			{
				Description: to.Ptr("Fabric deployment pipeline to manage finance reports."),
				DisplayName: to.Ptr("Finance Deployment Pipeline"),
				ID:          to.Ptr("f2d70dc6-8f3e-4f2c-b00e-e2d336d7d711"),
			}},
	}

	testsuite.serverFactory.DeploymentPipelinesServer.NewListDeploymentPipelinesPager = func(options *core.DeploymentPipelinesClientListDeploymentPipelinesOptions) (resp azfake.PagerResponder[core.DeploymentPipelinesClientListDeploymentPipelinesResponse]) {
		resp = azfake.PagerResponder[core.DeploymentPipelinesClientListDeploymentPipelinesResponse]{}
		resp.AddPage(http.StatusOK, core.DeploymentPipelinesClientListDeploymentPipelinesResponse{DeploymentPipelines: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentPipelinesClient()
	pager := client.NewListDeploymentPipelinesPager(&core.DeploymentPipelinesClientListDeploymentPipelinesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DeploymentPipelines))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List deployment pipelines with continuation example"},
	})

	exampleRes = core.DeploymentPipelines{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/deploymentPipelines?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.DeploymentPipeline{
			{
				Description: to.Ptr("Fabric deployment pipeline to manage marketing reports."),
				DisplayName: to.Ptr("Marketing Deployment Pipeline"),
				ID:          to.Ptr("a5ded933-57b7-41f4-b072-ed4c1f9d5824"),
			},
			{
				Description: to.Ptr("Fabric deployment pipeline to manage finance reports."),
				DisplayName: to.Ptr("Finance Deployment Pipeline"),
				ID:          to.Ptr("f2d70dc6-8f3e-4f2c-b00e-e2d336d7d711"),
			}},
	}

	testsuite.serverFactory.DeploymentPipelinesServer.NewListDeploymentPipelinesPager = func(options *core.DeploymentPipelinesClientListDeploymentPipelinesOptions) (resp azfake.PagerResponder[core.DeploymentPipelinesClientListDeploymentPipelinesResponse]) {
		resp = azfake.PagerResponder[core.DeploymentPipelinesClientListDeploymentPipelinesResponse]{}
		resp.AddPage(http.StatusOK, core.DeploymentPipelinesClientListDeploymentPipelinesResponse{DeploymentPipelines: exampleRes}, nil)
		return
	}

	pager = client.NewListDeploymentPipelinesPager(&core.DeploymentPipelinesClientListDeploymentPipelinesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DeploymentPipelines))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDeploymentPipelines_GetDeploymentPipeline() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a deployment pipeline example"},
	})
	var exampleDeploymentPipelineID string
	exampleDeploymentPipelineID = "a5ded933-57b7-41f4-b072-ed4c1f9d5824"

	exampleRes := core.DeploymentPipeline{
		Description: to.Ptr("Fabric deployment pipeline to manage marketing reports"),
		DisplayName: to.Ptr("Marketing Deployment Pipeline"),
		ID:          to.Ptr("a5ded933-57b7-41f4-b072-ed4c1f9d5824"),
	}

	testsuite.serverFactory.DeploymentPipelinesServer.GetDeploymentPipeline = func(ctx context.Context, deploymentPipelineID string, options *core.DeploymentPipelinesClientGetDeploymentPipelineOptions) (resp azfake.Responder[core.DeploymentPipelinesClientGetDeploymentPipelineResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleDeploymentPipelineID, deploymentPipelineID)
		resp = azfake.Responder[core.DeploymentPipelinesClientGetDeploymentPipelineResponse]{}
		resp.SetResponse(http.StatusOK, core.DeploymentPipelinesClientGetDeploymentPipelineResponse{DeploymentPipeline: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentPipelinesClient()
	res, err := client.GetDeploymentPipeline(ctx, exampleDeploymentPipelineID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DeploymentPipeline))
}

func (testsuite *FakeTestSuite) TestDeploymentPipelines_ListDeploymentPipelineStages() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List the deployment pipeline stages example"},
	})
	var exampleDeploymentPipelineID string
	exampleDeploymentPipelineID = "a5ded933-57b7-41f4-b072-ed4c1f9d5824"

	exampleRes := core.DeploymentPipelineStages{
		Value: []core.DeploymentPipelineStage{
			{
				Description:   to.Ptr("Design, review, and revise your content in a development workspace. When it's ready to test and preview, deploy the content to the test stage."),
				DisplayName:   to.Ptr("Development"),
				ID:            to.Ptr("2e6f0272-e809-410a-be63-50e1d97ba75a"),
				IsPublic:      to.Ptr(false),
				Order:         to.Ptr[int32](0),
				WorkspaceID:   to.Ptr("4de5bcc4-2c88-4efe-b827-4ee7b289b496"),
				WorkspaceName: to.Ptr("Workpsace-Development"),
			},
			{
				Description: to.Ptr("Test and verify your content in a preproduction workspace. When it's ready, deploy the content to the production stage."),
				DisplayName: to.Ptr("Test"),
				ID:          to.Ptr("d2056166-041c-4a56-8d37-ea90038bc0d6"),
				IsPublic:    to.Ptr(false),
				Order:       to.Ptr[int32](1),
				WorkspaceID: to.Ptr("44b499cf-1eeb-45e2-9ada-63b6ec9d516e"),
			},
			{
				Description: to.Ptr("Your content has been tested and is ready for your customers as an app or by access to the production workspace."),
				DisplayName: to.Ptr("Production"),
				ID:          to.Ptr("4c3eb03b-fbbb-4605-9b1a-6fba1003679e"),
				IsPublic:    to.Ptr(true),
				Order:       to.Ptr[int32](2),
			}},
	}

	testsuite.serverFactory.DeploymentPipelinesServer.NewListDeploymentPipelineStagesPager = func(deploymentPipelineID string, options *core.DeploymentPipelinesClientListDeploymentPipelineStagesOptions) (resp azfake.PagerResponder[core.DeploymentPipelinesClientListDeploymentPipelineStagesResponse]) {
		testsuite.Require().Equal(exampleDeploymentPipelineID, deploymentPipelineID)
		resp = azfake.PagerResponder[core.DeploymentPipelinesClientListDeploymentPipelineStagesResponse]{}
		resp.AddPage(http.StatusOK, core.DeploymentPipelinesClientListDeploymentPipelineStagesResponse{DeploymentPipelineStages: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentPipelinesClient()
	pager := client.NewListDeploymentPipelineStagesPager(exampleDeploymentPipelineID, &core.DeploymentPipelinesClientListDeploymentPipelineStagesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DeploymentPipelineStages))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List the deployment pipeline stages with a continuation token example"},
	})
	exampleDeploymentPipelineID = "a5ded933-57b7-41f4-b072-ed4c1f9d5824"

	exampleRes = core.DeploymentPipelineStages{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/deploymentPipelines/a5ded933-57b7-41f4-b072-ed4c1f9d5824/stages?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.DeploymentPipelineStage{
			{
				Description:   to.Ptr("Design, review, and revise your content in a development workspace. When it's ready to test and preview, deploy the content to the test stage."),
				DisplayName:   to.Ptr("Development"),
				ID:            to.Ptr("2e6f0272-e809-410a-be63-50e1d97ba75a"),
				IsPublic:      to.Ptr(false),
				Order:         to.Ptr[int32](0),
				WorkspaceID:   to.Ptr("4de5bcc4-2c88-4efe-b827-4ee7b289b496"),
				WorkspaceName: to.Ptr("Workpsace-Development"),
			},
			{
				Description: to.Ptr("Test and verify your content in a preproduction workspace. When it's ready, deploy the content to the production stage."),
				DisplayName: to.Ptr("Test"),
				ID:          to.Ptr("d2056166-041c-4a56-8d37-ea90038bc0d6"),
				IsPublic:    to.Ptr(false),
				Order:       to.Ptr[int32](1),
				WorkspaceID: to.Ptr("44b499cf-1eeb-45e2-9ada-63b6ec9d516e"),
			},
			{
				Description: to.Ptr("Your content has been tested and is ready for your customers as an app or by access to the production workspace."),
				DisplayName: to.Ptr("Production"),
				ID:          to.Ptr("4c3eb03b-fbbb-4605-9b1a-6fba1003679e"),
				IsPublic:    to.Ptr(true),
				Order:       to.Ptr[int32](2),
			}},
	}

	testsuite.serverFactory.DeploymentPipelinesServer.NewListDeploymentPipelineStagesPager = func(deploymentPipelineID string, options *core.DeploymentPipelinesClientListDeploymentPipelineStagesOptions) (resp azfake.PagerResponder[core.DeploymentPipelinesClientListDeploymentPipelineStagesResponse]) {
		testsuite.Require().Equal(exampleDeploymentPipelineID, deploymentPipelineID)
		resp = azfake.PagerResponder[core.DeploymentPipelinesClientListDeploymentPipelineStagesResponse]{}
		resp.AddPage(http.StatusOK, core.DeploymentPipelinesClientListDeploymentPipelineStagesResponse{DeploymentPipelineStages: exampleRes}, nil)
		return
	}

	pager = client.NewListDeploymentPipelineStagesPager(exampleDeploymentPipelineID, &core.DeploymentPipelinesClientListDeploymentPipelineStagesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DeploymentPipelineStages))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDeploymentPipelines_ListDeploymentPipelineStageItems() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example of listing a deployment pipeline stage Fabric items"},
	})
	var exampleDeploymentPipelineID string
	var exampleStageID string
	exampleDeploymentPipelineID = "a5ded933-57b7-41f4-b072-ed4c1f9d5824"
	exampleStageID = "48d2f500-6375-4f17-9199-2e1d73c18486"

	exampleRes := core.DeploymentPipelineStageItems{
		Value: []core.DeploymentPipelineStageItem{
			{
				ItemDisplayName:    to.Ptr("Sales datamart"),
				ItemID:             to.Ptr("a7654a17-c5d1-4539-b9ec-022075545e50"),
				ItemType:           to.Ptr(core.ItemTypeDatamart),
				LastDeploymentTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-06T11:55:59.057Z"); return t }()),
				SourceItemID:       to.Ptr("6bfe235c-6d7b-41b7-98a6-2b8276b3e82b"),
			},
			{
				ItemDisplayName:    to.Ptr("Sales semantic model"),
				ItemID:             to.Ptr("dd3b6aa1-4d40-405c-a19b-48314a27e8ee"),
				ItemType:           to.Ptr(core.ItemTypeSemanticModel),
				LastDeploymentTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-13T09:26:41.153Z"); return t }()),
				SourceItemID:       to.Ptr("1a201f2a-d1d8-45c0-8c61-1676338517de"),
				TargetItemID:       to.Ptr("a5cf347e-7b49-4198-8a2b-0aa92c37d8f8"),
			},
			{
				ItemDisplayName:    to.Ptr("Sales report"),
				ItemID:             to.Ptr("9d5c1f0f-f85c-48f4-8a8e-4c77547116b3"),
				ItemType:           to.Ptr(core.ItemTypeReport),
				LastDeploymentTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-13T09:26:41.153Z"); return t }()),
				SourceItemID:       to.Ptr("2d225191-65f8-4ec3-b77d-06100602b1f7"),
			},
			{
				ItemDisplayName: to.Ptr("Sales dashboard"),
				ItemID:          to.Ptr("9046e4cc-8aea-4a7a-a3b5-1a78b1447d82"),
				ItemType:        to.Ptr(core.ItemTypeDashboard),
			}},
	}

	testsuite.serverFactory.DeploymentPipelinesServer.NewListDeploymentPipelineStageItemsPager = func(deploymentPipelineID string, stageID string, options *core.DeploymentPipelinesClientListDeploymentPipelineStageItemsOptions) (resp azfake.PagerResponder[core.DeploymentPipelinesClientListDeploymentPipelineStageItemsResponse]) {
		testsuite.Require().Equal(exampleDeploymentPipelineID, deploymentPipelineID)
		testsuite.Require().Equal(exampleStageID, stageID)
		resp = azfake.PagerResponder[core.DeploymentPipelinesClientListDeploymentPipelineStageItemsResponse]{}
		resp.AddPage(http.StatusOK, core.DeploymentPipelinesClientListDeploymentPipelineStageItemsResponse{DeploymentPipelineStageItems: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentPipelinesClient()
	pager := client.NewListDeploymentPipelineStageItemsPager(exampleDeploymentPipelineID, exampleStageID, &core.DeploymentPipelinesClientListDeploymentPipelineStageItemsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DeploymentPipelineStageItems))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example of listing a deployment pipeline stage Fabric items with a continuation token"},
	})
	exampleDeploymentPipelineID = "a5ded933-57b7-41f4-b072-ed4c1f9d5824"
	exampleStageID = "48d2f500-6375-4f17-9199-2e1d73c18486"

	exampleRes = core.DeploymentPipelineStageItems{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/deploymentPipelines/a5ded933-57b7-41f4-b072-ed4c1f9d5824/stages/48d2f500-6375-4f17-9199-2e1d73c18486/items?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.DeploymentPipelineStageItem{
			{
				ItemDisplayName:    to.Ptr("Sales datamart"),
				ItemID:             to.Ptr("a7654a17-c5d1-4539-b9ec-022075545e50"),
				ItemType:           to.Ptr(core.ItemTypeDatamart),
				LastDeploymentTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-06T11:55:59.057Z"); return t }()),
				SourceItemID:       to.Ptr("6bfe235c-6d7b-41b7-98a6-2b8276b3e82b"),
			},
			{
				ItemDisplayName:    to.Ptr("Sales semantic model"),
				ItemID:             to.Ptr("dd3b6aa1-4d40-405c-a19b-48314a27e8ee"),
				ItemType:           to.Ptr(core.ItemTypeSemanticModel),
				LastDeploymentTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-13T09:26:41.153Z"); return t }()),
				SourceItemID:       to.Ptr("1a201f2a-d1d8-45c0-8c61-1676338517de"),
				TargetItemID:       to.Ptr("a5cf347e-7b49-4198-8a2b-0aa92c37d8f8"),
			},
			{
				ItemDisplayName:    to.Ptr("Sales report"),
				ItemID:             to.Ptr("9d5c1f0f-f85c-48f4-8a8e-4c77547116b3"),
				ItemType:           to.Ptr(core.ItemTypeReport),
				LastDeploymentTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-13T09:26:41.153Z"); return t }()),
				SourceItemID:       to.Ptr("2d225191-65f8-4ec3-b77d-06100602b1f7"),
			},
			{
				ItemDisplayName: to.Ptr("Sales dashboard"),
				ItemID:          to.Ptr("9046e4cc-8aea-4a7a-a3b5-1a78b1447d82"),
				ItemType:        to.Ptr(core.ItemTypeDashboard),
			}},
	}

	testsuite.serverFactory.DeploymentPipelinesServer.NewListDeploymentPipelineStageItemsPager = func(deploymentPipelineID string, stageID string, options *core.DeploymentPipelinesClientListDeploymentPipelineStageItemsOptions) (resp azfake.PagerResponder[core.DeploymentPipelinesClientListDeploymentPipelineStageItemsResponse]) {
		testsuite.Require().Equal(exampleDeploymentPipelineID, deploymentPipelineID)
		testsuite.Require().Equal(exampleStageID, stageID)
		resp = azfake.PagerResponder[core.DeploymentPipelinesClientListDeploymentPipelineStageItemsResponse]{}
		resp.AddPage(http.StatusOK, core.DeploymentPipelinesClientListDeploymentPipelineStageItemsResponse{DeploymentPipelineStageItems: exampleRes}, nil)
		return
	}

	pager = client.NewListDeploymentPipelineStageItemsPager(exampleDeploymentPipelineID, exampleStageID, &core.DeploymentPipelinesClientListDeploymentPipelineStageItemsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DeploymentPipelineStageItems))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDeploymentPipelines_DeployStageContent() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example of deploying all Fabric items (such as reports or dashboards) from a deployment pipeline stage"},
	})
	var exampleDeploymentPipelineID string
	var exampleDeployRequest core.DeployRequest
	exampleDeploymentPipelineID = "a5ded933-57b7-41f4-b072-ed4c1f9d5824"
	exampleDeployRequest = core.DeployRequest{
		Note:          to.Ptr("Deploying business ready items"),
		SourceStageID: to.Ptr("db1577e0-0132-4d6d-92b9-952c359988f2"),
		TargetStageID: to.Ptr("f1c39546-6282-4590-8af3-847a6226ad16"),
	}

	testsuite.serverFactory.DeploymentPipelinesServer.BeginDeployStageContent = func(ctx context.Context, deploymentPipelineID string, deployRequest core.DeployRequest, options *core.DeploymentPipelinesClientBeginDeployStageContentOptions) (resp azfake.PollerResponder[core.DeploymentPipelinesClientDeployStageContentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleDeploymentPipelineID, deploymentPipelineID)
		testsuite.Require().True(reflect.DeepEqual(exampleDeployRequest, deployRequest))
		resp = azfake.PollerResponder[core.DeploymentPipelinesClientDeployStageContentResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.DeploymentPipelinesClientDeployStageContentResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentPipelinesClient()
	poller, err := client.BeginDeployStageContent(ctx, exampleDeploymentPipelineID, exampleDeployRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example of deploying specific Fabric items (such as reports or dashboards) from a deployment pipeline stage"},
	})
	exampleDeploymentPipelineID = "a5ded933-57b7-41f4-b072-ed4c1f9d5824"
	exampleDeployRequest = core.DeployRequest{
		Items: []core.ItemDeploymentRequest{
			{
				ItemType:     to.Ptr(core.ItemTypeDatamart),
				SourceItemID: to.Ptr("6bfe235c-6d7b-41b7-98a6-2b8276b3e82b"),
			},
			{
				ItemType:     to.Ptr(core.ItemTypeSemanticModel),
				SourceItemID: to.Ptr("1a201f2a-d1d8-45c0-8c61-1676338517de"),
			},
			{
				ItemType:     to.Ptr(core.ItemTypeReport),
				SourceItemID: to.Ptr("2d225191-65f8-4ec3-b77d-06100602b1f7"),
			},
			{
				ItemType:     to.Ptr(core.ItemTypeDashboard),
				SourceItemID: to.Ptr("9046e4cc-8aea-4a7a-a3b5-1a78b1447d82"),
			},
			{
				ItemType:     to.Ptr(core.ItemTypeDashboard),
				SourceItemID: to.Ptr("7f08923c-8f57-49d6-a010-8335bb9cbd1b"),
			}},
		Note:          to.Ptr("Deploying business ready items"),
		SourceStageID: to.Ptr("db1577e0-0132-4d6d-92b9-952c359988f2"),
		TargetStageID: to.Ptr("f1c39546-6282-4590-8af3-847a6226ad16"),
	}

	testsuite.serverFactory.DeploymentPipelinesServer.BeginDeployStageContent = func(ctx context.Context, deploymentPipelineID string, deployRequest core.DeployRequest, options *core.DeploymentPipelinesClientBeginDeployStageContentOptions) (resp azfake.PollerResponder[core.DeploymentPipelinesClientDeployStageContentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleDeploymentPipelineID, deploymentPipelineID)
		testsuite.Require().True(reflect.DeepEqual(exampleDeployRequest, deployRequest))
		resp = azfake.PollerResponder[core.DeploymentPipelinesClientDeployStageContentResponse]{}
		resp.SetTerminalResponse(http.StatusOK, core.DeploymentPipelinesClientDeployStageContentResponse{}, nil)
		return
	}

	poller, err = client.BeginDeployStageContent(ctx, exampleDeploymentPipelineID, exampleDeployRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestOneLakeDataAccessSecurity_ListDataAccessRoles() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List data access roles multiple pages example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"

	exampleRes := core.DataAccessRoles{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/workspaces/cfafbeb1-8037-4d0c-896e-a46fb27ff222/items/25bac802-080d-4f73-8a42-1b406eb1fceb/dataAccessRoles?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.DataAccessRole{
			{
				Name: to.Ptr("default_role_1"),
				DecisionRules: []core.DecisionRule{
					{
						Effect: to.Ptr(core.EffectPermit),
						Permission: []core.PermissionScope{
							{
								AttributeName: to.Ptr(core.AttributeNamePath),
								AttributeValueIncludedIn: []string{
									"*"},
							},
							{
								AttributeName: to.Ptr(core.AttributeNameAction),
								AttributeValueIncludedIn: []string{
									"Read"},
							}},
					}},
				Members: &core.Members{
					FabricItemMembers: []core.FabricItemMember{
						{
							ItemAccess: []core.ItemAccess{
								core.ItemAccessReadAll},
							SourcePath: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff222/25bac802-080d-4f73-8a42-1b406eb1fceb"),
						}},
				},
			}},
	}

	testsuite.serverFactory.OneLakeDataAccessSecurityServer.ListDataAccessRoles = func(ctx context.Context, workspaceID string, itemID string, options *core.OneLakeDataAccessSecurityClientListDataAccessRolesOptions) (resp azfake.Responder[core.OneLakeDataAccessSecurityClientListDataAccessRolesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.Responder[core.OneLakeDataAccessSecurityClientListDataAccessRolesResponse]{}
		resp.SetResponse(http.StatusOK, core.OneLakeDataAccessSecurityClientListDataAccessRolesResponse{DataAccessRoles: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOneLakeDataAccessSecurityClient()
	res, err := client.ListDataAccessRoles(ctx, exampleWorkspaceID, exampleItemID, &core.OneLakeDataAccessSecurityClientListDataAccessRolesOptions{ContinuationToken: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DataAccessRoles))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List data access roles single page example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"

	exampleRes = core.DataAccessRoles{
		Value: []core.DataAccessRole{
			{
				Name: to.Ptr("default_role_1"),
				DecisionRules: []core.DecisionRule{
					{
						Effect: to.Ptr(core.EffectPermit),
						Permission: []core.PermissionScope{
							{
								AttributeName: to.Ptr(core.AttributeNamePath),
								AttributeValueIncludedIn: []string{
									"*"},
							},
							{
								AttributeName: to.Ptr(core.AttributeNameAction),
								AttributeValueIncludedIn: []string{
									"Read"},
							}},
					}},
				Members: &core.Members{
					FabricItemMembers: []core.FabricItemMember{
						{
							ItemAccess: []core.ItemAccess{
								core.ItemAccessReadAll},
							SourcePath: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff222/25bac802-080d-4f73-8a42-1b406eb1fceb"),
						}},
				},
			}},
	}

	testsuite.serverFactory.OneLakeDataAccessSecurityServer.ListDataAccessRoles = func(ctx context.Context, workspaceID string, itemID string, options *core.OneLakeDataAccessSecurityClientListDataAccessRolesOptions) (resp azfake.Responder[core.OneLakeDataAccessSecurityClientListDataAccessRolesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.Responder[core.OneLakeDataAccessSecurityClientListDataAccessRolesResponse]{}
		resp.SetResponse(http.StatusOK, core.OneLakeDataAccessSecurityClientListDataAccessRolesResponse{DataAccessRoles: exampleRes}, nil)
		return
	}

	res, err = client.ListDataAccessRoles(ctx, exampleWorkspaceID, exampleItemID, &core.OneLakeDataAccessSecurityClientListDataAccessRolesOptions{ContinuationToken: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DataAccessRoles))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List default data access roles example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"

	exampleRes = core.DataAccessRoles{
		Value: []core.DataAccessRole{
			{
				Name: to.Ptr("DefaultReader"),
				DecisionRules: []core.DecisionRule{
					{
						Effect: to.Ptr(core.EffectPermit),
						Permission: []core.PermissionScope{
							{
								AttributeName: to.Ptr(core.AttributeNamePath),
								AttributeValueIncludedIn: []string{
									"*"},
							},
							{
								AttributeName: to.Ptr(core.AttributeNameAction),
								AttributeValueIncludedIn: []string{
									"Read"},
							}},
					}},
				Members: &core.Members{
					FabricItemMembers: []core.FabricItemMember{
						{
							ItemAccess: []core.ItemAccess{
								core.ItemAccessReadAll},
							SourcePath: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff222/25bac802-080d-4f73-8a42-1b406eb1fceb"),
						}},
				},
			}},
	}

	testsuite.serverFactory.OneLakeDataAccessSecurityServer.ListDataAccessRoles = func(ctx context.Context, workspaceID string, itemID string, options *core.OneLakeDataAccessSecurityClientListDataAccessRolesOptions) (resp azfake.Responder[core.OneLakeDataAccessSecurityClientListDataAccessRolesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.Responder[core.OneLakeDataAccessSecurityClientListDataAccessRolesResponse]{}
		resp.SetResponse(http.StatusOK, core.OneLakeDataAccessSecurityClientListDataAccessRolesResponse{DataAccessRoles: exampleRes}, nil)
		return
	}

	res, err = client.ListDataAccessRoles(ctx, exampleWorkspaceID, exampleItemID, &core.OneLakeDataAccessSecurityClientListDataAccessRolesOptions{ContinuationToken: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DataAccessRoles))
}

func (testsuite *FakeTestSuite) TestOneLakeDataAccessSecurity_CreateOrUpdateDataAccessRoles() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create or update data access roles example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleCreateOrUpdateDataAccessRolesRequest core.CreateOrUpdateDataAccessRolesRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"
	exampleCreateOrUpdateDataAccessRolesRequest = core.CreateOrUpdateDataAccessRolesRequest{
		Value: []core.DataAccessRole{
			{
				Name: to.Ptr("default_role_1"),
				DecisionRules: []core.DecisionRule{
					{
						Effect: to.Ptr(core.EffectPermit),
						Permission: []core.PermissionScope{
							{
								AttributeName: to.Ptr(core.AttributeNamePath),
								AttributeValueIncludedIn: []string{
									"*"},
							},
							{
								AttributeName: to.Ptr(core.AttributeNameAction),
								AttributeValueIncludedIn: []string{
									"Read"},
							}},
					}},
				Members: &core.Members{
					FabricItemMembers: []core.FabricItemMember{
						{
							ItemAccess: []core.ItemAccess{
								core.ItemAccessReadAll},
							SourcePath: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff222/25bac802-080d-4f73-8a42-1b406eb1fceb"),
						}},
				},
			}},
	}

	testsuite.serverFactory.OneLakeDataAccessSecurityServer.CreateOrUpdateDataAccessRoles = func(ctx context.Context, workspaceID string, itemID string, createOrUpdateDataAccessRolesRequest core.CreateOrUpdateDataAccessRolesRequest, options *core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesOptions) (resp azfake.Responder[core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateOrUpdateDataAccessRolesRequest, createOrUpdateDataAccessRolesRequest))
		resp = azfake.Responder[core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse]{}
		resp.SetResponse(http.StatusOK, core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewOneLakeDataAccessSecurityClient()
	_, err = client.CreateOrUpdateDataAccessRoles(ctx, exampleWorkspaceID, exampleItemID, exampleCreateOrUpdateDataAccessRolesRequest, &core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesOptions{DryRun: nil,
		IfMatch:     nil,
		IfNoneMatch: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create or update data access roles with tables path example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff222"
	exampleItemID = "25bac802-080d-4f73-8a42-1b406eb1fceb"
	exampleCreateOrUpdateDataAccessRolesRequest = core.CreateOrUpdateDataAccessRolesRequest{
		Value: []core.DataAccessRole{
			{
				Name: to.Ptr("default_role_1"),
				DecisionRules: []core.DecisionRule{
					{
						Effect: to.Ptr(core.EffectPermit),
						Permission: []core.PermissionScope{
							{
								AttributeName: to.Ptr(core.AttributeNamePath),
								AttributeValueIncludedIn: []string{
									"/Tables/sales",
									"/Tables/users"},
							},
							{
								AttributeName: to.Ptr(core.AttributeNameAction),
								AttributeValueIncludedIn: []string{
									"Read"},
							}},
					}},
				Members: &core.Members{
					FabricItemMembers: []core.FabricItemMember{
						{
							ItemAccess: []core.ItemAccess{
								core.ItemAccessReadAll},
							SourcePath: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff222/25bac802-080d-4f73-8a42-1b406eb1fceb"),
						}},
				},
			}},
	}

	testsuite.serverFactory.OneLakeDataAccessSecurityServer.CreateOrUpdateDataAccessRoles = func(ctx context.Context, workspaceID string, itemID string, createOrUpdateDataAccessRolesRequest core.CreateOrUpdateDataAccessRolesRequest, options *core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesOptions) (resp azfake.Responder[core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateOrUpdateDataAccessRolesRequest, createOrUpdateDataAccessRolesRequest))
		resp = azfake.Responder[core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse]{}
		resp.SetResponse(http.StatusOK, core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse{}, nil)
		return
	}

	_, err = client.CreateOrUpdateDataAccessRoles(ctx, exampleWorkspaceID, exampleItemID, exampleCreateOrUpdateDataAccessRolesRequest, &core.OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesOptions{DryRun: nil,
		IfMatch:     nil,
		IfNoneMatch: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestExternalDataShares_CreateExternalDataShare() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create an external data share example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleCreateExternalDataShareRequest core.CreateExternalDataShareRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleCreateExternalDataShareRequest = core.CreateExternalDataShareRequest{
		Paths: []string{
			"Files/Sales/Contoso_Sales_2023"},
		Recipient: &core.ExternalDataShareRecipient{
			UserPrincipalName: to.Ptr("lisa@fabrikam.com"),
		},
	}

	testsuite.serverFactory.ExternalDataSharesServer.CreateExternalDataShare = func(ctx context.Context, workspaceID string, itemID string, createExternalDataShareRequest core.CreateExternalDataShareRequest, options *core.ExternalDataSharesClientCreateExternalDataShareOptions) (resp azfake.Responder[core.ExternalDataSharesClientCreateExternalDataShareResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateExternalDataShareRequest, createExternalDataShareRequest))
		resp = azfake.Responder[core.ExternalDataSharesClientCreateExternalDataShareResponse]{}
		resp.SetResponse(http.StatusCreated, core.ExternalDataSharesClientCreateExternalDataShareResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewExternalDataSharesClient()
	_, err = client.CreateExternalDataShare(ctx, exampleWorkspaceID, exampleItemID, exampleCreateExternalDataShareRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create an external data share with a specific recipient tenant ID example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleCreateExternalDataShareRequest = core.CreateExternalDataShareRequest{
		Paths: []string{
			"Files/Sales/Contoso_Sales_2023"},
		Recipient: &core.ExternalDataShareRecipient{
			TenantID:          to.Ptr("c51dc03f-268a-4da0-a879-25f24947ab8b"),
			UserPrincipalName: to.Ptr("lisa@fabrikam.com"),
		},
	}

	testsuite.serverFactory.ExternalDataSharesServer.CreateExternalDataShare = func(ctx context.Context, workspaceID string, itemID string, createExternalDataShareRequest core.CreateExternalDataShareRequest, options *core.ExternalDataSharesClientCreateExternalDataShareOptions) (resp azfake.Responder[core.ExternalDataSharesClientCreateExternalDataShareResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateExternalDataShareRequest, createExternalDataShareRequest))
		resp = azfake.Responder[core.ExternalDataSharesClientCreateExternalDataShareResponse]{}
		resp.SetResponse(http.StatusCreated, core.ExternalDataSharesClientCreateExternalDataShareResponse{}, nil)
		return
	}

	_, err = client.CreateExternalDataShare(ctx, exampleWorkspaceID, exampleItemID, exampleCreateExternalDataShareRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestExternalDataShares_ListExternalDataSharesInItem() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List external data shares of an item example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := core.ExternalDataShares{
		Value: []core.ExternalDataShare{
			{
				CreatorPrincipal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
				},
				ExpirationTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-12-13T00:00:00.000Z"); return t }()),
				ID:                to.Ptr("dccc162f-7a41-4720-83c3-5c7e81187959"),
				InvitationURL:     to.Ptr("https://app.fabric.microsoft.com/externaldatasharing/accept?si=VyT5NJ3%2bNkySqEmf368Pjw-dccc162f-7a41-4720-83c3-5c7e81187959"),
				ItemID:            to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
				Paths: []string{
					"Files/Sales/Contoso_Sales_2023"},
				Recipient: &core.ExternalDataShareRecipient{
					UserPrincipalName: to.Ptr("lisa@fabrikam.com"),
				},
				Status:      to.Ptr(core.ExternalDataShareStatusPending),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				AcceptedByTenantID: to.Ptr("c51dc03f-268a-4da0-a879-25f24947ab8b"),
				CreatorPrincipal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
				},
				ExpirationTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-08-31T00:00:00.000Z"); return t }()),
				ID:                to.Ptr("96c21561-65b8-4b23-bb9a-ee8cef945c45"),
				InvitationURL:     to.Ptr("https://app.fabric.microsoft.com/externaldatasharing/accept?si=VyT5NJ3%2bNkySqEmf368Pjw-96c21561-65b8-4b23-bb9a-ee8cef945c45"),
				ItemID:            to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
				Paths: []string{
					"Files/Sales/Contoso_Sales_2023"},
				Recipient: &core.ExternalDataShareRecipient{
					UserPrincipalName: to.Ptr("lisa@fabrikam.com"),
				},
				Status:      to.Ptr(core.ExternalDataShareStatusActive),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				CreatorPrincipal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("81fac5e1-2a81-421b-a168-110b1c72fa11"),
				},
				ExpirationTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-01T00:00:00.000Z"); return t }()),
				ID:                to.Ptr("0f40aeca-8f78-4a6f-a552-e5c45faadc60"),
				InvitationURL:     to.Ptr("https://app.fabric.microsoft.com/externaldatasharing/accept?si=VyT5NJ3%2bNkySqEmf368Pjw-0f40aeca-8f78-4a6f-a552-e5c45faadc60"),
				ItemID:            to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
				Paths: []string{
					"Files/Sales/Contoso_Sales_2023"},
				Recipient: &core.ExternalDataShareRecipient{
					UserPrincipalName: to.Ptr("lisa@fabrikam.com"),
				},
				Status:      to.Ptr(core.ExternalDataShareStatusInvitationExpired),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				AcceptedByTenantID: to.Ptr("c51dc03f-268a-4da0-a879-25f24947ab8b"),
				CreatorPrincipal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("81fac5e1-2a81-421b-a168-110b1c72fa11"),
				},
				ExpirationTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-12-01T00:00:00.000Z"); return t }()),
				ID:                to.Ptr("89e82a82-0140-4837-8eee-9c919e3e5952"),
				InvitationURL:     to.Ptr("https://app.fabric.microsoft.com/externaldatasharing/accept?si=VyT5NJ3%2bNkySqEmf368Pjw-89e82a82-0140-4837-8eee-9c919e3e5952"),
				ItemID:            to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
				Paths: []string{
					"Files/Sales/Contoso_Sales_2023"},
				Recipient: &core.ExternalDataShareRecipient{
					UserPrincipalName: to.Ptr("lisa@fabrikam.com"),
				},
				Status:      to.Ptr(core.ExternalDataShareStatusRevoked),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ExternalDataSharesServer.NewListExternalDataSharesInItemPager = func(workspaceID string, itemID string, options *core.ExternalDataSharesClientListExternalDataSharesInItemOptions) (resp azfake.PagerResponder[core.ExternalDataSharesClientListExternalDataSharesInItemResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.PagerResponder[core.ExternalDataSharesClientListExternalDataSharesInItemResponse]{}
		resp.AddPage(http.StatusOK, core.ExternalDataSharesClientListExternalDataSharesInItemResponse{ExternalDataShares: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewExternalDataSharesClient()
	pager := client.NewListExternalDataSharesInItemPager(exampleWorkspaceID, exampleItemID, &core.ExternalDataSharesClientListExternalDataSharesInItemOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ExternalDataShares))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestExternalDataShares_GetExternalDataShare() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get external data share example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleExternalDataShareID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleExternalDataShareID = "dccc162f-7a41-4720-83c3-5c7e81187959"

	exampleRes := core.ExternalDataShare{
		CreatorPrincipal: &core.Principal{
			Type: to.Ptr(core.PrincipalTypeUser),
			ID:   to.Ptr("f3052d1c-61a9-46fb-8df9-0d78916ae041"),
		},
		ExpirationTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-12-13T00:00:00.000Z"); return t }()),
		ID:                to.Ptr("dccc162f-7a41-4720-83c3-5c7e81187959"),
		InvitationURL:     to.Ptr("https://app.fabric.microsoft.com/externaldatasharing/accept?si=VyT5NJ3%2bNkySqEmf368Pjw-dccc162f-7a41-4720-83c3-5c7e81187959"),
		ItemID:            to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		Paths: []string{
			"Files/Sales/Contoso_Sales_2023"},
		Recipient: &core.ExternalDataShareRecipient{
			UserPrincipalName: to.Ptr("lisa@fabrikam.com"),
		},
		Status:      to.Ptr(core.ExternalDataShareStatusPending),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ExternalDataSharesServer.GetExternalDataShare = func(ctx context.Context, workspaceID string, itemID string, externalDataShareID string, options *core.ExternalDataSharesClientGetExternalDataShareOptions) (resp azfake.Responder[core.ExternalDataSharesClientGetExternalDataShareResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleExternalDataShareID, externalDataShareID)
		resp = azfake.Responder[core.ExternalDataSharesClientGetExternalDataShareResponse]{}
		resp.SetResponse(http.StatusOK, core.ExternalDataSharesClientGetExternalDataShareResponse{ExternalDataShare: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewExternalDataSharesClient()
	res, err := client.GetExternalDataShare(ctx, exampleWorkspaceID, exampleItemID, exampleExternalDataShareID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ExternalDataShare))
}

func (testsuite *FakeTestSuite) TestExternalDataShares_RevokeExternalDataShare() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Revoke external data share example"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleExternalDataShareID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleItemID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleExternalDataShareID = "dccc162f-7a41-4720-83c3-5c7e81187959"

	testsuite.serverFactory.ExternalDataSharesServer.RevokeExternalDataShare = func(ctx context.Context, workspaceID string, itemID string, externalDataShareID string, options *core.ExternalDataSharesClientRevokeExternalDataShareOptions) (resp azfake.Responder[core.ExternalDataSharesClientRevokeExternalDataShareResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleExternalDataShareID, externalDataShareID)
		resp = azfake.Responder[core.ExternalDataSharesClientRevokeExternalDataShareResponse]{}
		resp.SetResponse(http.StatusOK, core.ExternalDataSharesClientRevokeExternalDataShareResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewExternalDataSharesClient()
	_, err = client.RevokeExternalDataShare(ctx, exampleWorkspaceID, exampleItemID, exampleExternalDataShareID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestManagedPrivateEndpoints_ListWorkspaceManagedPrivateEndpoints() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List managed private endpoints in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "47482db6-4583-4672-86dd-999d0f8f4d7a"

	exampleRes := core.ManagedPrivateEndpoints{
		Value: []core.ManagedPrivateEndpoint{
			{
				Name: to.Ptr("SqlPE"),
				ConnectionState: &core.PrivateEndpointConnectionState{
					Description: to.Ptr("Endpoint approved"),
					Status:      to.Ptr(core.ConnectionStatusApproved),
				},
				ID:                          to.Ptr("59a92b06-6e5a-468c-b748-e28c8ff28da3"),
				ProvisioningState:           to.Ptr(core.PrivateEndpointProvisioningStateSucceeded),
				TargetPrivateLinkResourceID: to.Ptr("/subscriptions/e3bf3f1a-4d64-4e42-85e9-aa1b84e3874/resourceGroups/testRG/providers/Microsoft.SqlServer/SqlServer/sql1"),
				TargetSubresourceType:       to.Ptr("sqlServer"),
			},
			{
				Name: to.Ptr("BlobPE"),
				ConnectionState: &core.PrivateEndpointConnectionState{
					Description: to.Ptr("Endpoint approval provided"),
					Status:      to.Ptr(core.ConnectionStatusApproved),
				},
				ID:                          to.Ptr("1b56faf6-9cb8-4506-8c6c-83e0aece804f"),
				ProvisioningState:           to.Ptr(core.PrivateEndpointProvisioningStateSucceeded),
				TargetPrivateLinkResourceID: to.Ptr("/subscriptions/73310022-c811-4844-8b73-f9baa17c0d08/resourceGroups/testRG2/providers/Microsoft.Storage/storageAccounts/storage1"),
				TargetSubresourceType:       to.Ptr("blob"),
			}},
	}

	testsuite.serverFactory.ManagedPrivateEndpointsServer.NewListWorkspaceManagedPrivateEndpointsPager = func(workspaceID string, options *core.ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsOptions) (resp azfake.PagerResponder[core.ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[core.ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse]{}
		resp.AddPage(http.StatusOK, core.ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse{ManagedPrivateEndpoints: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewManagedPrivateEndpointsClient()
	pager := client.NewListWorkspaceManagedPrivateEndpointsPager(exampleWorkspaceID, &core.ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ManagedPrivateEndpoints))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List managed private endpoints in workspace with continuation example"},
	})
	exampleWorkspaceID = "47482db6-4583-4672-86dd-999d0f8f4d7a"

	exampleRes = core.ManagedPrivateEndpoints{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/workspaces/47482db6-4583-4672-86dd-999d0f8f4d7a/managedPrivateEndpoints?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.ManagedPrivateEndpoint{
			{
				Name: to.Ptr("SqlPE"),
				ConnectionState: &core.PrivateEndpointConnectionState{
					Description: to.Ptr("Endpoint approved"),
					Status:      to.Ptr(core.ConnectionStatusApproved),
				},
				ID:                          to.Ptr("59a92b06-6e5a-468c-b748-e28c8ff28da3"),
				ProvisioningState:           to.Ptr(core.PrivateEndpointProvisioningStateSucceeded),
				TargetPrivateLinkResourceID: to.Ptr("/subscriptions/e3bf3f1a-4d64-4e42-85e9-aa1b84e3874/resourceGroups/testRG/providers/Microsoft.SqlServer/SqlServer/sql1"),
				TargetSubresourceType:       to.Ptr("sqlServer"),
			},
			{
				Name: to.Ptr("BlobPE"),
				ConnectionState: &core.PrivateEndpointConnectionState{
					Description: to.Ptr("Endpoint approval provided"),
					Status:      to.Ptr(core.ConnectionStatusApproved),
				},
				ID:                          to.Ptr("1b56faf6-9cb8-4506-8c6c-83e0aece804f"),
				ProvisioningState:           to.Ptr(core.PrivateEndpointProvisioningStateSucceeded),
				TargetPrivateLinkResourceID: to.Ptr("/subscriptions/73310022-c811-4844-8b73-f9baa17c0d08/resourceGroups/testRG2/providers/Microsoft.Storage/storageAccounts/storage1"),
				TargetSubresourceType:       to.Ptr("blob"),
			}},
	}

	testsuite.serverFactory.ManagedPrivateEndpointsServer.NewListWorkspaceManagedPrivateEndpointsPager = func(workspaceID string, options *core.ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsOptions) (resp azfake.PagerResponder[core.ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[core.ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse]{}
		resp.AddPage(http.StatusOK, core.ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse{ManagedPrivateEndpoints: exampleRes}, nil)
		return
	}

	pager = client.NewListWorkspaceManagedPrivateEndpointsPager(exampleWorkspaceID, &core.ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ManagedPrivateEndpoints))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestManagedPrivateEndpoints_CreateWorkspaceManagedPrivateEndpoint() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a managed private endpoint example"},
	})
	var exampleWorkspaceID string
	var exampleCreateManagedPrivateEndpointRequest core.CreateManagedPrivateEndpointRequest
	exampleWorkspaceID = "47482db6-4583-4672-86dd-999d0f8f4d7a"
	exampleCreateManagedPrivateEndpointRequest = core.CreateManagedPrivateEndpointRequest{
		Name:                        to.Ptr("testprivatendpoint1"),
		RequestMessage:              to.Ptr("Request message to approve private endpoint"),
		TargetPrivateLinkResourceID: to.Ptr("/subscriptions/2374e587-d28b-4898-a39c-6070e078ae31/resourceGroups/testrg/providers/Microsoft.Sql/servers/testsql1"),
		TargetSubresourceType:       to.Ptr("sqlServer"),
	}

	testsuite.serverFactory.ManagedPrivateEndpointsServer.CreateWorkspaceManagedPrivateEndpoint = func(ctx context.Context, workspaceID string, createManagedPrivateEndpointRequest core.CreateManagedPrivateEndpointRequest, options *core.ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointOptions) (resp azfake.Responder[core.ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateManagedPrivateEndpointRequest, createManagedPrivateEndpointRequest))
		resp = azfake.Responder[core.ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointResponse]{}
		resp.SetResponse(http.StatusCreated, core.ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewManagedPrivateEndpointsClient()
	_, err = client.CreateWorkspaceManagedPrivateEndpoint(ctx, exampleWorkspaceID, exampleCreateManagedPrivateEndpointRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestManagedPrivateEndpoints_DeleteWorkspaceManagedPrivateEndpoint() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete managed private endpoint example"},
	})
	var exampleWorkspaceID string
	var exampleManagedPrivateEndpointID string
	exampleWorkspaceID = "47482db6-4583-4672-86dd-999d0f8f4d7a"
	exampleManagedPrivateEndpointID = "59a92b06-6e5a-468c-b748-e28c8ff28da3"

	testsuite.serverFactory.ManagedPrivateEndpointsServer.DeleteWorkspaceManagedPrivateEndpoint = func(ctx context.Context, workspaceID string, managedPrivateEndpointID string, options *core.ManagedPrivateEndpointsClientDeleteWorkspaceManagedPrivateEndpointOptions) (resp azfake.Responder[core.ManagedPrivateEndpointsClientDeleteWorkspaceManagedPrivateEndpointResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleManagedPrivateEndpointID, managedPrivateEndpointID)
		resp = azfake.Responder[core.ManagedPrivateEndpointsClientDeleteWorkspaceManagedPrivateEndpointResponse]{}
		resp.SetResponse(http.StatusOK, core.ManagedPrivateEndpointsClientDeleteWorkspaceManagedPrivateEndpointResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewManagedPrivateEndpointsClient()
	_, err = client.DeleteWorkspaceManagedPrivateEndpoint(ctx, exampleWorkspaceID, exampleManagedPrivateEndpointID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestManagedPrivateEndpoints_GetWorkspaceManagedPrivateEndpoint() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get managed private endpoint example"},
	})
	var exampleWorkspaceID string
	var exampleManagedPrivateEndpointID string
	exampleWorkspaceID = "47482db6-4583-4672-86dd-999d0f8f4d7a"
	exampleManagedPrivateEndpointID = "59a92b06-6e5a-468c-b748-e28c8ff28da3"

	exampleRes := core.ManagedPrivateEndpoint{
		Name: to.Ptr("SqlPE"),
		ConnectionState: &core.PrivateEndpointConnectionState{
			Description: to.Ptr("Endpoint approved"),
			Status:      to.Ptr(core.ConnectionStatusApproved),
		},
		ID:                          to.Ptr("59a92b06-6e5a-468c-b748-e28c8ff28da3"),
		ProvisioningState:           to.Ptr(core.PrivateEndpointProvisioningStateSucceeded),
		TargetPrivateLinkResourceID: to.Ptr("/subscriptions/e3bf3f1a-4d64-4e42-85e9-aa1b84e3874/resourceGroups/testRG/providers/Microsoft.SqlServer/SqlServer/sql1"),
		TargetSubresourceType:       to.Ptr("sqlServer"),
	}

	testsuite.serverFactory.ManagedPrivateEndpointsServer.GetWorkspaceManagedPrivateEndpoint = func(ctx context.Context, workspaceID string, managedPrivateEndpointID string, options *core.ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointOptions) (resp azfake.Responder[core.ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleManagedPrivateEndpointID, managedPrivateEndpointID)
		resp = azfake.Responder[core.ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointResponse]{}
		resp.SetResponse(http.StatusOK, core.ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointResponse{ManagedPrivateEndpoint: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewManagedPrivateEndpointsClient()
	res, err := client.GetWorkspaceManagedPrivateEndpoint(ctx, exampleWorkspaceID, exampleManagedPrivateEndpointID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedPrivateEndpoint))
}

func (testsuite *FakeTestSuite) TestConnections_ListConnections() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example"},
	})

	exampleRes := core.ListConnectionsResponse{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/connections?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.Connection{
			{
				ConnectionDetails: &core.ListConnectionDetails{
					Type: to.Ptr("Web"),
					Path: to.Ptr("https://www.contoso.com"),
				},
				ConnectivityType: to.Ptr(core.ConnectivityTypeShareableCloud),
				CredentialDetails: &core.ListCredentialDetails{
					ConnectionEncryption: to.Ptr(core.ConnectionEncryptionNotEncrypted),
					SingleSignOnType:     to.Ptr(core.SingleSignOnTypeNone),
					SkipTestConnection:   to.Ptr(false),
					CredentialType:       to.Ptr(core.CredentialTypeAnonymous),
				},
				DisplayName:  to.Ptr("ContosoConnection1"),
				ID:           to.Ptr("6952a7b2-aea3-414f-9d85-6c0fe5d34539"),
				PrivacyLevel: to.Ptr(core.PrivacyLevelPublic),
			},
			{
				ConnectionDetails: &core.ListConnectionDetails{
					Type: to.Ptr("SQL"),
					Path: to.Ptr("contoso.database.windows.net;sales"),
				},
				ConnectivityType: to.Ptr(core.ConnectivityTypeOnPremisesGateway),
				CredentialDetails: &core.ListCredentialDetails{
					ConnectionEncryption: to.Ptr(core.ConnectionEncryptionAny),
					SingleSignOnType:     to.Ptr(core.SingleSignOnTypeNone),
					SkipTestConnection:   to.Ptr(false),
					CredentialType:       to.Ptr(core.CredentialTypeBasic),
				},
				DisplayName:  to.Ptr("ContosoConnection2"),
				GatewayID:    to.Ptr("58376c10-5f61-4024-887e-748df4beae45"),
				ID:           to.Ptr("f6a39b76-9816-4e4b-b93a-f42e405017b7"),
				PrivacyLevel: to.Ptr(core.PrivacyLevelOrganizational),
			}},
	}

	testsuite.serverFactory.ConnectionsServer.NewListConnectionsPager = func(options *core.ConnectionsClientListConnectionsOptions) (resp azfake.PagerResponder[core.ConnectionsClientListConnectionsResponse]) {
		resp = azfake.PagerResponder[core.ConnectionsClientListConnectionsResponse]{}
		resp.AddPage(http.StatusOK, core.ConnectionsClientListConnectionsResponse{ListConnectionsResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewConnectionsClient()
	pager := client.NewListConnectionsPager(&core.ConnectionsClientListConnectionsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ListConnectionsResponse))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestConnections_CreateConnection() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Cloud example"},
	})
	var exampleCreateConnectionRequest core.CreateConnectionRequestClassification
	exampleCreateConnectionRequest = &core.CreateCloudConnectionRequest{
		ConnectionDetails: &core.CreateConnectionDetails{
			Type:           to.Ptr("SQL"),
			CreationMethod: to.Ptr("SQL"),
			Parameters: []core.ConnectionDetailsParameterClassification{
				&core.ConnectionDetailsTextParameter{
					Name:     to.Ptr("server"),
					DataType: to.Ptr(core.DataTypeText),
					Value:    to.Ptr("contoso.database.windows.net"),
				},
				&core.ConnectionDetailsTextParameter{
					Name:     to.Ptr("database"),
					DataType: to.Ptr(core.DataTypeText),
					Value:    to.Ptr("sales"),
				}},
		},
		ConnectivityType: to.Ptr(core.ConnectivityTypeShareableCloud),
		DisplayName:      to.Ptr("ContosoCloudConnection"),
		PrivacyLevel:     to.Ptr(core.PrivacyLevelOrganizational),
		CredentialDetails: &core.CreateCredentialDetails{
			ConnectionEncryption: to.Ptr(core.ConnectionEncryptionNotEncrypted),
			SingleSignOnType:     to.Ptr(core.SingleSignOnTypeNone),
			SkipTestConnection:   to.Ptr(false),
			Credentials: &core.BasicCredentials{
				CredentialType: to.Ptr(core.CredentialTypeBasic),
				Password:       to.Ptr("********"),
				Username:       to.Ptr("admin"),
			},
		},
	}

	testsuite.serverFactory.ConnectionsServer.CreateConnection = func(ctx context.Context, createConnectionRequest core.CreateConnectionRequestClassification, options *core.ConnectionsClientCreateConnectionOptions) (resp azfake.Responder[core.ConnectionsClientCreateConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleCreateConnectionRequest, createConnectionRequest))
		resp = azfake.Responder[core.ConnectionsClientCreateConnectionResponse]{}
		resp.SetResponse(http.StatusCreated, core.ConnectionsClientCreateConnectionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewConnectionsClient()
	_, err = client.CreateConnection(ctx, exampleCreateConnectionRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Virtual network gateway example"},
	})
	exampleCreateConnectionRequest = &core.CreateVirtualNetworkGatewayConnectionRequest{
		ConnectionDetails: &core.CreateConnectionDetails{
			Type:           to.Ptr("SQL"),
			CreationMethod: to.Ptr("SQL"),
			Parameters: []core.ConnectionDetailsParameterClassification{
				&core.ConnectionDetailsTextParameter{
					Name:     to.Ptr("server"),
					DataType: to.Ptr(core.DataTypeText),
					Value:    to.Ptr("contoso.database.windows.net"),
				},
				&core.ConnectionDetailsTextParameter{
					Name:     to.Ptr("database"),
					DataType: to.Ptr(core.DataTypeText),
					Value:    to.Ptr("sales"),
				}},
		},
		ConnectivityType: to.Ptr(core.ConnectivityTypeVirtualNetworkGateway),
		DisplayName:      to.Ptr("ContosoVirtualNetworkGatewayConnection"),
		PrivacyLevel:     to.Ptr(core.PrivacyLevelOrganizational),
		CredentialDetails: &core.CreateCredentialDetails{
			ConnectionEncryption: to.Ptr(core.ConnectionEncryptionEncrypted),
			SingleSignOnType:     to.Ptr(core.SingleSignOnTypeNone),
			SkipTestConnection:   to.Ptr(false),
			Credentials: &core.BasicCredentials{
				CredentialType: to.Ptr(core.CredentialTypeBasic),
				Password:       to.Ptr("*********"),
				Username:       to.Ptr("admin"),
			},
		},
		GatewayID: to.Ptr("93491300-cfbd-402f-bf17-9ace59a92354"),
	}

	testsuite.serverFactory.ConnectionsServer.CreateConnection = func(ctx context.Context, createConnectionRequest core.CreateConnectionRequestClassification, options *core.ConnectionsClientCreateConnectionOptions) (resp azfake.Responder[core.ConnectionsClientCreateConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleCreateConnectionRequest, createConnectionRequest))
		resp = azfake.Responder[core.ConnectionsClientCreateConnectionResponse]{}
		resp.SetResponse(http.StatusCreated, core.ConnectionsClientCreateConnectionResponse{}, nil)
		return
	}

	_, err = client.CreateConnection(ctx, exampleCreateConnectionRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestConnections_GetConnection() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example"},
	})
	var exampleConnectionID string
	exampleConnectionID = "f6a39b76-9816-4e4b-b93a-f42e405017b7"

	exampleRes := core.Connection{
		ConnectionDetails: &core.ListConnectionDetails{
			Type: to.Ptr("SQL"),
			Path: to.Ptr("contoso.database.windows.net;sales"),
		},
		ConnectivityType: to.Ptr(core.ConnectivityTypeOnPremisesGateway),
		CredentialDetails: &core.ListCredentialDetails{
			ConnectionEncryption: to.Ptr(core.ConnectionEncryptionNotEncrypted),
			SingleSignOnType:     to.Ptr(core.SingleSignOnTypeNone),
			SkipTestConnection:   to.Ptr(false),
			CredentialType:       to.Ptr(core.CredentialTypeBasic),
		},
		DisplayName:  to.Ptr("ContosoConnection"),
		GatewayID:    to.Ptr("58376c10-5f61-4024-887e-748df4beae45"),
		ID:           to.Ptr("f6a39b76-9816-4e4b-b93a-f42e405017b7"),
		PrivacyLevel: to.Ptr(core.PrivacyLevelOrganizational),
	}

	testsuite.serverFactory.ConnectionsServer.GetConnection = func(ctx context.Context, connectionID string, options *core.ConnectionsClientGetConnectionOptions) (resp azfake.Responder[core.ConnectionsClientGetConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleConnectionID, connectionID)
		resp = azfake.Responder[core.ConnectionsClientGetConnectionResponse]{}
		resp.SetResponse(http.StatusOK, core.ConnectionsClientGetConnectionResponse{Connection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewConnectionsClient()
	res, err := client.GetConnection(ctx, exampleConnectionID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Connection))
}

func (testsuite *FakeTestSuite) TestConnections_UpdateConnection() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Personal cloud example"},
	})
	var exampleConnectionID string
	var exampleUpdateConnectionRequest core.UpdateConnectionRequestClassification
	exampleConnectionID = "7a0369b2-58c4-4b67-b3f3-92156a95f1cd"
	exampleUpdateConnectionRequest = &core.UpdatePersonalCloudConnectionRequest{
		ConnectivityType: to.Ptr(core.ConnectivityTypePersonalCloud),
		PrivacyLevel:     to.Ptr(core.PrivacyLevelOrganizational),
	}

	exampleRes := core.Connection{
		ConnectionDetails: &core.ListConnectionDetails{
			Type: to.Ptr("SQL"),
			Path: to.Ptr("contoso.database.windows.net;finances"),
		},
		ConnectivityType: to.Ptr(core.ConnectivityTypePersonalCloud),
		CredentialDetails: &core.ListCredentialDetails{
			ConnectionEncryption: to.Ptr(core.ConnectionEncryptionNotEncrypted),
			SingleSignOnType:     to.Ptr(core.SingleSignOnTypeNone),
			SkipTestConnection:   to.Ptr(false),
			CredentialType:       to.Ptr(core.CredentialTypeOAuth2),
		},
		ID:           to.Ptr("7a0369b2-58c4-4b67-b3f3-92156a95f1cd"),
		PrivacyLevel: to.Ptr(core.PrivacyLevelOrganizational),
	}

	testsuite.serverFactory.ConnectionsServer.UpdateConnection = func(ctx context.Context, connectionID string, updateConnectionRequest core.UpdateConnectionRequestClassification, options *core.ConnectionsClientUpdateConnectionOptions) (resp azfake.Responder[core.ConnectionsClientUpdateConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleConnectionID, connectionID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateConnectionRequest, updateConnectionRequest))
		resp = azfake.Responder[core.ConnectionsClientUpdateConnectionResponse]{}
		resp.SetResponse(http.StatusOK, core.ConnectionsClientUpdateConnectionResponse{Connection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewConnectionsClient()
	res, err := client.UpdateConnection(ctx, exampleConnectionID, exampleUpdateConnectionRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Connection))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Shareable cloud example"},
	})
	exampleConnectionID = "fa968eee-8075-48f6-8c6d-41260ee1396d"
	exampleUpdateConnectionRequest = &core.UpdateShareableCloudConnectionRequest{
		ConnectivityType: to.Ptr(core.ConnectivityTypeShareableCloud),
		DisplayName:      to.Ptr("ContosoCloudConnection"),
	}

	exampleRes = core.Connection{
		ConnectionDetails: &core.ListConnectionDetails{
			Type: to.Ptr("SQL"),
			Path: to.Ptr("contoso.database.windows.net;networks"),
		},
		ConnectivityType: to.Ptr(core.ConnectivityTypeShareableCloud),
		CredentialDetails: &core.ListCredentialDetails{
			ConnectionEncryption: to.Ptr(core.ConnectionEncryptionNotEncrypted),
			SingleSignOnType:     to.Ptr(core.SingleSignOnTypeNone),
			SkipTestConnection:   to.Ptr(true),
			CredentialType:       to.Ptr(core.CredentialTypeBasic),
		},
		DisplayName:  to.Ptr("ContosoCloudConnection"),
		ID:           to.Ptr("fa968eee-8075-48f6-8c6d-41260ee1396d"),
		PrivacyLevel: to.Ptr(core.PrivacyLevelPublic),
	}

	testsuite.serverFactory.ConnectionsServer.UpdateConnection = func(ctx context.Context, connectionID string, updateConnectionRequest core.UpdateConnectionRequestClassification, options *core.ConnectionsClientUpdateConnectionOptions) (resp azfake.Responder[core.ConnectionsClientUpdateConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleConnectionID, connectionID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateConnectionRequest, updateConnectionRequest))
		resp = azfake.Responder[core.ConnectionsClientUpdateConnectionResponse]{}
		resp.SetResponse(http.StatusOK, core.ConnectionsClientUpdateConnectionResponse{Connection: exampleRes}, nil)
		return
	}

	res, err = client.UpdateConnection(ctx, exampleConnectionID, exampleUpdateConnectionRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Connection))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Virtual network gateway example"},
	})
	exampleConnectionID = "6b571614-2e98-4bfd-b9ed-1cb8d3ffc396"
	exampleUpdateConnectionRequest = &core.UpdateVirtualNetworkGatewayConnectionRequest{
		ConnectivityType: to.Ptr(core.ConnectivityTypeVirtualNetworkGateway),
		PrivacyLevel:     to.Ptr(core.PrivacyLevelOrganizational),
		CredentialDetails: &core.UpdateCredentialDetails{
			SingleSignOnType: to.Ptr(core.SingleSignOnTypeNone),
		},
		DisplayName: to.Ptr("ContosoMarketingVirtualNetworkGatewayConnection"),
	}

	exampleRes = core.Connection{
		ConnectionDetails: &core.ListConnectionDetails{
			Type: to.Ptr("SQL"),
			Path: to.Ptr("contoso.database.windows.net;marketing"),
		},
		ConnectivityType: to.Ptr(core.ConnectivityTypeVirtualNetworkGateway),
		CredentialDetails: &core.ListCredentialDetails{
			ConnectionEncryption: to.Ptr(core.ConnectionEncryptionNotEncrypted),
			SingleSignOnType:     to.Ptr(core.SingleSignOnTypeNone),
			SkipTestConnection:   to.Ptr(false),
			CredentialType:       to.Ptr(core.CredentialTypeBasic),
		},
		DisplayName:  to.Ptr("ContosoMarketingVirtualNetworkGatewayConnection"),
		GatewayID:    to.Ptr("befccff4-3ee6-40d7-b8f1-a0a9fd684a85"),
		ID:           to.Ptr("6b571614-2e98-4bfd-b9ed-1cb8d3ffc396"),
		PrivacyLevel: to.Ptr(core.PrivacyLevelOrganizational),
	}

	testsuite.serverFactory.ConnectionsServer.UpdateConnection = func(ctx context.Context, connectionID string, updateConnectionRequest core.UpdateConnectionRequestClassification, options *core.ConnectionsClientUpdateConnectionOptions) (resp azfake.Responder[core.ConnectionsClientUpdateConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleConnectionID, connectionID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateConnectionRequest, updateConnectionRequest))
		resp = azfake.Responder[core.ConnectionsClientUpdateConnectionResponse]{}
		resp.SetResponse(http.StatusOK, core.ConnectionsClientUpdateConnectionResponse{Connection: exampleRes}, nil)
		return
	}

	res, err = client.UpdateConnection(ctx, exampleConnectionID, exampleUpdateConnectionRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Connection))
}

func (testsuite *FakeTestSuite) TestConnections_DeleteConnection() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example"},
	})
	var exampleConnectionID string
	exampleConnectionID = "536f7c95-076c-40b5-8fe0-2179536e4161"

	testsuite.serverFactory.ConnectionsServer.DeleteConnection = func(ctx context.Context, connectionID string, options *core.ConnectionsClientDeleteConnectionOptions) (resp azfake.Responder[core.ConnectionsClientDeleteConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleConnectionID, connectionID)
		resp = azfake.Responder[core.ConnectionsClientDeleteConnectionResponse]{}
		resp.SetResponse(http.StatusOK, core.ConnectionsClientDeleteConnectionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewConnectionsClient()
	_, err = client.DeleteConnection(ctx, exampleConnectionID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestConnections_ListSupportedConnectionTypes() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example"},
	})

	exampleRes := core.ListSupportedConnectionTypesResponse{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/connections/supportedConnections?connectivityType=ShareableCloud&continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.ConnectionCreationMetadata{
			{
				Type: to.Ptr("SQL"),
				CreationMethods: []core.ConnectionCreationMethod{
					{
						Name: to.Ptr("SQL"),
						Parameters: []core.ConnectionCreationParameter{
							{
								Name:     to.Ptr("server"),
								DataType: to.Ptr(core.DataTypeText),
								Required: to.Ptr(true),
							},
							{
								Name:     to.Ptr("database"),
								DataType: to.Ptr(core.DataTypeText),
								Required: to.Ptr(false),
							}},
					}},
				SupportedConnectionEncryptionTypes: []core.ConnectionEncryption{
					core.ConnectionEncryptionEncrypted,
					core.ConnectionEncryptionNotEncrypted},
				SupportedCredentialTypes: []core.CredentialType{
					core.CredentialTypeBasic,
					core.CredentialTypeOAuth2},
				SupportsSkipTestConnection: to.Ptr(true),
			}},
	}

	testsuite.serverFactory.ConnectionsServer.NewListSupportedConnectionTypesPager = func(options *core.ConnectionsClientListSupportedConnectionTypesOptions) (resp azfake.PagerResponder[core.ConnectionsClientListSupportedConnectionTypesResponse]) {
		resp = azfake.PagerResponder[core.ConnectionsClientListSupportedConnectionTypesResponse]{}
		resp.AddPage(http.StatusOK, core.ConnectionsClientListSupportedConnectionTypesResponse{ListSupportedConnectionTypesResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewConnectionsClient()
	pager := client.NewListSupportedConnectionTypesPager(&core.ConnectionsClientListSupportedConnectionTypesOptions{GatewayID: to.Ptr("6d824cb9-6bfb-4bdb-a702-238e172a8743"),
		ShowAllCreationMethods: nil,
		ContinuationToken:      nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ListSupportedConnectionTypesResponse))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestConnections_ListConnectionRoleAssignments() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List connection role assignment example"},
	})
	var exampleConnectionID string
	exampleConnectionID = "9558d649-84f1-4b7e-850a-59b5d0ae95eb"

	exampleRes := core.ConnectionRoleAssignments{
		Value: []core.ConnectionRoleAssignment{
			{
				ID: to.Ptr("1c15c348-dd88-4065-8f25-57581c216bcf"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("1c15c348-dd88-4065-8f25-57581c216bcf"),
				},
				Role: to.Ptr(core.ConnectionRoleOwner),
			},
			{
				ID: to.Ptr("d3a7dbf7-6641-48f2-851e-d71bbf9d90c4"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeGroup),
					ID:   to.Ptr("d3a7dbf7-6641-48f2-851e-d71bbf9d90c4"),
				},
				Role: to.Ptr(core.ConnectionRoleOwner),
			},
			{
				ID: to.Ptr("48ba22da-4431-4da4-8b70-3401685bf9e5"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeGroup),
					ID:   to.Ptr("48ba22da-4431-4da4-8b70-3401685bf9e5"),
				},
				Role: to.Ptr(core.ConnectionRoleUser),
			},
			{
				ID: to.Ptr("1dfa1747-ce76-4caf-99c8-360b95f9f17a"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("1dfa1747-ce76-4caf-99c8-360b95f9f17a"),
				},
				Role: to.Ptr(core.ConnectionRoleUserWithReshare),
			}},
	}

	testsuite.serverFactory.ConnectionsServer.NewListConnectionRoleAssignmentsPager = func(connectionID string, options *core.ConnectionsClientListConnectionRoleAssignmentsOptions) (resp azfake.PagerResponder[core.ConnectionsClientListConnectionRoleAssignmentsResponse]) {
		testsuite.Require().Equal(exampleConnectionID, connectionID)
		resp = azfake.PagerResponder[core.ConnectionsClientListConnectionRoleAssignmentsResponse]{}
		resp.AddPage(http.StatusOK, core.ConnectionsClientListConnectionRoleAssignmentsResponse{ConnectionRoleAssignments: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewConnectionsClient()
	pager := client.NewListConnectionRoleAssignmentsPager(exampleConnectionID, &core.ConnectionsClientListConnectionRoleAssignmentsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ConnectionRoleAssignments))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List connection role assignment with continuation example"},
	})
	exampleConnectionID = "9558d649-84f1-4b7e-850a-59b5d0ae95eb"

	exampleRes = core.ConnectionRoleAssignments{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/connections/9558d649-84f1-4b7e-850a-59b5d0ae95eb/roleAssignments?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.ConnectionRoleAssignment{
			{
				ID: to.Ptr("1c15c348-dd88-4065-8f25-57581c216bcf"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("1c15c348-dd88-4065-8f25-57581c216bcf"),
				},
				Role: to.Ptr(core.ConnectionRoleOwner),
			},
			{
				ID: to.Ptr("d3a7dbf7-6641-48f2-851e-d71bbf9d90c4"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeGroup),
					ID:   to.Ptr("d3a7dbf7-6641-48f2-851e-d71bbf9d90c4"),
				},
				Role: to.Ptr(core.ConnectionRoleOwner),
			},
			{
				ID: to.Ptr("48ba22da-4431-4da4-8b70-3401685bf9e5"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeGroup),
					ID:   to.Ptr("48ba22da-4431-4da4-8b70-3401685bf9e5"),
				},
				Role: to.Ptr(core.ConnectionRoleUser),
			},
			{
				ID: to.Ptr("1dfa1747-ce76-4caf-99c8-360b95f9f17a"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("1dfa1747-ce76-4caf-99c8-360b95f9f17a"),
				},
				Role: to.Ptr(core.ConnectionRoleUserWithReshare),
			}},
	}

	testsuite.serverFactory.ConnectionsServer.NewListConnectionRoleAssignmentsPager = func(connectionID string, options *core.ConnectionsClientListConnectionRoleAssignmentsOptions) (resp azfake.PagerResponder[core.ConnectionsClientListConnectionRoleAssignmentsResponse]) {
		testsuite.Require().Equal(exampleConnectionID, connectionID)
		resp = azfake.PagerResponder[core.ConnectionsClientListConnectionRoleAssignmentsResponse]{}
		resp.AddPage(http.StatusOK, core.ConnectionsClientListConnectionRoleAssignmentsResponse{ConnectionRoleAssignments: exampleRes}, nil)
		return
	}

	pager = client.NewListConnectionRoleAssignmentsPager(exampleConnectionID, &core.ConnectionsClientListConnectionRoleAssignmentsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ConnectionRoleAssignments))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestConnections_AddConnectionRoleAssignment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Add connection role assignment example"},
	})
	var exampleConnectionID string
	var exampleAddConnectionRoleAssignmentRequest core.AddConnectionRoleAssignmentRequest
	exampleConnectionID = "f3a2e6af-d048-4f85-94d9-b3d16140df05"
	exampleAddConnectionRoleAssignmentRequest = core.AddConnectionRoleAssignmentRequest{
		Principal: &core.Principal{
			Type: to.Ptr(core.PrincipalTypeUser),
			ID:   to.Ptr("6a002b3d-e4ec-43df-8c08-e8eb7547d9dd"),
		},
		Role: to.Ptr(core.ConnectionRoleOwner),
	}

	testsuite.serverFactory.ConnectionsServer.AddConnectionRoleAssignment = func(ctx context.Context, connectionID string, addConnectionRoleAssignmentRequest core.AddConnectionRoleAssignmentRequest, options *core.ConnectionsClientAddConnectionRoleAssignmentOptions) (resp azfake.Responder[core.ConnectionsClientAddConnectionRoleAssignmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleConnectionID, connectionID)
		testsuite.Require().True(reflect.DeepEqual(exampleAddConnectionRoleAssignmentRequest, addConnectionRoleAssignmentRequest))
		resp = azfake.Responder[core.ConnectionsClientAddConnectionRoleAssignmentResponse]{}
		resp.SetResponse(http.StatusCreated, core.ConnectionsClientAddConnectionRoleAssignmentResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewConnectionsClient()
	_, err = client.AddConnectionRoleAssignment(ctx, exampleConnectionID, exampleAddConnectionRoleAssignmentRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestConnections_GetConnectionRoleAssignment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example"},
	})
	var exampleConnectionID string
	var exampleConnectionRoleAssignmentID string
	exampleConnectionID = "4bbb41c0-1dcc-4a8c-aff5-c681a3d10208"
	exampleConnectionRoleAssignmentID = "43970761-afc9-4428-ae6e-3b08bef098ff"

	exampleRes := core.ConnectionRoleAssignment{
		ID: to.Ptr("43970761-afc9-4428-ae6e-3b08bef098ff"),
		Principal: &core.Principal{
			Type: to.Ptr(core.PrincipalTypeUser),
			ID:   to.Ptr("43970761-afc9-4428-ae6e-3b08bef098ff"),
		},
		Role: to.Ptr(core.ConnectionRoleOwner),
	}

	testsuite.serverFactory.ConnectionsServer.GetConnectionRoleAssignment = func(ctx context.Context, connectionID string, connectionRoleAssignmentID string, options *core.ConnectionsClientGetConnectionRoleAssignmentOptions) (resp azfake.Responder[core.ConnectionsClientGetConnectionRoleAssignmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleConnectionID, connectionID)
		testsuite.Require().Equal(exampleConnectionRoleAssignmentID, connectionRoleAssignmentID)
		resp = azfake.Responder[core.ConnectionsClientGetConnectionRoleAssignmentResponse]{}
		resp.SetResponse(http.StatusOK, core.ConnectionsClientGetConnectionRoleAssignmentResponse{ConnectionRoleAssignment: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewConnectionsClient()
	res, err := client.GetConnectionRoleAssignment(ctx, exampleConnectionID, exampleConnectionRoleAssignmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ConnectionRoleAssignment))
}

func (testsuite *FakeTestSuite) TestConnections_UpdateConnectionRoleAssignment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update connection role assignment example"},
	})
	var exampleConnectionID string
	var exampleConnectionRoleAssignmentID string
	var exampleUpdateConnectionRoleAssignmentRequest core.UpdateConnectionRoleAssignmentRequest
	exampleConnectionID = "fe8e181d-dbb8-471a-99f0-fdbf0a2ad4fd"
	exampleConnectionRoleAssignmentID = "43970761-afc9-4428-ae6e-3b08bef098ff"
	exampleUpdateConnectionRoleAssignmentRequest = core.UpdateConnectionRoleAssignmentRequest{
		Role: to.Ptr(core.ConnectionRoleUserWithReshare),
	}

	exampleRes := core.ConnectionRoleAssignment{
		ID: to.Ptr("43970761-afc9-4428-ae6e-3b08bef098ff"),
		Principal: &core.Principal{
			Type: to.Ptr(core.PrincipalTypeUser),
			ID:   to.Ptr("43970761-afc9-4428-ae6e-3b08bef098ff"),
		},
		Role: to.Ptr(core.ConnectionRoleUserWithReshare),
	}

	testsuite.serverFactory.ConnectionsServer.UpdateConnectionRoleAssignment = func(ctx context.Context, connectionID string, connectionRoleAssignmentID string, updateConnectionRoleAssignmentRequest core.UpdateConnectionRoleAssignmentRequest, options *core.ConnectionsClientUpdateConnectionRoleAssignmentOptions) (resp azfake.Responder[core.ConnectionsClientUpdateConnectionRoleAssignmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleConnectionID, connectionID)
		testsuite.Require().Equal(exampleConnectionRoleAssignmentID, connectionRoleAssignmentID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateConnectionRoleAssignmentRequest, updateConnectionRoleAssignmentRequest))
		resp = azfake.Responder[core.ConnectionsClientUpdateConnectionRoleAssignmentResponse]{}
		resp.SetResponse(http.StatusOK, core.ConnectionsClientUpdateConnectionRoleAssignmentResponse{ConnectionRoleAssignment: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewConnectionsClient()
	res, err := client.UpdateConnectionRoleAssignment(ctx, exampleConnectionID, exampleConnectionRoleAssignmentID, exampleUpdateConnectionRoleAssignmentRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ConnectionRoleAssignment))
}

func (testsuite *FakeTestSuite) TestConnections_DeleteConnectionRoleAssignment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete connection role assignment example"},
	})
	var exampleConnectionID string
	var exampleConnectionRoleAssignmentID string
	exampleConnectionID = "a06fbff3-09e1-4958-a92b-2a7550459762"
	exampleConnectionRoleAssignmentID = "b7439ed7-7331-4c59-b2bb-f4f917e61979"

	testsuite.serverFactory.ConnectionsServer.DeleteConnectionRoleAssignment = func(ctx context.Context, connectionID string, connectionRoleAssignmentID string, options *core.ConnectionsClientDeleteConnectionRoleAssignmentOptions) (resp azfake.Responder[core.ConnectionsClientDeleteConnectionRoleAssignmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleConnectionID, connectionID)
		testsuite.Require().Equal(exampleConnectionRoleAssignmentID, connectionRoleAssignmentID)
		resp = azfake.Responder[core.ConnectionsClientDeleteConnectionRoleAssignmentResponse]{}
		resp.SetResponse(http.StatusOK, core.ConnectionsClientDeleteConnectionRoleAssignmentResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewConnectionsClient()
	_, err = client.DeleteConnectionRoleAssignment(ctx, exampleConnectionID, exampleConnectionRoleAssignmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestGateways_ListGateways() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example"},
	})

	exampleRes := core.ListGatewaysResponse{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/connections?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.GatewayClassification{
			&core.OnPremisesGateway{
				Type:                        to.Ptr(core.GatewayTypeOnPremises),
				ID:                          to.Ptr("8e41c4dd-a382-4937-9bf3-695ab881f7c2"),
				AllowCloudConnectionRefresh: to.Ptr(true),
				AllowCustomConnectors:       to.Ptr(true),
				DisplayName:                 to.Ptr("ContosoOnPremisesGateway"),
				LoadBalancingSetting:        to.Ptr(core.LoadBalancingSettingDistributeEvenly),
				NumberOfMemberGateways:      to.Ptr[int32](2),
				PublicKey: &core.PublicKey{
					Exponent: to.Ptr("AQGB"),
					Modulus:  to.Ptr("od9b...90Jp1Q=="),
				},
				Version: to.Ptr("3000.1.1"),
			},
			&core.OnPremisesGatewayPersonal{
				Type: to.Ptr(core.GatewayTypeOnPremisesPersonal),
				ID:   to.Ptr("ca8979ff-4238-4489-ad13-2e1bd69a8412"),
				PublicKey: &core.PublicKey{
					Exponent: to.Ptr("AQOV"),
					Modulus:  to.Ptr("pt9b...87Jp1Q=="),
				},
				Version: to.Ptr("3000.1.1"),
			},
			&core.VirtualNetworkGateway{
				Type:                         to.Ptr(core.GatewayTypeVirtualNetwork),
				ID:                           to.Ptr("271c5c9a-0860-4927-b1da-ce49008d6565"),
				CapacityID:                   to.Ptr("ed26b6f3-7bc5-44b0-9565-a8942619ef4c"),
				DisplayName:                  to.Ptr("ContosoVirtualNetworkGateway"),
				InactivityMinutesBeforeSleep: to.Ptr[int32](1440),
				NumberOfMemberGateways:       to.Ptr[int32](3),
				VirtualNetworkAzureResource: &core.VirtualNetworkAzureResource{
					ResourceGroupName:  to.Ptr("ContosoResourceGroup"),
					SubscriptionID:     to.Ptr("879b4ba0-ed17-4ff2-851e-4a2228e00b70"),
					SubnetName:         to.Ptr("ContosoSubnet"),
					VirtualNetworkName: to.Ptr("ContosoVirtualNetwork"),
				},
			}},
	}

	testsuite.serverFactory.GatewaysServer.NewListGatewaysPager = func(options *core.GatewaysClientListGatewaysOptions) (resp azfake.PagerResponder[core.GatewaysClientListGatewaysResponse]) {
		resp = azfake.PagerResponder[core.GatewaysClientListGatewaysResponse]{}
		resp.AddPage(http.StatusOK, core.GatewaysClientListGatewaysResponse{ListGatewaysResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	pager := client.NewListGatewaysPager(&core.GatewaysClientListGatewaysOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ListGatewaysResponse))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestGateways_CreateGateway() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Virtual network gateway example"},
	})
	var exampleCreateGatewayRequest core.CreateGatewayRequestClassification
	exampleCreateGatewayRequest = &core.CreateVirtualNetworkGatewayRequest{
		Type:                         to.Ptr(core.GatewayTypeVirtualNetwork),
		CapacityID:                   to.Ptr("ed26b6f3-7bc5-44b0-9565-a8942619ef4c"),
		DisplayName:                  to.Ptr("ContosoVirtualNetworkGateway"),
		InactivityMinutesBeforeSleep: to.Ptr[int32](120),
		NumberOfMemberGateways:       to.Ptr[int32](3),
		VirtualNetworkAzureResource: &core.VirtualNetworkAzureResource{
			ResourceGroupName:  to.Ptr("ContosoResourceGroup"),
			SubscriptionID:     to.Ptr("879b4ba0-ed17-4ff2-851e-4a2228e00b70"),
			SubnetName:         to.Ptr("ContosoSubnet"),
			VirtualNetworkName: to.Ptr("ContosoVirtualNetwork"),
		},
	}

	testsuite.serverFactory.GatewaysServer.CreateGateway = func(ctx context.Context, createGatewayRequest core.CreateGatewayRequestClassification, options *core.GatewaysClientCreateGatewayOptions) (resp azfake.Responder[core.GatewaysClientCreateGatewayResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleCreateGatewayRequest, createGatewayRequest))
		resp = azfake.Responder[core.GatewaysClientCreateGatewayResponse]{}
		resp.SetResponse(http.StatusCreated, core.GatewaysClientCreateGatewayResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	_, err = client.CreateGateway(ctx, exampleCreateGatewayRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestGateways_GetGateway() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example"},
	})
	var exampleGatewayID string
	exampleGatewayID = "8e41c4dd-a382-4937-9bf3-695ab881f7c2"

	exampleRes := core.GatewaysClientGetGatewayResponse{
		GatewayClassification: &core.OnPremisesGateway{
			Type:                        to.Ptr(core.GatewayTypeOnPremises),
			ID:                          to.Ptr("8e41c4dd-a382-4937-9bf3-695ab881f7c2"),
			AllowCloudConnectionRefresh: to.Ptr(true),
			AllowCustomConnectors:       to.Ptr(true),
			DisplayName:                 to.Ptr("ContosoOnPremisesGateway"),
			LoadBalancingSetting:        to.Ptr(core.LoadBalancingSettingDistributeEvenly),
			NumberOfMemberGateways:      to.Ptr[int32](2),
			PublicKey: &core.PublicKey{
				Exponent: to.Ptr("AQGB"),
				Modulus:  to.Ptr("od9b...90Jp1Q=="),
			},
			Version: to.Ptr("3000.1.1"),
		},
	}

	testsuite.serverFactory.GatewaysServer.GetGateway = func(ctx context.Context, gatewayID string, options *core.GatewaysClientGetGatewayOptions) (resp azfake.Responder[core.GatewaysClientGetGatewayResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		resp = azfake.Responder[core.GatewaysClientGetGatewayResponse]{}
		resp.SetResponse(http.StatusOK, exampleRes, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	res, err := client.GetGateway(ctx, exampleGatewayID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res))
}

func (testsuite *FakeTestSuite) TestGateways_UpdateGateway() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"On-premises gateway example"},
	})
	var exampleGatewayID string
	var exampleUpdateGatewayRequest core.UpdateGatewayRequestClassification
	exampleGatewayID = "3d1290e1-e3ed-4bd6-93bc-2bbd5b49a789"
	exampleUpdateGatewayRequest = &core.UpdateOnPremisesGatewayRequest{
		Type:                        to.Ptr(core.GatewayTypeOnPremises),
		DisplayName:                 to.Ptr("ContosoGatewayCluster1"),
		AllowCloudConnectionRefresh: to.Ptr(false),
		AllowCustomConnectors:       to.Ptr(false),
		LoadBalancingSetting:        to.Ptr(core.LoadBalancingSettingFailover),
	}

	exampleRes := core.GatewaysClientUpdateGatewayResponse{
		GatewayClassification: &core.OnPremisesGateway{
			Type:                        to.Ptr(core.GatewayTypeOnPremises),
			ID:                          to.Ptr("3d1290e1-e3ed-4bd6-93bc-2bbd5b49a789"),
			AllowCloudConnectionRefresh: to.Ptr(false),
			AllowCustomConnectors:       to.Ptr(false),
			DisplayName:                 to.Ptr("ContosoGatewayCluster1"),
			LoadBalancingSetting:        to.Ptr(core.LoadBalancingSettingFailover),
			NumberOfMemberGateways:      to.Ptr[int32](2),
			PublicKey: &core.PublicKey{
				Exponent: to.Ptr("AQGB"),
				Modulus:  to.Ptr("od9b...90Jp1Q=="),
			},
			Version: to.Ptr("3000.1.2"),
		},
	}

	testsuite.serverFactory.GatewaysServer.UpdateGateway = func(ctx context.Context, gatewayID string, updateGatewayRequest core.UpdateGatewayRequestClassification, options *core.GatewaysClientUpdateGatewayOptions) (resp azfake.Responder[core.GatewaysClientUpdateGatewayResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateGatewayRequest, updateGatewayRequest))
		resp = azfake.Responder[core.GatewaysClientUpdateGatewayResponse]{}
		resp.SetResponse(http.StatusOK, exampleRes, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	res, err := client.UpdateGateway(ctx, exampleGatewayID, exampleUpdateGatewayRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Virtual network gateway example"},
	})
	exampleGatewayID = "7015263e-885f-455b-80f7-bbf862899176"
	exampleUpdateGatewayRequest = &core.UpdateVirtualNetworkGatewayRequest{
		Type:                         to.Ptr(core.GatewayTypeVirtualNetwork),
		DisplayName:                  to.Ptr("ContosoVirtualNetworkGateway1"),
		CapacityID:                   to.Ptr("7cf7181f-9457-4178-b488-e7472b02faf4"),
		InactivityMinutesBeforeSleep: to.Ptr[int32](720),
		NumberOfMemberGateways:       to.Ptr[int32](5),
	}

	exampleRes = core.GatewaysClientUpdateGatewayResponse{
		GatewayClassification: &core.VirtualNetworkGateway{
			Type:                         to.Ptr(core.GatewayTypeVirtualNetwork),
			ID:                           to.Ptr("7015263e-885f-455b-80f7-bbf862899176"),
			CapacityID:                   to.Ptr("7cf7181f-9457-4178-b488-e7472b02faf4"),
			DisplayName:                  to.Ptr("ContosoVirtualNetworkGateway1"),
			InactivityMinutesBeforeSleep: to.Ptr[int32](720),
			NumberOfMemberGateways:       to.Ptr[int32](5),
			VirtualNetworkAzureResource: &core.VirtualNetworkAzureResource{
				ResourceGroupName:  to.Ptr("ContosoResourceGroup"),
				SubscriptionID:     to.Ptr("879b4ba0-ed17-4ff2-851e-4a2228e00b70"),
				SubnetName:         to.Ptr("ContosoSubnet"),
				VirtualNetworkName: to.Ptr("ContosoVirtualNetwork"),
			},
		},
	}

	testsuite.serverFactory.GatewaysServer.UpdateGateway = func(ctx context.Context, gatewayID string, updateGatewayRequest core.UpdateGatewayRequestClassification, options *core.GatewaysClientUpdateGatewayOptions) (resp azfake.Responder[core.GatewaysClientUpdateGatewayResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateGatewayRequest, updateGatewayRequest))
		resp = azfake.Responder[core.GatewaysClientUpdateGatewayResponse]{}
		resp.SetResponse(http.StatusOK, exampleRes, nil)
		return
	}

	res, err = client.UpdateGateway(ctx, exampleGatewayID, exampleUpdateGatewayRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res))
}

func (testsuite *FakeTestSuite) TestGateways_DeleteGateway() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example"},
	})
	var exampleGatewayID string
	exampleGatewayID = "411a04d3-7c15-4b69-9dd8-de6e80df1009"

	testsuite.serverFactory.GatewaysServer.DeleteGateway = func(ctx context.Context, gatewayID string, options *core.GatewaysClientDeleteGatewayOptions) (resp azfake.Responder[core.GatewaysClientDeleteGatewayResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		resp = azfake.Responder[core.GatewaysClientDeleteGatewayResponse]{}
		resp.SetResponse(http.StatusOK, core.GatewaysClientDeleteGatewayResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	_, err = client.DeleteGateway(ctx, exampleGatewayID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestGateways_ListGatewayMembers() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example"},
	})
	var exampleGatewayID string
	exampleGatewayID = "8e41c4dd-a382-4937-9bf3-695ab881f7c2"

	exampleRes := core.ListGatewayMembersResponse{
		Value: []core.OnPremisesGatewayMember{
			{
				DisplayName: to.Ptr("ContosoPrimaryMemberGateway"),
				Enabled:     to.Ptr(true),
				ID:          to.Ptr("8e41c4dd-a382-4937-9bf3-695ab881f7c2"),
				PublicKey: &core.PublicKey{
					Exponent: to.Ptr("AQGB"),
					Modulus:  to.Ptr("od9b...90Jp1Q=="),
				},
				Version: to.Ptr("3000.1.1"),
			},
			{
				DisplayName: to.Ptr("ContosoSecondaryMemberGateway"),
				Enabled:     to.Ptr(false),
				ID:          to.Ptr("5d225cda-42d5-43d3-bc40-218f746e1d58"),
				PublicKey: &core.PublicKey{
					Exponent: to.Ptr("AQCB"),
					Modulus:  to.Ptr("o57c...90Jh1P=="),
				},
				Version: to.Ptr("3000.1.1"),
			}},
	}

	testsuite.serverFactory.GatewaysServer.ListGatewayMembers = func(ctx context.Context, gatewayID string, options *core.GatewaysClientListGatewayMembersOptions) (resp azfake.Responder[core.GatewaysClientListGatewayMembersResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		resp = azfake.Responder[core.GatewaysClientListGatewayMembersResponse]{}
		resp.SetResponse(http.StatusOK, core.GatewaysClientListGatewayMembersResponse{ListGatewayMembersResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	res, err := client.ListGatewayMembers(ctx, exampleGatewayID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ListGatewayMembersResponse))
}

func (testsuite *FakeTestSuite) TestGateways_UpdateGatewayMember() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example"},
	})
	var exampleGatewayID string
	var exampleGatewayMemberID string
	var exampleUpdateGatewayMemberRequest core.UpdateGatewayMemberRequest
	exampleGatewayID = "41d198df-5fb2-4463-8157-2af5153e6503"
	exampleGatewayMemberID = "1e624ffb-f74a-4dfb-9aa8-ea5056da37da"
	exampleUpdateGatewayMemberRequest = core.UpdateGatewayMemberRequest{
		DisplayName: to.Ptr("ContosoGatewayMember1"),
		Enabled:     to.Ptr(false),
	}

	exampleRes := core.OnPremisesGatewayMember{
		DisplayName: to.Ptr("ContosoGatewayMember1"),
		Enabled:     to.Ptr(false),
		ID:          to.Ptr("1e624ffb-f74a-4dfb-9aa8-ea5056da37da"),
		PublicKey: &core.PublicKey{
			Exponent: to.Ptr("AQGB"),
			Modulus:  to.Ptr("od9b...90Jp1Q=="),
		},
		Version: to.Ptr("3000.1.1"),
	}

	testsuite.serverFactory.GatewaysServer.UpdateGatewayMember = func(ctx context.Context, gatewayID string, gatewayMemberID string, updateGatewayMemberRequest core.UpdateGatewayMemberRequest, options *core.GatewaysClientUpdateGatewayMemberOptions) (resp azfake.Responder[core.GatewaysClientUpdateGatewayMemberResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		testsuite.Require().Equal(exampleGatewayMemberID, gatewayMemberID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateGatewayMemberRequest, updateGatewayMemberRequest))
		resp = azfake.Responder[core.GatewaysClientUpdateGatewayMemberResponse]{}
		resp.SetResponse(http.StatusOK, core.GatewaysClientUpdateGatewayMemberResponse{OnPremisesGatewayMember: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	res, err := client.UpdateGatewayMember(ctx, exampleGatewayID, exampleGatewayMemberID, exampleUpdateGatewayMemberRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OnPremisesGatewayMember))
}

func (testsuite *FakeTestSuite) TestGateways_DeleteGatewayMember() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example"},
	})
	var exampleGatewayID string
	var exampleGatewayMemberID string
	exampleGatewayID = "ad457a0a-1fc4-4218-9867-1d84661ca4b8"
	exampleGatewayMemberID = "f921ee6b-8feb-4595-8aa7-3ed34338e8b6"

	testsuite.serverFactory.GatewaysServer.DeleteGatewayMember = func(ctx context.Context, gatewayID string, gatewayMemberID string, options *core.GatewaysClientDeleteGatewayMemberOptions) (resp azfake.Responder[core.GatewaysClientDeleteGatewayMemberResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		testsuite.Require().Equal(exampleGatewayMemberID, gatewayMemberID)
		resp = azfake.Responder[core.GatewaysClientDeleteGatewayMemberResponse]{}
		resp.SetResponse(http.StatusOK, core.GatewaysClientDeleteGatewayMemberResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	_, err = client.DeleteGatewayMember(ctx, exampleGatewayID, exampleGatewayMemberID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestGateways_ListGatewayRoleAssignments() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List gateway role assignment example"},
	})
	var exampleGatewayID string
	exampleGatewayID = "8e41c4dd-a382-4937-9bf3-695ab881f7c2"

	exampleRes := core.GatewayRoleAssignments{
		Value: []core.GatewayRoleAssignment{
			{
				ID: to.Ptr("ef543eb8-969c-46b0-a5a1-3f93351b6b31"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("ef543eb8-969c-46b0-a5a1-3f93351b6b31"),
				},
				Role: to.Ptr(core.GatewayRoleAdmin),
			},
			{
				ID: to.Ptr("5cf7d203-9123-4dff-a87f-7097dc4b5d60"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("5cf7d203-9123-4dff-a87f-7097dc4b5d60"),
				},
				Role: to.Ptr(core.GatewayRoleConnectionCreatorWithResharing),
			},
			{
				ID: to.Ptr("5931cd21-857f-42a5-beaf-0120e8b36542"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("5931cd21-857f-42a5-beaf-0120e8b36542"),
				},
				Role: to.Ptr(core.GatewayRoleConnectionCreator),
			},
			{
				ID: to.Ptr("97614f04-507c-4f6c-8dbc-da1845f582ef"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("97614f04-507c-4f6c-8dbc-da1845f582ef"),
				},
				Role: to.Ptr(core.GatewayRoleConnectionCreator),
			},
			{
				ID: to.Ptr("a5d9f30d-a15c-4fb9-b8ff-e2a884c9fd82"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeGroup),
					ID:   to.Ptr("a5d9f30d-a15c-4fb9-b8ff-e2a884c9fd82"),
				},
				Role: to.Ptr(core.GatewayRoleConnectionCreator),
			}},
	}

	testsuite.serverFactory.GatewaysServer.NewListGatewayRoleAssignmentsPager = func(gatewayID string, options *core.GatewaysClientListGatewayRoleAssignmentsOptions) (resp azfake.PagerResponder[core.GatewaysClientListGatewayRoleAssignmentsResponse]) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		resp = azfake.PagerResponder[core.GatewaysClientListGatewayRoleAssignmentsResponse]{}
		resp.AddPage(http.StatusOK, core.GatewaysClientListGatewayRoleAssignmentsResponse{GatewayRoleAssignments: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	pager := client.NewListGatewayRoleAssignmentsPager(exampleGatewayID, &core.GatewaysClientListGatewayRoleAssignmentsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GatewayRoleAssignments))
		if err == nil {
			break
		}
	}

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List gateway role assignment with continuation example"},
	})
	exampleGatewayID = "8e41c4dd-a382-4937-9bf3-695ab881f7c2"

	exampleRes = core.GatewayRoleAssignments{
		ContinuationToken: to.Ptr("LDEsMTAwMDAwLDA%3D"),
		ContinuationURI:   to.Ptr("https://api.fabric.microsoft.com/v1/gateways/8e41c4dd-a382-4937-9bf3-695ab881f7c2/roleAssignments?continuationToken=LDEsMTAwMDAwLDA%3D"),
		Value: []core.GatewayRoleAssignment{
			{
				ID: to.Ptr("ef543eb8-969c-46b0-a5a1-3f93351b6b31"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("ef543eb8-969c-46b0-a5a1-3f93351b6b31"),
				},
				Role: to.Ptr(core.GatewayRoleAdmin),
			},
			{
				ID: to.Ptr("5cf7d203-9123-4dff-a87f-7097dc4b5d60"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("5cf7d203-9123-4dff-a87f-7097dc4b5d60"),
				},
				Role: to.Ptr(core.GatewayRoleConnectionCreatorWithResharing),
			},
			{
				ID: to.Ptr("5931cd21-857f-42a5-beaf-0120e8b36542"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("5931cd21-857f-42a5-beaf-0120e8b36542"),
				},
				Role: to.Ptr(core.GatewayRoleConnectionCreator),
			},
			{
				ID: to.Ptr("97614f04-507c-4f6c-8dbc-da1845f582ef"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeUser),
					ID:   to.Ptr("97614f04-507c-4f6c-8dbc-da1845f582ef"),
				},
				Role: to.Ptr(core.GatewayRoleConnectionCreator),
			},
			{
				ID: to.Ptr("a5d9f30d-a15c-4fb9-b8ff-e2a884c9fd82"),
				Principal: &core.Principal{
					Type: to.Ptr(core.PrincipalTypeGroup),
					ID:   to.Ptr("a5d9f30d-a15c-4fb9-b8ff-e2a884c9fd82"),
				},
				Role: to.Ptr(core.GatewayRoleConnectionCreator),
			}},
	}

	testsuite.serverFactory.GatewaysServer.NewListGatewayRoleAssignmentsPager = func(gatewayID string, options *core.GatewaysClientListGatewayRoleAssignmentsOptions) (resp azfake.PagerResponder[core.GatewaysClientListGatewayRoleAssignmentsResponse]) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		resp = azfake.PagerResponder[core.GatewaysClientListGatewayRoleAssignmentsResponse]{}
		resp.AddPage(http.StatusOK, core.GatewaysClientListGatewayRoleAssignmentsResponse{GatewayRoleAssignments: exampleRes}, nil)
		return
	}

	pager = client.NewListGatewayRoleAssignmentsPager(exampleGatewayID, &core.GatewaysClientListGatewayRoleAssignmentsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GatewayRoleAssignments))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestGateways_AddGatewayRoleAssignment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Add gateway role assignment example"},
	})
	var exampleGatewayID string
	var exampleAddGatewayRoleAssignmentRequest core.AddGatewayRoleAssignmentRequest
	exampleGatewayID = "d12d139f-4141-467c-9f53-80787b198843"
	exampleAddGatewayRoleAssignmentRequest = core.AddGatewayRoleAssignmentRequest{
		Principal: &core.Principal{
			Type: to.Ptr(core.PrincipalTypeUser),
			ID:   to.Ptr("6a002b3d-e4ec-43df-8c08-e8eb7547d9dd"),
		},
		Role: to.Ptr(core.GatewayRoleConnectionCreator),
	}

	testsuite.serverFactory.GatewaysServer.AddGatewayRoleAssignment = func(ctx context.Context, gatewayID string, addGatewayRoleAssignmentRequest core.AddGatewayRoleAssignmentRequest, options *core.GatewaysClientAddGatewayRoleAssignmentOptions) (resp azfake.Responder[core.GatewaysClientAddGatewayRoleAssignmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		testsuite.Require().True(reflect.DeepEqual(exampleAddGatewayRoleAssignmentRequest, addGatewayRoleAssignmentRequest))
		resp = azfake.Responder[core.GatewaysClientAddGatewayRoleAssignmentResponse]{}
		resp.SetResponse(http.StatusCreated, core.GatewaysClientAddGatewayRoleAssignmentResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	_, err = client.AddGatewayRoleAssignment(ctx, exampleGatewayID, exampleAddGatewayRoleAssignmentRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestGateways_GetGatewayRoleAssignment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Example"},
	})
	var exampleGatewayID string
	var exampleGatewayRoleAssignmentID string
	exampleGatewayID = "8e41c4dd-a382-4937-9bf3-695ab881f7c2"
	exampleGatewayRoleAssignmentID = "056afb37-8f6c-4fd8-9aa5-64ba7f1974e7"

	exampleRes := core.GatewayRoleAssignment{
		ID: to.Ptr("056afb37-8f6c-4fd8-9aa5-64ba7f1974e7"),
		Principal: &core.Principal{
			Type: to.Ptr(core.PrincipalTypeUser),
			ID:   to.Ptr("056afb37-8f6c-4fd8-9aa5-64ba7f1974e7"),
		},
		Role: to.Ptr(core.GatewayRoleAdmin),
	}

	testsuite.serverFactory.GatewaysServer.GetGatewayRoleAssignment = func(ctx context.Context, gatewayID string, gatewayRoleAssignmentID string, options *core.GatewaysClientGetGatewayRoleAssignmentOptions) (resp azfake.Responder[core.GatewaysClientGetGatewayRoleAssignmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		testsuite.Require().Equal(exampleGatewayRoleAssignmentID, gatewayRoleAssignmentID)
		resp = azfake.Responder[core.GatewaysClientGetGatewayRoleAssignmentResponse]{}
		resp.SetResponse(http.StatusOK, core.GatewaysClientGetGatewayRoleAssignmentResponse{GatewayRoleAssignment: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	res, err := client.GetGatewayRoleAssignment(ctx, exampleGatewayID, exampleGatewayRoleAssignmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GatewayRoleAssignment))
}

func (testsuite *FakeTestSuite) TestGateways_UpdateGatewayRoleAssignment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update gateway role assignment example"},
	})
	var exampleGatewayID string
	var exampleGatewayRoleAssignmentID string
	var exampleUpdateGatewayRoleAssignmentRequest core.UpdateGatewayRoleAssignmentRequest
	exampleGatewayID = "8e41c4dd-a382-4937-9bf3-695ab881f7c2"
	exampleGatewayRoleAssignmentID = "43970761-afc9-4428-ae6e-3b08bef098ff"
	exampleUpdateGatewayRoleAssignmentRequest = core.UpdateGatewayRoleAssignmentRequest{
		Role: to.Ptr(core.GatewayRoleConnectionCreator),
	}

	exampleRes := core.GatewayRoleAssignment{
		ID: to.Ptr("43970761-afc9-4428-ae6e-3b08bef098ff"),
		Principal: &core.Principal{
			Type: to.Ptr(core.PrincipalTypeUser),
			ID:   to.Ptr("43970761-afc9-4428-ae6e-3b08bef098ff"),
		},
		Role: to.Ptr(core.GatewayRoleConnectionCreator),
	}

	testsuite.serverFactory.GatewaysServer.UpdateGatewayRoleAssignment = func(ctx context.Context, gatewayID string, gatewayRoleAssignmentID string, updateGatewayRoleAssignmentRequest core.UpdateGatewayRoleAssignmentRequest, options *core.GatewaysClientUpdateGatewayRoleAssignmentOptions) (resp azfake.Responder[core.GatewaysClientUpdateGatewayRoleAssignmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		testsuite.Require().Equal(exampleGatewayRoleAssignmentID, gatewayRoleAssignmentID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateGatewayRoleAssignmentRequest, updateGatewayRoleAssignmentRequest))
		resp = azfake.Responder[core.GatewaysClientUpdateGatewayRoleAssignmentResponse]{}
		resp.SetResponse(http.StatusOK, core.GatewaysClientUpdateGatewayRoleAssignmentResponse{GatewayRoleAssignment: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	res, err := client.UpdateGatewayRoleAssignment(ctx, exampleGatewayID, exampleGatewayRoleAssignmentID, exampleUpdateGatewayRoleAssignmentRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GatewayRoleAssignment))
}

func (testsuite *FakeTestSuite) TestGateways_DeleteGatewayRoleAssignment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete gateway role assignment example"},
	})
	var exampleGatewayID string
	var exampleGatewayRoleAssignmentID string
	exampleGatewayID = "8e41c4dd-a382-4937-9bf3-695ab881f7c2"
	exampleGatewayRoleAssignmentID = "056afb37-8f6c-4fd8-9aa5-64ba7f1974e7"

	testsuite.serverFactory.GatewaysServer.DeleteGatewayRoleAssignment = func(ctx context.Context, gatewayID string, gatewayRoleAssignmentID string, options *core.GatewaysClientDeleteGatewayRoleAssignmentOptions) (resp azfake.Responder[core.GatewaysClientDeleteGatewayRoleAssignmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleGatewayID, gatewayID)
		testsuite.Require().Equal(exampleGatewayRoleAssignmentID, gatewayRoleAssignmentID)
		resp = azfake.Responder[core.GatewaysClientDeleteGatewayRoleAssignmentResponse]{}
		resp.SetResponse(http.StatusOK, core.GatewaysClientDeleteGatewayRoleAssignmentResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewGatewaysClient()
	_, err = client.DeleteGatewayRoleAssignment(ctx, exampleGatewayID, exampleGatewayRoleAssignmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}
