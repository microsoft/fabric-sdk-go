// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
)

// FoldersClient contains the methods for the Folders group.
// Don't use this type directly, use a constructor function instead.
type FoldersClient struct {
	internal *azcore.Client
	endpoint string
}

// CreateFolder - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes
// only. It may change based on feedback and is not recommended for production use.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createFolderRequest - Create folder request payload.
//   - options - FoldersClientCreateFolderOptions contains the optional parameters for the FoldersClient.CreateFolder method.
func (client *FoldersClient) CreateFolder(ctx context.Context, workspaceID string, createFolderRequest CreateFolderRequest, options *FoldersClientCreateFolderOptions) (FoldersClientCreateFolderResponse, error) {
	var err error
	const operationName = "core.FoldersClient.CreateFolder"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createFolderCreateRequest(ctx, workspaceID, createFolderRequest, options)
	if err != nil {
		return FoldersClientCreateFolderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FoldersClientCreateFolderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = NewResponseError(httpResp)
		return FoldersClientCreateFolderResponse{}, err
	}
	resp, err := client.createFolderHandleResponse(httpResp)
	return resp, err
}

// createFolderCreateRequest creates the CreateFolder request.
func (client *FoldersClient) createFolderCreateRequest(ctx context.Context, workspaceID string, createFolderRequest CreateFolderRequest, _ *FoldersClientCreateFolderOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/folders"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createFolderRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// createFolderHandleResponse handles the CreateFolder response.
func (client *FoldersClient) createFolderHandleResponse(resp *http.Response) (FoldersClientCreateFolderResponse, error) {
	result := FoldersClientCreateFolderResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Folder); err != nil {
		return FoldersClientCreateFolderResponse{}, err
	}
	return result, nil
}

// DeleteFolder - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes
// only. It may change based on feedback and is not recommended for production use.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// LIMITATIONS
// * This API is supported only for the empty folder. Deleting a folder with any items or nested folders inside is not allowed,
// and returns a FolderNotEmpty error response.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - folderID - The folder ID.
//   - options - FoldersClientDeleteFolderOptions contains the optional parameters for the FoldersClient.DeleteFolder method.
func (client *FoldersClient) DeleteFolder(ctx context.Context, workspaceID string, folderID string, options *FoldersClientDeleteFolderOptions) (FoldersClientDeleteFolderResponse, error) {
	var err error
	const operationName = "core.FoldersClient.DeleteFolder"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteFolderCreateRequest(ctx, workspaceID, folderID, options)
	if err != nil {
		return FoldersClientDeleteFolderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FoldersClientDeleteFolderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return FoldersClientDeleteFolderResponse{}, err
	}
	return FoldersClientDeleteFolderResponse{}, nil
}

// deleteFolderCreateRequest creates the DeleteFolder request.
func (client *FoldersClient) deleteFolderCreateRequest(ctx context.Context, workspaceID string, folderID string, _ *FoldersClientDeleteFolderOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/folders/{folderId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if folderID == "" {
		return nil, errors.New("parameter folderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{folderId}", url.PathEscape(folderID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetFolder - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes only.
// It may change based on feedback and is not recommended for production use.
// PERMISSIONS The caller must have viewer or higher role on the workspace.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - folderID - The folder ID.
//   - options - FoldersClientGetFolderOptions contains the optional parameters for the FoldersClient.GetFolder method.
func (client *FoldersClient) GetFolder(ctx context.Context, workspaceID string, folderID string, options *FoldersClientGetFolderOptions) (FoldersClientGetFolderResponse, error) {
	var err error
	const operationName = "core.FoldersClient.GetFolder"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getFolderCreateRequest(ctx, workspaceID, folderID, options)
	if err != nil {
		return FoldersClientGetFolderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FoldersClientGetFolderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return FoldersClientGetFolderResponse{}, err
	}
	resp, err := client.getFolderHandleResponse(httpResp)
	return resp, err
}

// getFolderCreateRequest creates the GetFolder request.
func (client *FoldersClient) getFolderCreateRequest(ctx context.Context, workspaceID string, folderID string, _ *FoldersClientGetFolderOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/folders/{folderId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if folderID == "" {
		return nil, errors.New("parameter folderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{folderId}", url.PathEscape(folderID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getFolderHandleResponse handles the GetFolder response.
func (client *FoldersClient) getFolderHandleResponse(resp *http.Response) (FoldersClientGetFolderResponse, error) {
	result := FoldersClientGetFolderResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Folder); err != nil {
		return FoldersClientGetFolderResponse{}, err
	}
	return result, nil
}

// NewListFoldersPager - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes
// only. It may change based on feedback and is not recommended for production use.
// This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - FoldersClientListFoldersOptions contains the optional parameters for the FoldersClient.NewListFoldersPager method.
func (client *FoldersClient) NewListFoldersPager(workspaceID string, options *FoldersClientListFoldersOptions) *runtime.Pager[FoldersClientListFoldersResponse] {
	return runtime.NewPager(runtime.PagingHandler[FoldersClientListFoldersResponse]{
		More: func(page FoldersClientListFoldersResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *FoldersClientListFoldersResponse) (FoldersClientListFoldersResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "core.FoldersClient.NewListFoldersPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listFoldersCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return FoldersClientListFoldersResponse{}, err
			}
			return client.listFoldersHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listFoldersCreateRequest creates the ListFolders request.
func (client *FoldersClient) listFoldersCreateRequest(ctx context.Context, workspaceID string, options *FoldersClientListFoldersOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/folders"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	if options != nil && options.Recursive != nil {
		reqQP.Set("recursive", strconv.FormatBool(*options.Recursive))
	}
	if options != nil && options.RootFolderID != nil {
		reqQP.Set("rootFolderId", *options.RootFolderID)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listFoldersHandleResponse handles the ListFolders response.
func (client *FoldersClient) listFoldersHandleResponse(resp *http.Response) (FoldersClientListFoldersResponse, error) {
	result := FoldersClientListFoldersResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Folders); err != nil {
		return FoldersClientListFoldersResponse{}, err
	}
	return result, nil
}

// MoveFolder - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes only.
// It may change based on feedback and is not recommended for production use.
// PERMISSIONS The caller must have contributor or higher role on the workspace.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - folderID - The folder ID.
//   - moveFolderRequest - Move folder request payload.
//   - options - FoldersClientMoveFolderOptions contains the optional parameters for the FoldersClient.MoveFolder method.
func (client *FoldersClient) MoveFolder(ctx context.Context, workspaceID string, folderID string, moveFolderRequest MoveFolderRequest, options *FoldersClientMoveFolderOptions) (FoldersClientMoveFolderResponse, error) {
	var err error
	const operationName = "core.FoldersClient.MoveFolder"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.moveFolderCreateRequest(ctx, workspaceID, folderID, moveFolderRequest, options)
	if err != nil {
		return FoldersClientMoveFolderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FoldersClientMoveFolderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return FoldersClientMoveFolderResponse{}, err
	}
	resp, err := client.moveFolderHandleResponse(httpResp)
	return resp, err
}

// moveFolderCreateRequest creates the MoveFolder request.
func (client *FoldersClient) moveFolderCreateRequest(ctx context.Context, workspaceID string, folderID string, moveFolderRequest MoveFolderRequest, _ *FoldersClientMoveFolderOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/folders/{folderId}/move"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if folderID == "" {
		return nil, errors.New("parameter folderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{folderId}", url.PathEscape(folderID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, moveFolderRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// moveFolderHandleResponse handles the MoveFolder response.
func (client *FoldersClient) moveFolderHandleResponse(resp *http.Response) (FoldersClientMoveFolderResponse, error) {
	result := FoldersClientMoveFolderResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Folder); err != nil {
		return FoldersClientMoveFolderResponse{}, err
	}
	return result, nil
}

// UpdateFolder - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes
// only. It may change based on feedback and is not recommended for production use.
// PERMISSIONS The caller must have contributor or higher role on the workspace.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - folderID - The folder ID.
//   - updateFolderRequest - Update folder request payload.
//   - options - FoldersClientUpdateFolderOptions contains the optional parameters for the FoldersClient.UpdateFolder method.
func (client *FoldersClient) UpdateFolder(ctx context.Context, workspaceID string, folderID string, updateFolderRequest UpdateFolderRequest, options *FoldersClientUpdateFolderOptions) (FoldersClientUpdateFolderResponse, error) {
	var err error
	const operationName = "core.FoldersClient.UpdateFolder"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateFolderCreateRequest(ctx, workspaceID, folderID, updateFolderRequest, options)
	if err != nil {
		return FoldersClientUpdateFolderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FoldersClientUpdateFolderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return FoldersClientUpdateFolderResponse{}, err
	}
	resp, err := client.updateFolderHandleResponse(httpResp)
	return resp, err
}

// updateFolderCreateRequest creates the UpdateFolder request.
func (client *FoldersClient) updateFolderCreateRequest(ctx context.Context, workspaceID string, folderID string, updateFolderRequest UpdateFolderRequest, _ *FoldersClientUpdateFolderOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/folders/{folderId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if folderID == "" {
		return nil, errors.New("parameter folderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{folderId}", url.PathEscape(folderID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateFolderRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateFolderHandleResponse handles the UpdateFolder response.
func (client *FoldersClient) updateFolderHandleResponse(resp *http.Response) (FoldersClientUpdateFolderResponse, error) {
	result := FoldersClientUpdateFolderResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Folder); err != nil {
		return FoldersClientUpdateFolderResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// ListFolders - returns array of Folder from all pages.
// >  [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes only. It may change based on feedback and is not recommended for production use.
//
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - FoldersClientListFoldersOptions contains the optional parameters for the FoldersClient.NewListFoldersPager method.
func (client *FoldersClient) ListFolders(ctx context.Context, workspaceID string, options *FoldersClientListFoldersOptions) ([]Folder, error) {
	pager := client.NewListFoldersPager(workspaceID, options)
	mapper := func(resp FoldersClientListFoldersResponse) []Folder {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Folder{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return []Folder{}, err
	}
	return list, nil
}
