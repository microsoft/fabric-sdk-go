// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// ExternalDataSharesRecipientClient contains the methods for the ExternalDataSharesRecipient group.
// Don't use this type directly, use a constructor function instead.
type ExternalDataSharesRecipientClient struct {
	internal *azcore.Client
	endpoint string
}

// AcceptExternalDataShareInvitation - PERMISSIONS The caller must have write permissions on the item.
// REQUIRED DELEGATED SCOPES ExternalDataShare.Accept.All and for the specified item, one of the 2 types of scopes:
// * Generic scope: Item.ReadWrite.All
//
// * Specific scope: itemType.ReadWrite.All (for example: Lakehouse.ReadWrite.All)
//
// For more information about scopes, see scopes article [/rest/api/fabric/articles/scopes].
//
// REQUIRED TENANT SETTINGS To use this API, enable the Users can accept external data shares admin switch for the calling
// principal.
// LIMITATIONS Maximum 10 requests per minute.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - invitationID - The external data share invitation ID.
//   - acceptExternalDataShareRequest - The request payload for accepting an external data share invitation.
//   - options - ExternalDataSharesRecipientClientAcceptExternalDataShareInvitationOptions contains the optional parameters for
//     the ExternalDataSharesRecipientClient.AcceptExternalDataShareInvitation method.
func (client *ExternalDataSharesRecipientClient) AcceptExternalDataShareInvitation(ctx context.Context, invitationID string, acceptExternalDataShareRequest AcceptExternalDataShareInvitationRequest, options *ExternalDataSharesRecipientClientAcceptExternalDataShareInvitationOptions) (ExternalDataSharesRecipientClientAcceptExternalDataShareInvitationResponse, error) {
	var err error
	const operationName = "core.ExternalDataSharesRecipientClient.AcceptExternalDataShareInvitation"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.acceptExternalDataShareInvitationCreateRequest(ctx, invitationID, acceptExternalDataShareRequest, options)
	if err != nil {
		return ExternalDataSharesRecipientClientAcceptExternalDataShareInvitationResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExternalDataSharesRecipientClientAcceptExternalDataShareInvitationResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return ExternalDataSharesRecipientClientAcceptExternalDataShareInvitationResponse{}, err
	}
	resp, err := client.acceptExternalDataShareInvitationHandleResponse(httpResp)
	return resp, err
}

// acceptExternalDataShareInvitationCreateRequest creates the AcceptExternalDataShareInvitation request.
func (client *ExternalDataSharesRecipientClient) acceptExternalDataShareInvitationCreateRequest(ctx context.Context, invitationID string, acceptExternalDataShareRequest AcceptExternalDataShareInvitationRequest, _ *ExternalDataSharesRecipientClientAcceptExternalDataShareInvitationOptions) (*policy.Request, error) {
	urlPath := "/v1/externalDataShares/invitations/{invitationId}/accept"
	if invitationID == "" {
		return nil, errors.New("parameter invitationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invitationId}", url.PathEscape(invitationID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, acceptExternalDataShareRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// acceptExternalDataShareInvitationHandleResponse handles the AcceptExternalDataShareInvitation response.
func (client *ExternalDataSharesRecipientClient) acceptExternalDataShareInvitationHandleResponse(resp *http.Response) (ExternalDataSharesRecipientClientAcceptExternalDataShareInvitationResponse, error) {
	result := ExternalDataSharesRecipientClientAcceptExternalDataShareInvitationResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AcceptExternalDataShareInvitationResponse); err != nil {
		return ExternalDataSharesRecipientClientAcceptExternalDataShareInvitationResponse{}, err
	}
	return result, nil
}

// GetExternalDataShareInvitationDetails - REQUIRED DELEGATED SCOPES ExternalDataShare.Accept.All
// REQUIRED TENANT SETTINGS To use this API, enable the Users can accept external data shares admin switch for the calling
// principal.
// LIMITATIONS Maximum 10 requests per minute.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - invitationID - The external data share invitation ID.
//   - providerTenantID - The external data share provider tenant ID.
//   - options - ExternalDataSharesRecipientClientGetExternalDataShareInvitationDetailsOptions contains the optional parameters
//     for the ExternalDataSharesRecipientClient.GetExternalDataShareInvitationDetails method.
func (client *ExternalDataSharesRecipientClient) GetExternalDataShareInvitationDetails(ctx context.Context, invitationID string, providerTenantID string, options *ExternalDataSharesRecipientClientGetExternalDataShareInvitationDetailsOptions) (ExternalDataSharesRecipientClientGetExternalDataShareInvitationDetailsResponse, error) {
	var err error
	const operationName = "core.ExternalDataSharesRecipientClient.GetExternalDataShareInvitationDetails"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getExternalDataShareInvitationDetailsCreateRequest(ctx, invitationID, providerTenantID, options)
	if err != nil {
		return ExternalDataSharesRecipientClientGetExternalDataShareInvitationDetailsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExternalDataSharesRecipientClientGetExternalDataShareInvitationDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return ExternalDataSharesRecipientClientGetExternalDataShareInvitationDetailsResponse{}, err
	}
	resp, err := client.getExternalDataShareInvitationDetailsHandleResponse(httpResp)
	return resp, err
}

// getExternalDataShareInvitationDetailsCreateRequest creates the GetExternalDataShareInvitationDetails request.
func (client *ExternalDataSharesRecipientClient) getExternalDataShareInvitationDetailsCreateRequest(ctx context.Context, invitationID string, providerTenantID string, _ *ExternalDataSharesRecipientClientGetExternalDataShareInvitationDetailsOptions) (*policy.Request, error) {
	urlPath := "/v1/externalDataShares/invitations/{invitationId}"
	if invitationID == "" {
		return nil, errors.New("parameter invitationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invitationId}", url.PathEscape(invitationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("providerTenantId", providerTenantID)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getExternalDataShareInvitationDetailsHandleResponse handles the GetExternalDataShareInvitationDetails response.
func (client *ExternalDataSharesRecipientClient) getExternalDataShareInvitationDetailsHandleResponse(resp *http.Response) (ExternalDataSharesRecipientClientGetExternalDataShareInvitationDetailsResponse, error) {
	result := ExternalDataSharesRecipientClientGetExternalDataShareInvitationDetailsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExternalDataShareInvitationDetails); err != nil {
		return ExternalDataSharesRecipientClientGetExternalDataShareInvitationDetailsResponse{}, err
	}
	return result, nil
}

// Custom code starts below
