// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import "errors"

type errCommon struct {
	UnknownError              error
	UnknownUserError          error
	BadRequest                error
	InvalidInput              error
	InvalidParameter          error
	InvalidArgument           error
	InvalidItemType           error
	UnsupportedItemType       error
	InvalidRequestUri         error
	CorruptedPayload          error
	InvalidContinuationToken  error
	Unauthorized              error
	InvalidToken              error
	TokenIsMissing            error
	TokenExpired              error
	TenantNotAllowed          error
	UserNotLicensed           error
	Forbidden                 error
	InsufficientPrivileges    error
	InsufficientScopes        error
	FeatureNotAvailable       error
	TenantSwitchDisabled      error
	NotFound                  error
	EntityNotFound            error
	MissingMinimalPermissions error
	EndpointNotFound          error
	Conflict                  error
	EntityConflict            error
	PreconditionFailed        error
	UnsupportedMediaType      error
	TooManyRequests           error
	RequestBlocked            error
	InternalServerError       error
}

var ErrCommon = errCommon{
	UnknownError:              errors.New("UnknownError"),
	UnknownUserError:          errors.New("UnknownUserError"),
	BadRequest:                errors.New("BadRequest"),
	InvalidInput:              errors.New("InvalidInput"),
	InvalidParameter:          errors.New("InvalidParameter"),
	InvalidArgument:           errors.New("InvalidArgument"),
	InvalidItemType:           errors.New("InvalidItemType"),
	UnsupportedItemType:       errors.New("UnsupportedItemType"),
	InvalidRequestUri:         errors.New("InvalidRequestUri"),
	CorruptedPayload:          errors.New("CorruptedPayload"),
	InvalidContinuationToken:  errors.New("InvalidContinuationToken"),
	Unauthorized:              errors.New("Unauthorized"),
	InvalidToken:              errors.New("InvalidToken"),
	TokenIsMissing:            errors.New("TokenIsMissing"),
	TokenExpired:              errors.New("TokenExpired"),
	TenantNotAllowed:          errors.New("TenantNotAllowed"),
	UserNotLicensed:           errors.New("UserNotLicensed"),
	Forbidden:                 errors.New("Forbidden"),
	InsufficientPrivileges:    errors.New("InsufficientPrivileges"),
	InsufficientScopes:        errors.New("InsufficientScopes"),
	FeatureNotAvailable:       errors.New("FeatureNotAvailable"),
	TenantSwitchDisabled:      errors.New("TenantSwitchDisabled"),
	NotFound:                  errors.New("NotFound"),
	EntityNotFound:            errors.New("EntityNotFound"),
	MissingMinimalPermissions: errors.New("MissingMinimalPermissions"),
	EndpointNotFound:          errors.New("EndpointNotFound"),
	Conflict:                  errors.New("Conflict"),
	EntityConflict:            errors.New("EntityConflict"),
	PreconditionFailed:        errors.New("PreconditionFailed"),
	UnsupportedMediaType:      errors.New("UnsupportedMediaType"),
	TooManyRequests:           errors.New("TooManyRequests"),
	RequestBlocked:            errors.New("RequestBlocked"),
	InternalServerError:       errors.New("InternalServerError"),
}

func PossibleErrCommonValues() []string {
	return []string{
		ErrCommon.UnknownError.Error(),
		ErrCommon.UnknownUserError.Error(),
		ErrCommon.BadRequest.Error(),
		ErrCommon.InvalidInput.Error(),
		ErrCommon.InvalidParameter.Error(),
		ErrCommon.InvalidArgument.Error(),
		ErrCommon.InvalidItemType.Error(),
		ErrCommon.UnsupportedItemType.Error(),
		ErrCommon.InvalidRequestUri.Error(),
		ErrCommon.CorruptedPayload.Error(),
		ErrCommon.InvalidContinuationToken.Error(),
		ErrCommon.Unauthorized.Error(),
		ErrCommon.InvalidToken.Error(),
		ErrCommon.TokenIsMissing.Error(),
		ErrCommon.TokenExpired.Error(),
		ErrCommon.TenantNotAllowed.Error(),
		ErrCommon.UserNotLicensed.Error(),
		ErrCommon.Forbidden.Error(),
		ErrCommon.InsufficientPrivileges.Error(),
		ErrCommon.InsufficientScopes.Error(),
		ErrCommon.FeatureNotAvailable.Error(),
		ErrCommon.TenantSwitchDisabled.Error(),
		ErrCommon.NotFound.Error(),
		ErrCommon.EntityNotFound.Error(),
		ErrCommon.MissingMinimalPermissions.Error(),
		ErrCommon.EndpointNotFound.Error(),
		ErrCommon.Conflict.Error(),
		ErrCommon.EntityConflict.Error(),
		ErrCommon.PreconditionFailed.Error(),
		ErrCommon.UnsupportedMediaType.Error(),
		ErrCommon.TooManyRequests.Error(),
		ErrCommon.RequestBlocked.Error(),
		ErrCommon.InternalServerError.Error(),
	}
}

type errCapacity struct {
	CapacityNotFound                    error
	CapacityNotInActiveState            error
	InsufficientPermissionsOverCapacity error
	UnsupportedCapacitySKU              error
}

var ErrCapacity = errCapacity{
	CapacityNotFound:                    errors.New("CapacityNotFound"),
	CapacityNotInActiveState:            errors.New("CapacityNotInActiveState"),
	InsufficientPermissionsOverCapacity: errors.New("InsufficientPermissionsOverCapacity"),
	UnsupportedCapacitySKU:              errors.New("UnsupportedCapacitySKU"),
}

func PossibleErrCapacityValues() []string {
	return []string{
		ErrCapacity.CapacityNotFound.Error(),
		ErrCapacity.CapacityNotInActiveState.Error(),
		ErrCapacity.InsufficientPermissionsOverCapacity.Error(),
		ErrCapacity.UnsupportedCapacitySKU.Error(),
	}
}

type errConnection struct {
	UnsupportedConnectivityTypeInput          error
	UnsupportedPrivacyLevelInput              error
	UnsupportedConnectionEncryptionInput      error
	UnsupportedCredentialTypeInput            error
	UnsupportedSingleSignOnTypeInput          error
	SkipTestConnectionNotSupported            error
	DuplicateConnectionNameInput              error
	InvalidConnectionDetailsInput             error
	InvalidCredentialDetailsInput             error
	IncorrectCredentialsInput                 error
	OAuthTokenLoginFailed                     error
	CannotUpdateKerberosSingleSignOn          error
	OperationNotSupportedForConnectionType    error
	CannotUpdateCredentialType                error
	InsufficientPermissionsToManageConnection error
	CreateGatewayConnectionFailed             error
	UpdateGatewayConnectionFailed             error
}

var ErrConnection = errConnection{
	UnsupportedConnectivityTypeInput:          errors.New("UnsupportedConnectivityTypeInput"),
	UnsupportedPrivacyLevelInput:              errors.New("UnsupportedPrivacyLevelInput"),
	UnsupportedConnectionEncryptionInput:      errors.New("UnsupportedConnectionEncryptionInput"),
	UnsupportedCredentialTypeInput:            errors.New("UnsupportedCredentialTypeInput"),
	UnsupportedSingleSignOnTypeInput:          errors.New("UnsupportedSingleSignOnTypeInput"),
	SkipTestConnectionNotSupported:            errors.New("SkipTestConnectionNotSupported"),
	DuplicateConnectionNameInput:              errors.New("DuplicateConnectionNameInput"),
	InvalidConnectionDetailsInput:             errors.New("InvalidConnectionDetailsInput"),
	InvalidCredentialDetailsInput:             errors.New("InvalidCredentialDetailsInput"),
	IncorrectCredentialsInput:                 errors.New("IncorrectCredentialsInput"),
	OAuthTokenLoginFailed:                     errors.New("OAuthTokenLoginFailed"),
	CannotUpdateKerberosSingleSignOn:          errors.New("CannotUpdateKerberosSingleSignOn"),
	OperationNotSupportedForConnectionType:    errors.New("OperationNotSupportedForConnectionType"),
	CannotUpdateCredentialType:                errors.New("CannotUpdateCredentialType"),
	InsufficientPermissionsToManageConnection: errors.New("InsufficientPermissionsToManageConnection"),
	CreateGatewayConnectionFailed:             errors.New("CreateGatewayConnectionFailed"),
	UpdateGatewayConnectionFailed:             errors.New("UpdateGatewayConnectionFailed"),
}

func PossibleErrConnectionValues() []string {
	return []string{
		ErrConnection.UnsupportedConnectivityTypeInput.Error(),
		ErrConnection.UnsupportedPrivacyLevelInput.Error(),
		ErrConnection.UnsupportedConnectionEncryptionInput.Error(),
		ErrConnection.UnsupportedCredentialTypeInput.Error(),
		ErrConnection.UnsupportedSingleSignOnTypeInput.Error(),
		ErrConnection.SkipTestConnectionNotSupported.Error(),
		ErrConnection.DuplicateConnectionNameInput.Error(),
		ErrConnection.InvalidConnectionDetailsInput.Error(),
		ErrConnection.InvalidCredentialDetailsInput.Error(),
		ErrConnection.IncorrectCredentialsInput.Error(),
		ErrConnection.OAuthTokenLoginFailed.Error(),
		ErrConnection.CannotUpdateKerberosSingleSignOn.Error(),
		ErrConnection.OperationNotSupportedForConnectionType.Error(),
		ErrConnection.CannotUpdateCredentialType.Error(),
		ErrConnection.InsufficientPermissionsToManageConnection.Error(),
		ErrConnection.CreateGatewayConnectionFailed.Error(),
		ErrConnection.UpdateGatewayConnectionFailed.Error(),
	}
}

type errDeploymentPipeline struct {
	DeploymentPipelineStageHasNoAssignedWorkspace   error
	DeploymentOperationFailed                       error
	InvalidDeploymentOperationRequest               error
	NumberOfItemsInDeployRequestExceededLimit       error
	NoItemsToDeploy                                 error
	NoTargetFolderName                              error
	UnsupportedItemType                             error
	DuplicateSourceObjectIds                        error
	TargetWorkspaceCreationBlockedByTenantSetting   error
	CannotCreateFolderWithDuplicateNameDuringDeploy error
}

var ErrDeploymentPipeline = errDeploymentPipeline{
	DeploymentPipelineStageHasNoAssignedWorkspace:   errors.New("DeploymentPipelineStageHasNoAssignedWorkspace"),
	DeploymentOperationFailed:                       errors.New("DeploymentOperationFailed"),
	InvalidDeploymentOperationRequest:               errors.New("InvalidDeploymentOperationRequest"),
	NumberOfItemsInDeployRequestExceededLimit:       errors.New("NumberOfItemsInDeployRequestExceededLimit"),
	NoItemsToDeploy:                                 errors.New("NoItemsToDeploy"),
	NoTargetFolderName:                              errors.New("NoTargetFolderName"),
	UnsupportedItemType:                             errors.New("UnsupportedItemType"),
	DuplicateSourceObjectIds:                        errors.New("DuplicateSourceObjectIds"),
	TargetWorkspaceCreationBlockedByTenantSetting:   errors.New("TargetWorkspaceCreationBlockedByTenantSetting"),
	CannotCreateFolderWithDuplicateNameDuringDeploy: errors.New("CannotCreateFolderWithDuplicateNameDuringDeploy"),
}

func PossibleErrDeploymentPipelineValues() []string {
	return []string{
		ErrDeploymentPipeline.DeploymentPipelineStageHasNoAssignedWorkspace.Error(),
		ErrDeploymentPipeline.DeploymentOperationFailed.Error(),
		ErrDeploymentPipeline.InvalidDeploymentOperationRequest.Error(),
		ErrDeploymentPipeline.NumberOfItemsInDeployRequestExceededLimit.Error(),
		ErrDeploymentPipeline.NoItemsToDeploy.Error(),
		ErrDeploymentPipeline.NoTargetFolderName.Error(),
		ErrDeploymentPipeline.UnsupportedItemType.Error(),
		ErrDeploymentPipeline.DuplicateSourceObjectIds.Error(),
		ErrDeploymentPipeline.TargetWorkspaceCreationBlockedByTenantSetting.Error(),
		ErrDeploymentPipeline.CannotCreateFolderWithDuplicateNameDuringDeploy.Error(),
	}
}

type errDomain struct {
	DomainSpecificUsersScopeCannotBeEmptyError error
}

var ErrDomain = errDomain{
	DomainSpecificUsersScopeCannotBeEmptyError: errors.New("DomainSpecificUsersScopeCannotBeEmptyError"),
}

func PossibleErrDomainValues() []string {
	return []string{
		ErrDomain.DomainSpecificUsersScopeCannotBeEmptyError.Error(),
	}
}

type errExternalDataShare struct {
	ExternalDataShareOperationNotSupportedForItemType error
	ExternalDataShareNotFound                         error
	ExternalDataShareCannotBeAcceptedInTheSameTenant  error
}

var ErrExternalDataShare = errExternalDataShare{
	ExternalDataShareOperationNotSupportedForItemType: errors.New("ExternalDataShareOperationNotSupportedForItemType"),
	ExternalDataShareNotFound:                         errors.New("ExternalDataShareNotFound"),
	ExternalDataShareCannotBeAcceptedInTheSameTenant:  errors.New("ExternalDataShareCannotBeAcceptedInTheSameTenant"),
}

func PossibleErrExternalDataShareValues() []string {
	return []string{
		ErrExternalDataShare.ExternalDataShareOperationNotSupportedForItemType.Error(),
		ErrExternalDataShare.ExternalDataShareNotFound.Error(),
		ErrExternalDataShare.ExternalDataShareCannotBeAcceptedInTheSameTenant.Error(),
	}
}

type errGateway struct {
	PowerPlatformVirtualNetworkNotEnabled error
	DuplicateGatewayName                  error
}

var ErrGateway = errGateway{
	PowerPlatformVirtualNetworkNotEnabled: errors.New("PowerPlatformVirtualNetworkNotEnabled"),
	DuplicateGatewayName:                  errors.New("DuplicateGatewayName"),
}

func PossibleErrGatewayValues() []string {
	return []string{
		ErrGateway.PowerPlatformVirtualNetworkNotEnabled.Error(),
		ErrGateway.DuplicateGatewayName.Error(),
	}
}

type errManagedPrivateEndpoint struct {
	UnsupportedSku                       error
	UnsupportedRegion                    error
	InvalidPrivateEndpointName           error
	InvalidTargetSubResourceType         error
	InvalidRequestMessage                error
	InvalidTargetPrivateLinkResourceId   error
	DuplicatePrivateEndpointName         error
	DuplicateTargetPrivateLinkResourceId error
	NonCompliant                         error
	PrivateEndpointNotFound              error
	IncorrectVNetType                    error
}

var ErrManagedPrivateEndpoint = errManagedPrivateEndpoint{
	UnsupportedSku:                       errors.New("UnsupportedSku"),
	UnsupportedRegion:                    errors.New("UnsupportedRegion"),
	InvalidPrivateEndpointName:           errors.New("InvalidPrivateEndpointName"),
	InvalidTargetSubResourceType:         errors.New("InvalidTargetSubResourceType"),
	InvalidRequestMessage:                errors.New("InvalidRequestMessage"),
	InvalidTargetPrivateLinkResourceId:   errors.New("InvalidTargetPrivateLinkResourceId"),
	DuplicatePrivateEndpointName:         errors.New("DuplicatePrivateEndpointName"),
	DuplicateTargetPrivateLinkResourceId: errors.New("DuplicateTargetPrivateLinkResourceId"),
	NonCompliant:                         errors.New("NonCompliant"),
	PrivateEndpointNotFound:              errors.New("PrivateEndpointNotFound"),
	IncorrectVNetType:                    errors.New("IncorrectVNetType"),
}

func PossibleErrManagedPrivateEndpointValues() []string {
	return []string{
		ErrManagedPrivateEndpoint.UnsupportedSku.Error(),
		ErrManagedPrivateEndpoint.UnsupportedRegion.Error(),
		ErrManagedPrivateEndpoint.InvalidPrivateEndpointName.Error(),
		ErrManagedPrivateEndpoint.InvalidTargetSubResourceType.Error(),
		ErrManagedPrivateEndpoint.InvalidRequestMessage.Error(),
		ErrManagedPrivateEndpoint.InvalidTargetPrivateLinkResourceId.Error(),
		ErrManagedPrivateEndpoint.DuplicatePrivateEndpointName.Error(),
		ErrManagedPrivateEndpoint.DuplicateTargetPrivateLinkResourceId.Error(),
		ErrManagedPrivateEndpoint.NonCompliant.Error(),
		ErrManagedPrivateEndpoint.PrivateEndpointNotFound.Error(),
		ErrManagedPrivateEndpoint.IncorrectVNetType.Error(),
	}
}

type errGit struct {
	TemplateAppsWorkspacesNotSupported       error
	WorkspaceNotConnectedToGit               error
	WorkspaceAlreadyConnectedToGit           error
	WorkspaceGitConnectionAlreadyInitialized error
	WorkspaceGitConnectionNotInitialized     error
	WorkspaceMigrationOperationInProgress    error
	CrossGeographyOperationIsNotAllowed      error
	GitProviderResourceNotFound              error
	MissingInitializationStrategy            error
	WorkspaceHeadMismatch                    error
	NoItemsSelected                          error
	NoChangesToCommit                        error
	OverrideItemsNotAllowed                  error
	ItemNotFound                             error
	DuplicateDisplayNameAndType              error
	PotentialDuplicateDisplayNameAndType     error
	DuplicateLogicalId                       error
	DependencyDeletionFailed                 error
	MissingDependency                        error
	DiscoverDependenciesFailed               error
	CyclicDependencyDetected                 error
	GitSyncFailed                            error
	GitFilePathTooLong                       error
	MissingWorkspaceConflictResolution       error
	InvalidSystemFiles                       error
	GitProviderGuestAccessDenied             error
	GitProviderOperationFailed               error
}

var ErrGit = errGit{
	TemplateAppsWorkspacesNotSupported:       errors.New("TemplateAppsWorkspacesNotSupported"),
	WorkspaceNotConnectedToGit:               errors.New("WorkspaceNotConnectedToGit"),
	WorkspaceAlreadyConnectedToGit:           errors.New("WorkspaceAlreadyConnectedToGit"),
	WorkspaceGitConnectionAlreadyInitialized: errors.New("WorkspaceGitConnectionAlreadyInitialized"),
	WorkspaceGitConnectionNotInitialized:     errors.New("WorkspaceGitConnectionNotInitialized"),
	WorkspaceMigrationOperationInProgress:    errors.New("WorkspaceMigrationOperationInProgress"),
	CrossGeographyOperationIsNotAllowed:      errors.New("CrossGeographyOperationIsNotAllowed"),
	GitProviderResourceNotFound:              errors.New("GitProviderResourceNotFound"),
	MissingInitializationStrategy:            errors.New("MissingInitializationStrategy"),
	WorkspaceHeadMismatch:                    errors.New("WorkspaceHeadMismatch"),
	NoItemsSelected:                          errors.New("NoItemsSelected"),
	NoChangesToCommit:                        errors.New("NoChangesToCommit"),
	OverrideItemsNotAllowed:                  errors.New("OverrideItemsNotAllowed"),
	ItemNotFound:                             errors.New("ItemNotFound"),
	DuplicateDisplayNameAndType:              errors.New("DuplicateDisplayNameAndType"),
	PotentialDuplicateDisplayNameAndType:     errors.New("PotentialDuplicateDisplayNameAndType"),
	DuplicateLogicalId:                       errors.New("DuplicateLogicalId"),
	DependencyDeletionFailed:                 errors.New("DependencyDeletionFailed"),
	MissingDependency:                        errors.New("MissingDependency"),
	DiscoverDependenciesFailed:               errors.New("DiscoverDependenciesFailed"),
	CyclicDependencyDetected:                 errors.New("CyclicDependencyDetected"),
	GitSyncFailed:                            errors.New("GitSyncFailed"),
	GitFilePathTooLong:                       errors.New("GitFilePathTooLong"),
	MissingWorkspaceConflictResolution:       errors.New("MissingWorkspaceConflictResolution"),
	InvalidSystemFiles:                       errors.New("InvalidSystemFiles"),
	GitProviderGuestAccessDenied:             errors.New("GitProviderGuestAccessDenied"),
	GitProviderOperationFailed:               errors.New("GitProviderOperationFailed"),
}

func PossibleErrGitValues() []string {
	return []string{
		ErrGit.TemplateAppsWorkspacesNotSupported.Error(),
		ErrGit.WorkspaceNotConnectedToGit.Error(),
		ErrGit.WorkspaceAlreadyConnectedToGit.Error(),
		ErrGit.WorkspaceGitConnectionAlreadyInitialized.Error(),
		ErrGit.WorkspaceGitConnectionNotInitialized.Error(),
		ErrGit.WorkspaceMigrationOperationInProgress.Error(),
		ErrGit.CrossGeographyOperationIsNotAllowed.Error(),
		ErrGit.GitProviderResourceNotFound.Error(),
		ErrGit.MissingInitializationStrategy.Error(),
		ErrGit.WorkspaceHeadMismatch.Error(),
		ErrGit.NoItemsSelected.Error(),
		ErrGit.NoChangesToCommit.Error(),
		ErrGit.OverrideItemsNotAllowed.Error(),
		ErrGit.ItemNotFound.Error(),
		ErrGit.DuplicateDisplayNameAndType.Error(),
		ErrGit.PotentialDuplicateDisplayNameAndType.Error(),
		ErrGit.DuplicateLogicalId.Error(),
		ErrGit.DependencyDeletionFailed.Error(),
		ErrGit.MissingDependency.Error(),
		ErrGit.DiscoverDependenciesFailed.Error(),
		ErrGit.CyclicDependencyDetected.Error(),
		ErrGit.GitSyncFailed.Error(),
		ErrGit.GitFilePathTooLong.Error(),
		ErrGit.MissingWorkspaceConflictResolution.Error(),
		ErrGit.InvalidSystemFiles.Error(),
		ErrGit.GitProviderGuestAccessDenied.Error(),
		ErrGit.GitProviderOperationFailed.Error(),
	}
}

type errJobScheduler struct {
	InvalidJobType                       error
	JobInstanceNotFound                  error
	JobAlreadyCompleted                  error
	JobInstanceStatusDeduped             error
	JobInstanceStatusOwnerUserMissing    error
	JobInstanceStatusUnknownErrorOccured error
	JobInstanceStatusDeadLettered        error
	JobInstanceStatusNotFound            error
	JobInstanceStatusFailed              error
}

var ErrJobScheduler = errJobScheduler{
	InvalidJobType:                       errors.New("InvalidJobType"),
	JobInstanceNotFound:                  errors.New("JobInstanceNotFound"),
	JobAlreadyCompleted:                  errors.New("JobAlreadyCompleted"),
	JobInstanceStatusDeduped:             errors.New("JobInstanceStatusDeduped"),
	JobInstanceStatusOwnerUserMissing:    errors.New("JobInstanceStatusOwnerUserMissing"),
	JobInstanceStatusUnknownErrorOccured: errors.New("JobInstanceStatusUnknownErrorOccured"),
	JobInstanceStatusDeadLettered:        errors.New("JobInstanceStatusDeadLettered"),
	JobInstanceStatusNotFound:            errors.New("JobInstanceStatusNotFound"),
	JobInstanceStatusFailed:              errors.New("JobInstanceStatusFailed"),
}

func PossibleErrJobSchedulerValues() []string {
	return []string{
		ErrJobScheduler.InvalidJobType.Error(),
		ErrJobScheduler.JobInstanceNotFound.Error(),
		ErrJobScheduler.JobAlreadyCompleted.Error(),
		ErrJobScheduler.JobInstanceStatusDeduped.Error(),
		ErrJobScheduler.JobInstanceStatusOwnerUserMissing.Error(),
		ErrJobScheduler.JobInstanceStatusUnknownErrorOccured.Error(),
		ErrJobScheduler.JobInstanceStatusDeadLettered.Error(),
		ErrJobScheduler.JobInstanceStatusNotFound.Error(),
		ErrJobScheduler.JobInstanceStatusFailed.Error(),
	}
}

type errItem struct {
	ItemNotFound                                        error
	ItemNotActive                                       error
	ItemDisplayNameAlreadyInUse                         error
	ItemDisplayNameNotAvailableYet                      error
	InvalidItemType                                     error
	InvalidItemState                                    error
	ItemTypeNotEnabled                                  error
	OperationNotSupportedForItem                        error
	UnsupportedPayloadType                              error
	InvalidPayloadSize                                  error
	MissingDefinition                                   error
	MissingDefinitionParts                              error
	InvalidDefinitionFormat                             error
	InvalidDefinitionParts                              error
	ItemHasProtectedLabel                               error
	InvalidConnectionInformation                        error
	RequestWithDefinitionAndCreationPayloadNotSupported error
	ItemTypeDoesNotSupportCreationPayload               error
	InvalidPlatformFile                                 error
	MLModelDisplayNameCannotBeChanged                   error
	WorkspaceItemsLimitExceeded                         error
}

var ErrItem = errItem{
	ItemNotFound:                   errors.New("ItemNotFound"),
	ItemNotActive:                  errors.New("ItemNotActive"),
	ItemDisplayNameAlreadyInUse:    errors.New("ItemDisplayNameAlreadyInUse"),
	ItemDisplayNameNotAvailableYet: errors.New("ItemDisplayNameNotAvailableYet"),
	InvalidItemType:                errors.New("InvalidItemType"),
	InvalidItemState:               errors.New("InvalidItemState"),
	ItemTypeNotEnabled:             errors.New("ItemTypeNotEnabled"),
	OperationNotSupportedForItem:   errors.New("OperationNotSupportedForItem"),
	UnsupportedPayloadType:         errors.New("UnsupportedPayloadType"),
	InvalidPayloadSize:             errors.New("InvalidPayloadSize"),
	MissingDefinition:              errors.New("MissingDefinition"),
	MissingDefinitionParts:         errors.New("MissingDefinitionParts"),
	InvalidDefinitionFormat:        errors.New("InvalidDefinitionFormat"),
	InvalidDefinitionParts:         errors.New("InvalidDefinitionParts"),
	ItemHasProtectedLabel:          errors.New("ItemHasProtectedLabel"),
	InvalidConnectionInformation:   errors.New("InvalidConnectionInformation"),
	RequestWithDefinitionAndCreationPayloadNotSupported: errors.New("RequestWithDefinitionAndCreationPayloadNotSupported"),
	ItemTypeDoesNotSupportCreationPayload:               errors.New("ItemTypeDoesNotSupportCreationPayload"),
	InvalidPlatformFile:                                 errors.New("InvalidPlatformFile"),
	MLModelDisplayNameCannotBeChanged:                   errors.New("MLModelDisplayNameCannotBeChanged"),
	WorkspaceItemsLimitExceeded:                         errors.New("WorkspaceItemsLimitExceeded"),
}

func PossibleErrItemValues() []string {
	return []string{
		ErrItem.ItemNotFound.Error(),
		ErrItem.ItemNotActive.Error(),
		ErrItem.ItemDisplayNameAlreadyInUse.Error(),
		ErrItem.ItemDisplayNameNotAvailableYet.Error(),
		ErrItem.InvalidItemType.Error(),
		ErrItem.InvalidItemState.Error(),
		ErrItem.ItemTypeNotEnabled.Error(),
		ErrItem.OperationNotSupportedForItem.Error(),
		ErrItem.UnsupportedPayloadType.Error(),
		ErrItem.InvalidPayloadSize.Error(),
		ErrItem.MissingDefinition.Error(),
		ErrItem.MissingDefinitionParts.Error(),
		ErrItem.InvalidDefinitionFormat.Error(),
		ErrItem.InvalidDefinitionParts.Error(),
		ErrItem.ItemHasProtectedLabel.Error(),
		ErrItem.InvalidConnectionInformation.Error(),
		ErrItem.RequestWithDefinitionAndCreationPayloadNotSupported.Error(),
		ErrItem.ItemTypeDoesNotSupportCreationPayload.Error(),
		ErrItem.InvalidPlatformFile.Error(),
		ErrItem.MLModelDisplayNameCannotBeChanged.Error(),
		ErrItem.WorkspaceItemsLimitExceeded.Error(),
	}
}

type errLongRunningOperation struct {
	OperationFailedOnTimeout error
	OperationNotSucceeded    error
	OperationHasNoResult     error
	OperationNotFound        error
	InvalidWorkloadId        error
}

var ErrLongRunningOperation = errLongRunningOperation{
	OperationFailedOnTimeout: errors.New("OperationFailedOnTimeout"),
	OperationNotSucceeded:    errors.New("OperationNotSucceeded"),
	OperationHasNoResult:     errors.New("OperationHasNoResult"),
	OperationNotFound:        errors.New("OperationNotFound"),
	InvalidWorkloadId:        errors.New("InvalidWorkloadId"),
}

func PossibleErrLongRunningOperationValues() []string {
	return []string{
		ErrLongRunningOperation.OperationFailedOnTimeout.Error(),
		ErrLongRunningOperation.OperationNotSucceeded.Error(),
		ErrLongRunningOperation.OperationHasNoResult.Error(),
		ErrLongRunningOperation.OperationNotFound.Error(),
		ErrLongRunningOperation.InvalidWorkloadId.Error(),
	}
}

type errPrincipal struct {
	PrincipalTypeNotSupported                                error
	InvalidPrincipalType                                     error
	InvalidParentPrincipalType                               error
	PrincipalNotFound                                        error
	ServicePrincipalProfileMissingParentPrincipalInformation error
	DisabledUser                                             error
	MissingPrincipal                                         error
	MissingPrincipalType                                     error
	InvalidPrincipal                                         error
}

var ErrPrincipal = errPrincipal{
	PrincipalTypeNotSupported:  errors.New("PrincipalTypeNotSupported"),
	InvalidPrincipalType:       errors.New("InvalidPrincipalType"),
	InvalidParentPrincipalType: errors.New("InvalidParentPrincipalType"),
	PrincipalNotFound:          errors.New("PrincipalNotFound"),
	ServicePrincipalProfileMissingParentPrincipalInformation: errors.New("ServicePrincipalProfileMissingParentPrincipalInformation"),
	DisabledUser:         errors.New("DisabledUser"),
	MissingPrincipal:     errors.New("MissingPrincipal"),
	MissingPrincipalType: errors.New("MissingPrincipalType"),
	InvalidPrincipal:     errors.New("InvalidPrincipal"),
}

func PossibleErrPrincipalValues() []string {
	return []string{
		ErrPrincipal.PrincipalTypeNotSupported.Error(),
		ErrPrincipal.InvalidPrincipalType.Error(),
		ErrPrincipal.InvalidParentPrincipalType.Error(),
		ErrPrincipal.PrincipalNotFound.Error(),
		ErrPrincipal.ServicePrincipalProfileMissingParentPrincipalInformation.Error(),
		ErrPrincipal.DisabledUser.Error(),
		ErrPrincipal.MissingPrincipal.Error(),
		ErrPrincipal.MissingPrincipalType.Error(),
		ErrPrincipal.InvalidPrincipal.Error(),
	}
}

type errTenantSetting struct {
	UnappliedChangesExistInTenantSettings error
}

var ErrTenantSetting = errTenantSetting{
	UnappliedChangesExistInTenantSettings: errors.New("UnappliedChangesExistInTenantSettings"),
}

func PossibleErrTenantSettingValues() []string {
	return []string{
		ErrTenantSetting.UnappliedChangesExistInTenantSettings.Error(),
	}
}

type errWorkload struct {
	UnknownWorkloadError error
}

var ErrWorkload = errWorkload{
	UnknownWorkloadError: errors.New("UnknownWorkloadError"),
}

func PossibleErrWorkloadValues() []string {
	return []string{
		ErrWorkload.UnknownWorkloadError.Error(),
	}
}

type errWorkspace struct {
	WorkspaceNotFound                                 error
	WorkspaceNameAlreadyExists                        error
	WorkspaceNameIsReserved                           error
	WorkspaceNameTooLong                              error
	MyWorkspaceCantBeChanged                          error
	SystemWorkspaceCantBeChanged                      error
	WorkspaceTypeNotSupported                         error
	PrincipalWithoutWorkspaceRolePermissions          error
	PrincipalAlreadyHasWorkspaceRolePermissions       error
	PrincipalNotWorkspaceAdmin                        error
	InsufficientWorkspaceRole                         error
	WorkspaceHasNoCapacityAssigned                    error
	PrivilegedAppCantBeAddedToWorkspace               error
	GroupHasTooManyMembers                            error
	WorkspaceRoleNotAllowedForServicePrincipalProfile error
	InvalidWorkspacePrincipalRole                     error
	MissingWorkspaceRole                              error
	DeleteWorkspaceNotAllowed                         error
	UnsupportedItemForTargetCapacity                  error
	UnsupportedItemForTargetCapacityRegion            error
	UnsupportedItemForTargetCapacitySku               error
	TargetCapacityIncompatibleRegion                  error
	AssignWorkspaceToCapacityFailed                   error
	WorkspaceItemsCanNotBeUnassignedFromCapacity      error
	UnassignMyWorkspaceFromCapacityIsRestricted       error
	InvalidRestoreWorkspaceRequest                    error
	InternalError                                     error
	WorkspaceIdentityAlreadyExists                    error
	WorkspaceIdentityLimitExceeded                    error
	ProvisionInProgress                               error
	DeprovisionInProgress                             error
	WorkspaceIdentityNotSupportedCapacitySku          error
}

var ErrWorkspace = errWorkspace{
	WorkspaceNotFound:                                 errors.New("WorkspaceNotFound"),
	WorkspaceNameAlreadyExists:                        errors.New("WorkspaceNameAlreadyExists"),
	WorkspaceNameIsReserved:                           errors.New("WorkspaceNameIsReserved"),
	WorkspaceNameTooLong:                              errors.New("WorkspaceNameTooLong"),
	MyWorkspaceCantBeChanged:                          errors.New("MyWorkspaceCantBeChanged"),
	SystemWorkspaceCantBeChanged:                      errors.New("SystemWorkspaceCantBeChanged"),
	WorkspaceTypeNotSupported:                         errors.New("WorkspaceTypeNotSupported"),
	PrincipalWithoutWorkspaceRolePermissions:          errors.New("PrincipalWithoutWorkspaceRolePermissions"),
	PrincipalAlreadyHasWorkspaceRolePermissions:       errors.New("PrincipalAlreadyHasWorkspaceRolePermissions"),
	PrincipalNotWorkspaceAdmin:                        errors.New("PrincipalNotWorkspaceAdmin"),
	InsufficientWorkspaceRole:                         errors.New("InsufficientWorkspaceRole"),
	WorkspaceHasNoCapacityAssigned:                    errors.New("WorkspaceHasNoCapacityAssigned"),
	PrivilegedAppCantBeAddedToWorkspace:               errors.New("PrivilegedAppCantBeAddedToWorkspace"),
	GroupHasTooManyMembers:                            errors.New("GroupHasTooManyMembers"),
	WorkspaceRoleNotAllowedForServicePrincipalProfile: errors.New("WorkspaceRoleNotAllowedForServicePrincipalProfile"),
	InvalidWorkspacePrincipalRole:                     errors.New("InvalidWorkspacePrincipalRole"),
	MissingWorkspaceRole:                              errors.New("MissingWorkspaceRole"),
	DeleteWorkspaceNotAllowed:                         errors.New("DeleteWorkspaceNotAllowed"),
	UnsupportedItemForTargetCapacity:                  errors.New("UnsupportedItemForTargetCapacity"),
	UnsupportedItemForTargetCapacityRegion:            errors.New("UnsupportedItemForTargetCapacityRegion"),
	UnsupportedItemForTargetCapacitySku:               errors.New("UnsupportedItemForTargetCapacitySku"),
	TargetCapacityIncompatibleRegion:                  errors.New("TargetCapacityIncompatibleRegion"),
	AssignWorkspaceToCapacityFailed:                   errors.New("AssignWorkspaceToCapacityFailed"),
	WorkspaceItemsCanNotBeUnassignedFromCapacity:      errors.New("WorkspaceItemsCanNotBeUnassignedFromCapacity"),
	UnassignMyWorkspaceFromCapacityIsRestricted:       errors.New("UnassignMyWorkspaceFromCapacityIsRestricted"),
	InvalidRestoreWorkspaceRequest:                    errors.New("InvalidRestoreWorkspaceRequest"),
	InternalError:                                     errors.New("InternalError"),
	WorkspaceIdentityAlreadyExists:                    errors.New("WorkspaceIdentityAlreadyExists"),
	WorkspaceIdentityLimitExceeded:                    errors.New("WorkspaceIdentityLimitExceeded"),
	ProvisionInProgress:                               errors.New("ProvisionInProgress"),
	DeprovisionInProgress:                             errors.New("DeprovisionInProgress"),
	WorkspaceIdentityNotSupportedCapacitySku:          errors.New("WorkspaceIdentityNotSupportedCapacitySku"),
}

func PossibleErrWorkspaceValues() []string {
	return []string{
		ErrWorkspace.WorkspaceNotFound.Error(),
		ErrWorkspace.WorkspaceNameAlreadyExists.Error(),
		ErrWorkspace.WorkspaceNameIsReserved.Error(),
		ErrWorkspace.WorkspaceNameTooLong.Error(),
		ErrWorkspace.MyWorkspaceCantBeChanged.Error(),
		ErrWorkspace.SystemWorkspaceCantBeChanged.Error(),
		ErrWorkspace.WorkspaceTypeNotSupported.Error(),
		ErrWorkspace.PrincipalWithoutWorkspaceRolePermissions.Error(),
		ErrWorkspace.PrincipalAlreadyHasWorkspaceRolePermissions.Error(),
		ErrWorkspace.PrincipalNotWorkspaceAdmin.Error(),
		ErrWorkspace.InsufficientWorkspaceRole.Error(),
		ErrWorkspace.WorkspaceHasNoCapacityAssigned.Error(),
		ErrWorkspace.PrivilegedAppCantBeAddedToWorkspace.Error(),
		ErrWorkspace.GroupHasTooManyMembers.Error(),
		ErrWorkspace.WorkspaceRoleNotAllowedForServicePrincipalProfile.Error(),
		ErrWorkspace.InvalidWorkspacePrincipalRole.Error(),
		ErrWorkspace.MissingWorkspaceRole.Error(),
		ErrWorkspace.DeleteWorkspaceNotAllowed.Error(),
		ErrWorkspace.UnsupportedItemForTargetCapacity.Error(),
		ErrWorkspace.UnsupportedItemForTargetCapacityRegion.Error(),
		ErrWorkspace.UnsupportedItemForTargetCapacitySku.Error(),
		ErrWorkspace.TargetCapacityIncompatibleRegion.Error(),
		ErrWorkspace.AssignWorkspaceToCapacityFailed.Error(),
		ErrWorkspace.WorkspaceItemsCanNotBeUnassignedFromCapacity.Error(),
		ErrWorkspace.UnassignMyWorkspaceFromCapacityIsRestricted.Error(),
		ErrWorkspace.InvalidRestoreWorkspaceRequest.Error(),
		ErrWorkspace.InternalError.Error(),
		ErrWorkspace.WorkspaceIdentityAlreadyExists.Error(),
		ErrWorkspace.WorkspaceIdentityLimitExceeded.Error(),
		ErrWorkspace.ProvisionInProgress.Error(),
		ErrWorkspace.DeprovisionInProgress.Error(),
		ErrWorkspace.WorkspaceIdentityNotSupportedCapacitySku.Error(),
	}
}

type errSpark struct {
	SparkSettingsManagementUserError error
	SparkSettingsNotFound            error
}

var ErrSpark = errSpark{
	SparkSettingsManagementUserError: errors.New("SparkSettingsManagementUserError"),
	SparkSettingsNotFound:            errors.New("SparkSettingsNotFound"),
}

func PossibleErrSparkValues() []string {
	return []string{
		ErrSpark.SparkSettingsManagementUserError.Error(),
		ErrSpark.SparkSettingsNotFound.Error(),
	}
}
