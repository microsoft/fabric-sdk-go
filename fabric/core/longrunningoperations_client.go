// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// LongRunningOperationsClient contains the methods for the LongRunningOperations group.
// Don't use this type directly, use a constructor function instead.
type LongRunningOperationsClient struct {
	internal *azcore.Client
	endpoint string
}

// GetOperationResult - You get the operationId from x-ms-operation-id header return by the API that initiated the operation.
// PERMISSIONS Same as the permissions required for the API that initiated the operation.
// REQUIRED DELEGATED SCOPE Same as the scopes required for the API that initiated the operation.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - operationID - The operation ID
//   - options - LongRunningOperationsClientGetOperationResultOptions contains the optional parameters for the LongRunningOperationsClient.GetOperationResult
//     method.
func (client *LongRunningOperationsClient) GetOperationResult(ctx context.Context, operationID string, options *LongRunningOperationsClientGetOperationResultOptions) (LongRunningOperationsClientGetOperationResultResponse, error) {
	var err error
	const operationName = "core.LongRunningOperationsClient.GetOperationResult"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getOperationResultCreateRequest(ctx, operationID, options)
	if err != nil {
		return LongRunningOperationsClientGetOperationResultResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LongRunningOperationsClientGetOperationResultResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return LongRunningOperationsClientGetOperationResultResponse{}, err
	}
	return LongRunningOperationsClientGetOperationResultResponse{Body: httpResp.Body}, nil
}

// getOperationResultCreateRequest creates the GetOperationResult request.
func (client *LongRunningOperationsClient) getOperationResultCreateRequest(ctx context.Context, operationID string, _ *LongRunningOperationsClientGetOperationResultOptions) (*policy.Request, error) {
	urlPath := "/v1/operations/{operationId}/result"
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	runtime.SkipBodyDownload(req)
	req.Raw().Header["Accept"] = []string{"application/json, application/octet-stream"}
	return req, nil
}

// GetOperationState - You get the operationId from x-ms-operation-id header return by the API that initiated the operation.
// Once the operation status is 'Succeeded' use the Get Operation Result API
// [/rest/api/fabric/core/long-running-operations/get-operation-result] to retrieve the result.
// PERMISSIONS Same as the permissions required for the API that initiated the operation.
// REQUIRED DELEGATED SCOPE Same as the scopes required for the API that initiated the operation.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - operationID - The operation ID
//   - options - LongRunningOperationsClientGetOperationStateOptions contains the optional parameters for the LongRunningOperationsClient.GetOperationState
//     method.
func (client *LongRunningOperationsClient) GetOperationState(ctx context.Context, operationID string, options *LongRunningOperationsClientGetOperationStateOptions) (LongRunningOperationsClientGetOperationStateResponse, error) {
	var err error
	const operationName = "core.LongRunningOperationsClient.GetOperationState"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getOperationStateCreateRequest(ctx, operationID, options)
	if err != nil {
		return LongRunningOperationsClientGetOperationStateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LongRunningOperationsClientGetOperationStateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return LongRunningOperationsClientGetOperationStateResponse{}, err
	}
	resp, err := client.getOperationStateHandleResponse(httpResp)
	return resp, err
}

// getOperationStateCreateRequest creates the GetOperationState request.
func (client *LongRunningOperationsClient) getOperationStateCreateRequest(ctx context.Context, operationID string, _ *LongRunningOperationsClientGetOperationStateOptions) (*policy.Request, error) {
	urlPath := "/v1/operations/{operationId}"
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getOperationStateHandleResponse handles the GetOperationState response.
func (client *LongRunningOperationsClient) getOperationStateHandleResponse(resp *http.Response) (LongRunningOperationsClientGetOperationStateResponse, error) {
	result := LongRunningOperationsClientGetOperationStateResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return LongRunningOperationsClientGetOperationStateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if val := resp.Header.Get("x-ms-operation-id"); val != "" {
		result.XMSOperationID = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.OperationState); err != nil {
		return LongRunningOperationsClientGetOperationStateResponse{}, err
	}
	return result, nil
}

// Custom code starts below
