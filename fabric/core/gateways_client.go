// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
)

// GatewaysClient contains the methods for the Gateways group.
// Don't use this type directly, use a constructor function instead.
type GatewaysClient struct {
	internal *azcore.Client
	endpoint string
}

// AddGatewayRoleAssignment - To get the principal user ID required for request body, see Find the user ID [/partner-center/find-ids-and-domain-names#find-the-user-object-id].
// SERVICE PRINCIPAL PROFILES ARE NOT SUPPORTED FOR GATEWAY ROLE ASSIGNMENTS. PERMISSIONS
// * The caller must have ConnectionCreatorWithResharing or higher role on the gateway.
// REQUIRED DELEGATED SCOPES Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - gatewayID - The ID of the gateway.
//   - addGatewayRoleAssignmentRequest - The request payload for adding a gateway role assignment
//   - options - GatewaysClientAddGatewayRoleAssignmentOptions contains the optional parameters for the GatewaysClient.AddGatewayRoleAssignment
//     method.
func (client *GatewaysClient) AddGatewayRoleAssignment(ctx context.Context, gatewayID string, addGatewayRoleAssignmentRequest AddGatewayRoleAssignmentRequest, options *GatewaysClientAddGatewayRoleAssignmentOptions) (GatewaysClientAddGatewayRoleAssignmentResponse, error) {
	var err error
	const operationName = "core.GatewaysClient.AddGatewayRoleAssignment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.addGatewayRoleAssignmentCreateRequest(ctx, gatewayID, addGatewayRoleAssignmentRequest, options)
	if err != nil {
		return GatewaysClientAddGatewayRoleAssignmentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GatewaysClientAddGatewayRoleAssignmentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = NewResponseError(httpResp)
		return GatewaysClientAddGatewayRoleAssignmentResponse{}, err
	}
	resp, err := client.addGatewayRoleAssignmentHandleResponse(httpResp)
	return resp, err
}

// addGatewayRoleAssignmentCreateRequest creates the AddGatewayRoleAssignment request.
func (client *GatewaysClient) addGatewayRoleAssignmentCreateRequest(ctx context.Context, gatewayID string, addGatewayRoleAssignmentRequest AddGatewayRoleAssignmentRequest, _ *GatewaysClientAddGatewayRoleAssignmentOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways/{gatewayId}/roleAssignments"
	if gatewayID == "" {
		return nil, errors.New("parameter gatewayID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayId}", url.PathEscape(gatewayID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, addGatewayRoleAssignmentRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// addGatewayRoleAssignmentHandleResponse handles the AddGatewayRoleAssignment response.
func (client *GatewaysClient) addGatewayRoleAssignmentHandleResponse(resp *http.Response) (GatewaysClientAddGatewayRoleAssignmentResponse, error) {
	result := GatewaysClientAddGatewayRoleAssignmentResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.GatewayRoleAssignment); err != nil {
		return GatewaysClientAddGatewayRoleAssignmentResponse{}, err
	}
	return result, nil
}

// CreateGateway - REQUIRED DELEGATED SCOPES Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - createGatewayRequest - The request payload for creating the gateway
//   - options - GatewaysClientCreateGatewayOptions contains the optional parameters for the GatewaysClient.CreateGateway method.
func (client *GatewaysClient) CreateGateway(ctx context.Context, createGatewayRequest CreateGatewayRequestClassification, options *GatewaysClientCreateGatewayOptions) (GatewaysClientCreateGatewayResponse, error) {
	var err error
	const operationName = "core.GatewaysClient.CreateGateway"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createGatewayCreateRequest(ctx, createGatewayRequest, options)
	if err != nil {
		return GatewaysClientCreateGatewayResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GatewaysClientCreateGatewayResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = NewResponseError(httpResp)
		return GatewaysClientCreateGatewayResponse{}, err
	}
	resp, err := client.createGatewayHandleResponse(httpResp)
	return resp, err
}

// createGatewayCreateRequest creates the CreateGateway request.
func (client *GatewaysClient) createGatewayCreateRequest(ctx context.Context, createGatewayRequest CreateGatewayRequestClassification, _ *GatewaysClientCreateGatewayOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createGatewayRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// createGatewayHandleResponse handles the CreateGateway response.
func (client *GatewaysClient) createGatewayHandleResponse(resp *http.Response) (GatewaysClientCreateGatewayResponse, error) {
	result := GatewaysClientCreateGatewayResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return GatewaysClientCreateGatewayResponse{}, err
	}
	return result, nil
}

// DeleteGateway - PERMISSIONS The caller must have admin permission for the gateway.
// REQUIRED DELEGATED SCOPES Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - gatewayID - The ID of the gateway.
//   - options - GatewaysClientDeleteGatewayOptions contains the optional parameters for the GatewaysClient.DeleteGateway method.
func (client *GatewaysClient) DeleteGateway(ctx context.Context, gatewayID string, options *GatewaysClientDeleteGatewayOptions) (GatewaysClientDeleteGatewayResponse, error) {
	var err error
	const operationName = "core.GatewaysClient.DeleteGateway"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteGatewayCreateRequest(ctx, gatewayID, options)
	if err != nil {
		return GatewaysClientDeleteGatewayResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GatewaysClientDeleteGatewayResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return GatewaysClientDeleteGatewayResponse{}, err
	}
	return GatewaysClientDeleteGatewayResponse{}, nil
}

// deleteGatewayCreateRequest creates the DeleteGateway request.
func (client *GatewaysClient) deleteGatewayCreateRequest(ctx context.Context, gatewayID string, _ *GatewaysClientDeleteGatewayOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways/{gatewayId}"
	if gatewayID == "" {
		return nil, errors.New("parameter gatewayID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayId}", url.PathEscape(gatewayID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteGatewayMember - PERMISSIONS The caller must have admin permission for the gateway.
// REQUIRED DELEGATED SCOPES Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - gatewayID - The ID of the gateway.
//   - gatewayMemberID - The ID of the gateway member.
//   - options - GatewaysClientDeleteGatewayMemberOptions contains the optional parameters for the GatewaysClient.DeleteGatewayMember
//     method.
func (client *GatewaysClient) DeleteGatewayMember(ctx context.Context, gatewayID string, gatewayMemberID string, options *GatewaysClientDeleteGatewayMemberOptions) (GatewaysClientDeleteGatewayMemberResponse, error) {
	var err error
	const operationName = "core.GatewaysClient.DeleteGatewayMember"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteGatewayMemberCreateRequest(ctx, gatewayID, gatewayMemberID, options)
	if err != nil {
		return GatewaysClientDeleteGatewayMemberResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GatewaysClientDeleteGatewayMemberResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return GatewaysClientDeleteGatewayMemberResponse{}, err
	}
	return GatewaysClientDeleteGatewayMemberResponse{}, nil
}

// deleteGatewayMemberCreateRequest creates the DeleteGatewayMember request.
func (client *GatewaysClient) deleteGatewayMemberCreateRequest(ctx context.Context, gatewayID string, gatewayMemberID string, _ *GatewaysClientDeleteGatewayMemberOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways/{gatewayId}/members/{gatewayMemberId}"
	if gatewayID == "" {
		return nil, errors.New("parameter gatewayID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayId}", url.PathEscape(gatewayID))
	if gatewayMemberID == "" {
		return nil, errors.New("parameter gatewayMemberID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayMemberId}", url.PathEscape(gatewayMemberID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteGatewayRoleAssignment - To get the principal user ID required for request body, see Find the user ID [/partner-center/find-ids-and-domain-names#find-the-user-object-id].
// PERMISSIONS
// * The caller must have Admin role on the gateway.
// REQUIRED DELEGATED SCOPES Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - gatewayID - The ID of the gateway
//   - gatewayRoleAssignmentID - The ID of the role assignment
//   - options - GatewaysClientDeleteGatewayRoleAssignmentOptions contains the optional parameters for the GatewaysClient.DeleteGatewayRoleAssignment
//     method.
func (client *GatewaysClient) DeleteGatewayRoleAssignment(ctx context.Context, gatewayID string, gatewayRoleAssignmentID string, options *GatewaysClientDeleteGatewayRoleAssignmentOptions) (GatewaysClientDeleteGatewayRoleAssignmentResponse, error) {
	var err error
	const operationName = "core.GatewaysClient.DeleteGatewayRoleAssignment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteGatewayRoleAssignmentCreateRequest(ctx, gatewayID, gatewayRoleAssignmentID, options)
	if err != nil {
		return GatewaysClientDeleteGatewayRoleAssignmentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GatewaysClientDeleteGatewayRoleAssignmentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return GatewaysClientDeleteGatewayRoleAssignmentResponse{}, err
	}
	return GatewaysClientDeleteGatewayRoleAssignmentResponse{}, nil
}

// deleteGatewayRoleAssignmentCreateRequest creates the DeleteGatewayRoleAssignment request.
func (client *GatewaysClient) deleteGatewayRoleAssignmentCreateRequest(ctx context.Context, gatewayID string, gatewayRoleAssignmentID string, _ *GatewaysClientDeleteGatewayRoleAssignmentOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways/{gatewayId}/roleAssignments/{gatewayRoleAssignmentId}"
	if gatewayID == "" {
		return nil, errors.New("parameter gatewayID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayId}", url.PathEscape(gatewayID))
	if gatewayRoleAssignmentID == "" {
		return nil, errors.New("parameter gatewayRoleAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayRoleAssignmentId}", url.PathEscape(gatewayRoleAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetGateway - PERMISSIONS The caller must have permissions for the gateway.
// REQUIRED DELEGATED SCOPES Gateway.Read.All or Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - gatewayID - The ID of the gateway.
//   - options - GatewaysClientGetGatewayOptions contains the optional parameters for the GatewaysClient.GetGateway method.
func (client *GatewaysClient) GetGateway(ctx context.Context, gatewayID string, options *GatewaysClientGetGatewayOptions) (GatewaysClientGetGatewayResponse, error) {
	var err error
	const operationName = "core.GatewaysClient.GetGateway"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getGatewayCreateRequest(ctx, gatewayID, options)
	if err != nil {
		return GatewaysClientGetGatewayResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GatewaysClientGetGatewayResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return GatewaysClientGetGatewayResponse{}, err
	}
	resp, err := client.getGatewayHandleResponse(httpResp)
	return resp, err
}

// getGatewayCreateRequest creates the GetGateway request.
func (client *GatewaysClient) getGatewayCreateRequest(ctx context.Context, gatewayID string, _ *GatewaysClientGetGatewayOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways/{gatewayId}"
	if gatewayID == "" {
		return nil, errors.New("parameter gatewayID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayId}", url.PathEscape(gatewayID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getGatewayHandleResponse handles the GetGateway response.
func (client *GatewaysClient) getGatewayHandleResponse(resp *http.Response) (GatewaysClientGetGatewayResponse, error) {
	result := GatewaysClientGetGatewayResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return GatewaysClientGetGatewayResponse{}, err
	}
	return result, nil
}

// GetGatewayRoleAssignment - To get the principal user ID required for request body, see Find the user ID [/partner-center/find-ids-and-domain-names#find-the-user-object-id].
// PERMISSIONS
// * The caller must have ConnectionCreator or higher role on the gateway.
// REQUIRED DELEGATED SCOPES Gateway.Read.All or Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - gatewayID - The ID of the gateway
//   - gatewayRoleAssignmentID - The ID of the gateway role assignment.
//   - options - GatewaysClientGetGatewayRoleAssignmentOptions contains the optional parameters for the GatewaysClient.GetGatewayRoleAssignment
//     method.
func (client *GatewaysClient) GetGatewayRoleAssignment(ctx context.Context, gatewayID string, gatewayRoleAssignmentID string, options *GatewaysClientGetGatewayRoleAssignmentOptions) (GatewaysClientGetGatewayRoleAssignmentResponse, error) {
	var err error
	const operationName = "core.GatewaysClient.GetGatewayRoleAssignment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getGatewayRoleAssignmentCreateRequest(ctx, gatewayID, gatewayRoleAssignmentID, options)
	if err != nil {
		return GatewaysClientGetGatewayRoleAssignmentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GatewaysClientGetGatewayRoleAssignmentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return GatewaysClientGetGatewayRoleAssignmentResponse{}, err
	}
	resp, err := client.getGatewayRoleAssignmentHandleResponse(httpResp)
	return resp, err
}

// getGatewayRoleAssignmentCreateRequest creates the GetGatewayRoleAssignment request.
func (client *GatewaysClient) getGatewayRoleAssignmentCreateRequest(ctx context.Context, gatewayID string, gatewayRoleAssignmentID string, _ *GatewaysClientGetGatewayRoleAssignmentOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways/{gatewayId}/roleAssignments/{gatewayRoleAssignmentId}"
	if gatewayID == "" {
		return nil, errors.New("parameter gatewayID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayId}", url.PathEscape(gatewayID))
	if gatewayRoleAssignmentID == "" {
		return nil, errors.New("parameter gatewayRoleAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayRoleAssignmentId}", url.PathEscape(gatewayRoleAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getGatewayRoleAssignmentHandleResponse handles the GetGatewayRoleAssignment response.
func (client *GatewaysClient) getGatewayRoleAssignmentHandleResponse(resp *http.Response) (GatewaysClientGetGatewayRoleAssignmentResponse, error) {
	result := GatewaysClientGetGatewayRoleAssignmentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GatewayRoleAssignment); err != nil {
		return GatewaysClientGetGatewayRoleAssignmentResponse{}, err
	}
	return result, nil
}

// ListGatewayMembers - PERMISSIONS
// * The caller must have permission for the gateway.
// REQUIRED DELEGATED SCOPES Gateway.Read.All or Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - gatewayID - The ID of the gateway.
//   - options - GatewaysClientListGatewayMembersOptions contains the optional parameters for the GatewaysClient.ListGatewayMembers
//     method.
func (client *GatewaysClient) ListGatewayMembers(ctx context.Context, gatewayID string, options *GatewaysClientListGatewayMembersOptions) (GatewaysClientListGatewayMembersResponse, error) {
	var err error
	const operationName = "core.GatewaysClient.ListGatewayMembers"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listGatewayMembersCreateRequest(ctx, gatewayID, options)
	if err != nil {
		return GatewaysClientListGatewayMembersResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GatewaysClientListGatewayMembersResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return GatewaysClientListGatewayMembersResponse{}, err
	}
	resp, err := client.listGatewayMembersHandleResponse(httpResp)
	return resp, err
}

// listGatewayMembersCreateRequest creates the ListGatewayMembers request.
func (client *GatewaysClient) listGatewayMembersCreateRequest(ctx context.Context, gatewayID string, _ *GatewaysClientListGatewayMembersOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways/{gatewayId}/members"
	if gatewayID == "" {
		return nil, errors.New("parameter gatewayID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayId}", url.PathEscape(gatewayID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listGatewayMembersHandleResponse handles the ListGatewayMembers response.
func (client *GatewaysClient) listGatewayMembersHandleResponse(resp *http.Response) (GatewaysClientListGatewayMembersResponse, error) {
	result := GatewaysClientListGatewayMembersResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListGatewayMembersResponse); err != nil {
		return GatewaysClientListGatewayMembersResponse{}, err
	}
	return result, nil
}

// NewListGatewayRoleAssignmentsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS
// * The caller must have ConnectionCreator or higher role on the gateway.
// REQUIRED DELEGATED SCOPES Gateway.Read.All or Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - gatewayID - The ID of the gateway.
//   - options - GatewaysClientListGatewayRoleAssignmentsOptions contains the optional parameters for the GatewaysClient.NewListGatewayRoleAssignmentsPager
//     method.
func (client *GatewaysClient) NewListGatewayRoleAssignmentsPager(gatewayID string, options *GatewaysClientListGatewayRoleAssignmentsOptions) *runtime.Pager[GatewaysClientListGatewayRoleAssignmentsResponse] {
	return runtime.NewPager(runtime.PagingHandler[GatewaysClientListGatewayRoleAssignmentsResponse]{
		More: func(page GatewaysClientListGatewayRoleAssignmentsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *GatewaysClientListGatewayRoleAssignmentsResponse) (GatewaysClientListGatewayRoleAssignmentsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "core.GatewaysClient.NewListGatewayRoleAssignmentsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listGatewayRoleAssignmentsCreateRequest(ctx, gatewayID, options)
			}, nil)
			if err != nil {
				return GatewaysClientListGatewayRoleAssignmentsResponse{}, err
			}
			return client.listGatewayRoleAssignmentsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listGatewayRoleAssignmentsCreateRequest creates the ListGatewayRoleAssignments request.
func (client *GatewaysClient) listGatewayRoleAssignmentsCreateRequest(ctx context.Context, gatewayID string, options *GatewaysClientListGatewayRoleAssignmentsOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways/{gatewayId}/roleAssignments"
	if gatewayID == "" {
		return nil, errors.New("parameter gatewayID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayId}", url.PathEscape(gatewayID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listGatewayRoleAssignmentsHandleResponse handles the ListGatewayRoleAssignments response.
func (client *GatewaysClient) listGatewayRoleAssignmentsHandleResponse(resp *http.Response) (GatewaysClientListGatewayRoleAssignmentsResponse, error) {
	result := GatewaysClientListGatewayRoleAssignmentsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GatewayRoleAssignments); err != nil {
		return GatewaysClientListGatewayRoleAssignmentsResponse{}, err
	}
	return result, nil
}

// NewListGatewaysPager - PERMISSIONS The caller must have permissions for the gateway.
// REQUIRED DELEGATED SCOPES Gateway.Read.All or Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - options - GatewaysClientListGatewaysOptions contains the optional parameters for the GatewaysClient.NewListGatewaysPager
//     method.
func (client *GatewaysClient) NewListGatewaysPager(options *GatewaysClientListGatewaysOptions) *runtime.Pager[GatewaysClientListGatewaysResponse] {
	return runtime.NewPager(runtime.PagingHandler[GatewaysClientListGatewaysResponse]{
		More: func(page GatewaysClientListGatewaysResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *GatewaysClientListGatewaysResponse) (GatewaysClientListGatewaysResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "core.GatewaysClient.NewListGatewaysPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listGatewaysCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return GatewaysClientListGatewaysResponse{}, err
			}
			return client.listGatewaysHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listGatewaysCreateRequest creates the ListGateways request.
func (client *GatewaysClient) listGatewaysCreateRequest(ctx context.Context, options *GatewaysClientListGatewaysOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listGatewaysHandleResponse handles the ListGateways response.
func (client *GatewaysClient) listGatewaysHandleResponse(resp *http.Response) (GatewaysClientListGatewaysResponse, error) {
	result := GatewaysClientListGatewaysResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListGatewaysResponse); err != nil {
		return GatewaysClientListGatewaysResponse{}, err
	}
	return result, nil
}

// UpdateGateway - PERMISSIONS The caller must have admin permission for the gateway.
// REQUIRED DELEGATED SCOPES Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - gatewayID - The ID of the gateway.
//   - updateGatewayRequest - The request payload for updating the gateway
//   - options - GatewaysClientUpdateGatewayOptions contains the optional parameters for the GatewaysClient.UpdateGateway method.
func (client *GatewaysClient) UpdateGateway(ctx context.Context, gatewayID string, updateGatewayRequest UpdateGatewayRequestClassification, options *GatewaysClientUpdateGatewayOptions) (GatewaysClientUpdateGatewayResponse, error) {
	var err error
	const operationName = "core.GatewaysClient.UpdateGateway"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateGatewayCreateRequest(ctx, gatewayID, updateGatewayRequest, options)
	if err != nil {
		return GatewaysClientUpdateGatewayResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GatewaysClientUpdateGatewayResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return GatewaysClientUpdateGatewayResponse{}, err
	}
	resp, err := client.updateGatewayHandleResponse(httpResp)
	return resp, err
}

// updateGatewayCreateRequest creates the UpdateGateway request.
func (client *GatewaysClient) updateGatewayCreateRequest(ctx context.Context, gatewayID string, updateGatewayRequest UpdateGatewayRequestClassification, _ *GatewaysClientUpdateGatewayOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways/{gatewayId}"
	if gatewayID == "" {
		return nil, errors.New("parameter gatewayID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayId}", url.PathEscape(gatewayID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateGatewayRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateGatewayHandleResponse handles the UpdateGateway response.
func (client *GatewaysClient) updateGatewayHandleResponse(resp *http.Response) (GatewaysClientUpdateGatewayResponse, error) {
	result := GatewaysClientUpdateGatewayResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return GatewaysClientUpdateGatewayResponse{}, err
	}
	return result, nil
}

// UpdateGatewayMember - PERMISSIONS The caller must have admin permission for the gateway.
// REQUIRED DELEGATED SCOPES Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - gatewayID - The ID of the gateway.
//   - gatewayMemberID - The ID of the gateway member.
//   - updateGatewayMemberRequest - The request payload for updating the gateway member
//   - options - GatewaysClientUpdateGatewayMemberOptions contains the optional parameters for the GatewaysClient.UpdateGatewayMember
//     method.
func (client *GatewaysClient) UpdateGatewayMember(ctx context.Context, gatewayID string, gatewayMemberID string, updateGatewayMemberRequest UpdateGatewayMemberRequest, options *GatewaysClientUpdateGatewayMemberOptions) (GatewaysClientUpdateGatewayMemberResponse, error) {
	var err error
	const operationName = "core.GatewaysClient.UpdateGatewayMember"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateGatewayMemberCreateRequest(ctx, gatewayID, gatewayMemberID, updateGatewayMemberRequest, options)
	if err != nil {
		return GatewaysClientUpdateGatewayMemberResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GatewaysClientUpdateGatewayMemberResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return GatewaysClientUpdateGatewayMemberResponse{}, err
	}
	resp, err := client.updateGatewayMemberHandleResponse(httpResp)
	return resp, err
}

// updateGatewayMemberCreateRequest creates the UpdateGatewayMember request.
func (client *GatewaysClient) updateGatewayMemberCreateRequest(ctx context.Context, gatewayID string, gatewayMemberID string, updateGatewayMemberRequest UpdateGatewayMemberRequest, _ *GatewaysClientUpdateGatewayMemberOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways/{gatewayId}/members/{gatewayMemberId}"
	if gatewayID == "" {
		return nil, errors.New("parameter gatewayID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayId}", url.PathEscape(gatewayID))
	if gatewayMemberID == "" {
		return nil, errors.New("parameter gatewayMemberID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayMemberId}", url.PathEscape(gatewayMemberID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateGatewayMemberRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateGatewayMemberHandleResponse handles the UpdateGatewayMember response.
func (client *GatewaysClient) updateGatewayMemberHandleResponse(resp *http.Response) (GatewaysClientUpdateGatewayMemberResponse, error) {
	result := GatewaysClientUpdateGatewayMemberResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OnPremisesGatewayMember); err != nil {
		return GatewaysClientUpdateGatewayMemberResponse{}, err
	}
	return result, nil
}

// UpdateGatewayRoleAssignment - To get the principal user ID required for request body, see Find the user ID [/partner-center/find-ids-and-domain-names#find-the-user-object-id].
// PERMISSIONS
// * The caller must have Admin role on the gateway.
// REQUIRED DELEGATED SCOPES Gateway.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - gatewayID - The ID of the gateway
//   - gatewayRoleAssignmentID - The ID of the role assignment
//   - updateGatewayRoleAssignmentRequest - Update gateway role assignment request payload.
//   - options - GatewaysClientUpdateGatewayRoleAssignmentOptions contains the optional parameters for the GatewaysClient.UpdateGatewayRoleAssignment
//     method.
func (client *GatewaysClient) UpdateGatewayRoleAssignment(ctx context.Context, gatewayID string, gatewayRoleAssignmentID string, updateGatewayRoleAssignmentRequest UpdateGatewayRoleAssignmentRequest, options *GatewaysClientUpdateGatewayRoleAssignmentOptions) (GatewaysClientUpdateGatewayRoleAssignmentResponse, error) {
	var err error
	const operationName = "core.GatewaysClient.UpdateGatewayRoleAssignment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateGatewayRoleAssignmentCreateRequest(ctx, gatewayID, gatewayRoleAssignmentID, updateGatewayRoleAssignmentRequest, options)
	if err != nil {
		return GatewaysClientUpdateGatewayRoleAssignmentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GatewaysClientUpdateGatewayRoleAssignmentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return GatewaysClientUpdateGatewayRoleAssignmentResponse{}, err
	}
	resp, err := client.updateGatewayRoleAssignmentHandleResponse(httpResp)
	return resp, err
}

// updateGatewayRoleAssignmentCreateRequest creates the UpdateGatewayRoleAssignment request.
func (client *GatewaysClient) updateGatewayRoleAssignmentCreateRequest(ctx context.Context, gatewayID string, gatewayRoleAssignmentID string, updateGatewayRoleAssignmentRequest UpdateGatewayRoleAssignmentRequest, _ *GatewaysClientUpdateGatewayRoleAssignmentOptions) (*policy.Request, error) {
	urlPath := "/v1/gateways/{gatewayId}/roleAssignments/{gatewayRoleAssignmentId}"
	if gatewayID == "" {
		return nil, errors.New("parameter gatewayID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayId}", url.PathEscape(gatewayID))
	if gatewayRoleAssignmentID == "" {
		return nil, errors.New("parameter gatewayRoleAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayRoleAssignmentId}", url.PathEscape(gatewayRoleAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateGatewayRoleAssignmentRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateGatewayRoleAssignmentHandleResponse handles the UpdateGatewayRoleAssignment response.
func (client *GatewaysClient) updateGatewayRoleAssignmentHandleResponse(resp *http.Response) (GatewaysClientUpdateGatewayRoleAssignmentResponse, error) {
	result := GatewaysClientUpdateGatewayRoleAssignmentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GatewayRoleAssignment); err != nil {
		return GatewaysClientUpdateGatewayRoleAssignmentResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// ListGatewayRoleAssignments - returns array of GatewayRoleAssignment from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS
//
//   - The caller must have ConnectionCreator or higher role on the gateway.
//
// # REQUIRED DELEGATED SCOPES Gateway.Read.All or Gateway.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - gatewayID - The ID of the gateway.
//   - options - GatewaysClientListGatewayRoleAssignmentsOptions contains the optional parameters for the GatewaysClient.NewListGatewayRoleAssignmentsPager method.
func (client *GatewaysClient) ListGatewayRoleAssignments(ctx context.Context, gatewayID string, options *GatewaysClientListGatewayRoleAssignmentsOptions) ([]GatewayRoleAssignment, error) {
	pager := client.NewListGatewayRoleAssignmentsPager(gatewayID, options)
	mapper := func(resp GatewaysClientListGatewayRoleAssignmentsResponse) []GatewayRoleAssignment {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []GatewayRoleAssignment{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return []GatewayRoleAssignment{}, err
	}
	return list, nil
}

// ListGateways - returns array of GatewayClassification from all pages.
// PERMISSIONS The caller must have permissions for the gateway.
//
// # REQUIRED DELEGATED SCOPES Gateway.Read.All or Gateway.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - options - GatewaysClientListGatewaysOptions contains the optional parameters for the GatewaysClient.NewListGatewaysPager method.
func (client *GatewaysClient) ListGateways(ctx context.Context, options *GatewaysClientListGatewaysOptions) ([]GatewayClassification, error) {
	pager := client.NewListGatewaysPager(options)
	mapper := func(resp GatewaysClientListGatewaysResponse) []GatewayClassification {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []GatewayClassification{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return []GatewayClassification{}, err
	}
	return list, nil
}
