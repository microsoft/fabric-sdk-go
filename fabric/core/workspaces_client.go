// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// WorkspacesClient contains the methods for the Workspaces group.
// Don't use this type directly, use a constructor function instead.
type WorkspacesClient struct {
	internal *azcore.Client
	endpoint string
}

// AddWorkspaceRoleAssignment - To get the principal user object ID required for request body, see Find the user object ID
// [/partner-center/find-ids-and-domain-names#find-the-user-object-id].
// PERMISSIONS
// * The caller must have member or higher workspace role.
// * Members can add members or others with lower permissions. For more information see: workspace roles [/power-bi/collaborate-share/service-roles-new-workspaces#workspace-roles].
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - workspaceRoleAssignmentRequest - Add workspace role assignment request payload.
//   - options - WorkspacesClientAddWorkspaceRoleAssignmentOptions contains the optional parameters for the WorkspacesClient.AddWorkspaceRoleAssignment
//     method.
func (client *WorkspacesClient) AddWorkspaceRoleAssignment(ctx context.Context, workspaceID string, workspaceRoleAssignmentRequest AddWorkspaceRoleAssignmentRequest, options *WorkspacesClientAddWorkspaceRoleAssignmentOptions) (WorkspacesClientAddWorkspaceRoleAssignmentResponse, error) {
	var err error
	const operationName = "core.WorkspacesClient.AddWorkspaceRoleAssignment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.addWorkspaceRoleAssignmentCreateRequest(ctx, workspaceID, workspaceRoleAssignmentRequest, options)
	if err != nil {
		return WorkspacesClientAddWorkspaceRoleAssignmentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkspacesClientAddWorkspaceRoleAssignmentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = NewResponseError(httpResp)
		return WorkspacesClientAddWorkspaceRoleAssignmentResponse{}, err
	}
	resp, err := client.addWorkspaceRoleAssignmentHandleResponse(httpResp)
	return resp, err
}

// addWorkspaceRoleAssignmentCreateRequest creates the AddWorkspaceRoleAssignment request.
func (client *WorkspacesClient) addWorkspaceRoleAssignmentCreateRequest(ctx context.Context, workspaceID string, workspaceRoleAssignmentRequest AddWorkspaceRoleAssignmentRequest, _ *WorkspacesClientAddWorkspaceRoleAssignmentOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/roleAssignments"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, workspaceRoleAssignmentRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// addWorkspaceRoleAssignmentHandleResponse handles the AddWorkspaceRoleAssignment response.
func (client *WorkspacesClient) addWorkspaceRoleAssignmentHandleResponse(resp *http.Response) (WorkspacesClientAddWorkspaceRoleAssignmentResponse, error) {
	result := WorkspacesClientAddWorkspaceRoleAssignmentResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkspaceRoleAssignment); err != nil {
		return WorkspacesClientAddWorkspaceRoleAssignmentResponse{}, err
	}
	return result, nil
}

// AssignToCapacity - PERMISSIONS
// * The caller must have contributor permissions or be an capacity Admin.
// * The caller must have admin workspace role.
// REQUIRED SCOPE Capacity.ReadWrite.All and Workspace.ReadWrite.All
// LIMITATIONS
// * Fabric items (non-PowerBI) don't support migration across region. For more information see moving data around [/fabric/admin/portal-workspaces#moving-data-around].
// * Workspaces with Fabric items (non-PowerBI) can only be assigned to Fabric, Fabric trialor Power BI Premium capacity.
// For more information see Microsoft Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - assignWorkspaceToCapacityRequest - Assign to capacity parameters
//   - options - WorkspacesClientAssignToCapacityOptions contains the optional parameters for the WorkspacesClient.AssignToCapacity
//     method.
func (client *WorkspacesClient) AssignToCapacity(ctx context.Context, workspaceID string, assignWorkspaceToCapacityRequest AssignWorkspaceToCapacityRequest, options *WorkspacesClientAssignToCapacityOptions) (WorkspacesClientAssignToCapacityResponse, error) {
	var err error
	const operationName = "core.WorkspacesClient.AssignToCapacity"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.assignToCapacityCreateRequest(ctx, workspaceID, assignWorkspaceToCapacityRequest, options)
	if err != nil {
		return WorkspacesClientAssignToCapacityResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkspacesClientAssignToCapacityResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = NewResponseError(httpResp)
		return WorkspacesClientAssignToCapacityResponse{}, err
	}
	return WorkspacesClientAssignToCapacityResponse{}, nil
}

// assignToCapacityCreateRequest creates the AssignToCapacity request.
func (client *WorkspacesClient) assignToCapacityCreateRequest(ctx context.Context, workspaceID string, assignWorkspaceToCapacityRequest AssignWorkspaceToCapacityRequest, _ *WorkspacesClientAssignToCapacityOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/assignToCapacity"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, assignWorkspaceToCapacityRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// CreateWorkspace - PERMISSIONS
// * The caller must have permission to create workspaces granted by the tenant admin. For more information see: create workspaces
// [/fabric/admin/portal-workspace#create-workspaces-new-workspace-experience].
// * The caller must have contributor permissions or be an Admin on the capacity. For more information, see: capacity user
// permissions
// [/power-bi/enterprise/service-admin-premium-manage#manage-user-permissions].
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - createWorkspaceRequest - Create workspace request payload.
//   - options - WorkspacesClientCreateWorkspaceOptions contains the optional parameters for the WorkspacesClient.CreateWorkspace
//     method.
func (client *WorkspacesClient) CreateWorkspace(ctx context.Context, createWorkspaceRequest CreateWorkspaceRequest, options *WorkspacesClientCreateWorkspaceOptions) (WorkspacesClientCreateWorkspaceResponse, error) {
	var err error
	const operationName = "core.WorkspacesClient.CreateWorkspace"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createWorkspaceCreateRequest(ctx, createWorkspaceRequest, options)
	if err != nil {
		return WorkspacesClientCreateWorkspaceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkspacesClientCreateWorkspaceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = NewResponseError(httpResp)
		return WorkspacesClientCreateWorkspaceResponse{}, err
	}
	resp, err := client.createWorkspaceHandleResponse(httpResp)
	return resp, err
}

// createWorkspaceCreateRequest creates the CreateWorkspace request.
func (client *WorkspacesClient) createWorkspaceCreateRequest(ctx context.Context, createWorkspaceRequest CreateWorkspaceRequest, _ *WorkspacesClientCreateWorkspaceOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createWorkspaceRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// createWorkspaceHandleResponse handles the CreateWorkspace response.
func (client *WorkspacesClient) createWorkspaceHandleResponse(resp *http.Response) (WorkspacesClientCreateWorkspaceResponse, error) {
	result := WorkspacesClientCreateWorkspaceResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Workspace); err != nil {
		return WorkspacesClientCreateWorkspaceResponse{}, err
	}
	return result, nil
}

// DeleteWorkspace - PERMISSIONS The caller must have admin workspace role.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - WorkspacesClientDeleteWorkspaceOptions contains the optional parameters for the WorkspacesClient.DeleteWorkspace
//     method.
func (client *WorkspacesClient) DeleteWorkspace(ctx context.Context, workspaceID string, options *WorkspacesClientDeleteWorkspaceOptions) (WorkspacesClientDeleteWorkspaceResponse, error) {
	var err error
	const operationName = "core.WorkspacesClient.DeleteWorkspace"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteWorkspaceCreateRequest(ctx, workspaceID, options)
	if err != nil {
		return WorkspacesClientDeleteWorkspaceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkspacesClientDeleteWorkspaceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return WorkspacesClientDeleteWorkspaceResponse{}, err
	}
	return WorkspacesClientDeleteWorkspaceResponse{}, nil
}

// deleteWorkspaceCreateRequest creates the DeleteWorkspace request.
func (client *WorkspacesClient) deleteWorkspaceCreateRequest(ctx context.Context, workspaceID string, _ *WorkspacesClientDeleteWorkspaceOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteWorkspaceRoleAssignment - The role assignment of the last admin can't be deleted.
// PERMISSIONS The caller must have admin workspace role.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - workspaceRoleAssignmentID - The workspace role assignment ID.
//   - options - WorkspacesClientDeleteWorkspaceRoleAssignmentOptions contains the optional parameters for the WorkspacesClient.DeleteWorkspaceRoleAssignment
//     method.
func (client *WorkspacesClient) DeleteWorkspaceRoleAssignment(ctx context.Context, workspaceID string, workspaceRoleAssignmentID string, options *WorkspacesClientDeleteWorkspaceRoleAssignmentOptions) (WorkspacesClientDeleteWorkspaceRoleAssignmentResponse, error) {
	var err error
	const operationName = "core.WorkspacesClient.DeleteWorkspaceRoleAssignment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteWorkspaceRoleAssignmentCreateRequest(ctx, workspaceID, workspaceRoleAssignmentID, options)
	if err != nil {
		return WorkspacesClientDeleteWorkspaceRoleAssignmentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkspacesClientDeleteWorkspaceRoleAssignmentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return WorkspacesClientDeleteWorkspaceRoleAssignmentResponse{}, err
	}
	return WorkspacesClientDeleteWorkspaceRoleAssignmentResponse{}, nil
}

// deleteWorkspaceRoleAssignmentCreateRequest creates the DeleteWorkspaceRoleAssignment request.
func (client *WorkspacesClient) deleteWorkspaceRoleAssignmentCreateRequest(ctx context.Context, workspaceID string, workspaceRoleAssignmentID string, _ *WorkspacesClientDeleteWorkspaceRoleAssignmentOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/roleAssignments/{workspaceRoleAssignmentId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if workspaceRoleAssignmentID == "" {
		return nil, errors.New("parameter workspaceRoleAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceRoleAssignmentId}", url.PathEscape(workspaceRoleAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginDeprovisionIdentity - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS
// The caller must have an admin role in the workspace.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The ID of the workspace.
//   - options - WorkspacesClientBeginDeprovisionIdentityOptions contains the optional parameters for the WorkspacesClient.BeginDeprovisionIdentity
//     method.
func (client *WorkspacesClient) BeginDeprovisionIdentity(ctx context.Context, workspaceID string, options *WorkspacesClientBeginDeprovisionIdentityOptions) (*runtime.Poller[WorkspacesClientDeprovisionIdentityResponse], error) {
	return client.beginDeprovisionIdentity(ctx, workspaceID, options)
}

// DeprovisionIdentity - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS
// The caller must have an admin role in the workspace.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *WorkspacesClient) deprovisionIdentity(ctx context.Context, workspaceID string, options *WorkspacesClientBeginDeprovisionIdentityOptions) (*http.Response, error) {
	var err error
	const operationName = "core.WorkspacesClient.BeginDeprovisionIdentity"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deprovisionIdentityCreateRequest(ctx, workspaceID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deprovisionIdentityCreateRequest creates the DeprovisionIdentity request.
func (client *WorkspacesClient) deprovisionIdentityCreateRequest(ctx context.Context, workspaceID string, _ *WorkspacesClientBeginDeprovisionIdentityOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/deprovisionIdentity"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetWorkspace - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - WorkspacesClientGetWorkspaceOptions contains the optional parameters for the WorkspacesClient.GetWorkspace method.
func (client *WorkspacesClient) GetWorkspace(ctx context.Context, workspaceID string, options *WorkspacesClientGetWorkspaceOptions) (WorkspacesClientGetWorkspaceResponse, error) {
	var err error
	const operationName = "core.WorkspacesClient.GetWorkspace"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getWorkspaceCreateRequest(ctx, workspaceID, options)
	if err != nil {
		return WorkspacesClientGetWorkspaceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkspacesClientGetWorkspaceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return WorkspacesClientGetWorkspaceResponse{}, err
	}
	resp, err := client.getWorkspaceHandleResponse(httpResp)
	return resp, err
}

// getWorkspaceCreateRequest creates the GetWorkspace request.
func (client *WorkspacesClient) getWorkspaceCreateRequest(ctx context.Context, workspaceID string, _ *WorkspacesClientGetWorkspaceOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getWorkspaceHandleResponse handles the GetWorkspace response.
func (client *WorkspacesClient) getWorkspaceHandleResponse(resp *http.Response) (WorkspacesClientGetWorkspaceResponse, error) {
	result := WorkspacesClientGetWorkspaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkspaceInfo); err != nil {
		return WorkspacesClientGetWorkspaceResponse{}, err
	}
	return result, nil
}

// GetWorkspaceRoleAssignment - PERMISSIONS The caller must have member or higher role on the workspace.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - workspaceRoleAssignmentID - The workspace role assignment ID.
//   - options - WorkspacesClientGetWorkspaceRoleAssignmentOptions contains the optional parameters for the WorkspacesClient.GetWorkspaceRoleAssignment
//     method.
func (client *WorkspacesClient) GetWorkspaceRoleAssignment(ctx context.Context, workspaceID string, workspaceRoleAssignmentID string, options *WorkspacesClientGetWorkspaceRoleAssignmentOptions) (WorkspacesClientGetWorkspaceRoleAssignmentResponse, error) {
	var err error
	const operationName = "core.WorkspacesClient.GetWorkspaceRoleAssignment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getWorkspaceRoleAssignmentCreateRequest(ctx, workspaceID, workspaceRoleAssignmentID, options)
	if err != nil {
		return WorkspacesClientGetWorkspaceRoleAssignmentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkspacesClientGetWorkspaceRoleAssignmentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return WorkspacesClientGetWorkspaceRoleAssignmentResponse{}, err
	}
	resp, err := client.getWorkspaceRoleAssignmentHandleResponse(httpResp)
	return resp, err
}

// getWorkspaceRoleAssignmentCreateRequest creates the GetWorkspaceRoleAssignment request.
func (client *WorkspacesClient) getWorkspaceRoleAssignmentCreateRequest(ctx context.Context, workspaceID string, workspaceRoleAssignmentID string, _ *WorkspacesClientGetWorkspaceRoleAssignmentOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/roleAssignments/{workspaceRoleAssignmentId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if workspaceRoleAssignmentID == "" {
		return nil, errors.New("parameter workspaceRoleAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceRoleAssignmentId}", url.PathEscape(workspaceRoleAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getWorkspaceRoleAssignmentHandleResponse handles the GetWorkspaceRoleAssignment response.
func (client *WorkspacesClient) getWorkspaceRoleAssignmentHandleResponse(resp *http.Response) (WorkspacesClientGetWorkspaceRoleAssignmentResponse, error) {
	result := WorkspacesClientGetWorkspaceRoleAssignmentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkspaceRoleAssignment); err != nil {
		return WorkspacesClientGetWorkspaceRoleAssignmentResponse{}, err
	}
	return result, nil
}

// NewListWorkspaceRoleAssignmentsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have member or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - WorkspacesClientListWorkspaceRoleAssignmentsOptions contains the optional parameters for the WorkspacesClient.NewListWorkspaceRoleAssignmentsPager
//     method.
func (client *WorkspacesClient) NewListWorkspaceRoleAssignmentsPager(workspaceID string, options *WorkspacesClientListWorkspaceRoleAssignmentsOptions) *runtime.Pager[WorkspacesClientListWorkspaceRoleAssignmentsResponse] {
	return runtime.NewPager(runtime.PagingHandler[WorkspacesClientListWorkspaceRoleAssignmentsResponse]{
		More: func(page WorkspacesClientListWorkspaceRoleAssignmentsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *WorkspacesClientListWorkspaceRoleAssignmentsResponse) (WorkspacesClientListWorkspaceRoleAssignmentsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "core.WorkspacesClient.NewListWorkspaceRoleAssignmentsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listWorkspaceRoleAssignmentsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return WorkspacesClientListWorkspaceRoleAssignmentsResponse{}, err
			}
			return client.listWorkspaceRoleAssignmentsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWorkspaceRoleAssignmentsCreateRequest creates the ListWorkspaceRoleAssignments request.
func (client *WorkspacesClient) listWorkspaceRoleAssignmentsCreateRequest(ctx context.Context, workspaceID string, options *WorkspacesClientListWorkspaceRoleAssignmentsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/roleAssignments"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWorkspaceRoleAssignmentsHandleResponse handles the ListWorkspaceRoleAssignments response.
func (client *WorkspacesClient) listWorkspaceRoleAssignmentsHandleResponse(resp *http.Response) (WorkspacesClientListWorkspaceRoleAssignmentsResponse, error) {
	result := WorkspacesClientListWorkspaceRoleAssignmentsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkspaceRoleAssignments); err != nil {
		return WorkspacesClientListWorkspaceRoleAssignmentsResponse{}, err
	}
	return result, nil
}

// NewListWorkspacesPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - options - WorkspacesClientListWorkspacesOptions contains the optional parameters for the WorkspacesClient.NewListWorkspacesPager
//     method.
func (client *WorkspacesClient) NewListWorkspacesPager(options *WorkspacesClientListWorkspacesOptions) *runtime.Pager[WorkspacesClientListWorkspacesResponse] {
	return runtime.NewPager(runtime.PagingHandler[WorkspacesClientListWorkspacesResponse]{
		More: func(page WorkspacesClientListWorkspacesResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *WorkspacesClientListWorkspacesResponse) (WorkspacesClientListWorkspacesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "core.WorkspacesClient.NewListWorkspacesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listWorkspacesCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return WorkspacesClientListWorkspacesResponse{}, err
			}
			return client.listWorkspacesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWorkspacesCreateRequest creates the ListWorkspaces request.
func (client *WorkspacesClient) listWorkspacesCreateRequest(ctx context.Context, options *WorkspacesClientListWorkspacesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	if options != nil && options.Roles != nil {
		reqQP.Set("roles", *options.Roles)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWorkspacesHandleResponse handles the ListWorkspaces response.
func (client *WorkspacesClient) listWorkspacesHandleResponse(resp *http.Response) (WorkspacesClientListWorkspacesResponse, error) {
	result := WorkspacesClientListWorkspacesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Workspaces); err != nil {
		return WorkspacesClientListWorkspacesResponse{}, err
	}
	return result, nil
}

// BeginProvisionIdentity - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS
// The caller must have an admin role in the workspace.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The ID of the workspace.
//   - options - WorkspacesClientBeginProvisionIdentityOptions contains the optional parameters for the WorkspacesClient.BeginProvisionIdentity
//     method.
func (client *WorkspacesClient) BeginProvisionIdentity(ctx context.Context, workspaceID string, options *WorkspacesClientBeginProvisionIdentityOptions) (*runtime.Poller[WorkspacesClientProvisionIdentityResponse], error) {
	return client.beginProvisionIdentity(ctx, workspaceID, options)
}

// ProvisionIdentity - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS
// The caller must have an admin role in the workspace.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *WorkspacesClient) provisionIdentity(ctx context.Context, workspaceID string, options *WorkspacesClientBeginProvisionIdentityOptions) (*http.Response, error) {
	var err error
	const operationName = "core.WorkspacesClient.BeginProvisionIdentity"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.provisionIdentityCreateRequest(ctx, workspaceID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// provisionIdentityCreateRequest creates the ProvisionIdentity request.
func (client *WorkspacesClient) provisionIdentityCreateRequest(ctx context.Context, workspaceID string, _ *WorkspacesClientBeginProvisionIdentityOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/provisionIdentity"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// UnassignFromCapacity - PERMISSIONS The caller must have admin role on the workspace.
// REQUIRED DELEGATED SCOPES Capacity.ReadWrite.All and Workspace.ReadWrite.All
// LIMITATIONS Workspaces with Fabric items (non-PowerBI) cannot be unassigned from capacity of supported type. For more information
// see: moving data around
// [/fabric/admin/portal-workspaces#moving-data-around].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - WorkspacesClientUnassignFromCapacityOptions contains the optional parameters for the WorkspacesClient.UnassignFromCapacity
//     method.
func (client *WorkspacesClient) UnassignFromCapacity(ctx context.Context, workspaceID string, options *WorkspacesClientUnassignFromCapacityOptions) (WorkspacesClientUnassignFromCapacityResponse, error) {
	var err error
	const operationName = "core.WorkspacesClient.UnassignFromCapacity"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.unassignFromCapacityCreateRequest(ctx, workspaceID, options)
	if err != nil {
		return WorkspacesClientUnassignFromCapacityResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkspacesClientUnassignFromCapacityResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = NewResponseError(httpResp)
		return WorkspacesClientUnassignFromCapacityResponse{}, err
	}
	return WorkspacesClientUnassignFromCapacityResponse{}, nil
}

// unassignFromCapacityCreateRequest creates the UnassignFromCapacity request.
func (client *WorkspacesClient) unassignFromCapacityCreateRequest(ctx context.Context, workspaceID string, _ *WorkspacesClientUnassignFromCapacityOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/unassignFromCapacity"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// UpdateWorkspace - PERMISSIONS The caller must have admin workspace role.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - updateWorkspaceRequest - Update workspace request payload.
//   - options - WorkspacesClientUpdateWorkspaceOptions contains the optional parameters for the WorkspacesClient.UpdateWorkspace
//     method.
func (client *WorkspacesClient) UpdateWorkspace(ctx context.Context, workspaceID string, updateWorkspaceRequest UpdateWorkspaceRequest, options *WorkspacesClientUpdateWorkspaceOptions) (WorkspacesClientUpdateWorkspaceResponse, error) {
	var err error
	const operationName = "core.WorkspacesClient.UpdateWorkspace"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateWorkspaceCreateRequest(ctx, workspaceID, updateWorkspaceRequest, options)
	if err != nil {
		return WorkspacesClientUpdateWorkspaceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkspacesClientUpdateWorkspaceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return WorkspacesClientUpdateWorkspaceResponse{}, err
	}
	resp, err := client.updateWorkspaceHandleResponse(httpResp)
	return resp, err
}

// updateWorkspaceCreateRequest creates the UpdateWorkspace request.
func (client *WorkspacesClient) updateWorkspaceCreateRequest(ctx context.Context, workspaceID string, updateWorkspaceRequest UpdateWorkspaceRequest, _ *WorkspacesClientUpdateWorkspaceOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateWorkspaceRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateWorkspaceHandleResponse handles the UpdateWorkspace response.
func (client *WorkspacesClient) updateWorkspaceHandleResponse(resp *http.Response) (WorkspacesClientUpdateWorkspaceResponse, error) {
	result := WorkspacesClientUpdateWorkspaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Workspace); err != nil {
		return WorkspacesClientUpdateWorkspaceResponse{}, err
	}
	return result, nil
}

// UpdateWorkspaceRoleAssignment - The role assignment of the last admin can't be changed.
// PERMISSIONS The caller must have admin role on the workspace.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - workspaceRoleAssignmentID - The workspace role assignment ID.
//   - updateWorkspaceRoleAssignmentRequest - Update workspace role assignment request payload.
//   - options - WorkspacesClientUpdateWorkspaceRoleAssignmentOptions contains the optional parameters for the WorkspacesClient.UpdateWorkspaceRoleAssignment
//     method.
func (client *WorkspacesClient) UpdateWorkspaceRoleAssignment(ctx context.Context, workspaceID string, workspaceRoleAssignmentID string, updateWorkspaceRoleAssignmentRequest UpdateWorkspaceRoleAssignmentRequest, options *WorkspacesClientUpdateWorkspaceRoleAssignmentOptions) (WorkspacesClientUpdateWorkspaceRoleAssignmentResponse, error) {
	var err error
	const operationName = "core.WorkspacesClient.UpdateWorkspaceRoleAssignment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateWorkspaceRoleAssignmentCreateRequest(ctx, workspaceID, workspaceRoleAssignmentID, updateWorkspaceRoleAssignmentRequest, options)
	if err != nil {
		return WorkspacesClientUpdateWorkspaceRoleAssignmentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkspacesClientUpdateWorkspaceRoleAssignmentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return WorkspacesClientUpdateWorkspaceRoleAssignmentResponse{}, err
	}
	resp, err := client.updateWorkspaceRoleAssignmentHandleResponse(httpResp)
	return resp, err
}

// updateWorkspaceRoleAssignmentCreateRequest creates the UpdateWorkspaceRoleAssignment request.
func (client *WorkspacesClient) updateWorkspaceRoleAssignmentCreateRequest(ctx context.Context, workspaceID string, workspaceRoleAssignmentID string, updateWorkspaceRoleAssignmentRequest UpdateWorkspaceRoleAssignmentRequest, _ *WorkspacesClientUpdateWorkspaceRoleAssignmentOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/roleAssignments/{workspaceRoleAssignmentId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if workspaceRoleAssignmentID == "" {
		return nil, errors.New("parameter workspaceRoleAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceRoleAssignmentId}", url.PathEscape(workspaceRoleAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateWorkspaceRoleAssignmentRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateWorkspaceRoleAssignmentHandleResponse handles the UpdateWorkspaceRoleAssignment response.
func (client *WorkspacesClient) updateWorkspaceRoleAssignmentHandleResponse(resp *http.Response) (WorkspacesClientUpdateWorkspaceRoleAssignmentResponse, error) {
	result := WorkspacesClientUpdateWorkspaceRoleAssignmentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkspaceRoleAssignment); err != nil {
		return WorkspacesClientUpdateWorkspaceRoleAssignmentResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// DeprovisionIdentity - returns WorkspacesClientDeprovisionIdentityResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS
// The caller must have an admin role in the workspace.
//
// # REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The ID of the workspace.
//   - options - WorkspacesClientBeginDeprovisionIdentityOptions contains the optional parameters for the WorkspacesClient.BeginDeprovisionIdentity method.
func (client *WorkspacesClient) DeprovisionIdentity(ctx context.Context, workspaceID string, options *WorkspacesClientBeginDeprovisionIdentityOptions) (WorkspacesClientDeprovisionIdentityResponse, error) {
	result, err := iruntime.NewLRO(client.BeginDeprovisionIdentity(ctx, workspaceID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return WorkspacesClientDeprovisionIdentityResponse{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return WorkspacesClientDeprovisionIdentityResponse{}, err
	}
	return result, err
}

// beginDeprovisionIdentity creates the deprovisionIdentity request.
func (client *WorkspacesClient) beginDeprovisionIdentity(ctx context.Context, workspaceID string, options *WorkspacesClientBeginDeprovisionIdentityOptions) (*runtime.Poller[WorkspacesClientDeprovisionIdentityResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deprovisionIdentity(ctx, workspaceID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[WorkspacesClientDeprovisionIdentityResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkspacesClientDeprovisionIdentityResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[WorkspacesClientDeprovisionIdentityResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkspacesClientDeprovisionIdentityResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ProvisionIdentity - returns WorkspacesClientProvisionIdentityResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS
// The caller must have an admin role in the workspace.
//
// # REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The ID of the workspace.
//   - options - WorkspacesClientBeginProvisionIdentityOptions contains the optional parameters for the WorkspacesClient.BeginProvisionIdentity method.
func (client *WorkspacesClient) ProvisionIdentity(ctx context.Context, workspaceID string, options *WorkspacesClientBeginProvisionIdentityOptions) (WorkspacesClientProvisionIdentityResponse, error) {
	result, err := iruntime.NewLRO(client.BeginProvisionIdentity(ctx, workspaceID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return WorkspacesClientProvisionIdentityResponse{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return WorkspacesClientProvisionIdentityResponse{}, err
	}
	return result, err
}

// beginProvisionIdentity creates the provisionIdentity request.
func (client *WorkspacesClient) beginProvisionIdentity(ctx context.Context, workspaceID string, options *WorkspacesClientBeginProvisionIdentityOptions) (*runtime.Poller[WorkspacesClientProvisionIdentityResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.provisionIdentity(ctx, workspaceID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[WorkspacesClientProvisionIdentityResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkspacesClientProvisionIdentityResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[WorkspacesClientProvisionIdentityResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkspacesClientProvisionIdentityResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListWorkspaceRoleAssignments - returns array of WorkspaceRoleAssignment from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have member or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - WorkspacesClientListWorkspaceRoleAssignmentsOptions contains the optional parameters for the WorkspacesClient.NewListWorkspaceRoleAssignmentsPager method.
func (client *WorkspacesClient) ListWorkspaceRoleAssignments(ctx context.Context, workspaceID string, options *WorkspacesClientListWorkspaceRoleAssignmentsOptions) ([]WorkspaceRoleAssignment, error) {
	pager := client.NewListWorkspaceRoleAssignmentsPager(workspaceID, options)
	mapper := func(resp WorkspacesClientListWorkspaceRoleAssignmentsResponse) []WorkspaceRoleAssignment {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []WorkspaceRoleAssignment{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return []WorkspaceRoleAssignment{}, err
	}
	return list, nil
}

// ListWorkspaces - returns array of Workspace from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - options - WorkspacesClientListWorkspacesOptions contains the optional parameters for the WorkspacesClient.NewListWorkspacesPager method.
func (client *WorkspacesClient) ListWorkspaces(ctx context.Context, options *WorkspacesClientListWorkspacesOptions) ([]Workspace, error) {
	pager := client.NewListWorkspacesPager(options)
	mapper := func(resp WorkspacesClientListWorkspacesResponse) []Workspace {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Workspace{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return []Workspace{}, err
	}
	return list, nil
}
