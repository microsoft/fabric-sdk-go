// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
)

// ManagedPrivateEndpointsClient contains the methods for the ManagedPrivateEndpoints group.
// Don't use this type directly, use a constructor function instead.
type ManagedPrivateEndpointsClient struct {
	internal *azcore.Client
	endpoint string
}

// CreateWorkspaceManagedPrivateEndpoint - PERMISSIONS The caller must have admin workspace role.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All.
// LIMITATIONS
// * To create managed private endpoint the workspace must be on a supported Fabric capacity. For more information see: Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createManagedPrivateEndpointRequest - Create managed private endpoint request payload.
//   - options - ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointOptions contains the optional parameters for
//     the ManagedPrivateEndpointsClient.CreateWorkspaceManagedPrivateEndpoint method.
func (client *ManagedPrivateEndpointsClient) CreateWorkspaceManagedPrivateEndpoint(ctx context.Context, workspaceID string, createManagedPrivateEndpointRequest CreateManagedPrivateEndpointRequest, options *ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointOptions) (ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointResponse, error) {
	var err error
	const operationName = "core.ManagedPrivateEndpointsClient.CreateWorkspaceManagedPrivateEndpoint"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createWorkspaceManagedPrivateEndpointCreateRequest(ctx, workspaceID, createManagedPrivateEndpointRequest, options)
	if err != nil {
		return ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = NewResponseError(httpResp)
		return ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointResponse{}, err
	}
	resp, err := client.createWorkspaceManagedPrivateEndpointHandleResponse(httpResp)
	return resp, err
}

// createWorkspaceManagedPrivateEndpointCreateRequest creates the CreateWorkspaceManagedPrivateEndpoint request.
func (client *ManagedPrivateEndpointsClient) createWorkspaceManagedPrivateEndpointCreateRequest(ctx context.Context, workspaceID string, createManagedPrivateEndpointRequest CreateManagedPrivateEndpointRequest, _ *ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/managedPrivateEndpoints"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createManagedPrivateEndpointRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// createWorkspaceManagedPrivateEndpointHandleResponse handles the CreateWorkspaceManagedPrivateEndpoint response.
func (client *ManagedPrivateEndpointsClient) createWorkspaceManagedPrivateEndpointHandleResponse(resp *http.Response) (ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointResponse, error) {
	result := ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.ManagedPrivateEndpoint); err != nil {
		return ManagedPrivateEndpointsClientCreateWorkspaceManagedPrivateEndpointResponse{}, err
	}
	return result, nil
}

// DeleteWorkspaceManagedPrivateEndpoint - PERMISSIONS The caller must have admin workspace role.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - managedPrivateEndpointID - The managed private endpoint ID.
//   - options - ManagedPrivateEndpointsClientDeleteWorkspaceManagedPrivateEndpointOptions contains the optional parameters for
//     the ManagedPrivateEndpointsClient.DeleteWorkspaceManagedPrivateEndpoint method.
func (client *ManagedPrivateEndpointsClient) DeleteWorkspaceManagedPrivateEndpoint(ctx context.Context, workspaceID string, managedPrivateEndpointID string, options *ManagedPrivateEndpointsClientDeleteWorkspaceManagedPrivateEndpointOptions) (ManagedPrivateEndpointsClientDeleteWorkspaceManagedPrivateEndpointResponse, error) {
	var err error
	const operationName = "core.ManagedPrivateEndpointsClient.DeleteWorkspaceManagedPrivateEndpoint"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteWorkspaceManagedPrivateEndpointCreateRequest(ctx, workspaceID, managedPrivateEndpointID, options)
	if err != nil {
		return ManagedPrivateEndpointsClientDeleteWorkspaceManagedPrivateEndpointResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ManagedPrivateEndpointsClientDeleteWorkspaceManagedPrivateEndpointResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return ManagedPrivateEndpointsClientDeleteWorkspaceManagedPrivateEndpointResponse{}, err
	}
	return ManagedPrivateEndpointsClientDeleteWorkspaceManagedPrivateEndpointResponse{}, nil
}

// deleteWorkspaceManagedPrivateEndpointCreateRequest creates the DeleteWorkspaceManagedPrivateEndpoint request.
func (client *ManagedPrivateEndpointsClient) deleteWorkspaceManagedPrivateEndpointCreateRequest(ctx context.Context, workspaceID string, managedPrivateEndpointID string, _ *ManagedPrivateEndpointsClientDeleteWorkspaceManagedPrivateEndpointOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/managedPrivateEndpoints/{managedPrivateEndpointId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if managedPrivateEndpointID == "" {
		return nil, errors.New("parameter managedPrivateEndpointID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managedPrivateEndpointId}", url.PathEscape(managedPrivateEndpointID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetWorkspaceManagedPrivateEndpoint - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - managedPrivateEndpointID - The managed private endpoint ID.
//   - options - ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointOptions contains the optional parameters for the
//     ManagedPrivateEndpointsClient.GetWorkspaceManagedPrivateEndpoint method.
func (client *ManagedPrivateEndpointsClient) GetWorkspaceManagedPrivateEndpoint(ctx context.Context, workspaceID string, managedPrivateEndpointID string, options *ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointOptions) (ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointResponse, error) {
	var err error
	const operationName = "core.ManagedPrivateEndpointsClient.GetWorkspaceManagedPrivateEndpoint"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getWorkspaceManagedPrivateEndpointCreateRequest(ctx, workspaceID, managedPrivateEndpointID, options)
	if err != nil {
		return ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointResponse{}, err
	}
	resp, err := client.getWorkspaceManagedPrivateEndpointHandleResponse(httpResp)
	return resp, err
}

// getWorkspaceManagedPrivateEndpointCreateRequest creates the GetWorkspaceManagedPrivateEndpoint request.
func (client *ManagedPrivateEndpointsClient) getWorkspaceManagedPrivateEndpointCreateRequest(ctx context.Context, workspaceID string, managedPrivateEndpointID string, _ *ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/managedPrivateEndpoints/{managedPrivateEndpointId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if managedPrivateEndpointID == "" {
		return nil, errors.New("parameter managedPrivateEndpointID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managedPrivateEndpointId}", url.PathEscape(managedPrivateEndpointID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getWorkspaceManagedPrivateEndpointHandleResponse handles the GetWorkspaceManagedPrivateEndpoint response.
func (client *ManagedPrivateEndpointsClient) getWorkspaceManagedPrivateEndpointHandleResponse(resp *http.Response) (ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointResponse, error) {
	result := ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ManagedPrivateEndpoint); err != nil {
		return ManagedPrivateEndpointsClientGetWorkspaceManagedPrivateEndpointResponse{}, err
	}
	return result, nil
}

// NewListWorkspaceManagedPrivateEndpointsPager - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsOptions contains the optional parameters for
//     the ManagedPrivateEndpointsClient.NewListWorkspaceManagedPrivateEndpointsPager method.
func (client *ManagedPrivateEndpointsClient) NewListWorkspaceManagedPrivateEndpointsPager(workspaceID string, options *ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsOptions) *runtime.Pager[ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse]{
		More: func(page ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse) (ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "core.ManagedPrivateEndpointsClient.NewListWorkspaceManagedPrivateEndpointsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listWorkspaceManagedPrivateEndpointsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse{}, err
			}
			return client.listWorkspaceManagedPrivateEndpointsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWorkspaceManagedPrivateEndpointsCreateRequest creates the ListWorkspaceManagedPrivateEndpoints request.
func (client *ManagedPrivateEndpointsClient) listWorkspaceManagedPrivateEndpointsCreateRequest(ctx context.Context, workspaceID string, options *ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/managedPrivateEndpoints"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWorkspaceManagedPrivateEndpointsHandleResponse handles the ListWorkspaceManagedPrivateEndpoints response.
func (client *ManagedPrivateEndpointsClient) listWorkspaceManagedPrivateEndpointsHandleResponse(resp *http.Response) (ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse, error) {
	result := ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ManagedPrivateEndpoints); err != nil {
		return ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// ListWorkspaceManagedPrivateEndpoints - returns array of ManagedPrivateEndpoint from all pages.
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsOptions contains the optional parameters for the ManagedPrivateEndpointsClient.NewListWorkspaceManagedPrivateEndpointsPager method.
func (client *ManagedPrivateEndpointsClient) ListWorkspaceManagedPrivateEndpoints(ctx context.Context, workspaceID string, options *ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsOptions) ([]ManagedPrivateEndpoint, error) {
	pager := client.NewListWorkspaceManagedPrivateEndpointsPager(workspaceID, options)
	mapper := func(resp ManagedPrivateEndpointsClientListWorkspaceManagedPrivateEndpointsResponse) []ManagedPrivateEndpoint {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []ManagedPrivateEndpoint{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return []ManagedPrivateEndpoint{}, err
	}
	return list, nil
}
