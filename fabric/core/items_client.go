// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BulkMoveItems - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes
// only. It may change based on feedback and is not recommended for production use.
// PERMISSIONS The caller must have contributor or higher role on the workspace.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// LIMITATIONS A single request can't contain more than 50 items.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - bulkMoveItemsRequest - Bulk move items request payload.
//   - options - ItemsClientBulkMoveItemsOptions contains the optional parameters for the ItemsClient.BulkMoveItems method.
func (client *ItemsClient) BulkMoveItems(ctx context.Context, workspaceID string, bulkMoveItemsRequest BulkMoveItemsRequest, options *ItemsClientBulkMoveItemsOptions) (ItemsClientBulkMoveItemsResponse, error) {
	var err error
	const operationName = "core.ItemsClient.BulkMoveItems"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.bulkMoveItemsCreateRequest(ctx, workspaceID, bulkMoveItemsRequest, options)
	if err != nil {
		return ItemsClientBulkMoveItemsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientBulkMoveItemsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return ItemsClientBulkMoveItemsResponse{}, err
	}
	resp, err := client.bulkMoveItemsHandleResponse(httpResp)
	return resp, err
}

// bulkMoveItemsCreateRequest creates the BulkMoveItems request.
func (client *ItemsClient) bulkMoveItemsCreateRequest(ctx context.Context, workspaceID string, bulkMoveItemsRequest BulkMoveItemsRequest, _ *ItemsClientBulkMoveItemsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/bulkMove"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, bulkMoveItemsRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// bulkMoveItemsHandleResponse handles the BulkMoveItems response.
func (client *ItemsClient) bulkMoveItemsHandleResponse(resp *http.Response) (ItemsClientBulkMoveItemsResponse, error) {
	result := ItemsClientBulkMoveItemsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MovedItems); err != nil {
		return ItemsClientBulkMoveItemsResponse{}, err
	}
	return result, nil
}

// BeginCreateItem - This API is supported for a number of item types, find the supported item types in Item management overview
// [/rest/api/fabric/articles/item-management/item-management-overview]. You can use Get item
// definition API [/rest/api/fabric/core/items/get-item-definition] to get an item definition.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
// * Generic scope: Item.ReadWrite.All
//
// * Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
// for more information about scopes, see scopes article [/rest/api/fabric/articles/scopes].
//
// LIMITATIONS
// * To create a non-PowerBI Fabric item the workspace must be on a supported Fabric capacity. For more information see Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// * To create a PowerBI item, the user must have the appropriate license. For more information see Microsoft Fabric license
// types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// * When creating an item, use either creationPayload or definition, but do not use both at the same time.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | When the item type in the call is supported. Check the
// corresponding API for the item type you're calling, to see if your call is
// supported. For example, semantic models are supported. |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createItemRequest - Create item request payload.
//   - options - ItemsClientBeginCreateItemOptions contains the optional parameters for the ItemsClient.BeginCreateItem method.
func (client *ItemsClient) BeginCreateItem(ctx context.Context, workspaceID string, createItemRequest CreateItemRequest, options *ItemsClientBeginCreateItemOptions) (*runtime.Poller[ItemsClientCreateItemResponse], error) {
	return client.beginCreateItem(ctx, workspaceID, createItemRequest, options)
}

// CreateItem - This API is supported for a number of item types, find the supported item types in Item management overview
// [/rest/api/fabric/articles/item-management/item-management-overview]. You can use Get item
// definition API [/rest/api/fabric/core/items/get-item-definition] to get an item definition.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
// * Generic scope: Item.ReadWrite.All
//
// * Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
// for more information about scopes, see scopes article [/rest/api/fabric/articles/scopes].
//
// LIMITATIONS
// * To create a non-PowerBI Fabric item the workspace must be on a supported Fabric capacity. For more information see Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// * To create a PowerBI item, the user must have the appropriate license. For more information see Microsoft Fabric license
// types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// * When creating an item, use either creationPayload or definition, but do not use both at the same time.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | When the item type in the call is supported. Check the
// corresponding API for the item type you're calling, to see if your call is
// supported. For example, semantic models are supported. |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createItem(ctx context.Context, workspaceID string, createItemRequest CreateItemRequest, options *ItemsClientBeginCreateItemOptions) (*http.Response, error) {
	var err error
	const operationName = "core.ItemsClient.BeginCreateItem"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createItemCreateRequest(ctx, workspaceID, createItemRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createItemCreateRequest creates the CreateItem request.
func (client *ItemsClient) createItemCreateRequest(ctx context.Context, workspaceID string, createItemRequest CreateItemRequest, _ *ItemsClientBeginCreateItemOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createItemRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteItem - This API is supported for a number of item types, find the supported item types and information about their
// definition structure in Item management overview
// [/rest/api/fabric/articles/item-management/item-management-overview].
// PERMISSIONS The caller must have write permissions for the item.
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
// * Generic scope: Item.ReadWrite.All
//
// * Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
// for more information about scopes, see scopes article [/rest/api/fabric/articles/scopes].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | When the item type in the call is supported. Check the
// corresponding API for the item type you're calling, to see if your call is
// supported. For example, semantic models are supported. |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - options - ItemsClientDeleteItemOptions contains the optional parameters for the ItemsClient.DeleteItem method.
func (client *ItemsClient) DeleteItem(ctx context.Context, workspaceID string, itemID string, options *ItemsClientDeleteItemOptions) (ItemsClientDeleteItemResponse, error) {
	var err error
	const operationName = "core.ItemsClient.DeleteItem"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteItemCreateRequest(ctx, workspaceID, itemID, options)
	if err != nil {
		return ItemsClientDeleteItemResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteItemResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return ItemsClientDeleteItemResponse{}, err
	}
	return ItemsClientDeleteItemResponse{}, nil
}

// deleteItemCreateRequest creates the DeleteItem request.
func (client *ItemsClient) deleteItemCreateRequest(ctx context.Context, workspaceID string, itemID string, _ *ItemsClientDeleteItemOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetItem - This API is supported for a number of item types, find the supported item types in Item management overview [/rest/api/fabric/articles/item-management/item-management-overview].
// For retrieving additional type specific properties, refer to the get API reference page of the specific item type.
// PERMISSIONS The caller must have read permissions for the item.
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
// * Generic scope: Item.Read.All or Item.ReadWrite.All
//
// * Specific scope: itemType.Read.All or itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
// for more information about scopes, see: scopes article [/rest/api/fabric/articles/scopes].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - options - ItemsClientGetItemOptions contains the optional parameters for the ItemsClient.GetItem method.
func (client *ItemsClient) GetItem(ctx context.Context, workspaceID string, itemID string, options *ItemsClientGetItemOptions) (ItemsClientGetItemResponse, error) {
	var err error
	const operationName = "core.ItemsClient.GetItem"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getItemCreateRequest(ctx, workspaceID, itemID, options)
	if err != nil {
		return ItemsClientGetItemResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetItemResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return ItemsClientGetItemResponse{}, err
	}
	resp, err := client.getItemHandleResponse(httpResp)
	return resp, err
}

// getItemCreateRequest creates the GetItem request.
func (client *ItemsClient) getItemCreateRequest(ctx context.Context, workspaceID string, itemID string, _ *ItemsClientGetItemOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getItemHandleResponse handles the GetItem response.
func (client *ItemsClient) getItemHandleResponse(resp *http.Response) (ItemsClientGetItemResponse, error) {
	result := ItemsClientGetItemResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Item); err != nil {
		return ItemsClientGetItemResponse{}, err
	}
	return result, nil
}

// BeginGetItemDefinition - This API is supported for a number of item types, find the supported item types and information
// about their definition structure in Item definition overview
// [/rest/api/fabric/articles/item-management/definitions/item-definition-overview]. When you get an item's definition, the
// sensitivity label is not a part of the definition.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the item.
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
// * Generic scope: Item.ReadWrite.All
//
// * Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
// for more information about scopes, see Scopes article [/rest/api/fabric/articles/scopes].
//
// LIMITATIONS This API is blocked for an item with a protected sensitivity label, unless the caller has the usage rights
// to delete the sensitivity label.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | When the item type in the call is supported. Check the
// corresponding API for the item type you're calling, to see if your call is
// supported. For example, semantic models are supported. |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - options - ItemsClientBeginGetItemDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetItemDefinition
//     method.
func (client *ItemsClient) BeginGetItemDefinition(ctx context.Context, workspaceID string, itemID string, options *ItemsClientBeginGetItemDefinitionOptions) (*runtime.Poller[ItemsClientGetItemDefinitionResponse], error) {
	return client.beginGetItemDefinition(ctx, workspaceID, itemID, options)
}

// GetItemDefinition - This API is supported for a number of item types, find the supported item types and information about
// their definition structure in Item definition overview
// [/rest/api/fabric/articles/item-management/definitions/item-definition-overview]. When you get an item's definition, the
// sensitivity label is not a part of the definition.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the item.
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
// * Generic scope: Item.ReadWrite.All
//
// * Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
// for more information about scopes, see Scopes article [/rest/api/fabric/articles/scopes].
//
// LIMITATIONS This API is blocked for an item with a protected sensitivity label, unless the caller has the usage rights
// to delete the sensitivity label.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | When the item type in the call is supported. Check the
// corresponding API for the item type you're calling, to see if your call is
// supported. For example, semantic models are supported. |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getItemDefinition(ctx context.Context, workspaceID string, itemID string, options *ItemsClientBeginGetItemDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "core.ItemsClient.BeginGetItemDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getItemDefinitionCreateRequest(ctx, workspaceID, itemID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getItemDefinitionCreateRequest creates the GetItemDefinition request.
func (client *ItemsClient) getItemDefinitionCreateRequest(ctx context.Context, workspaceID string, itemID string, options *ItemsClientBeginGetItemDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("format", *options.Format)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListItemConnectionsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have read and write permissions for the item.
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
// * Generic scope: Item.ReadWrite.All
//
// * Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
// for more information about scopes, see Scopes article [/rest/api/fabric/articles/scopes].
//
// LIMITATIONS This API is blocked for an item with a protected sensitivity label, unless the caller has the usage rights
// to delete the sensitivity label.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - options - ItemsClientListItemConnectionsOptions contains the optional parameters for the ItemsClient.NewListItemConnectionsPager
//     method.
func (client *ItemsClient) NewListItemConnectionsPager(workspaceID string, itemID string, options *ItemsClientListItemConnectionsOptions) *runtime.Pager[ItemsClientListItemConnectionsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListItemConnectionsResponse]{
		More: func(page ItemsClientListItemConnectionsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListItemConnectionsResponse) (ItemsClientListItemConnectionsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "core.ItemsClient.NewListItemConnectionsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listItemConnectionsCreateRequest(ctx, workspaceID, itemID, options)
			}, nil)
			if err != nil {
				return ItemsClientListItemConnectionsResponse{}, err
			}
			return client.listItemConnectionsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listItemConnectionsCreateRequest creates the ListItemConnections request.
func (client *ItemsClient) listItemConnectionsCreateRequest(ctx context.Context, workspaceID string, itemID string, options *ItemsClientListItemConnectionsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}/connections"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listItemConnectionsHandleResponse handles the ListItemConnections response.
func (client *ItemsClient) listItemConnectionsHandleResponse(resp *http.Response) (ItemsClientListItemConnectionsResponse, error) {
	result := ItemsClientListItemConnectionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ItemConnections); err != nil {
		return ItemsClientListItemConnectionsResponse{}, err
	}
	return result, nil
}

// NewListItemsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have a viewer workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListItemsOptions contains the optional parameters for the ItemsClient.NewListItemsPager method.
func (client *ItemsClient) NewListItemsPager(workspaceID string, options *ItemsClientListItemsOptions) *runtime.Pager[ItemsClientListItemsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListItemsResponse]{
		More: func(page ItemsClientListItemsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListItemsResponse) (ItemsClientListItemsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "core.ItemsClient.NewListItemsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listItemsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListItemsResponse{}, err
			}
			return client.listItemsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listItemsCreateRequest creates the ListItems request.
func (client *ItemsClient) listItemsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListItemsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	if options != nil && options.Recursive != nil {
		reqQP.Set("recursive", strconv.FormatBool(*options.Recursive))
	}
	if options != nil && options.RootFolderID != nil {
		reqQP.Set("rootFolderId", *options.RootFolderID)
	}
	if options != nil && options.Type != nil {
		reqQP.Set("type", *options.Type)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listItemsHandleResponse handles the ListItems response.
func (client *ItemsClient) listItemsHandleResponse(resp *http.Response) (ItemsClientListItemsResponse, error) {
	result := ItemsClientListItemsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Items); err != nil {
		return ItemsClientListItemsResponse{}, err
	}
	return result, nil
}

// MoveItem - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes only.
// It may change based on feedback and is not recommended for production use.
// PERMISSIONS The caller must have contributor or higher role on the workspace.
// REQUIRED DELEGATED SCOPES Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - moveItemRequest - Move item request payload.
//   - options - ItemsClientMoveItemOptions contains the optional parameters for the ItemsClient.MoveItem method.
func (client *ItemsClient) MoveItem(ctx context.Context, workspaceID string, itemID string, moveItemRequest MoveItemRequest, options *ItemsClientMoveItemOptions) (ItemsClientMoveItemResponse, error) {
	var err error
	const operationName = "core.ItemsClient.MoveItem"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.moveItemCreateRequest(ctx, workspaceID, itemID, moveItemRequest, options)
	if err != nil {
		return ItemsClientMoveItemResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientMoveItemResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return ItemsClientMoveItemResponse{}, err
	}
	resp, err := client.moveItemHandleResponse(httpResp)
	return resp, err
}

// moveItemCreateRequest creates the MoveItem request.
func (client *ItemsClient) moveItemCreateRequest(ctx context.Context, workspaceID string, itemID string, moveItemRequest MoveItemRequest, _ *ItemsClientMoveItemOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}/move"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, moveItemRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// moveItemHandleResponse handles the MoveItem response.
func (client *ItemsClient) moveItemHandleResponse(resp *http.Response) (ItemsClientMoveItemResponse, error) {
	result := ItemsClientMoveItemResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MovedItems); err != nil {
		return ItemsClientMoveItemResponse{}, err
	}
	return result, nil
}

// UpdateItem - This API is supported for a number of item types, find the supported item types and information about their
// definition structure in Item management overview
// [/rest/api/fabric/articles/item-management/item-management-overview].
// PERMISSIONS The caller must have read and write permissions for the item.
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
// * Generic scope: Item.ReadWrite.All
//
// * Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
// for more information about scopes, see: scopes article [/rest/api/fabric/articles/scopes].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | When the item type in the call is supported. Check the
// corresponding API for the item type you're calling, to see if your call is
// supported. For example, semantic models are supported. |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - updateItemRequest - Update item request payload.
//   - options - ItemsClientUpdateItemOptions contains the optional parameters for the ItemsClient.UpdateItem method.
func (client *ItemsClient) UpdateItem(ctx context.Context, workspaceID string, itemID string, updateItemRequest UpdateItemRequest, options *ItemsClientUpdateItemOptions) (ItemsClientUpdateItemResponse, error) {
	var err error
	const operationName = "core.ItemsClient.UpdateItem"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateItemCreateRequest(ctx, workspaceID, itemID, updateItemRequest, options)
	if err != nil {
		return ItemsClientUpdateItemResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateItemResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return ItemsClientUpdateItemResponse{}, err
	}
	resp, err := client.updateItemHandleResponse(httpResp)
	return resp, err
}

// updateItemCreateRequest creates the UpdateItem request.
func (client *ItemsClient) updateItemCreateRequest(ctx context.Context, workspaceID string, itemID string, updateItemRequest UpdateItemRequest, _ *ItemsClientUpdateItemOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateItemRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateItemHandleResponse handles the UpdateItem response.
func (client *ItemsClient) updateItemHandleResponse(resp *http.Response) (ItemsClientUpdateItemResponse, error) {
	result := ItemsClientUpdateItemResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Item); err != nil {
		return ItemsClientUpdateItemResponse{}, err
	}
	return result, nil
}

// BeginUpdateItemDefinition - This API is supported for a number of item types, find the supported item types and information
// about their definition structure in Item definition overview
// [/rest/api/fabric/articles/item-management/definitions/item-definition-overview]. Updating the item's definition, does
// not affect its sensitivity label.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the item.
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
// * Generic scope: Item.ReadWrite.All
//
// * Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
// for more information about scopes, see scopes article [/rest/api/fabric/articles/scopes].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | When the item type in the call is supported. Check the
// corresponding API for the item type you're calling, to see if your call is
// supported. For example, semantic models are supported. |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - updateItemDefinitionRequest - Update item definition request payload.
//   - options - ItemsClientBeginUpdateItemDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateItemDefinition
//     method.
func (client *ItemsClient) BeginUpdateItemDefinition(ctx context.Context, workspaceID string, itemID string, updateItemDefinitionRequest UpdateItemDefinitionRequest, options *ItemsClientBeginUpdateItemDefinitionOptions) (*runtime.Poller[ItemsClientUpdateItemDefinitionResponse], error) {
	return client.beginUpdateItemDefinition(ctx, workspaceID, itemID, updateItemDefinitionRequest, options)
}

// UpdateItemDefinition - This API is supported for a number of item types, find the supported item types and information
// about their definition structure in Item definition overview
// [/rest/api/fabric/articles/item-management/definitions/item-definition-overview]. Updating the item's definition, does
// not affect its sensitivity label.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the item.
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
// * Generic scope: Item.ReadWrite.All
//
// * Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
// for more information about scopes, see scopes article [/rest/api/fabric/articles/scopes].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | When the item type in the call is supported. Check the
// corresponding API for the item type you're calling, to see if your call is
// supported. For example, semantic models are supported. |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateItemDefinition(ctx context.Context, workspaceID string, itemID string, updateItemDefinitionRequest UpdateItemDefinitionRequest, options *ItemsClientBeginUpdateItemDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "core.ItemsClient.BeginUpdateItemDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateItemDefinitionCreateRequest(ctx, workspaceID, itemID, updateItemDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateItemDefinitionCreateRequest creates the UpdateItemDefinition request.
func (client *ItemsClient) updateItemDefinitionCreateRequest(ctx context.Context, workspaceID string, itemID string, updateItemDefinitionRequest UpdateItemDefinitionRequest, options *ItemsClientBeginUpdateItemDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateItemDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateItem - returns ItemsClientCreateItemResponse in sync mode.
// This API is supported for a number of item types, find the supported item types in Item management overview [/rest/api/fabric/articles/item-management/item-management-overview]. You can use Get item
// definition API [/rest/api/fabric/core/items/get-item-definition] to get an item definition.
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
//
//   - Generic scope: Item.ReadWrite.All
//
//   - Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
//     for more information about scopes, see scopes article [/rest/api/fabric/articles/scopes].
//
// LIMITATIONS
//
//   - To create a non-PowerBI Fabric item the workspace must be on a supported Fabric capacity. For more information see Microsoft Fabric license types
//     [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//   - To create a PowerBI item, the user must have the appropriate license. For more information see Microsoft Fabric license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//   - When creating an item, use either creationPayload or definition, but do not use both at the same time.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | When the item type in the call is supported. Check the corresponding API for the item type you're calling, to see if your call is
// supported. For example, semantic models are supported. |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createItemRequest - Create item request payload.
//   - options - ItemsClientBeginCreateItemOptions contains the optional parameters for the ItemsClient.BeginCreateItem method.
func (client *ItemsClient) CreateItem(ctx context.Context, workspaceID string, createItemRequest CreateItemRequest, options *ItemsClientBeginCreateItemOptions) (ItemsClientCreateItemResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateItem(ctx, workspaceID, createItemRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateItemResponse{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateItemResponse{}, err
	}
	return result, err
}

// beginCreateItem creates the createItem request.
func (client *ItemsClient) beginCreateItem(ctx context.Context, workspaceID string, createItemRequest CreateItemRequest, options *ItemsClientBeginCreateItemOptions) (*runtime.Poller[ItemsClientCreateItemResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createItem(ctx, workspaceID, createItemRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateItemResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateItemResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateItemResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateItemResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetItemDefinition - returns ItemsClientGetItemDefinitionResponse in sync mode.
// This API is supported for a number of item types, find the supported item types and information about their definition structure in Item definition overview
// [/rest/api/fabric/articles/item-management/definitions/item-definition-overview]. When you get an item's definition, the sensitivity label is not a part of the definition.
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS The caller must have read and write permissions for the item.
//
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
//
//   - Generic scope: Item.ReadWrite.All
//
//   - Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
//     for more information about scopes, see Scopes article [/rest/api/fabric/articles/scopes].
//
// LIMITATIONS This API is blocked for an item with a protected sensitivity label, unless the caller has the usage rights to delete the sensitivity label.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | When the item type in the call is supported. Check the corresponding API for the item type you're calling, to see if your call is
// supported. For example, semantic models are supported. |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - options - ItemsClientBeginGetItemDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetItemDefinition method.
func (client *ItemsClient) GetItemDefinition(ctx context.Context, workspaceID string, itemID string, options *ItemsClientBeginGetItemDefinitionOptions) (ItemsClientGetItemDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetItemDefinition(ctx, workspaceID, itemID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetItemDefinitionResponse{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetItemDefinitionResponse{}, err
	}
	return result, err
}

// beginGetItemDefinition creates the getItemDefinition request.
func (client *ItemsClient) beginGetItemDefinition(ctx context.Context, workspaceID string, itemID string, options *ItemsClientBeginGetItemDefinitionOptions) (*runtime.Poller[ItemsClientGetItemDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getItemDefinition(ctx, workspaceID, itemID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetItemDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetItemDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetItemDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetItemDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateItemDefinition - returns ItemsClientUpdateItemDefinitionResponse in sync mode.
// This API is supported for a number of item types, find the supported item types and information about their definition structure in Item definition overview
// [/rest/api/fabric/articles/item-management/definitions/item-definition-overview]. Updating the item's definition, does not affect its sensitivity label.
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS The caller must have read and write permissions for the item.
//
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
//
//   - Generic scope: Item.ReadWrite.All
//
//   - Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
//     for more information about scopes, see scopes article [/rest/api/fabric/articles/scopes].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | When the item type in the call is supported. Check the corresponding API for the item type you're calling, to see if your call is
// supported. For example, semantic models are supported. |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - updateItemDefinitionRequest - Update item definition request payload.
//   - options - ItemsClientBeginUpdateItemDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateItemDefinition method.
func (client *ItemsClient) UpdateItemDefinition(ctx context.Context, workspaceID string, itemID string, updateItemDefinitionRequest UpdateItemDefinitionRequest, options *ItemsClientBeginUpdateItemDefinitionOptions) (ItemsClientUpdateItemDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateItemDefinition(ctx, workspaceID, itemID, updateItemDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateItemDefinitionResponse{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateItemDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateItemDefinition creates the updateItemDefinition request.
func (client *ItemsClient) beginUpdateItemDefinition(ctx context.Context, workspaceID string, itemID string, updateItemDefinitionRequest UpdateItemDefinitionRequest, options *ItemsClientBeginUpdateItemDefinitionOptions) (*runtime.Poller[ItemsClientUpdateItemDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateItemDefinition(ctx, workspaceID, itemID, updateItemDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateItemDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateItemDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateItemDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateItemDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListItemConnections - returns array of ItemConnection from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have read and write permissions for the item.
//
// REQUIRED DELEGATED SCOPES For item APIs use these scope types:
//
//   - Generic scope: Item.ReadWrite.All
//
//   - Specific scope: itemType.ReadWrite.All (for example: Notebook.ReadWrite.All)
//
//     for more information about scopes, see Scopes article [/rest/api/fabric/articles/scopes].
//
// LIMITATIONS This API is blocked for an item with a protected sensitivity label, unless the caller has the usage rights to delete the sensitivity label.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - options - ItemsClientListItemConnectionsOptions contains the optional parameters for the ItemsClient.NewListItemConnectionsPager method.
func (client *ItemsClient) ListItemConnections(ctx context.Context, workspaceID string, itemID string, options *ItemsClientListItemConnectionsOptions) ([]ItemConnection, error) {
	pager := client.NewListItemConnectionsPager(workspaceID, itemID, options)
	mapper := func(resp ItemsClientListItemConnectionsResponse) []ItemConnection {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []ItemConnection{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return []ItemConnection{}, err
	}
	return list, nil
}

// ListItems - returns array of Item from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have a viewer workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListItemsOptions contains the optional parameters for the ItemsClient.NewListItemsPager method.
func (client *ItemsClient) ListItems(ctx context.Context, workspaceID string, options *ItemsClientListItemsOptions) ([]Item, error) {
	pager := client.NewListItemsPager(workspaceID, options)
	mapper := func(resp ItemsClientListItemsResponse) []Item {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Item{}, NewResponseError(azcoreRespError.RawResponse)
		}
		return []Item{}, err
	}
	return list, nil
}
