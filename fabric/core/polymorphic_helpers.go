// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import "encoding/json"

func unmarshalConnectionDetailsParameterClassification(rawMsg json.RawMessage) (ConnectionDetailsParameterClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ConnectionDetailsParameterClassification
	switch m["dataType"] {
	case string(DataTypeBoolean):
		b = &ConnectionDetailsBooleanParameter{}
	case string(DataTypeDate):
		b = &ConnectionDetailsDateParameter{}
	case string(DataTypeDateTime):
		b = &ConnectionDetailsDateTimeParameter{}
	case string(DataTypeDateTimeZone):
		b = &ConnectionDetailsDateTimeZoneParameter{}
	case string(DataTypeDuration):
		b = &ConnectionDetailsDurationParameter{}
	case string(DataTypeNumber):
		b = &ConnectionDetailsNumberParameter{}
	case string(DataTypeText):
		b = &ConnectionDetailsTextParameter{}
	case string(DataTypeTime):
		b = &ConnectionDetailsTimeParameter{}
	default:
		b = &ConnectionDetailsParameter{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalConnectionDetailsParameterClassificationArray(rawMsg json.RawMessage) ([]ConnectionDetailsParameterClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]ConnectionDetailsParameterClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalConnectionDetailsParameterClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalCredentialsClassification(rawMsg json.RawMessage) (CredentialsClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b CredentialsClassification
	switch m["credentialType"] {
	case string(CredentialTypeAnonymous):
		b = &AnonymousCredentials{}
	case string(CredentialTypeBasic):
		b = &BasicCredentials{}
	case string(CredentialTypeKey):
		b = &KeyCredentials{}
	case string(CredentialTypeServicePrincipal):
		b = &ServicePrincipalCredentials{}
	case string(CredentialTypeSharedAccessSignature):
		b = &SharedAccessSignatureCredentials{}
	case string(CredentialTypeWindows):
		b = &WindowsCredentials{}
	case string(CredentialTypeWindowsWithoutImpersonation):
		b = &WindowsWithoutImpersonationCredentials{}
	case string(CredentialTypeWorkspaceIdentity):
		b = &WorkspaceIdentityCredentials{}
	default:
		b = &Credentials{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalExternalDataShareAcceptRequestPayloadClassification(rawMsg json.RawMessage) (ExternalDataShareAcceptRequestPayloadClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ExternalDataShareAcceptRequestPayloadClassification
	switch m["payloadType"] {
	case string(ExternalDataShareAcceptRequestPayloadTypeShortcutCreation):
		b = &ShortcutCreationPayload{}
	default:
		b = &ExternalDataShareAcceptRequestPayload{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalGatewayClassification(rawMsg json.RawMessage) (GatewayClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b GatewayClassification
	switch m["type"] {
	case string(GatewayTypeOnPremises):
		b = &OnPremisesGateway{}
	case string(GatewayTypeOnPremisesPersonal):
		b = &OnPremisesGatewayPersonal{}
	case string(GatewayTypeVirtualNetwork):
		b = &VirtualNetworkGateway{}
	default:
		b = &Gateway{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalGatewayClassificationArray(rawMsg json.RawMessage) ([]GatewayClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]GatewayClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalGatewayClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalGitCredentialsClassification(rawMsg json.RawMessage) (GitCredentialsClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b GitCredentialsClassification
	switch m["source"] {
	case string(GitCredentialsSourceAutomatic):
		b = &AutomaticGitCredentials{}
	case string(GitCredentialsSourceConfiguredConnection):
		b = &ConfiguredConnectionGitCredentials{}
	default:
		b = &GitCredentials{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalGitCredentialsConfigurationResponseClassification(rawMsg json.RawMessage) (GitCredentialsConfigurationResponseClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b GitCredentialsConfigurationResponseClassification
	switch m["source"] {
	case string(GitCredentialsSourceAutomatic):
		b = &AutomaticGitCredentialsResponse{}
	case string(GitCredentialsSourceConfiguredConnection):
		b = &ConfiguredConnectionGitCredentialsResponse{}
	case string(GitCredentialsSourceNone):
		b = &NoneGitCredentialsResponse{}
	default:
		b = &GitCredentialsConfigurationResponse{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalGitProviderDetailsClassification(rawMsg json.RawMessage) (GitProviderDetailsClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b GitProviderDetailsClassification
	switch m["gitProviderType"] {
	case string(GitProviderTypeAzureDevOps):
		b = &AzureDevOpsDetails{}
	case string(GitProviderTypeGitHub):
		b = &GitHubDetails{}
	default:
		b = &GitProviderDetails{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalScheduleConfigClassification(rawMsg json.RawMessage) (ScheduleConfigClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ScheduleConfigClassification
	switch m["type"] {
	case string(ScheduleTypeCron):
		b = &CronScheduleConfig{}
	case string(ScheduleTypeDaily):
		b = &DailyScheduleConfig{}
	case string(ScheduleTypeWeekly):
		b = &WeeklyScheduleConfig{}
	default:
		b = &ScheduleConfig{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}
