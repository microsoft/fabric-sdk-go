// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import "encoding/json"

func unmarshalGitCredentialsClassification(rawMsg json.RawMessage) (GitCredentialsClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b GitCredentialsClassification
	switch m["source"] {
	case string(GitCredentialsSourceAutomatic):
		b = &AutomaticGitCredentials{}
	case string(GitCredentialsSourceConfiguredConnection):
		b = &ConfiguredConnectionGitCredentials{}
	default:
		b = &GitCredentials{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalGitCredentialsConfigurationResponseClassification(rawMsg json.RawMessage) (GitCredentialsConfigurationResponseClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b GitCredentialsConfigurationResponseClassification
	switch m["source"] {
	case string(GitCredentialsSourceAutomatic):
		b = &AutomaticGitCredentialsResponse{}
	case string(GitCredentialsSourceConfiguredConnection):
		b = &ConfiguredConnectionGitCredentialsResponse{}
	case string(GitCredentialsSourceNone):
		b = &NoneGitCredentialsResponse{}
	default:
		b = &GitCredentialsConfigurationResponse{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalGitProviderDetailsClassification(rawMsg json.RawMessage) (GitProviderDetailsClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b GitProviderDetailsClassification
	switch m["gitProviderType"] {
	case string(GitProviderTypeAzureDevOps):
		b = &AzureDevOpsDetails{}
	case string(GitProviderTypeGitHub):
		b = &GitHubDetails{}
	default:
		b = &GitProviderDetails{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalScheduleConfigClassification(rawMsg json.RawMessage) (ScheduleConfigClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ScheduleConfigClassification
	switch m["type"] {
	case string(ScheduleTypeCron):
		b = &CronScheduleConfig{}
	case string(ScheduleTypeDaily):
		b = &DailyScheduleConfig{}
	case string(ScheduleTypeWeekly):
		b = &WeeklyScheduleConfig{}
	default:
		b = &ScheduleConfig{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}
