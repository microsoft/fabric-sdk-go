// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package core

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// OneLakeDataAccessSecurityClient contains the methods for the OneLakeDataAccessSecurity group.
// Don't use this type directly, use a constructor function instead.
type OneLakeDataAccessSecurityClient struct {
	internal *azcore.Client
	endpoint string
}

// CreateOrUpdateDataAccessRoles - REQUIRED DELEGATED SCOPES OneLake.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The ID of the Fabric item to put the roles.
//   - createOrUpdateDataAccessRolesRequest - Contains definition of roles used to manage data access security and ensure that
//     only authorized users can view, edit, or delete certain data. Calling this API updates role definitions and creates,
//     updates, or deletes roles to match the provided payload.
//   - options - OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesOptions contains the optional parameters for the
//     OneLakeDataAccessSecurityClient.CreateOrUpdateDataAccessRoles method.
func (client *OneLakeDataAccessSecurityClient) CreateOrUpdateDataAccessRoles(ctx context.Context, workspaceID string, itemID string, createOrUpdateDataAccessRolesRequest CreateOrUpdateDataAccessRolesRequest, options *OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesOptions) (OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse, error) {
	var err error
	const operationName = "core.OneLakeDataAccessSecurityClient.CreateOrUpdateDataAccessRoles"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateDataAccessRolesCreateRequest(ctx, workspaceID, itemID, createOrUpdateDataAccessRolesRequest, options)
	if err != nil {
		return OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse{}, err
	}
	resp, err := client.createOrUpdateDataAccessRolesHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateDataAccessRolesCreateRequest creates the CreateOrUpdateDataAccessRoles request.
func (client *OneLakeDataAccessSecurityClient) createOrUpdateDataAccessRolesCreateRequest(ctx context.Context, workspaceID string, itemID string, createOrUpdateDataAccessRolesRequest CreateOrUpdateDataAccessRolesRequest, options *OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}/dataAccessRoles"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.DryRun != nil {
		reqQP.Set("dryRun", strconv.FormatBool(*options.DryRun))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header["If-None-Match"] = []string{*options.IfNoneMatch}
	}
	if err := runtime.MarshalAsJSON(req, createOrUpdateDataAccessRolesRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateDataAccessRolesHandleResponse handles the CreateOrUpdateDataAccessRoles response.
func (client *OneLakeDataAccessSecurityClient) createOrUpdateDataAccessRolesHandleResponse(resp *http.Response) (OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse, error) {
	result := OneLakeDataAccessSecurityClientCreateOrUpdateDataAccessRolesResponse{}
	if val := resp.Header.Get("Etag"); val != "" {
		result.Etag = &val
	}
	return result, nil
}

// ListDataAccessRoles - REQUIRED DELEGATED SCOPES OneLake.Read.All or OneLake.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The ID of the Fabric item to put the roles.
//   - options - OneLakeDataAccessSecurityClientListDataAccessRolesOptions contains the optional parameters for the OneLakeDataAccessSecurityClient.ListDataAccessRoles
//     method.
func (client *OneLakeDataAccessSecurityClient) ListDataAccessRoles(ctx context.Context, workspaceID string, itemID string, options *OneLakeDataAccessSecurityClientListDataAccessRolesOptions) (OneLakeDataAccessSecurityClientListDataAccessRolesResponse, error) {
	var err error
	const operationName = "core.OneLakeDataAccessSecurityClient.ListDataAccessRoles"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listDataAccessRolesCreateRequest(ctx, workspaceID, itemID, options)
	if err != nil {
		return OneLakeDataAccessSecurityClientListDataAccessRolesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OneLakeDataAccessSecurityClientListDataAccessRolesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = NewResponseError(httpResp)
		return OneLakeDataAccessSecurityClientListDataAccessRolesResponse{}, err
	}
	resp, err := client.listDataAccessRolesHandleResponse(httpResp)
	return resp, err
}

// listDataAccessRolesCreateRequest creates the ListDataAccessRoles request.
func (client *OneLakeDataAccessSecurityClient) listDataAccessRolesCreateRequest(ctx context.Context, workspaceID string, itemID string, options *OneLakeDataAccessSecurityClientListDataAccessRolesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/items/{itemId}/dataAccessRoles"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listDataAccessRolesHandleResponse handles the ListDataAccessRoles response.
func (client *OneLakeDataAccessSecurityClient) listDataAccessRolesHandleResponse(resp *http.Response) (OneLakeDataAccessSecurityClientListDataAccessRolesResponse, error) {
	result := OneLakeDataAccessSecurityClientListDataAccessRolesResponse{}
	if val := resp.Header.Get("Etag"); val != "" {
		result.Etag = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataAccessRoles); err != nil {
		return OneLakeDataAccessSecurityClientListDataAccessRolesResponse{}, err
	}
	return result, nil
}

// Custom code starts below
