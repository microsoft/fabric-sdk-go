// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package mirroredazuredatabrickscatalog

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// RefreshClient contains the methods for the Refresh group.
// Don't use this type directly, use a constructor function instead.
type RefreshClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginRefreshCatalogMetadata - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredAzureDatabricksCatalogID - The mirroredAzureDatabricksCatalog ID.
//   - options - RefreshClientBeginRefreshCatalogMetadataOptions contains the optional parameters for the RefreshClient.BeginRefreshCatalogMetadata
//     method.
func (client *RefreshClient) BeginRefreshCatalogMetadata(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *RefreshClientBeginRefreshCatalogMetadataOptions) (*runtime.Poller[RefreshClientRefreshCatalogMetadataResponse], error) {
	return client.beginRefreshCatalogMetadata(ctx, workspaceID, mirroredAzureDatabricksCatalogID, options)
}

// RefreshCatalogMetadata - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *RefreshClient) refreshCatalogMetadata(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *RefreshClientBeginRefreshCatalogMetadataOptions) (*http.Response, error) {
	var err error
	const operationName = "mirroredazuredatabrickscatalog.RefreshClient.BeginRefreshCatalogMetadata"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.refreshCatalogMetadataCreateRequest(ctx, workspaceID, mirroredAzureDatabricksCatalogID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// refreshCatalogMetadataCreateRequest creates the RefreshCatalogMetadata request.
func (client *RefreshClient) refreshCatalogMetadataCreateRequest(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, _ *RefreshClientBeginRefreshCatalogMetadataOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredAzureDatabricksCatalogs/{mirroredAzureDatabricksCatalogId}/refreshCatalogMetadata"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredAzureDatabricksCatalogID == "" {
		return nil, errors.New("parameter mirroredAzureDatabricksCatalogID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredAzureDatabricksCatalogId}", url.PathEscape(mirroredAzureDatabricksCatalogID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Custom code starts below

// RefreshCatalogMetadata - returns RefreshClientRefreshCatalogMetadataResponse in sync mode.
// >  [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS The API caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredAzureDatabricksCatalogID - The mirroredAzureDatabricksCatalog ID.
//   - options - RefreshClientBeginRefreshCatalogMetadataOptions contains the optional parameters for the RefreshClient.BeginRefreshCatalogMetadata method.
func (client *RefreshClient) RefreshCatalogMetadata(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *RefreshClientBeginRefreshCatalogMetadataOptions) (RefreshClientRefreshCatalogMetadataResponse, error) {
	result, err := iruntime.NewLRO(client.BeginRefreshCatalogMetadata(ctx, workspaceID, mirroredAzureDatabricksCatalogID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return RefreshClientRefreshCatalogMetadataResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return RefreshClientRefreshCatalogMetadataResponse{}, err
	}
	return result, err
}

// beginRefreshCatalogMetadata creates the refreshCatalogMetadata request.
func (client *RefreshClient) beginRefreshCatalogMetadata(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *RefreshClientBeginRefreshCatalogMetadataOptions) (*runtime.Poller[RefreshClientRefreshCatalogMetadataResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.refreshCatalogMetadata(ctx, workspaceID, mirroredAzureDatabricksCatalogID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[RefreshClientRefreshCatalogMetadataResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[RefreshClientRefreshCatalogMetadataResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[RefreshClientRefreshCatalogMetadataResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[RefreshClientRefreshCatalogMetadataResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}
