// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package mirroredazuredatabrickscatalog

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateMirroredAzureDatabricksCatalog - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn
// more [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have a contributor workspace role.
// REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createMirroredAzureDatabricksCatalogRequest - Create item request payload.
//   - options - ItemsClientBeginCreateMirroredAzureDatabricksCatalogOptions contains the optional parameters for the ItemsClient.BeginCreateMirroredAzureDatabricksCatalog
//     method.
func (client *ItemsClient) BeginCreateMirroredAzureDatabricksCatalog(ctx context.Context, workspaceID string, createMirroredAzureDatabricksCatalogRequest CreateMirroredAzureDatabricksCatalogRequest, options *ItemsClientBeginCreateMirroredAzureDatabricksCatalogOptions) (*runtime.Poller[ItemsClientCreateMirroredAzureDatabricksCatalogResponse], error) {
	return client.beginCreateMirroredAzureDatabricksCatalog(ctx, workspaceID, createMirroredAzureDatabricksCatalogRequest, options)
}

// CreateMirroredAzureDatabricksCatalog - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn
// more [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have a contributor workspace role.
// REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createMirroredAzureDatabricksCatalog(ctx context.Context, workspaceID string, createMirroredAzureDatabricksCatalogRequest CreateMirroredAzureDatabricksCatalogRequest, options *ItemsClientBeginCreateMirroredAzureDatabricksCatalogOptions) (*http.Response, error) {
	var err error
	const operationName = "mirroredazuredatabrickscatalog.ItemsClient.BeginCreateMirroredAzureDatabricksCatalog"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createMirroredAzureDatabricksCatalogCreateRequest(ctx, workspaceID, createMirroredAzureDatabricksCatalogRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createMirroredAzureDatabricksCatalogCreateRequest creates the CreateMirroredAzureDatabricksCatalog request.
func (client *ItemsClient) createMirroredAzureDatabricksCatalogCreateRequest(ctx context.Context, workspaceID string, createMirroredAzureDatabricksCatalogRequest CreateMirroredAzureDatabricksCatalogRequest, _ *ItemsClientBeginCreateMirroredAzureDatabricksCatalogOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredAzureDatabricksCatalogs"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createMirroredAzureDatabricksCatalogRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteMirroredAzureDatabricksCatalog - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn
// more [/fabric/fundamentals/preview]).
// PERMISSIONS The caller must have write permissions for the mirrored azure databricks catalog.
// REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredAzureDatabricksCatalogID - The mirroredAzureDatabricksCatalog ID.
//   - options - ItemsClientDeleteMirroredAzureDatabricksCatalogOptions contains the optional parameters for the ItemsClient.DeleteMirroredAzureDatabricksCatalog
//     method.
func (client *ItemsClient) DeleteMirroredAzureDatabricksCatalog(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *ItemsClientDeleteMirroredAzureDatabricksCatalogOptions) (ItemsClientDeleteMirroredAzureDatabricksCatalogResponse, error) {
	var err error
	const operationName = "mirroredazuredatabrickscatalog.ItemsClient.DeleteMirroredAzureDatabricksCatalog"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteMirroredAzureDatabricksCatalogCreateRequest(ctx, workspaceID, mirroredAzureDatabricksCatalogID, options)
	if err != nil {
		return ItemsClientDeleteMirroredAzureDatabricksCatalogResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteMirroredAzureDatabricksCatalogResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteMirroredAzureDatabricksCatalogResponse{}, err
	}
	return ItemsClientDeleteMirroredAzureDatabricksCatalogResponse{}, nil
}

// deleteMirroredAzureDatabricksCatalogCreateRequest creates the DeleteMirroredAzureDatabricksCatalog request.
func (client *ItemsClient) deleteMirroredAzureDatabricksCatalogCreateRequest(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, _ *ItemsClientDeleteMirroredAzureDatabricksCatalogOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredAzureDatabricksCatalogs/{mirroredAzureDatabricksCatalogId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredAzureDatabricksCatalogID == "" {
		return nil, errors.New("parameter mirroredAzureDatabricksCatalogID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredAzureDatabricksCatalogId}", url.PathEscape(mirroredAzureDatabricksCatalogID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetMirroredAzureDatabricksCatalog - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more
// [/fabric/fundamentals/preview]).
// PERMISSIONS The caller must have read permissions for the mirrored azure databricks catalog.
// REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.Read.All or MirroredAzureDatabricksCatalog.ReadWrite.All or Item.Read.All
// or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredAzureDatabricksCatalogID - The mirroredAzureDatabricksCatalog ID.
//   - options - ItemsClientGetMirroredAzureDatabricksCatalogOptions contains the optional parameters for the ItemsClient.GetMirroredAzureDatabricksCatalog
//     method.
func (client *ItemsClient) GetMirroredAzureDatabricksCatalog(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *ItemsClientGetMirroredAzureDatabricksCatalogOptions) (ItemsClientGetMirroredAzureDatabricksCatalogResponse, error) {
	var err error
	const operationName = "mirroredazuredatabrickscatalog.ItemsClient.GetMirroredAzureDatabricksCatalog"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getMirroredAzureDatabricksCatalogCreateRequest(ctx, workspaceID, mirroredAzureDatabricksCatalogID, options)
	if err != nil {
		return ItemsClientGetMirroredAzureDatabricksCatalogResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetMirroredAzureDatabricksCatalogResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetMirroredAzureDatabricksCatalogResponse{}, err
	}
	resp, err := client.getMirroredAzureDatabricksCatalogHandleResponse(httpResp)
	return resp, err
}

// getMirroredAzureDatabricksCatalogCreateRequest creates the GetMirroredAzureDatabricksCatalog request.
func (client *ItemsClient) getMirroredAzureDatabricksCatalogCreateRequest(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, _ *ItemsClientGetMirroredAzureDatabricksCatalogOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredAzureDatabricksCatalogs/{mirroredAzureDatabricksCatalogId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredAzureDatabricksCatalogID == "" {
		return nil, errors.New("parameter mirroredAzureDatabricksCatalogID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredAzureDatabricksCatalogId}", url.PathEscape(mirroredAzureDatabricksCatalogID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMirroredAzureDatabricksCatalogHandleResponse handles the GetMirroredAzureDatabricksCatalog response.
func (client *ItemsClient) getMirroredAzureDatabricksCatalogHandleResponse(resp *http.Response) (ItemsClientGetMirroredAzureDatabricksCatalogResponse, error) {
	result := ItemsClientGetMirroredAzureDatabricksCatalogResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MirroredAzureDatabricksCatalog); err != nil {
		return ItemsClientGetMirroredAzureDatabricksCatalogResponse{}, err
	}
	return result, nil
}

// BeginGetMirroredAzureDatabricksCatalogDefinition - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview
// (learn more [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the mirrored azure databricks catalog.
// REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredAzureDatabricksCatalogID - The mirroredAzureDatabricksCatalog ID.
//   - options - ItemsClientBeginGetMirroredAzureDatabricksCatalogDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetMirroredAzureDatabricksCatalogDefinition
//     method.
func (client *ItemsClient) BeginGetMirroredAzureDatabricksCatalogDefinition(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *ItemsClientBeginGetMirroredAzureDatabricksCatalogDefinitionOptions) (*runtime.Poller[ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse], error) {
	return client.beginGetMirroredAzureDatabricksCatalogDefinition(ctx, workspaceID, mirroredAzureDatabricksCatalogID, options)
}

// GetMirroredAzureDatabricksCatalogDefinition - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview
// (learn more [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the mirrored azure databricks catalog.
// REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getMirroredAzureDatabricksCatalogDefinition(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *ItemsClientBeginGetMirroredAzureDatabricksCatalogDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "mirroredazuredatabrickscatalog.ItemsClient.BeginGetMirroredAzureDatabricksCatalogDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getMirroredAzureDatabricksCatalogDefinitionCreateRequest(ctx, workspaceID, mirroredAzureDatabricksCatalogID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getMirroredAzureDatabricksCatalogDefinitionCreateRequest creates the GetMirroredAzureDatabricksCatalogDefinition request.
func (client *ItemsClient) getMirroredAzureDatabricksCatalogDefinitionCreateRequest(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, _ *ItemsClientBeginGetMirroredAzureDatabricksCatalogDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredAzureDatabricksCatalogs/{mirroredAzureDatabricksCatalogId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredAzureDatabricksCatalogID == "" {
		return nil, errors.New("parameter mirroredAzureDatabricksCatalogID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredAzureDatabricksCatalogId}", url.PathEscape(mirroredAzureDatabricksCatalogID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListMirroredAzureDatabricksCatalogsPager - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview
// (learn more [/fabric/fundamentals/preview]).
// This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have a viewer workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListMirroredAzureDatabricksCatalogsOptions contains the optional parameters for the ItemsClient.NewListMirroredAzureDatabricksCatalogsPager
//     method.
func (client *ItemsClient) NewListMirroredAzureDatabricksCatalogsPager(workspaceID string, options *ItemsClientListMirroredAzureDatabricksCatalogsOptions) *runtime.Pager[ItemsClientListMirroredAzureDatabricksCatalogsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListMirroredAzureDatabricksCatalogsResponse]{
		More: func(page ItemsClientListMirroredAzureDatabricksCatalogsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListMirroredAzureDatabricksCatalogsResponse) (ItemsClientListMirroredAzureDatabricksCatalogsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "mirroredazuredatabrickscatalog.ItemsClient.NewListMirroredAzureDatabricksCatalogsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listMirroredAzureDatabricksCatalogsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListMirroredAzureDatabricksCatalogsResponse{}, err
			}
			return client.listMirroredAzureDatabricksCatalogsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listMirroredAzureDatabricksCatalogsCreateRequest creates the ListMirroredAzureDatabricksCatalogs request.
func (client *ItemsClient) listMirroredAzureDatabricksCatalogsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListMirroredAzureDatabricksCatalogsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredAzureDatabricksCatalogs"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listMirroredAzureDatabricksCatalogsHandleResponse handles the ListMirroredAzureDatabricksCatalogs response.
func (client *ItemsClient) listMirroredAzureDatabricksCatalogsHandleResponse(resp *http.Response) (ItemsClientListMirroredAzureDatabricksCatalogsResponse, error) {
	result := ItemsClientListMirroredAzureDatabricksCatalogsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MirroredAzureDatabricksCatalogs); err != nil {
		return ItemsClientListMirroredAzureDatabricksCatalogsResponse{}, err
	}
	return result, nil
}

// UpdateMirroredAzureDatabricksCatalog - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn
// more [/fabric/fundamentals/preview]).
// PERMISSIONS The caller must have read and write permissions for the mirrored azure databricks catalog.
// REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
// [!NOTE]
// > Item.Execute.All is required if you are updating AutoSync property.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredAzureDatabricksCatalogID - The mirroredAzureDatabricksCatalog ID.
//   - updateMirroredAzureDatabricksCatalogRequest - Update mirroredAzureDatabricksCatalog request payload.
//   - options - ItemsClientUpdateMirroredAzureDatabricksCatalogOptions contains the optional parameters for the ItemsClient.UpdateMirroredAzureDatabricksCatalog
//     method.
func (client *ItemsClient) UpdateMirroredAzureDatabricksCatalog(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, updateMirroredAzureDatabricksCatalogRequest UpdateMirroredAzureDatabricksCatalogRequest, options *ItemsClientUpdateMirroredAzureDatabricksCatalogOptions) (ItemsClientUpdateMirroredAzureDatabricksCatalogResponse, error) {
	var err error
	const operationName = "mirroredazuredatabrickscatalog.ItemsClient.UpdateMirroredAzureDatabricksCatalog"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateMirroredAzureDatabricksCatalogCreateRequest(ctx, workspaceID, mirroredAzureDatabricksCatalogID, updateMirroredAzureDatabricksCatalogRequest, options)
	if err != nil {
		return ItemsClientUpdateMirroredAzureDatabricksCatalogResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateMirroredAzureDatabricksCatalogResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateMirroredAzureDatabricksCatalogResponse{}, err
	}
	resp, err := client.updateMirroredAzureDatabricksCatalogHandleResponse(httpResp)
	return resp, err
}

// updateMirroredAzureDatabricksCatalogCreateRequest creates the UpdateMirroredAzureDatabricksCatalog request.
func (client *ItemsClient) updateMirroredAzureDatabricksCatalogCreateRequest(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, updateMirroredAzureDatabricksCatalogRequest UpdateMirroredAzureDatabricksCatalogRequest, _ *ItemsClientUpdateMirroredAzureDatabricksCatalogOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredAzureDatabricksCatalogs/{mirroredAzureDatabricksCatalogId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredAzureDatabricksCatalogID == "" {
		return nil, errors.New("parameter mirroredAzureDatabricksCatalogID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredAzureDatabricksCatalogId}", url.PathEscape(mirroredAzureDatabricksCatalogID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateMirroredAzureDatabricksCatalogRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateMirroredAzureDatabricksCatalogHandleResponse handles the UpdateMirroredAzureDatabricksCatalog response.
func (client *ItemsClient) updateMirroredAzureDatabricksCatalogHandleResponse(resp *http.Response) (ItemsClientUpdateMirroredAzureDatabricksCatalogResponse, error) {
	result := ItemsClientUpdateMirroredAzureDatabricksCatalogResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MirroredAzureDatabricksCatalog); err != nil {
		return ItemsClientUpdateMirroredAzureDatabricksCatalogResponse{}, err
	}
	return result, nil
}

// BeginUpdateMirroredAzureDatabricksCatalogDefinition - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in
// Preview (learn more [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the mirrored azure databricks catalog.
// REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
// [!NOTE]
// > Item.Execute.All is required if you are updating AutoSync property.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredAzureDatabricksCatalogID - The mirroredAzureDatabricksCatalog ID.
//   - updateMirroredAzureDatabricksCatalogDefinitionRequest - Update mirroredAzureDatabricksCatalog definition request payload.
//   - options - ItemsClientBeginUpdateMirroredAzureDatabricksCatalogDefinitionOptions contains the optional parameters for the
//     ItemsClient.BeginUpdateMirroredAzureDatabricksCatalogDefinition method.
func (client *ItemsClient) BeginUpdateMirroredAzureDatabricksCatalogDefinition(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, updateMirroredAzureDatabricksCatalogDefinitionRequest UpdatemirroredAzureDatabricksCatalogDefinitionRequest, options *ItemsClientBeginUpdateMirroredAzureDatabricksCatalogDefinitionOptions) (*runtime.Poller[ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse], error) {
	return client.beginUpdateMirroredAzureDatabricksCatalogDefinition(ctx, workspaceID, mirroredAzureDatabricksCatalogID, updateMirroredAzureDatabricksCatalogDefinitionRequest, options)
}

// UpdateMirroredAzureDatabricksCatalogDefinition - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview
// (learn more [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the mirrored azure databricks catalog.
// REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
// [!NOTE]
// > Item.Execute.All is required if you are updating AutoSync property.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateMirroredAzureDatabricksCatalogDefinition(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, updateMirroredAzureDatabricksCatalogDefinitionRequest UpdatemirroredAzureDatabricksCatalogDefinitionRequest, options *ItemsClientBeginUpdateMirroredAzureDatabricksCatalogDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "mirroredazuredatabrickscatalog.ItemsClient.BeginUpdateMirroredAzureDatabricksCatalogDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateMirroredAzureDatabricksCatalogDefinitionCreateRequest(ctx, workspaceID, mirroredAzureDatabricksCatalogID, updateMirroredAzureDatabricksCatalogDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateMirroredAzureDatabricksCatalogDefinitionCreateRequest creates the UpdateMirroredAzureDatabricksCatalogDefinition request.
func (client *ItemsClient) updateMirroredAzureDatabricksCatalogDefinitionCreateRequest(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, updateMirroredAzureDatabricksCatalogDefinitionRequest UpdatemirroredAzureDatabricksCatalogDefinitionRequest, _ *ItemsClientBeginUpdateMirroredAzureDatabricksCatalogDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredAzureDatabricksCatalogs/{mirroredAzureDatabricksCatalogId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredAzureDatabricksCatalogID == "" {
		return nil, errors.New("parameter mirroredAzureDatabricksCatalogID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredAzureDatabricksCatalogId}", url.PathEscape(mirroredAzureDatabricksCatalogID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateMirroredAzureDatabricksCatalogDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateMirroredAzureDatabricksCatalog - returns ItemsClientCreateMirroredAzureDatabricksCatalogResponse in sync mode.
// >  [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS The caller must have a contributor workspace role.
//
// # REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createMirroredAzureDatabricksCatalogRequest - Create item request payload.
//   - options - ItemsClientBeginCreateMirroredAzureDatabricksCatalogOptions contains the optional parameters for the ItemsClient.BeginCreateMirroredAzureDatabricksCatalog method.
func (client *ItemsClient) CreateMirroredAzureDatabricksCatalog(ctx context.Context, workspaceID string, createMirroredAzureDatabricksCatalogRequest CreateMirroredAzureDatabricksCatalogRequest, options *ItemsClientBeginCreateMirroredAzureDatabricksCatalogOptions) (ItemsClientCreateMirroredAzureDatabricksCatalogResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateMirroredAzureDatabricksCatalog(ctx, workspaceID, createMirroredAzureDatabricksCatalogRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateMirroredAzureDatabricksCatalogResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateMirroredAzureDatabricksCatalogResponse{}, err
	}
	return result, err
}

// beginCreateMirroredAzureDatabricksCatalog creates the createMirroredAzureDatabricksCatalog request.
func (client *ItemsClient) beginCreateMirroredAzureDatabricksCatalog(ctx context.Context, workspaceID string, createMirroredAzureDatabricksCatalogRequest CreateMirroredAzureDatabricksCatalogRequest, options *ItemsClientBeginCreateMirroredAzureDatabricksCatalogOptions) (*runtime.Poller[ItemsClientCreateMirroredAzureDatabricksCatalogResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createMirroredAzureDatabricksCatalog(ctx, workspaceID, createMirroredAzureDatabricksCatalogRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateMirroredAzureDatabricksCatalogResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateMirroredAzureDatabricksCatalogResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateMirroredAzureDatabricksCatalogResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateMirroredAzureDatabricksCatalogResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetMirroredAzureDatabricksCatalogDefinition - returns ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse in sync mode.
// >  [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS The caller must have read and write permissions for the mirrored azure databricks catalog.
//
// # REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredAzureDatabricksCatalogID - The mirroredAzureDatabricksCatalog ID.
//   - options - ItemsClientBeginGetMirroredAzureDatabricksCatalogDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetMirroredAzureDatabricksCatalogDefinition method.
func (client *ItemsClient) GetMirroredAzureDatabricksCatalogDefinition(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *ItemsClientBeginGetMirroredAzureDatabricksCatalogDefinitionOptions) (ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetMirroredAzureDatabricksCatalogDefinition(ctx, workspaceID, mirroredAzureDatabricksCatalogID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse{}, err
	}
	return result, err
}

// beginGetMirroredAzureDatabricksCatalogDefinition creates the getMirroredAzureDatabricksCatalogDefinition request.
func (client *ItemsClient) beginGetMirroredAzureDatabricksCatalogDefinition(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *ItemsClientBeginGetMirroredAzureDatabricksCatalogDefinitionOptions) (*runtime.Poller[ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getMirroredAzureDatabricksCatalogDefinition(ctx, workspaceID, mirroredAzureDatabricksCatalogID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateMirroredAzureDatabricksCatalogDefinition - returns ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse in sync mode.
// >  [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS The caller must have read and write permissions for the mirrored azure databricks catalog.
//
// # REQUIRED DELEGATED SCOPES MirroredAzureDatabricksCatalog.ReadWrite.All or Item.ReadWrite.All
//
// [!NOTE]
//
// >  Item.Execute.All is required if you are updating AutoSync property.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredAzureDatabricksCatalogID - The mirroredAzureDatabricksCatalog ID.
//   - updateMirroredAzureDatabricksCatalogDefinitionRequest - Update mirroredAzureDatabricksCatalog definition request payload.
//   - options - ItemsClientBeginUpdateMirroredAzureDatabricksCatalogDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateMirroredAzureDatabricksCatalogDefinition method.
func (client *ItemsClient) UpdateMirroredAzureDatabricksCatalogDefinition(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, updateMirroredAzureDatabricksCatalogDefinitionRequest UpdatemirroredAzureDatabricksCatalogDefinitionRequest, options *ItemsClientBeginUpdateMirroredAzureDatabricksCatalogDefinitionOptions) (ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateMirroredAzureDatabricksCatalogDefinition(ctx, workspaceID, mirroredAzureDatabricksCatalogID, updateMirroredAzureDatabricksCatalogDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateMirroredAzureDatabricksCatalogDefinition creates the updateMirroredAzureDatabricksCatalogDefinition request.
func (client *ItemsClient) beginUpdateMirroredAzureDatabricksCatalogDefinition(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, updateMirroredAzureDatabricksCatalogDefinitionRequest UpdatemirroredAzureDatabricksCatalogDefinitionRequest, options *ItemsClientBeginUpdateMirroredAzureDatabricksCatalogDefinitionOptions) (*runtime.Poller[ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateMirroredAzureDatabricksCatalogDefinition(ctx, workspaceID, mirroredAzureDatabricksCatalogID, updateMirroredAzureDatabricksCatalogDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListMirroredAzureDatabricksCatalogs - returns array of MirroredAzureDatabricksCatalog from all pages.
// >  [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
//
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have a viewer workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListMirroredAzureDatabricksCatalogsOptions contains the optional parameters for the ItemsClient.NewListMirroredAzureDatabricksCatalogsPager method.
func (client *ItemsClient) ListMirroredAzureDatabricksCatalogs(ctx context.Context, workspaceID string, options *ItemsClientListMirroredAzureDatabricksCatalogsOptions) ([]MirroredAzureDatabricksCatalog, error) {
	pager := client.NewListMirroredAzureDatabricksCatalogsPager(workspaceID, options)
	mapper := func(resp ItemsClientListMirroredAzureDatabricksCatalogsResponse) []MirroredAzureDatabricksCatalog {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []MirroredAzureDatabricksCatalog{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []MirroredAzureDatabricksCatalog{}, err
	}
	return list, nil
}
