// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package mirroredazuredatabrickscatalog_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"
	"time"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/mirroredazuredatabrickscatalog"
	"github.com/microsoft/fabric-sdk-go/fabric/mirroredazuredatabrickscatalog/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *mirroredazuredatabrickscatalog.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = mirroredazuredatabrickscatalog.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListMirroredAzureDatabricksCatalogs() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List mirroredAzureDatabricksCatalogs in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := mirroredazuredatabrickscatalog.MirroredAzureDatabricksCatalogs{
		Value: []mirroredazuredatabrickscatalog.MirroredAzureDatabricksCatalog{
			{
				Type:        to.Ptr(mirroredazuredatabrickscatalog.ItemTypeMirroredAzureDatabricksCatalog),
				Description: to.Ptr("A MirroredAzureDatabricksCatalog description."),
				DisplayName: to.Ptr("MirroredAzureDatabricksCatalog_1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &mirroredazuredatabrickscatalog.Properties{
					AutoSync:                        to.Ptr(mirroredazuredatabrickscatalog.AutoSyncDisabled),
					CatalogName:                     to.Ptr("catalog_1"),
					DatabricksWorkspaceConnectionID: to.Ptr("c1128f28-d84f-417c-8234-0feb91e35f86"),
					MirrorStatus:                    to.Ptr(mirroredazuredatabrickscatalog.MirrorStatusMirrored),
					MirroringMode:                   to.Ptr(mirroredazuredatabrickscatalog.MirroringModesFull),
					OneLakeTablesPath:               to.Ptr("https://onelake.dfs.fabric.microsoft.com/2382cdf5-d577-44d0-a1fc-42184f29a7eb/e5fb215b-1934-413e-b33a-debaf844afde/Tables"),
					SQLEndpointProperties: &mirroredazuredatabrickscatalog.SQLEndpointProperties{
						ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
						ID:               to.Ptr("37dc8a41-dea9-465d-b528-3e95043b2356"),
					},
					StorageConnectionID: to.Ptr("c1128f28-d84f-417c-8234-0feb91e35f87"),
					SyncDetails: &mirroredazuredatabrickscatalog.SyncDetails{
						LastSyncDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-12-26T09:40:38.858Z"); return t }()),
						Status:           to.Ptr(mirroredazuredatabrickscatalog.StatusSuccess),
					},
				},
			},
			{
				Type:        to.Ptr(mirroredazuredatabrickscatalog.ItemTypeMirroredAzureDatabricksCatalog),
				Description: to.Ptr("A MirroredAzureDatabricksCatalog description."),
				DisplayName: to.Ptr("MirroredAzureDatabricksCatalog_2"),
				ID:          to.Ptr("a8a1bffa-7eea-49dc-a1d2-6281c1d031f1"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &mirroredazuredatabrickscatalog.Properties{
					AutoSync:                        to.Ptr(mirroredazuredatabrickscatalog.AutoSyncDisabled),
					CatalogName:                     to.Ptr("catalog_2"),
					DatabricksWorkspaceConnectionID: to.Ptr("c1128f28-d84f-417c-8234-0feb91e35f86"),
					MirrorStatus:                    to.Ptr(mirroredazuredatabrickscatalog.MirrorStatusMirrored),
					MirroringMode:                   to.Ptr(mirroredazuredatabrickscatalog.MirroringModesFull),
					OneLakeTablesPath:               to.Ptr("https://onelake.dfs.fabric.microsoft.com/fc5d0537-1b22-4de1-a5e9-9b8bb58ed1e1/6dc325f6-46f6-4a2a-930b-10b96a463566/Tables"),
					SQLEndpointProperties: &mirroredazuredatabrickscatalog.SQLEndpointProperties{
						ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
						ID:               to.Ptr("37dc8a41-dea9-465d-b528-3e95043b2356"),
					},
					StorageConnectionID: to.Ptr("c1128f28-d84f-417c-8234-0feb91e35f86"),
					SyncDetails: &mirroredazuredatabrickscatalog.SyncDetails{
						LastSyncDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-12-26T09:40:38.858Z"); return t }()),
						Status:           to.Ptr(mirroredazuredatabrickscatalog.StatusSuccess),
					},
				},
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListMirroredAzureDatabricksCatalogsPager = func(workspaceID string, options *mirroredazuredatabrickscatalog.ItemsClientListMirroredAzureDatabricksCatalogsOptions) (resp azfake.PagerResponder[mirroredazuredatabrickscatalog.ItemsClientListMirroredAzureDatabricksCatalogsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[mirroredazuredatabrickscatalog.ItemsClientListMirroredAzureDatabricksCatalogsResponse]{}
		resp.AddPage(http.StatusOK, mirroredazuredatabrickscatalog.ItemsClientListMirroredAzureDatabricksCatalogsResponse{MirroredAzureDatabricksCatalogs: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListMirroredAzureDatabricksCatalogsPager(exampleWorkspaceID, &mirroredazuredatabrickscatalog.ItemsClientListMirroredAzureDatabricksCatalogsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.MirroredAzureDatabricksCatalogs))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateMirroredAzureDatabricksCatalog() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a mirroredAzureDatabricksCatalog with creation payload example"},
	})
	var exampleWorkspaceID string
	var exampleCreateMirroredAzureDatabricksCatalogRequest mirroredazuredatabrickscatalog.CreateMirroredAzureDatabricksCatalogRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateMirroredAzureDatabricksCatalogRequest = mirroredazuredatabrickscatalog.CreateMirroredAzureDatabricksCatalogRequest{
		Description: to.Ptr("A MirroredAzureDatabricksCatalog created with creation payload."),
		CreationPayload: &mirroredazuredatabrickscatalog.CreationPayload{
			CatalogName:                     to.Ptr("catalog_1"),
			DatabricksWorkspaceConnectionID: to.Ptr("c1128f28-d84f-417c-8234-0feb91e35f86"),
			MirroringMode:                   to.Ptr(mirroredazuredatabrickscatalog.MirroringModesFull),
			StorageConnectionID:             to.Ptr("c1128f28-d84f-417c-8234-0feb91e35f87"),
		},
		DisplayName: to.Ptr("MirroredAzureDatabricksCatalog_created_with_creationPayload"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateMirroredAzureDatabricksCatalog = func(ctx context.Context, workspaceID string, createMirroredAzureDatabricksCatalogRequest mirroredazuredatabrickscatalog.CreateMirroredAzureDatabricksCatalogRequest, options *mirroredazuredatabrickscatalog.ItemsClientBeginCreateMirroredAzureDatabricksCatalogOptions) (resp azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientCreateMirroredAzureDatabricksCatalogResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateMirroredAzureDatabricksCatalogRequest, createMirroredAzureDatabricksCatalogRequest))
		resp = azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientCreateMirroredAzureDatabricksCatalogResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, mirroredazuredatabrickscatalog.ItemsClientCreateMirroredAzureDatabricksCatalogResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateMirroredAzureDatabricksCatalog(ctx, exampleWorkspaceID, exampleCreateMirroredAzureDatabricksCatalogRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create an mirroredAzureDatabricksCatalog with definition example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateMirroredAzureDatabricksCatalogRequest = mirroredazuredatabrickscatalog.CreateMirroredAzureDatabricksCatalogRequest{
		Description: to.Ptr("A MirroredAzureDatabricksCatalog created with definition."),
		Definition: &mirroredazuredatabrickscatalog.PublicDefinition{
			Parts: []mirroredazuredatabrickscatalog.PublicDefinitionPart{
				{
					Path:        to.Ptr("mirroredAzureDatabricksCatalog.json"),
					Payload:     to.Ptr("eyAicHJvcGVydGllcy..WJsZSIgfSB9IH0gXSB9IH0"),
					PayloadType: to.Ptr(mirroredazuredatabrickscatalog.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(mirroredazuredatabrickscatalog.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("MirroredAzureDatabricksCatalog_created_with_definition"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateMirroredAzureDatabricksCatalog = func(ctx context.Context, workspaceID string, createMirroredAzureDatabricksCatalogRequest mirroredazuredatabrickscatalog.CreateMirroredAzureDatabricksCatalogRequest, options *mirroredazuredatabrickscatalog.ItemsClientBeginCreateMirroredAzureDatabricksCatalogOptions) (resp azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientCreateMirroredAzureDatabricksCatalogResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateMirroredAzureDatabricksCatalogRequest, createMirroredAzureDatabricksCatalogRequest))
		resp = azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientCreateMirroredAzureDatabricksCatalogResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, mirroredazuredatabrickscatalog.ItemsClientCreateMirroredAzureDatabricksCatalogResponse{}, nil)
		return
	}

	poller, err = client.BeginCreateMirroredAzureDatabricksCatalog(ctx, exampleWorkspaceID, exampleCreateMirroredAzureDatabricksCatalogRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetMirroredAzureDatabricksCatalog() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a mirroredAzureDatabricksCatalog example"},
	})
	var exampleWorkspaceID string
	var exampleMirroredAzureDatabricksCatalogID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleMirroredAzureDatabricksCatalogID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := mirroredazuredatabrickscatalog.MirroredAzureDatabricksCatalog{
		Type:        to.Ptr(mirroredazuredatabrickscatalog.ItemTypeMirroredAzureDatabricksCatalog),
		Description: to.Ptr("A MirroredAzureDatabricksCatalog description."),
		DisplayName: to.Ptr("MirroredAzureDatabricksCatalog_1"),
		ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		Properties: &mirroredazuredatabrickscatalog.Properties{
			AutoSync:                        to.Ptr(mirroredazuredatabrickscatalog.AutoSyncEnabled),
			CatalogName:                     to.Ptr("catalog_1"),
			DatabricksWorkspaceConnectionID: to.Ptr("c1128f28-d84f-417c-8234-0feb91e35f86"),
			MirrorStatus:                    to.Ptr(mirroredazuredatabrickscatalog.MirrorStatusMirrored),
			MirroringMode:                   to.Ptr(mirroredazuredatabrickscatalog.MirroringModesFull),
			OneLakeTablesPath:               to.Ptr("https://onelake.dfs.fabric.microsoft.com/2382cdf5-d577-44d0-a1fc-42184f29a7eb/e5fb215b-1934-413e-b33a-debaf844afde/Tables"),
			SQLEndpointProperties: &mirroredazuredatabrickscatalog.SQLEndpointProperties{
				ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
				ID:               to.Ptr("37dc8a41-dea9-465d-b528-3e95043b2356"),
			},
			StorageConnectionID: to.Ptr("c1128f28-d84f-417c-8234-0feb91e35f86"),
			SyncDetails: &mirroredazuredatabrickscatalog.SyncDetails{
				LastSyncDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-12-26T09:40:38.858Z"); return t }()),
				Status:           to.Ptr(mirroredazuredatabrickscatalog.StatusSuccess),
			},
		},
	}

	testsuite.serverFactory.ItemsServer.GetMirroredAzureDatabricksCatalog = func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *mirroredazuredatabrickscatalog.ItemsClientGetMirroredAzureDatabricksCatalogOptions) (resp azfake.Responder[mirroredazuredatabrickscatalog.ItemsClientGetMirroredAzureDatabricksCatalogResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMirroredAzureDatabricksCatalogID, mirroredAzureDatabricksCatalogID)
		resp = azfake.Responder[mirroredazuredatabrickscatalog.ItemsClientGetMirroredAzureDatabricksCatalogResponse]{}
		resp.SetResponse(http.StatusOK, mirroredazuredatabrickscatalog.ItemsClientGetMirroredAzureDatabricksCatalogResponse{MirroredAzureDatabricksCatalog: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetMirroredAzureDatabricksCatalog(ctx, exampleWorkspaceID, exampleMirroredAzureDatabricksCatalogID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MirroredAzureDatabricksCatalog))
}

func (testsuite *FakeTestSuite) TestItems_UpdateMirroredAzureDatabricksCatalog() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a mirroredAzureDatabricksCatalog example"},
	})
	var exampleWorkspaceID string
	var exampleMirroredAzureDatabricksCatalogID string
	var exampleUpdateMirroredAzureDatabricksCatalogRequest mirroredazuredatabrickscatalog.UpdateMirroredAzureDatabricksCatalogRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleMirroredAzureDatabricksCatalogID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateMirroredAzureDatabricksCatalogRequest = mirroredazuredatabrickscatalog.UpdateMirroredAzureDatabricksCatalogRequest{
		Description: to.Ptr("A new description for mirroredAzureDatabricksCatalog."),
		DisplayName: to.Ptr("MirroredAzureDatabricksCatalog_New_Name"),
	}

	exampleRes := mirroredazuredatabrickscatalog.MirroredAzureDatabricksCatalog{
		Type:        to.Ptr(mirroredazuredatabrickscatalog.ItemTypeMirroredAzureDatabricksCatalog),
		Description: to.Ptr("A new description for mirroredAzureDatabricksCatalog."),
		DisplayName: to.Ptr("MirroredAzureDatabricksCatalog_New_Name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		Properties: &mirroredazuredatabrickscatalog.Properties{
			AutoSync:                        to.Ptr(mirroredazuredatabrickscatalog.AutoSyncDisabled),
			CatalogName:                     to.Ptr("catalog_1"),
			DatabricksWorkspaceConnectionID: to.Ptr("0c9e2ee0-f451-40f3-8355-9bb6d133237d"),
			MirrorStatus:                    to.Ptr(mirroredazuredatabrickscatalog.MirrorStatusNotMirrored),
			MirroringMode:                   to.Ptr(mirroredazuredatabrickscatalog.MirroringModesPartial),
			OneLakeTablesPath:               to.Ptr("https://onelake.dfs.fabric.microsoft.com/2382cdf5-d577-44d0-a1fc-42184f29a7eb/e5fb215b-1934-413e-b33a-debaf844afde/Tables"),
			SQLEndpointProperties: &mirroredazuredatabrickscatalog.SQLEndpointProperties{
				ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
				ID:               to.Ptr("37dc8a41-dea9-465d-b528-3e95043b2356"),
			},
			SyncDetails: &mirroredazuredatabrickscatalog.SyncDetails{
				LastSyncDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-12-26T09:40:38.858Z"); return t }()),
				Status:           to.Ptr(mirroredazuredatabrickscatalog.StatusSuccess),
			},
		},
	}

	testsuite.serverFactory.ItemsServer.UpdateMirroredAzureDatabricksCatalog = func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, updateMirroredAzureDatabricksCatalogRequest mirroredazuredatabrickscatalog.UpdateMirroredAzureDatabricksCatalogRequest, options *mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogOptions) (resp azfake.Responder[mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMirroredAzureDatabricksCatalogID, mirroredAzureDatabricksCatalogID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateMirroredAzureDatabricksCatalogRequest, updateMirroredAzureDatabricksCatalogRequest))
		resp = azfake.Responder[mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogResponse]{}
		resp.SetResponse(http.StatusOK, mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogResponse{MirroredAzureDatabricksCatalog: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateMirroredAzureDatabricksCatalog(ctx, exampleWorkspaceID, exampleMirroredAzureDatabricksCatalogID, exampleUpdateMirroredAzureDatabricksCatalogRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MirroredAzureDatabricksCatalog))

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a mirroredAzureDatabricksCatalog with updateable prperties example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleMirroredAzureDatabricksCatalogID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateMirroredAzureDatabricksCatalogRequest = mirroredazuredatabrickscatalog.UpdateMirroredAzureDatabricksCatalogRequest{
		Description: to.Ptr("A new description for mirroredAzureDatabricksCatalog."),
		DisplayName: to.Ptr("MirroredAzureDatabricksCatalog_New_Name"),
		PublicUpdateableExtendedProperties: &mirroredazuredatabrickscatalog.UpdatePayload{
			AutoSync:            to.Ptr(mirroredazuredatabrickscatalog.AutoSyncEnabled),
			MirroringMode:       to.Ptr(mirroredazuredatabrickscatalog.MirroringModesFull),
			StorageConnectionID: to.Ptr("c1128f28-d84f-417c-8234-0feb91e35f87"),
		},
	}

	exampleRes = mirroredazuredatabrickscatalog.MirroredAzureDatabricksCatalog{
		Type:        to.Ptr(mirroredazuredatabrickscatalog.ItemTypeMirroredAzureDatabricksCatalog),
		Description: to.Ptr("A new description for mirroredAzureDatabricksCatalog."),
		DisplayName: to.Ptr("MirroredAzureDatabricksCatalog_New_Name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		Properties: &mirroredazuredatabrickscatalog.Properties{
			AutoSync:                        to.Ptr(mirroredazuredatabrickscatalog.AutoSyncEnabled),
			CatalogName:                     to.Ptr("catalog_1"),
			DatabricksWorkspaceConnectionID: to.Ptr("0c9e2ee0-f451-40f3-8355-9bb6d133237d"),
			MirrorStatus:                    to.Ptr(mirroredazuredatabrickscatalog.MirrorStatusMirrored),
			MirroringMode:                   to.Ptr(mirroredazuredatabrickscatalog.MirroringModesFull),
			OneLakeTablesPath:               to.Ptr("https://onelake.dfs.fabric.microsoft.com/2382cdf5-d577-44d0-a1fc-42184f29a7eb/e5fb215b-1934-413e-b33a-debaf844afde/Tables"),
			SQLEndpointProperties: &mirroredazuredatabrickscatalog.SQLEndpointProperties{
				ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
				ID:               to.Ptr("37dc8a41-dea9-465d-b528-3e95043b2356"),
			},
			StorageConnectionID: to.Ptr("c1128f28-d84f-417c-8234-0feb91e35f87"),
			SyncDetails: &mirroredazuredatabrickscatalog.SyncDetails{
				LastSyncDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-12-26T09:40:38.858Z"); return t }()),
				Status:           to.Ptr(mirroredazuredatabrickscatalog.StatusSuccess),
			},
		},
	}

	testsuite.serverFactory.ItemsServer.UpdateMirroredAzureDatabricksCatalog = func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, updateMirroredAzureDatabricksCatalogRequest mirroredazuredatabrickscatalog.UpdateMirroredAzureDatabricksCatalogRequest, options *mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogOptions) (resp azfake.Responder[mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMirroredAzureDatabricksCatalogID, mirroredAzureDatabricksCatalogID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateMirroredAzureDatabricksCatalogRequest, updateMirroredAzureDatabricksCatalogRequest))
		resp = azfake.Responder[mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogResponse]{}
		resp.SetResponse(http.StatusOK, mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogResponse{MirroredAzureDatabricksCatalog: exampleRes}, nil)
		return
	}

	res, err = client.UpdateMirroredAzureDatabricksCatalog(ctx, exampleWorkspaceID, exampleMirroredAzureDatabricksCatalogID, exampleUpdateMirroredAzureDatabricksCatalogRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MirroredAzureDatabricksCatalog))
}

func (testsuite *FakeTestSuite) TestItems_DeleteMirroredAzureDatabricksCatalog() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a mirroredAzureDatabricksCatalog example"},
	})
	var exampleWorkspaceID string
	var exampleMirroredAzureDatabricksCatalogID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleMirroredAzureDatabricksCatalogID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteMirroredAzureDatabricksCatalog = func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *mirroredazuredatabrickscatalog.ItemsClientDeleteMirroredAzureDatabricksCatalogOptions) (resp azfake.Responder[mirroredazuredatabrickscatalog.ItemsClientDeleteMirroredAzureDatabricksCatalogResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMirroredAzureDatabricksCatalogID, mirroredAzureDatabricksCatalogID)
		resp = azfake.Responder[mirroredazuredatabrickscatalog.ItemsClientDeleteMirroredAzureDatabricksCatalogResponse]{}
		resp.SetResponse(http.StatusOK, mirroredazuredatabrickscatalog.ItemsClientDeleteMirroredAzureDatabricksCatalogResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteMirroredAzureDatabricksCatalog(ctx, exampleWorkspaceID, exampleMirroredAzureDatabricksCatalogID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetMirroredAzureDatabricksCatalogDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a mirrored database definition example"},
	})
	var exampleWorkspaceID string
	var exampleMirroredAzureDatabricksCatalogID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleMirroredAzureDatabricksCatalogID = "b9429666-fd5a-4a51-a81d-09b1e20ca4be"

	exampleRes := mirroredazuredatabrickscatalog.DefinitionResponse{
		Definition: &mirroredazuredatabrickscatalog.PublicDefinition{
			Parts: []mirroredazuredatabrickscatalog.PublicDefinitionPart{
				{
					Path:        to.Ptr("mirroredAzureDatabricksCatalog.json"),
					Payload:     to.Ptr("eyAicHJvcGVydGllcy..WJsZSIgfSB9IH0gXSB9IH0"),
					PayloadType: to.Ptr(mirroredazuredatabrickscatalog.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(mirroredazuredatabrickscatalog.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetMirroredAzureDatabricksCatalogDefinition = func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *mirroredazuredatabrickscatalog.ItemsClientBeginGetMirroredAzureDatabricksCatalogDefinitionOptions) (resp azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMirroredAzureDatabricksCatalogID, mirroredAzureDatabricksCatalogID)
		resp = azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, mirroredazuredatabrickscatalog.ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetMirroredAzureDatabricksCatalogDefinition(ctx, exampleWorkspaceID, exampleMirroredAzureDatabricksCatalogID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateMirroredAzureDatabricksCatalogDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a mirrored AzureDatabricks Catalog definition example"},
	})
	var exampleWorkspaceID string
	var exampleMirroredAzureDatabricksCatalogID string
	var exampleUpdateMirroredAzureDatabricksCatalogDefinitionRequest mirroredazuredatabrickscatalog.UpdatemirroredAzureDatabricksCatalogDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleMirroredAzureDatabricksCatalogID = "b9429666-fd5a-4a51-a81d-09b1e20ca4be"
	exampleUpdateMirroredAzureDatabricksCatalogDefinitionRequest = mirroredazuredatabrickscatalog.UpdatemirroredAzureDatabricksCatalogDefinitionRequest{
		Definition: &mirroredazuredatabrickscatalog.PublicDefinition{
			Parts: []mirroredazuredatabrickscatalog.PublicDefinitionPart{
				{
					Path:        to.Ptr("mirroredAzureDatabricksCatalog.json"),
					Payload:     to.Ptr("eyAicHJvcGVydGllcy..WJsZSIgfSB9IH0gXSB9IH0"),
					PayloadType: to.Ptr(mirroredazuredatabrickscatalog.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(mirroredazuredatabrickscatalog.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateMirroredAzureDatabricksCatalogDefinition = func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, updateMirroredAzureDatabricksCatalogDefinitionRequest mirroredazuredatabrickscatalog.UpdatemirroredAzureDatabricksCatalogDefinitionRequest, options *mirroredazuredatabrickscatalog.ItemsClientBeginUpdateMirroredAzureDatabricksCatalogDefinitionOptions) (resp azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMirroredAzureDatabricksCatalogID, mirroredAzureDatabricksCatalogID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateMirroredAzureDatabricksCatalogDefinitionRequest, updateMirroredAzureDatabricksCatalogDefinitionRequest))
		resp = azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateMirroredAzureDatabricksCatalogDefinition(ctx, exampleWorkspaceID, exampleMirroredAzureDatabricksCatalogID, exampleUpdateMirroredAzureDatabricksCatalogDefinitionRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestRefresh_RefreshCatalogMetadata() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Refresh Catalog Metadata example"},
	})
	var exampleWorkspaceID string
	var exampleMirroredAzureDatabricksCatalogID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleMirroredAzureDatabricksCatalogID = "b9429666-fd5a-4a51-a81d-09b1e20ca4be"

	testsuite.serverFactory.RefreshServer.BeginRefreshCatalogMetadata = func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *mirroredazuredatabrickscatalog.RefreshClientBeginRefreshCatalogMetadataOptions) (resp azfake.PollerResponder[mirroredazuredatabrickscatalog.RefreshClientRefreshCatalogMetadataResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMirroredAzureDatabricksCatalogID, mirroredAzureDatabricksCatalogID)
		resp = azfake.PollerResponder[mirroredazuredatabrickscatalog.RefreshClientRefreshCatalogMetadataResponse]{}
		resp.SetTerminalResponse(http.StatusOK, mirroredazuredatabrickscatalog.RefreshClientRefreshCatalogMetadataResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewRefreshClient()
	poller, err := client.BeginRefreshCatalogMetadata(ctx, exampleWorkspaceID, exampleMirroredAzureDatabricksCatalogID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestDiscovery_DiscoverCatalogs() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Databricks catalogs example"},
	})
	var exampleWorkspaceID string
	var exampleDatabricksWorkspaceConnectionID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleDatabricksWorkspaceConnectionID = "c1128f28-d84f-417c-8234-0feb91e35f86"

	exampleRes := mirroredazuredatabrickscatalog.DatabricksCatalogs{
		Value: []mirroredazuredatabrickscatalog.DatabricksCatalog{
			{
				Name:            to.Ptr("catalog_1"),
				CatalogType:     to.Ptr(mirroredazuredatabrickscatalog.CatalogTypeMANAGEDCATALOG),
				FullName:        to.Ptr("catalog_1"),
				StorageLocation: to.Ptr("abfss://default@externalaccount.dfs.core.windows.net/__unitystorage/catalogs/230217cd-94f2-4017-907d-768298b02e2b"),
			},
			{
				Name:            to.Ptr("catalog_2"),
				CatalogType:     to.Ptr(mirroredazuredatabrickscatalog.CatalogTypeMANAGEDCATALOG),
				FullName:        to.Ptr("catalog_2"),
				StorageLocation: to.Ptr("abfss://default@externalaccount.dfs.core.windows.net/__unitystorage/catalogs/230217cd-94f2-4017-907d-768298b02e2b"),
			}},
	}

	testsuite.serverFactory.DiscoveryServer.NewDiscoverCatalogsPager = func(workspaceID string, databricksWorkspaceConnectionID string, options *mirroredazuredatabrickscatalog.DiscoveryClientDiscoverCatalogsOptions) (resp azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverCatalogsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDatabricksWorkspaceConnectionID, databricksWorkspaceConnectionID)
		resp = azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverCatalogsResponse]{}
		resp.AddPage(http.StatusOK, mirroredazuredatabrickscatalog.DiscoveryClientDiscoverCatalogsResponse{DatabricksCatalogs: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDiscoveryClient()
	pager := client.NewDiscoverCatalogsPager(exampleWorkspaceID, exampleDatabricksWorkspaceConnectionID, &mirroredazuredatabrickscatalog.DiscoveryClientDiscoverCatalogsOptions{ContinuationToken: nil,
		MaxResults: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DatabricksCatalogs))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDiscovery_DiscoverSchemas() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Databricks schemas example"},
	})
	var exampleWorkspaceID string
	var exampleCatalogName string
	var exampleDatabricksWorkspaceConnectionID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCatalogName = "catalog_1"
	exampleDatabricksWorkspaceConnectionID = "c1128f28-d84f-417c-8234-0feb91e35f86"

	exampleRes := mirroredazuredatabrickscatalog.DatabricksSchemas{
		Value: []mirroredazuredatabrickscatalog.DatabricksSchema{
			{
				Name:            to.Ptr("schema_1"),
				FullName:        to.Ptr("catalog_1.schema_1"),
				StorageLocation: to.Ptr("abfss://default@externalaccount.dfs.core.windows.net/__unitystorage/schemas/230217cd-94f2-4017-907d-768298b02e2b"),
			},
			{
				Name:     to.Ptr("schema_2"),
				FullName: to.Ptr("catalog_1.schema_2"),
			}},
	}

	testsuite.serverFactory.DiscoveryServer.NewDiscoverSchemasPager = func(workspaceID string, catalogName string, databricksWorkspaceConnectionID string, options *mirroredazuredatabrickscatalog.DiscoveryClientDiscoverSchemasOptions) (resp azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverSchemasResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleCatalogName, catalogName)
		testsuite.Require().Equal(exampleDatabricksWorkspaceConnectionID, databricksWorkspaceConnectionID)
		resp = azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverSchemasResponse]{}
		resp.AddPage(http.StatusOK, mirroredazuredatabrickscatalog.DiscoveryClientDiscoverSchemasResponse{DatabricksSchemas: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDiscoveryClient()
	pager := client.NewDiscoverSchemasPager(exampleWorkspaceID, exampleCatalogName, exampleDatabricksWorkspaceConnectionID, &mirroredazuredatabrickscatalog.DiscoveryClientDiscoverSchemasOptions{ContinuationToken: nil,
		MaxResults: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DatabricksSchemas))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDiscovery_DiscoverTables() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Databricks tables example"},
	})
	var exampleWorkspaceID string
	var exampleCatalogName string
	var exampleSchemaName string
	var exampleDatabricksWorkspaceConnectionID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCatalogName = "catalog_1"
	exampleSchemaName = "schema_1"
	exampleDatabricksWorkspaceConnectionID = "c1128f28-d84f-417c-8234-0feb91e35f86"

	exampleRes := mirroredazuredatabrickscatalog.DatabricksTables{
		Value: []mirroredazuredatabrickscatalog.DatabricksTable{
			{
				Name:             to.Ptr("table_1"),
				DataSourceFormat: to.Ptr(mirroredazuredatabrickscatalog.DataSourceFormatDELTA),
				FullName:         to.Ptr("catalog_1.schema_1.table_1"),
				StorageLocation:  to.Ptr("abfss://default@externalaccount.dfs.core.windows.net/__unitystorage/schemas/230217cd-94f2-4017-907d-768298b02e2b"),
				TableType:        to.Ptr(mirroredazuredatabrickscatalog.TableTypeMANAGED),
			},
			{
				Name:             to.Ptr("table_2"),
				DataSourceFormat: to.Ptr(mirroredazuredatabrickscatalog.DataSourceFormatDELTA),
				FullName:         to.Ptr("catalog_1.schema_1.table_2"),
				StorageLocation:  to.Ptr("abfss://default@externalaccount.dfs.core.windows.net/__unitystorage/schemas/230217cd-94f2-4017-907d-768298b02e2b"),
				TableType:        to.Ptr(mirroredazuredatabrickscatalog.TableTypeMANAGED),
			}},
	}

	testsuite.serverFactory.DiscoveryServer.NewDiscoverTablesPager = func(workspaceID string, catalogName string, schemaName string, databricksWorkspaceConnectionID string, options *mirroredazuredatabrickscatalog.DiscoveryClientDiscoverTablesOptions) (resp azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverTablesResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleCatalogName, catalogName)
		testsuite.Require().Equal(exampleSchemaName, schemaName)
		testsuite.Require().Equal(exampleDatabricksWorkspaceConnectionID, databricksWorkspaceConnectionID)
		resp = azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverTablesResponse]{}
		resp.AddPage(http.StatusOK, mirroredazuredatabrickscatalog.DiscoveryClientDiscoverTablesResponse{DatabricksTables: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDiscoveryClient()
	pager := client.NewDiscoverTablesPager(exampleWorkspaceID, exampleCatalogName, exampleSchemaName, exampleDatabricksWorkspaceConnectionID, &mirroredazuredatabrickscatalog.DiscoveryClientDiscoverTablesOptions{ContinuationToken: nil,
		MaxResults: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DatabricksTables))
		if err == nil {
			break
		}
	}
}
