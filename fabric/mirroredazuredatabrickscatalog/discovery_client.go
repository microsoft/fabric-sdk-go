// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package mirroredazuredatabrickscatalog

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
)

// DiscoveryClient contains the methods for the Discovery group.
// Don't use this type directly, use a constructor function instead.
type DiscoveryClient struct {
	internal *azcore.Client
	endpoint string
}

// NewDiscoverCatalogsPager - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All or DatabricksCatalog.Read.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - databricksWorkspaceConnectionID - The Databricks workspace connection ID.
//   - options - DiscoveryClientDiscoverCatalogsOptions contains the optional parameters for the DiscoveryClient.NewDiscoverCatalogsPager
//     method.
func (client *DiscoveryClient) NewDiscoverCatalogsPager(workspaceID string, databricksWorkspaceConnectionID string, options *DiscoveryClientDiscoverCatalogsOptions) *runtime.Pager[DiscoveryClientDiscoverCatalogsResponse] {
	return runtime.NewPager(runtime.PagingHandler[DiscoveryClientDiscoverCatalogsResponse]{
		More: func(page DiscoveryClientDiscoverCatalogsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *DiscoveryClientDiscoverCatalogsResponse) (DiscoveryClientDiscoverCatalogsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "mirroredazuredatabrickscatalog.DiscoveryClient.NewDiscoverCatalogsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.discoverCatalogsCreateRequest(ctx, workspaceID, databricksWorkspaceConnectionID, options)
			}, nil)
			if err != nil {
				return DiscoveryClientDiscoverCatalogsResponse{}, err
			}
			return client.discoverCatalogsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// discoverCatalogsCreateRequest creates the DiscoverCatalogs request.
func (client *DiscoveryClient) discoverCatalogsCreateRequest(ctx context.Context, workspaceID string, databricksWorkspaceConnectionID string, options *DiscoveryClientDiscoverCatalogsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/azuredatabricks/catalogs"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	reqQP.Set("databricksWorkspaceConnectionId", databricksWorkspaceConnectionID)
	if options != nil && options.MaxResults != nil {
		reqQP.Set("maxResults", strconv.FormatInt(int64(*options.MaxResults), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// discoverCatalogsHandleResponse handles the DiscoverCatalogs response.
func (client *DiscoveryClient) discoverCatalogsHandleResponse(resp *http.Response) (DiscoveryClientDiscoverCatalogsResponse, error) {
	result := DiscoveryClientDiscoverCatalogsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DatabricksCatalogs); err != nil {
		return DiscoveryClientDiscoverCatalogsResponse{}, err
	}
	return result, nil
}

// NewDiscoverSchemasPager - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All or DatabricksCatalog.Read.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - catalogName - The catalog name.
//   - databricksWorkspaceConnectionID - The Databricks workspace connection ID.
//   - options - DiscoveryClientDiscoverSchemasOptions contains the optional parameters for the DiscoveryClient.NewDiscoverSchemasPager
//     method.
func (client *DiscoveryClient) NewDiscoverSchemasPager(workspaceID string, catalogName string, databricksWorkspaceConnectionID string, options *DiscoveryClientDiscoverSchemasOptions) *runtime.Pager[DiscoveryClientDiscoverSchemasResponse] {
	return runtime.NewPager(runtime.PagingHandler[DiscoveryClientDiscoverSchemasResponse]{
		More: func(page DiscoveryClientDiscoverSchemasResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *DiscoveryClientDiscoverSchemasResponse) (DiscoveryClientDiscoverSchemasResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "mirroredazuredatabrickscatalog.DiscoveryClient.NewDiscoverSchemasPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.discoverSchemasCreateRequest(ctx, workspaceID, catalogName, databricksWorkspaceConnectionID, options)
			}, nil)
			if err != nil {
				return DiscoveryClientDiscoverSchemasResponse{}, err
			}
			return client.discoverSchemasHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// discoverSchemasCreateRequest creates the DiscoverSchemas request.
func (client *DiscoveryClient) discoverSchemasCreateRequest(ctx context.Context, workspaceID string, catalogName string, databricksWorkspaceConnectionID string, options *DiscoveryClientDiscoverSchemasOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/azuredatabricks/catalogs/{catalogName}/schemas"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	reqQP.Set("databricksWorkspaceConnectionId", databricksWorkspaceConnectionID)
	if options != nil && options.MaxResults != nil {
		reqQP.Set("maxResults", strconv.FormatInt(int64(*options.MaxResults), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// discoverSchemasHandleResponse handles the DiscoverSchemas response.
func (client *DiscoveryClient) discoverSchemasHandleResponse(resp *http.Response) (DiscoveryClientDiscoverSchemasResponse, error) {
	result := DiscoveryClientDiscoverSchemasResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DatabricksSchemas); err != nil {
		return DiscoveryClientDiscoverSchemasResponse{}, err
	}
	return result, nil
}

// NewDiscoverTablesPager - > [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All or DatabricksCatalog.Read.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - catalogName - The catalog name.
//   - schemaName - The schema name.
//   - databricksWorkspaceConnectionID - The Databricks workspace connection ID.
//   - options - DiscoveryClientDiscoverTablesOptions contains the optional parameters for the DiscoveryClient.NewDiscoverTablesPager
//     method.
func (client *DiscoveryClient) NewDiscoverTablesPager(workspaceID string, catalogName string, schemaName string, databricksWorkspaceConnectionID string, options *DiscoveryClientDiscoverTablesOptions) *runtime.Pager[DiscoveryClientDiscoverTablesResponse] {
	return runtime.NewPager(runtime.PagingHandler[DiscoveryClientDiscoverTablesResponse]{
		More: func(page DiscoveryClientDiscoverTablesResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *DiscoveryClientDiscoverTablesResponse) (DiscoveryClientDiscoverTablesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "mirroredazuredatabrickscatalog.DiscoveryClient.NewDiscoverTablesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.discoverTablesCreateRequest(ctx, workspaceID, catalogName, schemaName, databricksWorkspaceConnectionID, options)
			}, nil)
			if err != nil {
				return DiscoveryClientDiscoverTablesResponse{}, err
			}
			return client.discoverTablesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// discoverTablesCreateRequest creates the DiscoverTables request.
func (client *DiscoveryClient) discoverTablesCreateRequest(ctx context.Context, workspaceID string, catalogName string, schemaName string, databricksWorkspaceConnectionID string, options *DiscoveryClientDiscoverTablesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/azuredatabricks/catalogs/{catalogName}/schemas/{schemaName}/tables"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if schemaName == "" {
		return nil, errors.New("parameter schemaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{schemaName}", url.PathEscape(schemaName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	reqQP.Set("databricksWorkspaceConnectionId", databricksWorkspaceConnectionID)
	if options != nil && options.MaxResults != nil {
		reqQP.Set("maxResults", strconv.FormatInt(int64(*options.MaxResults), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// discoverTablesHandleResponse handles the DiscoverTables response.
func (client *DiscoveryClient) discoverTablesHandleResponse(resp *http.Response) (DiscoveryClientDiscoverTablesResponse, error) {
	result := DiscoveryClientDiscoverTablesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DatabricksTables); err != nil {
		return DiscoveryClientDiscoverTablesResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// DiscoverCatalogs - returns array of DatabricksCatalog from all pages.
// >  [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
//
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All or DatabricksCatalog.Read.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - databricksWorkspaceConnectionID - The Databricks workspace connection ID.
//   - options - DiscoveryClientDiscoverCatalogsOptions contains the optional parameters for the DiscoveryClient.NewDiscoverCatalogsPager method.
func (client *DiscoveryClient) DiscoverCatalogs(ctx context.Context, workspaceID string, databricksWorkspaceConnectionID string, options *DiscoveryClientDiscoverCatalogsOptions) ([]DatabricksCatalog, error) {
	pager := client.NewDiscoverCatalogsPager(workspaceID, databricksWorkspaceConnectionID, options)
	mapper := func(resp DiscoveryClientDiscoverCatalogsResponse) []DatabricksCatalog {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []DatabricksCatalog{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []DatabricksCatalog{}, err
	}
	return list, nil
}

// DiscoverSchemas - returns array of DatabricksSchema from all pages.
// >  [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
//
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All or DatabricksCatalog.Read.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - catalogName - The catalog name.
//   - databricksWorkspaceConnectionID - The Databricks workspace connection ID.
//   - options - DiscoveryClientDiscoverSchemasOptions contains the optional parameters for the DiscoveryClient.NewDiscoverSchemasPager method.
func (client *DiscoveryClient) DiscoverSchemas(ctx context.Context, workspaceID string, catalogName string, databricksWorkspaceConnectionID string, options *DiscoveryClientDiscoverSchemasOptions) ([]DatabricksSchema, error) {
	pager := client.NewDiscoverSchemasPager(workspaceID, catalogName, databricksWorkspaceConnectionID, options)
	mapper := func(resp DiscoveryClientDiscoverSchemasResponse) []DatabricksSchema {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []DatabricksSchema{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []DatabricksSchema{}, err
	}
	return list, nil
}

// DiscoverTables - returns array of DatabricksTable from all pages.
// >  [!NOTE] Mirrored Azure Databricks Catalog item is currently in Preview (learn more [/fabric/fundamentals/preview]).
//
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All or DatabricksCatalog.Read.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - catalogName - The catalog name.
//   - schemaName - The schema name.
//   - databricksWorkspaceConnectionID - The Databricks workspace connection ID.
//   - options - DiscoveryClientDiscoverTablesOptions contains the optional parameters for the DiscoveryClient.NewDiscoverTablesPager method.
func (client *DiscoveryClient) DiscoverTables(ctx context.Context, workspaceID string, catalogName string, schemaName string, databricksWorkspaceConnectionID string, options *DiscoveryClientDiscoverTablesOptions) ([]DatabricksTable, error) {
	pager := client.NewDiscoverTablesPager(workspaceID, catalogName, schemaName, databricksWorkspaceConnectionID, options)
	mapper := func(resp DiscoveryClientDiscoverTablesResponse) []DatabricksTable {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []DatabricksTable{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []DatabricksTable{}, err
	}
	return list, nil
}
