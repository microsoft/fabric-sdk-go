// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/mirroredazuredatabrickscatalog"
)

// ItemsServer is a fake server for instances of the mirroredazuredatabrickscatalog.ItemsClient type.
type ItemsServer struct {
	// BeginCreateMirroredAzureDatabricksCatalog is the fake for method ItemsClient.BeginCreateMirroredAzureDatabricksCatalog
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateMirroredAzureDatabricksCatalog func(ctx context.Context, workspaceID string, createMirroredAzureDatabricksCatalogRequest mirroredazuredatabrickscatalog.CreateMirroredAzureDatabricksCatalogRequest, options *mirroredazuredatabrickscatalog.ItemsClientBeginCreateMirroredAzureDatabricksCatalogOptions) (resp azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientCreateMirroredAzureDatabricksCatalogResponse], errResp azfake.ErrorResponder)

	// DeleteMirroredAzureDatabricksCatalog is the fake for method ItemsClient.DeleteMirroredAzureDatabricksCatalog
	// HTTP status codes to indicate success: http.StatusOK
	DeleteMirroredAzureDatabricksCatalog func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *mirroredazuredatabrickscatalog.ItemsClientDeleteMirroredAzureDatabricksCatalogOptions) (resp azfake.Responder[mirroredazuredatabrickscatalog.ItemsClientDeleteMirroredAzureDatabricksCatalogResponse], errResp azfake.ErrorResponder)

	// GetMirroredAzureDatabricksCatalog is the fake for method ItemsClient.GetMirroredAzureDatabricksCatalog
	// HTTP status codes to indicate success: http.StatusOK
	GetMirroredAzureDatabricksCatalog func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *mirroredazuredatabrickscatalog.ItemsClientGetMirroredAzureDatabricksCatalogOptions) (resp azfake.Responder[mirroredazuredatabrickscatalog.ItemsClientGetMirroredAzureDatabricksCatalogResponse], errResp azfake.ErrorResponder)

	// BeginGetMirroredAzureDatabricksCatalogDefinition is the fake for method ItemsClient.BeginGetMirroredAzureDatabricksCatalogDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetMirroredAzureDatabricksCatalogDefinition func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *mirroredazuredatabrickscatalog.ItemsClientBeginGetMirroredAzureDatabricksCatalogDefinitionOptions) (resp azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListMirroredAzureDatabricksCatalogsPager is the fake for method ItemsClient.NewListMirroredAzureDatabricksCatalogsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListMirroredAzureDatabricksCatalogsPager func(workspaceID string, options *mirroredazuredatabrickscatalog.ItemsClientListMirroredAzureDatabricksCatalogsOptions) (resp azfake.PagerResponder[mirroredazuredatabrickscatalog.ItemsClientListMirroredAzureDatabricksCatalogsResponse])

	// UpdateMirroredAzureDatabricksCatalog is the fake for method ItemsClient.UpdateMirroredAzureDatabricksCatalog
	// HTTP status codes to indicate success: http.StatusOK
	UpdateMirroredAzureDatabricksCatalog func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, updateMirroredAzureDatabricksCatalogRequest mirroredazuredatabrickscatalog.UpdateMirroredAzureDatabricksCatalogRequest, options *mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogOptions) (resp azfake.Responder[mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogResponse], errResp azfake.ErrorResponder)

	// BeginUpdateMirroredAzureDatabricksCatalogDefinition is the fake for method ItemsClient.BeginUpdateMirroredAzureDatabricksCatalogDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateMirroredAzureDatabricksCatalogDefinition func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, updateMirroredAzureDatabricksCatalogDefinitionRequest mirroredazuredatabrickscatalog.UpdatemirroredAzureDatabricksCatalogDefinitionRequest, options *mirroredazuredatabrickscatalog.ItemsClientBeginUpdateMirroredAzureDatabricksCatalogDefinitionOptions) (resp azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of mirroredazuredatabrickscatalog.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv: srv,
		beginCreateMirroredAzureDatabricksCatalog:           newTracker[azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientCreateMirroredAzureDatabricksCatalogResponse]](),
		beginGetMirroredAzureDatabricksCatalogDefinition:    newTracker[azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse]](),
		newListMirroredAzureDatabricksCatalogsPager:         newTracker[azfake.PagerResponder[mirroredazuredatabrickscatalog.ItemsClientListMirroredAzureDatabricksCatalogsResponse]](),
		beginUpdateMirroredAzureDatabricksCatalogDefinition: newTracker[azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse]](),
	}
}

// ItemsServerTransport connects instances of mirroredazuredatabrickscatalog.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                                                 *ItemsServer
	beginCreateMirroredAzureDatabricksCatalog           *tracker[azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientCreateMirroredAzureDatabricksCatalogResponse]]
	beginGetMirroredAzureDatabricksCatalogDefinition    *tracker[azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientGetMirroredAzureDatabricksCatalogDefinitionResponse]]
	newListMirroredAzureDatabricksCatalogsPager         *tracker[azfake.PagerResponder[mirroredazuredatabrickscatalog.ItemsClientListMirroredAzureDatabricksCatalogsResponse]]
	beginUpdateMirroredAzureDatabricksCatalogDefinition *tracker[azfake.PollerResponder[mirroredazuredatabrickscatalog.ItemsClientUpdateMirroredAzureDatabricksCatalogDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateMirroredAzureDatabricksCatalog":
				res.resp, res.err = i.dispatchBeginCreateMirroredAzureDatabricksCatalog(req)
			case "ItemsClient.DeleteMirroredAzureDatabricksCatalog":
				res.resp, res.err = i.dispatchDeleteMirroredAzureDatabricksCatalog(req)
			case "ItemsClient.GetMirroredAzureDatabricksCatalog":
				res.resp, res.err = i.dispatchGetMirroredAzureDatabricksCatalog(req)
			case "ItemsClient.BeginGetMirroredAzureDatabricksCatalogDefinition":
				res.resp, res.err = i.dispatchBeginGetMirroredAzureDatabricksCatalogDefinition(req)
			case "ItemsClient.NewListMirroredAzureDatabricksCatalogsPager":
				res.resp, res.err = i.dispatchNewListMirroredAzureDatabricksCatalogsPager(req)
			case "ItemsClient.UpdateMirroredAzureDatabricksCatalog":
				res.resp, res.err = i.dispatchUpdateMirroredAzureDatabricksCatalog(req)
			case "ItemsClient.BeginUpdateMirroredAzureDatabricksCatalogDefinition":
				res.resp, res.err = i.dispatchBeginUpdateMirroredAzureDatabricksCatalogDefinition(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateMirroredAzureDatabricksCatalog(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateMirroredAzureDatabricksCatalog == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateMirroredAzureDatabricksCatalog not implemented")}
	}
	beginCreateMirroredAzureDatabricksCatalog := i.beginCreateMirroredAzureDatabricksCatalog.get(req)
	if beginCreateMirroredAzureDatabricksCatalog == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredAzureDatabricksCatalogs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[mirroredazuredatabrickscatalog.CreateMirroredAzureDatabricksCatalogRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateMirroredAzureDatabricksCatalog(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateMirroredAzureDatabricksCatalog = &respr
		i.beginCreateMirroredAzureDatabricksCatalog.add(req, beginCreateMirroredAzureDatabricksCatalog)
	}

	resp, err := server.PollerResponderNext(beginCreateMirroredAzureDatabricksCatalog, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateMirroredAzureDatabricksCatalog.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateMirroredAzureDatabricksCatalog) {
		i.beginCreateMirroredAzureDatabricksCatalog.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteMirroredAzureDatabricksCatalog(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteMirroredAzureDatabricksCatalog == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteMirroredAzureDatabricksCatalog not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredAzureDatabricksCatalogs/(?P<mirroredAzureDatabricksCatalogId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mirroredAzureDatabricksCatalogIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredAzureDatabricksCatalogId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteMirroredAzureDatabricksCatalog(req.Context(), workspaceIDParam, mirroredAzureDatabricksCatalogIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetMirroredAzureDatabricksCatalog(req *http.Request) (*http.Response, error) {
	if i.srv.GetMirroredAzureDatabricksCatalog == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMirroredAzureDatabricksCatalog not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredAzureDatabricksCatalogs/(?P<mirroredAzureDatabricksCatalogId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mirroredAzureDatabricksCatalogIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredAzureDatabricksCatalogId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetMirroredAzureDatabricksCatalog(req.Context(), workspaceIDParam, mirroredAzureDatabricksCatalogIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MirroredAzureDatabricksCatalog, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginGetMirroredAzureDatabricksCatalogDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginGetMirroredAzureDatabricksCatalogDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetMirroredAzureDatabricksCatalogDefinition not implemented")}
	}
	beginGetMirroredAzureDatabricksCatalogDefinition := i.beginGetMirroredAzureDatabricksCatalogDefinition.get(req)
	if beginGetMirroredAzureDatabricksCatalogDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredAzureDatabricksCatalogs/(?P<mirroredAzureDatabricksCatalogId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		mirroredAzureDatabricksCatalogIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredAzureDatabricksCatalogId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginGetMirroredAzureDatabricksCatalogDefinition(req.Context(), workspaceIDParam, mirroredAzureDatabricksCatalogIDParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetMirroredAzureDatabricksCatalogDefinition = &respr
		i.beginGetMirroredAzureDatabricksCatalogDefinition.add(req, beginGetMirroredAzureDatabricksCatalogDefinition)
	}

	resp, err := server.PollerResponderNext(beginGetMirroredAzureDatabricksCatalogDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginGetMirroredAzureDatabricksCatalogDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetMirroredAzureDatabricksCatalogDefinition) {
		i.beginGetMirroredAzureDatabricksCatalogDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListMirroredAzureDatabricksCatalogsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListMirroredAzureDatabricksCatalogsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListMirroredAzureDatabricksCatalogsPager not implemented")}
	}
	newListMirroredAzureDatabricksCatalogsPager := i.newListMirroredAzureDatabricksCatalogsPager.get(req)
	if newListMirroredAzureDatabricksCatalogsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredAzureDatabricksCatalogs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *mirroredazuredatabrickscatalog.ItemsClientListMirroredAzureDatabricksCatalogsOptions
		if continuationTokenParam != nil {
			options = &mirroredazuredatabrickscatalog.ItemsClientListMirroredAzureDatabricksCatalogsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListMirroredAzureDatabricksCatalogsPager(workspaceIDParam, options)
		newListMirroredAzureDatabricksCatalogsPager = &resp
		i.newListMirroredAzureDatabricksCatalogsPager.add(req, newListMirroredAzureDatabricksCatalogsPager)
		server.PagerResponderInjectNextLinks(newListMirroredAzureDatabricksCatalogsPager, req, func(page *mirroredazuredatabrickscatalog.ItemsClientListMirroredAzureDatabricksCatalogsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListMirroredAzureDatabricksCatalogsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListMirroredAzureDatabricksCatalogsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListMirroredAzureDatabricksCatalogsPager) {
		i.newListMirroredAzureDatabricksCatalogsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateMirroredAzureDatabricksCatalog(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateMirroredAzureDatabricksCatalog == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateMirroredAzureDatabricksCatalog not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredAzureDatabricksCatalogs/(?P<mirroredAzureDatabricksCatalogId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[mirroredazuredatabrickscatalog.UpdateMirroredAzureDatabricksCatalogRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mirroredAzureDatabricksCatalogIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredAzureDatabricksCatalogId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateMirroredAzureDatabricksCatalog(req.Context(), workspaceIDParam, mirroredAzureDatabricksCatalogIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MirroredAzureDatabricksCatalog, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginUpdateMirroredAzureDatabricksCatalogDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateMirroredAzureDatabricksCatalogDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateMirroredAzureDatabricksCatalogDefinition not implemented")}
	}
	beginUpdateMirroredAzureDatabricksCatalogDefinition := i.beginUpdateMirroredAzureDatabricksCatalogDefinition.get(req)
	if beginUpdateMirroredAzureDatabricksCatalogDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredAzureDatabricksCatalogs/(?P<mirroredAzureDatabricksCatalogId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[mirroredazuredatabrickscatalog.UpdatemirroredAzureDatabricksCatalogDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		mirroredAzureDatabricksCatalogIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredAzureDatabricksCatalogId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginUpdateMirroredAzureDatabricksCatalogDefinition(req.Context(), workspaceIDParam, mirroredAzureDatabricksCatalogIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateMirroredAzureDatabricksCatalogDefinition = &respr
		i.beginUpdateMirroredAzureDatabricksCatalogDefinition.add(req, beginUpdateMirroredAzureDatabricksCatalogDefinition)
	}

	resp, err := server.PollerResponderNext(beginUpdateMirroredAzureDatabricksCatalogDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginUpdateMirroredAzureDatabricksCatalogDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateMirroredAzureDatabricksCatalogDefinition) {
		i.beginUpdateMirroredAzureDatabricksCatalogDefinition.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
