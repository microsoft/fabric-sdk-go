// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/mirroredazuredatabrickscatalog"
)

// RefreshServer is a fake server for instances of the mirroredazuredatabrickscatalog.RefreshClient type.
type RefreshServer struct {
	// BeginRefreshCatalogMetadata is the fake for method RefreshClient.BeginRefreshCatalogMetadata
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginRefreshCatalogMetadata func(ctx context.Context, workspaceID string, mirroredAzureDatabricksCatalogID string, options *mirroredazuredatabrickscatalog.RefreshClientBeginRefreshCatalogMetadataOptions) (resp azfake.PollerResponder[mirroredazuredatabrickscatalog.RefreshClientRefreshCatalogMetadataResponse], errResp azfake.ErrorResponder)
}

// NewRefreshServerTransport creates a new instance of RefreshServerTransport with the provided implementation.
// The returned RefreshServerTransport instance is connected to an instance of mirroredazuredatabrickscatalog.RefreshClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewRefreshServerTransport(srv *RefreshServer) *RefreshServerTransport {
	return &RefreshServerTransport{
		srv:                         srv,
		beginRefreshCatalogMetadata: newTracker[azfake.PollerResponder[mirroredazuredatabrickscatalog.RefreshClientRefreshCatalogMetadataResponse]](),
	}
}

// RefreshServerTransport connects instances of mirroredazuredatabrickscatalog.RefreshClient to instances of RefreshServer.
// Don't use this type directly, use NewRefreshServerTransport instead.
type RefreshServerTransport struct {
	srv                         *RefreshServer
	beginRefreshCatalogMetadata *tracker[azfake.PollerResponder[mirroredazuredatabrickscatalog.RefreshClientRefreshCatalogMetadataResponse]]
}

// Do implements the policy.Transporter interface for RefreshServerTransport.
func (r *RefreshServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return r.dispatchToMethodFake(req, method)
}

func (r *RefreshServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if refreshServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = refreshServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "RefreshClient.BeginRefreshCatalogMetadata":
				res.resp, res.err = r.dispatchBeginRefreshCatalogMetadata(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (r *RefreshServerTransport) dispatchBeginRefreshCatalogMetadata(req *http.Request) (*http.Response, error) {
	if r.srv.BeginRefreshCatalogMetadata == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginRefreshCatalogMetadata not implemented")}
	}
	beginRefreshCatalogMetadata := r.beginRefreshCatalogMetadata.get(req)
	if beginRefreshCatalogMetadata == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredAzureDatabricksCatalogs/(?P<mirroredAzureDatabricksCatalogId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/refreshCatalogMetadata`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		mirroredAzureDatabricksCatalogIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredAzureDatabricksCatalogId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := r.srv.BeginRefreshCatalogMetadata(req.Context(), workspaceIDParam, mirroredAzureDatabricksCatalogIDParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginRefreshCatalogMetadata = &respr
		r.beginRefreshCatalogMetadata.add(req, beginRefreshCatalogMetadata)
	}

	resp, err := server.PollerResponderNext(beginRefreshCatalogMetadata, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		r.beginRefreshCatalogMetadata.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginRefreshCatalogMetadata) {
		r.beginRefreshCatalogMetadata.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to RefreshServerTransport
var refreshServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
