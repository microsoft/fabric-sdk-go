// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/mirroredazuredatabrickscatalog"
)

// DiscoveryServer is a fake server for instances of the mirroredazuredatabrickscatalog.DiscoveryClient type.
type DiscoveryServer struct {
	// NewDiscoverCatalogsPager is the fake for method DiscoveryClient.NewDiscoverCatalogsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewDiscoverCatalogsPager func(workspaceID string, databricksWorkspaceConnectionID string, options *mirroredazuredatabrickscatalog.DiscoveryClientDiscoverCatalogsOptions) (resp azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverCatalogsResponse])

	// NewDiscoverSchemasPager is the fake for method DiscoveryClient.NewDiscoverSchemasPager
	// HTTP status codes to indicate success: http.StatusOK
	NewDiscoverSchemasPager func(workspaceID string, catalogName string, databricksWorkspaceConnectionID string, options *mirroredazuredatabrickscatalog.DiscoveryClientDiscoverSchemasOptions) (resp azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverSchemasResponse])

	// NewDiscoverTablesPager is the fake for method DiscoveryClient.NewDiscoverTablesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewDiscoverTablesPager func(workspaceID string, catalogName string, schemaName string, databricksWorkspaceConnectionID string, options *mirroredazuredatabrickscatalog.DiscoveryClientDiscoverTablesOptions) (resp azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverTablesResponse])
}

// NewDiscoveryServerTransport creates a new instance of DiscoveryServerTransport with the provided implementation.
// The returned DiscoveryServerTransport instance is connected to an instance of mirroredazuredatabrickscatalog.DiscoveryClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDiscoveryServerTransport(srv *DiscoveryServer) *DiscoveryServerTransport {
	return &DiscoveryServerTransport{
		srv:                      srv,
		newDiscoverCatalogsPager: newTracker[azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverCatalogsResponse]](),
		newDiscoverSchemasPager:  newTracker[azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverSchemasResponse]](),
		newDiscoverTablesPager:   newTracker[azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverTablesResponse]](),
	}
}

// DiscoveryServerTransport connects instances of mirroredazuredatabrickscatalog.DiscoveryClient to instances of DiscoveryServer.
// Don't use this type directly, use NewDiscoveryServerTransport instead.
type DiscoveryServerTransport struct {
	srv                      *DiscoveryServer
	newDiscoverCatalogsPager *tracker[azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverCatalogsResponse]]
	newDiscoverSchemasPager  *tracker[azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverSchemasResponse]]
	newDiscoverTablesPager   *tracker[azfake.PagerResponder[mirroredazuredatabrickscatalog.DiscoveryClientDiscoverTablesResponse]]
}

// Do implements the policy.Transporter interface for DiscoveryServerTransport.
func (d *DiscoveryServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return d.dispatchToMethodFake(req, method)
}

func (d *DiscoveryServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if discoveryServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = discoveryServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "DiscoveryClient.NewDiscoverCatalogsPager":
				res.resp, res.err = d.dispatchNewDiscoverCatalogsPager(req)
			case "DiscoveryClient.NewDiscoverSchemasPager":
				res.resp, res.err = d.dispatchNewDiscoverSchemasPager(req)
			case "DiscoveryClient.NewDiscoverTablesPager":
				res.resp, res.err = d.dispatchNewDiscoverTablesPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (d *DiscoveryServerTransport) dispatchNewDiscoverCatalogsPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewDiscoverCatalogsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewDiscoverCatalogsPager not implemented")}
	}
	newDiscoverCatalogsPager := d.newDiscoverCatalogsPager.get(req)
	if newDiscoverCatalogsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/azuredatabricks/catalogs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		databricksWorkspaceConnectionIDParam, err := url.QueryUnescape(qp.Get("databricksWorkspaceConnectionId"))
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		maxResultsUnescaped, err := url.QueryUnescape(qp.Get("maxResults"))
		if err != nil {
			return nil, err
		}
		maxResultsParam, err := parseOptional(maxResultsUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *mirroredazuredatabrickscatalog.DiscoveryClientDiscoverCatalogsOptions
		if continuationTokenParam != nil || maxResultsParam != nil {
			options = &mirroredazuredatabrickscatalog.DiscoveryClientDiscoverCatalogsOptions{
				ContinuationToken: continuationTokenParam,
				MaxResults:        maxResultsParam,
			}
		}
		resp := d.srv.NewDiscoverCatalogsPager(workspaceIDParam, databricksWorkspaceConnectionIDParam, options)
		newDiscoverCatalogsPager = &resp
		d.newDiscoverCatalogsPager.add(req, newDiscoverCatalogsPager)
		server.PagerResponderInjectNextLinks(newDiscoverCatalogsPager, req, func(page *mirroredazuredatabrickscatalog.DiscoveryClientDiscoverCatalogsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newDiscoverCatalogsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newDiscoverCatalogsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newDiscoverCatalogsPager) {
		d.newDiscoverCatalogsPager.remove(req)
	}
	return resp, nil
}

func (d *DiscoveryServerTransport) dispatchNewDiscoverSchemasPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewDiscoverSchemasPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewDiscoverSchemasPager not implemented")}
	}
	newDiscoverSchemasPager := d.newDiscoverSchemasPager.get(req)
	if newDiscoverSchemasPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/azuredatabricks/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/schemas`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
		if err != nil {
			return nil, err
		}
		databricksWorkspaceConnectionIDParam, err := url.QueryUnescape(qp.Get("databricksWorkspaceConnectionId"))
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		maxResultsUnescaped, err := url.QueryUnescape(qp.Get("maxResults"))
		if err != nil {
			return nil, err
		}
		maxResultsParam, err := parseOptional(maxResultsUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *mirroredazuredatabrickscatalog.DiscoveryClientDiscoverSchemasOptions
		if continuationTokenParam != nil || maxResultsParam != nil {
			options = &mirroredazuredatabrickscatalog.DiscoveryClientDiscoverSchemasOptions{
				ContinuationToken: continuationTokenParam,
				MaxResults:        maxResultsParam,
			}
		}
		resp := d.srv.NewDiscoverSchemasPager(workspaceIDParam, catalogNameParam, databricksWorkspaceConnectionIDParam, options)
		newDiscoverSchemasPager = &resp
		d.newDiscoverSchemasPager.add(req, newDiscoverSchemasPager)
		server.PagerResponderInjectNextLinks(newDiscoverSchemasPager, req, func(page *mirroredazuredatabrickscatalog.DiscoveryClientDiscoverSchemasResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newDiscoverSchemasPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newDiscoverSchemasPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newDiscoverSchemasPager) {
		d.newDiscoverSchemasPager.remove(req)
	}
	return resp, nil
}

func (d *DiscoveryServerTransport) dispatchNewDiscoverTablesPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewDiscoverTablesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewDiscoverTablesPager not implemented")}
	}
	newDiscoverTablesPager := d.newDiscoverTablesPager.get(req)
	if newDiscoverTablesPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/azuredatabricks/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/schemas/(?P<schemaName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/tables`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
		if err != nil {
			return nil, err
		}
		schemaNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("schemaName")])
		if err != nil {
			return nil, err
		}
		databricksWorkspaceConnectionIDParam, err := url.QueryUnescape(qp.Get("databricksWorkspaceConnectionId"))
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		maxResultsUnescaped, err := url.QueryUnescape(qp.Get("maxResults"))
		if err != nil {
			return nil, err
		}
		maxResultsParam, err := parseOptional(maxResultsUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *mirroredazuredatabrickscatalog.DiscoveryClientDiscoverTablesOptions
		if continuationTokenParam != nil || maxResultsParam != nil {
			options = &mirroredazuredatabrickscatalog.DiscoveryClientDiscoverTablesOptions{
				ContinuationToken: continuationTokenParam,
				MaxResults:        maxResultsParam,
			}
		}
		resp := d.srv.NewDiscoverTablesPager(workspaceIDParam, catalogNameParam, schemaNameParam, databricksWorkspaceConnectionIDParam, options)
		newDiscoverTablesPager = &resp
		d.newDiscoverTablesPager.add(req, newDiscoverTablesPager)
		server.PagerResponderInjectNextLinks(newDiscoverTablesPager, req, func(page *mirroredazuredatabrickscatalog.DiscoveryClientDiscoverTablesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newDiscoverTablesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newDiscoverTablesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newDiscoverTablesPager) {
		d.newDiscoverTablesPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to DiscoveryServerTransport
var discoveryServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
