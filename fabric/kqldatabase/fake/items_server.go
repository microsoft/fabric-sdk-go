// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/kqldatabase"
)

// ItemsServer is a fake server for instances of the kqldatabase.ItemsClient type.
type ItemsServer struct {
	// BeginCreateKQLDatabase is the fake for method ItemsClient.BeginCreateKQLDatabase
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateKQLDatabase func(ctx context.Context, workspaceID string, createKQLDatabaseRequest kqldatabase.CreateKQLDatabaseRequest, options *kqldatabase.ItemsClientBeginCreateKQLDatabaseOptions) (resp azfake.PollerResponder[kqldatabase.ItemsClientCreateKQLDatabaseResponse], errResp azfake.ErrorResponder)

	// DeleteKQLDatabase is the fake for method ItemsClient.DeleteKQLDatabase
	// HTTP status codes to indicate success: http.StatusOK
	DeleteKQLDatabase func(ctx context.Context, workspaceID string, kqlDatabaseID string, options *kqldatabase.ItemsClientDeleteKQLDatabaseOptions) (resp azfake.Responder[kqldatabase.ItemsClientDeleteKQLDatabaseResponse], errResp azfake.ErrorResponder)

	// GetKQLDatabase is the fake for method ItemsClient.GetKQLDatabase
	// HTTP status codes to indicate success: http.StatusOK
	GetKQLDatabase func(ctx context.Context, workspaceID string, kqlDatabaseID string, options *kqldatabase.ItemsClientGetKQLDatabaseOptions) (resp azfake.Responder[kqldatabase.ItemsClientGetKQLDatabaseResponse], errResp azfake.ErrorResponder)

	// BeginGetKQLDatabaseDefinition is the fake for method ItemsClient.BeginGetKQLDatabaseDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetKQLDatabaseDefinition func(ctx context.Context, workspaceID string, kqlDatabaseID string, options *kqldatabase.ItemsClientBeginGetKQLDatabaseDefinitionOptions) (resp azfake.PollerResponder[kqldatabase.ItemsClientGetKQLDatabaseDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListKQLDatabasesPager is the fake for method ItemsClient.NewListKQLDatabasesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListKQLDatabasesPager func(workspaceID string, options *kqldatabase.ItemsClientListKQLDatabasesOptions) (resp azfake.PagerResponder[kqldatabase.ItemsClientListKQLDatabasesResponse])

	// UpdateKQLDatabase is the fake for method ItemsClient.UpdateKQLDatabase
	// HTTP status codes to indicate success: http.StatusOK
	UpdateKQLDatabase func(ctx context.Context, workspaceID string, kqlDatabaseID string, updateKQLDatabaseRequest kqldatabase.UpdateKQLDatabaseRequest, options *kqldatabase.ItemsClientUpdateKQLDatabaseOptions) (resp azfake.Responder[kqldatabase.ItemsClientUpdateKQLDatabaseResponse], errResp azfake.ErrorResponder)

	// BeginUpdateKQLDatabaseDefinition is the fake for method ItemsClient.BeginUpdateKQLDatabaseDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateKQLDatabaseDefinition func(ctx context.Context, workspaceID string, kqlDatabaseID string, updateKQLDatabaseDefinitionRequest kqldatabase.UpdateKQLDatabaseDefinitionRequest, options *kqldatabase.ItemsClientBeginUpdateKQLDatabaseDefinitionOptions) (resp azfake.PollerResponder[kqldatabase.ItemsClientUpdateKQLDatabaseDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of kqldatabase.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                              srv,
		beginCreateKQLDatabase:           newTracker[azfake.PollerResponder[kqldatabase.ItemsClientCreateKQLDatabaseResponse]](),
		beginGetKQLDatabaseDefinition:    newTracker[azfake.PollerResponder[kqldatabase.ItemsClientGetKQLDatabaseDefinitionResponse]](),
		newListKQLDatabasesPager:         newTracker[azfake.PagerResponder[kqldatabase.ItemsClientListKQLDatabasesResponse]](),
		beginUpdateKQLDatabaseDefinition: newTracker[azfake.PollerResponder[kqldatabase.ItemsClientUpdateKQLDatabaseDefinitionResponse]](),
	}
}

// ItemsServerTransport connects instances of kqldatabase.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                              *ItemsServer
	beginCreateKQLDatabase           *tracker[azfake.PollerResponder[kqldatabase.ItemsClientCreateKQLDatabaseResponse]]
	beginGetKQLDatabaseDefinition    *tracker[azfake.PollerResponder[kqldatabase.ItemsClientGetKQLDatabaseDefinitionResponse]]
	newListKQLDatabasesPager         *tracker[azfake.PagerResponder[kqldatabase.ItemsClientListKQLDatabasesResponse]]
	beginUpdateKQLDatabaseDefinition *tracker[azfake.PollerResponder[kqldatabase.ItemsClientUpdateKQLDatabaseDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateKQLDatabase":
				res.resp, res.err = i.dispatchBeginCreateKQLDatabase(req)
			case "ItemsClient.DeleteKQLDatabase":
				res.resp, res.err = i.dispatchDeleteKQLDatabase(req)
			case "ItemsClient.GetKQLDatabase":
				res.resp, res.err = i.dispatchGetKQLDatabase(req)
			case "ItemsClient.BeginGetKQLDatabaseDefinition":
				res.resp, res.err = i.dispatchBeginGetKQLDatabaseDefinition(req)
			case "ItemsClient.NewListKQLDatabasesPager":
				res.resp, res.err = i.dispatchNewListKQLDatabasesPager(req)
			case "ItemsClient.UpdateKQLDatabase":
				res.resp, res.err = i.dispatchUpdateKQLDatabase(req)
			case "ItemsClient.BeginUpdateKQLDatabaseDefinition":
				res.resp, res.err = i.dispatchBeginUpdateKQLDatabaseDefinition(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateKQLDatabase(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateKQLDatabase == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateKQLDatabase not implemented")}
	}
	beginCreateKQLDatabase := i.beginCreateKQLDatabase.get(req)
	if beginCreateKQLDatabase == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDatabases`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[kqldatabase.CreateKQLDatabaseRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateKQLDatabase(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateKQLDatabase = &respr
		i.beginCreateKQLDatabase.add(req, beginCreateKQLDatabase)
	}

	resp, err := server.PollerResponderNext(beginCreateKQLDatabase, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateKQLDatabase.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateKQLDatabase) {
		i.beginCreateKQLDatabase.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteKQLDatabase(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteKQLDatabase == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteKQLDatabase not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDatabases/(?P<kqlDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlDatabaseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteKQLDatabase(req.Context(), workspaceIDParam, kqlDatabaseIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetKQLDatabase(req *http.Request) (*http.Response, error) {
	if i.srv.GetKQLDatabase == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetKQLDatabase not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDatabases/(?P<kqlDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlDatabaseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetKQLDatabase(req.Context(), workspaceIDParam, kqlDatabaseIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KQLDatabase, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginGetKQLDatabaseDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginGetKQLDatabaseDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetKQLDatabaseDefinition not implemented")}
	}
	beginGetKQLDatabaseDefinition := i.beginGetKQLDatabaseDefinition.get(req)
	if beginGetKQLDatabaseDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDatabases/(?P<kqlDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		kqlDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlDatabaseId")])
		if err != nil {
			return nil, err
		}
		formatUnescaped, err := url.QueryUnescape(qp.Get("format"))
		if err != nil {
			return nil, err
		}
		formatParam := getOptional(formatUnescaped)
		var options *kqldatabase.ItemsClientBeginGetKQLDatabaseDefinitionOptions
		if formatParam != nil {
			options = &kqldatabase.ItemsClientBeginGetKQLDatabaseDefinitionOptions{
				Format: formatParam,
			}
		}
		respr, errRespr := i.srv.BeginGetKQLDatabaseDefinition(req.Context(), workspaceIDParam, kqlDatabaseIDParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetKQLDatabaseDefinition = &respr
		i.beginGetKQLDatabaseDefinition.add(req, beginGetKQLDatabaseDefinition)
	}

	resp, err := server.PollerResponderNext(beginGetKQLDatabaseDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginGetKQLDatabaseDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetKQLDatabaseDefinition) {
		i.beginGetKQLDatabaseDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListKQLDatabasesPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListKQLDatabasesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListKQLDatabasesPager not implemented")}
	}
	newListKQLDatabasesPager := i.newListKQLDatabasesPager.get(req)
	if newListKQLDatabasesPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDatabases`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *kqldatabase.ItemsClientListKQLDatabasesOptions
		if continuationTokenParam != nil {
			options = &kqldatabase.ItemsClientListKQLDatabasesOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListKQLDatabasesPager(workspaceIDParam, options)
		newListKQLDatabasesPager = &resp
		i.newListKQLDatabasesPager.add(req, newListKQLDatabasesPager)
		server.PagerResponderInjectNextLinks(newListKQLDatabasesPager, req, func(page *kqldatabase.ItemsClientListKQLDatabasesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListKQLDatabasesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListKQLDatabasesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListKQLDatabasesPager) {
		i.newListKQLDatabasesPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateKQLDatabase(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateKQLDatabase == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateKQLDatabase not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDatabases/(?P<kqlDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[kqldatabase.UpdateKQLDatabaseRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlDatabaseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateKQLDatabase(req.Context(), workspaceIDParam, kqlDatabaseIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KQLDatabase, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginUpdateKQLDatabaseDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateKQLDatabaseDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateKQLDatabaseDefinition not implemented")}
	}
	beginUpdateKQLDatabaseDefinition := i.beginUpdateKQLDatabaseDefinition.get(req)
	if beginUpdateKQLDatabaseDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlDatabases/(?P<kqlDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[kqldatabase.UpdateKQLDatabaseDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		kqlDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlDatabaseId")])
		if err != nil {
			return nil, err
		}
		updateMetadataUnescaped, err := url.QueryUnescape(qp.Get("updateMetadata"))
		if err != nil {
			return nil, err
		}
		updateMetadataParam, err := parseOptional(updateMetadataUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *kqldatabase.ItemsClientBeginUpdateKQLDatabaseDefinitionOptions
		if updateMetadataParam != nil {
			options = &kqldatabase.ItemsClientBeginUpdateKQLDatabaseDefinitionOptions{
				UpdateMetadata: updateMetadataParam,
			}
		}
		respr, errRespr := i.srv.BeginUpdateKQLDatabaseDefinition(req.Context(), workspaceIDParam, kqlDatabaseIDParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateKQLDatabaseDefinition = &respr
		i.beginUpdateKQLDatabaseDefinition.add(req, beginUpdateKQLDatabaseDefinition)
	}

	resp, err := server.PollerResponderNext(beginUpdateKQLDatabaseDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginUpdateKQLDatabaseDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateKQLDatabaseDefinition) {
		i.beginUpdateKQLDatabaseDefinition.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
