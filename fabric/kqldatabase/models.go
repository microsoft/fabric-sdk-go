// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package kqldatabase

// CreateKQLDatabaseRequest - Create KQL database request payload.
type CreateKQLDatabaseRequest struct {
	// REQUIRED; The KQL database display name. The database name can contain alphanumeric characters, underscores, periods, and
	// hyphens. Special characters aren't supported.
	DisplayName *string

	// The KQL database creation payload. Use definition or creationPayload. You can't use both at the same time.
	CreationPayload CreationPayloadClassification

	// The KQL database public definition. Use creationPayload or definition. You can't use both at the same time.
	Definition *Definition

	// The KQL database description. Maximum length is 256 characters.
	Description *string

	// The folder ID. If not specified or null, the KQL database is created with the workspace as its folder.
	FolderID *string
}

// CreationPayload - KQL database item payload
type CreationPayload struct {
	// REQUIRED; The type of the KQL database
	DatabaseType *Type

	// REQUIRED; Parent eventhouse item ID.
	ParentEventhouseItemID *string
}

// GetCreationPayload implements the CreationPayloadClassification interface for type CreationPayload.
func (c *CreationPayload) GetCreationPayload() *CreationPayload { return c }

// Definition - KQL database public definition object.
type Definition struct {
	// REQUIRED; A list of definition parts.
	Parts []DefinitionPart

	// The format of the item definition.
	Format *string
}

// DefinitionPart - KQL database definition part object.
type DefinitionPart struct {
	// The KQL database part path.
	Path *string

	// The KQL database part payload.
	Payload *string

	// The payload type.
	PayloadType *PayloadType
}

// DefinitionResponse - KQL database public definition response.
type DefinitionResponse struct {
	// READ-ONLY; KQL database public definition object.
	Definition *Definition
}

// ItemTag - Represents a tag applied on an item.
type ItemTag struct {
	// REQUIRED; The name of the tag.
	DisplayName *string

	// REQUIRED; The tag ID.
	ID *string
}

// KQLDatabase - A KQL database object.
type KQLDatabase struct {
	// REQUIRED; The item type.
	Type *ItemType

	// The item description.
	Description *string

	// The item display name.
	DisplayName *string

	// The KQL database properties.
	Properties *Properties

	// READ-ONLY; The folder ID.
	FolderID *string

	// READ-ONLY; The item ID.
	ID *string

	// READ-ONLY; List of applied tags.
	Tags []ItemTag

	// READ-ONLY; The workspace ID.
	WorkspaceID *string
}

// KQLDatabases - A list of KQL databases.
type KQLDatabases struct {
	// REQUIRED; A list of KQL databases.
	Value []KQLDatabase

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// Properties - The KQL database properties.
type Properties struct {
	// REQUIRED; Ingestion service URI.
	IngestionServiceURI *string

	// REQUIRED; Query service URI.
	QueryServiceURI *string

	// The type of the database.
	DatabaseType *Type

	// Parent eventhouse ID.
	ParentEventhouseItemID *string
}

// ReadWriteDatabaseCreationPayload - ReadWrite KQL database item creation payload
type ReadWriteDatabaseCreationPayload struct {
	// REQUIRED; The type of the KQL database
	DatabaseType *Type

	// REQUIRED; Parent eventhouse item ID.
	ParentEventhouseItemID *string
}

// GetCreationPayload implements the CreationPayloadClassification interface for type ReadWriteDatabaseCreationPayload.
func (r *ReadWriteDatabaseCreationPayload) GetCreationPayload() *CreationPayload {
	return &CreationPayload{
		DatabaseType:           r.DatabaseType,
		ParentEventhouseItemID: r.ParentEventhouseItemID,
	}
}

// ShortcutDatabaseCreationPayload - Shortcut KQL database item creation payload
type ShortcutDatabaseCreationPayload struct {
	// REQUIRED; The type of the KQL database
	DatabaseType *Type

	// REQUIRED; Parent eventhouse item ID.
	ParentEventhouseItemID *string

	// Invitation token to follow the source database
	InvitationToken *string

	// The URI of the source Eventhouse or Azure Data Explorer cluster
	SourceClusterURI *string

	// The name of the database to follow in the source Eventhouse or Azure Data Explorer cluster.
	SourceDatabaseName *string
}

// GetCreationPayload implements the CreationPayloadClassification interface for type ShortcutDatabaseCreationPayload.
func (s *ShortcutDatabaseCreationPayload) GetCreationPayload() *CreationPayload {
	return &CreationPayload{
		DatabaseType:           s.DatabaseType,
		ParentEventhouseItemID: s.ParentEventhouseItemID,
	}
}

// UpdateKQLDatabaseDefinitionRequest - Update KQL database public definition request payload.
type UpdateKQLDatabaseDefinitionRequest struct {
	// REQUIRED; KQL database public definition object.
	Definition *Definition
}

// UpdateKQLDatabaseRequest - Update KQL database request.
type UpdateKQLDatabaseRequest struct {
	// The KQL database description. Maximum length is 256 characters.
	Description *string

	// The KQL database display name. The database name can contain alphanumeric characters, underscores, periods, and hyphens.
	// Special characters aren't supported.
	DisplayName *string
}
