// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package kqldatabase_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"

	"github.com/microsoft/fabric-sdk-go/fabric/kqldatabase"
)

// Generated from example definition
func ExampleItemsClient_NewListKQLDatabasesPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldatabase.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewItemsClient().NewListKQLDatabasesPager("cfafbeb1-8037-4d0c-896e-a46fb27ff229", &kqldatabase.ItemsClientListKQLDatabasesOptions{ContinuationToken: nil})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.KQLDatabases = kqldatabase.KQLDatabases{
		// 	Value: []kqldatabase.KQLDatabase{
		// 		{
		// 			Type: to.Ptr(kqldatabase.ItemTypeKQLDatabase),
		// 			Description: to.Ptr("A KQL database description."),
		// 			DisplayName: to.Ptr("KQLDatabase_1"),
		// 			ID: to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
		// 			WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		// 			Properties: &kqldatabase.Properties{
		// 				DatabaseType: to.Ptr(kqldatabase.TypeReadWrite),
		// 				IngestionServiceURI: to.Ptr("https://ingest-trd-f7k1b2rzuqrjmb3wpd.z5.kusto.fabric.microsoft.com"),
		// 				ParentEventhouseItemID: to.Ptr("6a437a7c-1a28-4fd0-a362-11308b94c79b"),
		// 				QueryServiceURI: to.Ptr("https://trd-f7k1b2rzuqrjmb3wpd.z5.kusto.fabric.microsoft.com"),
		// 			},
		// 		},
		// 		{
		// 			Type: to.Ptr(kqldatabase.ItemTypeKQLDatabase),
		// 			Description: to.Ptr("A KQL database description."),
		// 			DisplayName: to.Ptr("KQLDatabase_2"),
		// 			ID: to.Ptr("340d91b9-5a39-409c-b9c0-05ba832c476e"),
		// 			WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		// 			Properties: &kqldatabase.Properties{
		// 				DatabaseType: to.Ptr(kqldatabase.TypeReadWrite),
		// 				IngestionServiceURI: to.Ptr("https://ingest-trd-f7k1b2rzuqrjmb3wpd.z5.kusto.fabric.microsoft.com"),
		// 				ParentEventhouseItemID: to.Ptr("9add9a4d-079a-432a-b43a-70c899f2087b"),
		// 				QueryServiceURI: to.Ptr("https://trd-f7k1b2rzuqrjmb3wpd.z5.kusto.fabric.microsoft.com"),
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition
func ExampleItemsClient_BeginCreateKQLDatabase_createAReadWriteKqlDatabaseExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldatabase.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewItemsClient().BeginCreateKQLDatabase(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", kqldatabase.CreateKQLDatabaseRequest{
		Description: to.Ptr("A KQL database description."),
		CreationPayload: &kqldatabase.ReadWriteDatabaseCreationPayload{
			DatabaseType:           to.Ptr(kqldatabase.TypeReadWrite),
			ParentEventhouseItemID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047836"),
		},
		DisplayName: to.Ptr("KQLDatabase_1"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition
func ExampleItemsClient_BeginCreateKQLDatabase_createAShortcutKqlDatabaseToSourceAzureDataExplorerClusterExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldatabase.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewItemsClient().BeginCreateKQLDatabase(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", kqldatabase.CreateKQLDatabaseRequest{
		Description: to.Ptr("A KQL database description."),
		CreationPayload: &kqldatabase.ShortcutDatabaseCreationPayload{
			DatabaseType:           to.Ptr(kqldatabase.TypeShortcut),
			ParentEventhouseItemID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047836"),
			SourceClusterURI:       to.Ptr("https://adxcluster.westus.kusto.windows.net"),
			SourceDatabaseName:     to.Ptr("MyDatabase"),
		},
		DisplayName: to.Ptr("KQLDatabase_1"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition
func ExampleItemsClient_BeginCreateKQLDatabase_createAShortcutKqlDatabaseToSourceAzureDataExplorerClusterWithInvitationTokenExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldatabase.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewItemsClient().BeginCreateKQLDatabase(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", kqldatabase.CreateKQLDatabaseRequest{
		Description: to.Ptr("A KQL database description."),
		CreationPayload: &kqldatabase.ShortcutDatabaseCreationPayload{
			DatabaseType:           to.Ptr(kqldatabase.TypeShortcut),
			ParentEventhouseItemID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047836"),
			InvitationToken:        to.Ptr("eyJ0eXAiOiJKVInvitationToken"),
		},
		DisplayName: to.Ptr("KQLDatabase_1"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition
func ExampleItemsClient_BeginCreateKQLDatabase_createAShortcutKqlDatabaseToSourceKqlDatabaseExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldatabase.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewItemsClient().BeginCreateKQLDatabase(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", kqldatabase.CreateKQLDatabaseRequest{
		Description: to.Ptr("A KQL database description."),
		CreationPayload: &kqldatabase.ShortcutDatabaseCreationPayload{
			DatabaseType:           to.Ptr(kqldatabase.TypeShortcut),
			ParentEventhouseItemID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047836"),
			SourceDatabaseName:     to.Ptr("ac542109-abd1-4ee3-aec5-86282c01ee24"),
		},
		DisplayName: to.Ptr("KQLDatabase_1"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition
func ExampleItemsClient_GetKQLDatabase() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldatabase.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewItemsClient().GetKQLDatabase(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", "5b218778-e7a5-4d73-8187-f10824047715", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.KQLDatabase = kqldatabase.KQLDatabase{
	// 	Type: to.Ptr(kqldatabase.ItemTypeKQLDatabase),
	// 	Description: to.Ptr("A KQL database description."),
	// 	DisplayName: to.Ptr("KQLDatabase_1"),
	// 	ID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
	// 	WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	// 	Properties: &kqldatabase.Properties{
	// 		DatabaseType: to.Ptr(kqldatabase.TypeReadWrite),
	// 		IngestionServiceURI: to.Ptr("https://ingest-trd-f7k1b2rzuqrjmb3wpd.z5.kusto.fabric.microsoft.com"),
	// 		ParentEventhouseItemID: to.Ptr("6a437a7c-1a28-4fd0-a362-11308b94c79b"),
	// 		QueryServiceURI: to.Ptr("https://trd-f7k1b2rzuqrjmb3wpd.z5.kusto.fabric.microsoft.com"),
	// 	},
	// }
}

// Generated from example definition
func ExampleItemsClient_UpdateKQLDatabase() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldatabase.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewItemsClient().UpdateKQLDatabase(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", "5b218778-e7a5-4d73-8187-f10824047715", kqldatabase.UpdateKQLDatabaseRequest{
		Description: to.Ptr("A new description for KQL database."),
		DisplayName: to.Ptr("KQLDatabase_New_Name"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.KQLDatabase = kqldatabase.KQLDatabase{
	// 	Type: to.Ptr(kqldatabase.ItemTypeKQLDatabase),
	// 	Description: to.Ptr("A new description for KQL database."),
	// 	DisplayName: to.Ptr("KQLDatabase_New_Name"),
	// 	ID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
	// 	WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	// }
}

// Generated from example definition
func ExampleItemsClient_DeleteKQLDatabase() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := kqldatabase.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewItemsClient().DeleteKQLDatabase(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", "5b218778-e7a5-4d73-8187-f10824047715", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}
