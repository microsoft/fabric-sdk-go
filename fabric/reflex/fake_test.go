// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package reflex_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/reflex"
	"github.com/microsoft/fabric-sdk-go/fabric/reflex/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *reflex.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = reflex.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListReflexes() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Reflexes in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := reflex.Reflexes{
		Value: []reflex.Reflex{
			{
				Type:        to.Ptr(reflex.ItemTypeReflex),
				Description: to.Ptr("A Reflex description."),
				DisplayName: to.Ptr("Reflex Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListReflexesPager = func(workspaceID string, options *reflex.ItemsClientListReflexesOptions) (resp azfake.PagerResponder[reflex.ItemsClientListReflexesResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[reflex.ItemsClientListReflexesResponse]{}
		resp.AddPage(http.StatusOK, reflex.ItemsClientListReflexesResponse{Reflexes: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListReflexesPager(exampleWorkspaceID, &reflex.ItemsClientListReflexesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Reflexes))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateReflex() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a Reflex example"},
	})
	var exampleWorkspaceID string
	var exampleCreateReflexRequest reflex.CreateReflexRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateReflexRequest = reflex.CreateReflexRequest{
		Description: to.Ptr("A Reflex description."),
		DisplayName: to.Ptr("Reflex 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateReflex = func(ctx context.Context, workspaceID string, createReflexRequest reflex.CreateReflexRequest, options *reflex.ItemsClientBeginCreateReflexOptions) (resp azfake.PollerResponder[reflex.ItemsClientCreateReflexResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateReflexRequest, createReflexRequest))
		resp = azfake.PollerResponder[reflex.ItemsClientCreateReflexResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, reflex.ItemsClientCreateReflexResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateReflex(ctx, exampleWorkspaceID, exampleCreateReflexRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a Reflex with public definition example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateReflexRequest = reflex.CreateReflexRequest{
		Description: to.Ptr("A Reflex description"),
		Definition: &reflex.Definition{
			Format: to.Ptr("json"),
			Parts: []reflex.DefinitionPart{
				{
					Path:        to.Ptr("ReflexEntities.json"),
					Payload:     to.Ptr("eyJuYmZvcm1hdCI6N..5ndWUiOiJweXRob24ifX19"),
					PayloadType: to.Ptr(reflex.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(reflex.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("Reflex 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateReflex = func(ctx context.Context, workspaceID string, createReflexRequest reflex.CreateReflexRequest, options *reflex.ItemsClientBeginCreateReflexOptions) (resp azfake.PollerResponder[reflex.ItemsClientCreateReflexResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateReflexRequest, createReflexRequest))
		resp = azfake.PollerResponder[reflex.ItemsClientCreateReflexResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, reflex.ItemsClientCreateReflexResponse{}, nil)
		return
	}

	poller, err = client.BeginCreateReflex(ctx, exampleWorkspaceID, exampleCreateReflexRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetReflex() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a Reflex example"},
	})
	var exampleWorkspaceID string
	var exampleReflexID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleReflexID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := reflex.Reflex{
		Type:        to.Ptr(reflex.ItemTypeReflex),
		Description: to.Ptr("A Reflex description."),
		DisplayName: to.Ptr("Reflex 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetReflex = func(ctx context.Context, workspaceID string, reflexID string, options *reflex.ItemsClientGetReflexOptions) (resp azfake.Responder[reflex.ItemsClientGetReflexResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleReflexID, reflexID)
		resp = azfake.Responder[reflex.ItemsClientGetReflexResponse]{}
		resp.SetResponse(http.StatusOK, reflex.ItemsClientGetReflexResponse{Reflex: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetReflex(ctx, exampleWorkspaceID, exampleReflexID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Reflex))
}

func (testsuite *FakeTestSuite) TestItems_UpdateReflex() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a Reflex example"},
	})
	var exampleWorkspaceID string
	var exampleReflexID string
	var exampleUpdateReflexRequest reflex.UpdateReflexRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleReflexID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateReflexRequest = reflex.UpdateReflexRequest{
		Description: to.Ptr("A new description for Reflex."),
		DisplayName: to.Ptr("Reflex's New name"),
	}

	exampleRes := reflex.Reflex{
		Type:        to.Ptr(reflex.ItemTypeReflex),
		Description: to.Ptr("A new description for Reflex."),
		DisplayName: to.Ptr("Reflex's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateReflex = func(ctx context.Context, workspaceID string, reflexID string, updateReflexRequest reflex.UpdateReflexRequest, options *reflex.ItemsClientUpdateReflexOptions) (resp azfake.Responder[reflex.ItemsClientUpdateReflexResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleReflexID, reflexID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateReflexRequest, updateReflexRequest))
		resp = azfake.Responder[reflex.ItemsClientUpdateReflexResponse]{}
		resp.SetResponse(http.StatusOK, reflex.ItemsClientUpdateReflexResponse{Reflex: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateReflex(ctx, exampleWorkspaceID, exampleReflexID, exampleUpdateReflexRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Reflex))
}

func (testsuite *FakeTestSuite) TestItems_DeleteReflex() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a Reflex example"},
	})
	var exampleWorkspaceID string
	var exampleReflexID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleReflexID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteReflex = func(ctx context.Context, workspaceID string, reflexID string, options *reflex.ItemsClientDeleteReflexOptions) (resp azfake.Responder[reflex.ItemsClientDeleteReflexResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleReflexID, reflexID)
		resp = azfake.Responder[reflex.ItemsClientDeleteReflexResponse]{}
		resp.SetResponse(http.StatusOK, reflex.ItemsClientDeleteReflexResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteReflex(ctx, exampleWorkspaceID, exampleReflexID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetReflexDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a Reflex definition example"},
	})
	var exampleWorkspaceID string
	var exampleReflexID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleReflexID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := reflex.DefinitionResponse{
		Definition: &reflex.Definition{
			Parts: []reflex.DefinitionPart{
				{
					Path:        to.Ptr("ReflexEntities.json"),
					Payload:     to.Ptr("IyBGYWJyaWMgbm90ZWJv..5ndWUiOiJweXRob24ifX19"),
					PayloadType: to.Ptr(reflex.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(reflex.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetReflexDefinition = func(ctx context.Context, workspaceID string, reflexID string, options *reflex.ItemsClientBeginGetReflexDefinitionOptions) (resp azfake.PollerResponder[reflex.ItemsClientGetReflexDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleReflexID, reflexID)
		resp = azfake.PollerResponder[reflex.ItemsClientGetReflexDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, reflex.ItemsClientGetReflexDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetReflexDefinition(ctx, exampleWorkspaceID, exampleReflexID, &reflex.ItemsClientBeginGetReflexDefinitionOptions{Format: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateReflexDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a Reflex definition example"},
	})
	var exampleWorkspaceID string
	var exampleReflexID string
	var exampleUpdateReflexDefinitionRequest reflex.UpdateReflexDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleReflexID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateReflexDefinitionRequest = reflex.UpdateReflexDefinitionRequest{
		Definition: &reflex.Definition{
			Parts: []reflex.DefinitionPart{
				{
					Path:        to.Ptr("ReflexEntities.json"),
					Payload:     to.Ptr("IyBGYWJyaWMgbm90ZWJv..5ndWUiOiJweXRob24ifX19"),
					PayloadType: to.Ptr(reflex.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(reflex.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateReflexDefinition = func(ctx context.Context, workspaceID string, reflexID string, updateReflexDefinitionRequest reflex.UpdateReflexDefinitionRequest, options *reflex.ItemsClientBeginUpdateReflexDefinitionOptions) (resp azfake.PollerResponder[reflex.ItemsClientUpdateReflexDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleReflexID, reflexID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateReflexDefinitionRequest, updateReflexDefinitionRequest))
		resp = azfake.PollerResponder[reflex.ItemsClientUpdateReflexDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, reflex.ItemsClientUpdateReflexDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateReflexDefinition(ctx, exampleWorkspaceID, exampleReflexID, exampleUpdateReflexDefinitionRequest, &reflex.ItemsClientBeginUpdateReflexDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}
