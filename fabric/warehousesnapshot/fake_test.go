// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package warehousesnapshot_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"
	"time"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/warehousesnapshot"
	"github.com/microsoft/fabric-sdk-go/fabric/warehousesnapshot/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *warehousesnapshot.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = warehousesnapshot.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListWarehouseSnapshots() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Warehouse snapshots in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := warehousesnapshot.WarehouseSnapshots{
		Value: []warehousesnapshot.WarehouseSnapshot{
			{
				Type:        to.Ptr(warehousesnapshot.ItemTypeWarehouseSnapshot),
				Description: to.Ptr("A WarehouseSnapshot description."),
				DisplayName: to.Ptr("WarehouseSnapshot Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &warehousesnapshot.Properties{
					ConnectionString:  to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
					ParentWarehouseID: to.Ptr("7332259c-fb34-4975-99db-85818fb8664f"),
					SnapshotDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-10-10T15:20:15.000Z"); return t }()),
				},
			},
			{
				Type:        to.Ptr(warehousesnapshot.ItemTypeWarehouseSnapshot),
				Description: to.Ptr("A WarehouseSnapshot description."),
				DisplayName: to.Ptr("WarehouseSnapshot Name 2"),
				ID:          to.Ptr("f697fb63-abd4-4399-9548-be7e3c3c0dac"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &warehousesnapshot.Properties{
					ConnectionString:  to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
					ParentWarehouseID: to.Ptr("7332259c-fb34-4975-99db-85818fb8664f"),
					SnapshotDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-10-01T15:20:15.000Z"); return t }()),
				},
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListWarehouseSnapshotsPager = func(workspaceID string, options *warehousesnapshot.ItemsClientListWarehouseSnapshotsOptions) (resp azfake.PagerResponder[warehousesnapshot.ItemsClientListWarehouseSnapshotsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[warehousesnapshot.ItemsClientListWarehouseSnapshotsResponse]{}
		resp.AddPage(http.StatusOK, warehousesnapshot.ItemsClientListWarehouseSnapshotsResponse{WarehouseSnapshots: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListWarehouseSnapshotsPager(exampleWorkspaceID, &warehousesnapshot.ItemsClientListWarehouseSnapshotsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.WarehouseSnapshots))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateWarehouseSnapshot() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a Warehouse snapshot example"},
	})
	var exampleWorkspaceID string
	var exampleCreateWarehouseSnapshotRequest warehousesnapshot.CreateWarehouseSnapshotRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateWarehouseSnapshotRequest = warehousesnapshot.CreateWarehouseSnapshotRequest{
		Description: to.Ptr("A WarehouseSnapshot description."),
		CreationPayload: &warehousesnapshot.CreationPayload{
			ParentWarehouseID: to.Ptr("7332259c-fb34-4975-99db-85818fb8664f"),
			SnapshotDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-10-15T13:00:00.000Z"); return t }()),
		},
		DisplayName: to.Ptr("WarehouseSnapshot 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateWarehouseSnapshot = func(ctx context.Context, workspaceID string, createWarehouseSnapshotRequest warehousesnapshot.CreateWarehouseSnapshotRequest, options *warehousesnapshot.ItemsClientBeginCreateWarehouseSnapshotOptions) (resp azfake.PollerResponder[warehousesnapshot.ItemsClientCreateWarehouseSnapshotResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateWarehouseSnapshotRequest, createWarehouseSnapshotRequest))
		resp = azfake.PollerResponder[warehousesnapshot.ItemsClientCreateWarehouseSnapshotResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, warehousesnapshot.ItemsClientCreateWarehouseSnapshotResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateWarehouseSnapshot(ctx, exampleWorkspaceID, exampleCreateWarehouseSnapshotRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetWarehouseSnapshot() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a Warehouse snapshot example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseSnapshotID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleWarehouseSnapshotID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := warehousesnapshot.WarehouseSnapshot{
		Type:        to.Ptr(warehousesnapshot.ItemTypeWarehouseSnapshot),
		Description: to.Ptr("A WarehouseSnapshot description."),
		DisplayName: to.Ptr("WarehouseSnapshot 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		Properties: &warehousesnapshot.Properties{
			ConnectionString:  to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
			ParentWarehouseID: to.Ptr("7332259c-fb34-4975-99db-85818fb8664f"),
			SnapshotDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-10-10T15:20:15.000Z"); return t }()),
		},
	}

	testsuite.serverFactory.ItemsServer.GetWarehouseSnapshot = func(ctx context.Context, workspaceID string, warehouseSnapshotID string, options *warehousesnapshot.ItemsClientGetWarehouseSnapshotOptions) (resp azfake.Responder[warehousesnapshot.ItemsClientGetWarehouseSnapshotResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseSnapshotID, warehouseSnapshotID)
		resp = azfake.Responder[warehousesnapshot.ItemsClientGetWarehouseSnapshotResponse]{}
		resp.SetResponse(http.StatusOK, warehousesnapshot.ItemsClientGetWarehouseSnapshotResponse{WarehouseSnapshot: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetWarehouseSnapshot(ctx, exampleWorkspaceID, exampleWarehouseSnapshotID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.WarehouseSnapshot))
}

func (testsuite *FakeTestSuite) TestItems_UpdateWarehouseSnapshot() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a Warehouse snapshot example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseSnapshotID string
	var exampleUpdateWarehouseSnapshotRequest warehousesnapshot.UpdateWarehouseSnapshotRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleWarehouseSnapshotID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateWarehouseSnapshotRequest = warehousesnapshot.UpdateWarehouseSnapshotRequest{
		Description: to.Ptr("WarehouseSnapshot's New description"),
		DisplayName: to.Ptr("WarehouseSnapshot's New name"),
		Properties: &warehousesnapshot.UpdateProperties{
			SnapshotDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-10-10T15:20:15.000Z"); return t }()),
		},
	}

	exampleRes := warehousesnapshot.WarehouseSnapshot{
		Type:        to.Ptr(warehousesnapshot.ItemTypeWarehouseSnapshot),
		Description: to.Ptr("WarehouseSnapshot's New description"),
		DisplayName: to.Ptr("WarehouseSnapshot's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		Properties: &warehousesnapshot.Properties{
			ConnectionString:  to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
			ParentWarehouseID: to.Ptr("7332259c-fb34-4975-99db-85818fb8664f"),
			SnapshotDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-10-10T15:20:15.000Z"); return t }()),
		},
	}

	testsuite.serverFactory.ItemsServer.UpdateWarehouseSnapshot = func(ctx context.Context, workspaceID string, warehouseSnapshotID string, updateWarehouseSnapshotRequest warehousesnapshot.UpdateWarehouseSnapshotRequest, options *warehousesnapshot.ItemsClientUpdateWarehouseSnapshotOptions) (resp azfake.Responder[warehousesnapshot.ItemsClientUpdateWarehouseSnapshotResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseSnapshotID, warehouseSnapshotID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateWarehouseSnapshotRequest, updateWarehouseSnapshotRequest))
		resp = azfake.Responder[warehousesnapshot.ItemsClientUpdateWarehouseSnapshotResponse]{}
		resp.SetResponse(http.StatusOK, warehousesnapshot.ItemsClientUpdateWarehouseSnapshotResponse{WarehouseSnapshot: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateWarehouseSnapshot(ctx, exampleWorkspaceID, exampleWarehouseSnapshotID, exampleUpdateWarehouseSnapshotRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.WarehouseSnapshot))
}

func (testsuite *FakeTestSuite) TestItems_DeleteWarehouseSnapshot() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a Warehouse snapshot example"},
	})
	var exampleWorkspaceID string
	var exampleWarehouseSnapshotID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleWarehouseSnapshotID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteWarehouseSnapshot = func(ctx context.Context, workspaceID string, warehouseSnapshotID string, options *warehousesnapshot.ItemsClientDeleteWarehouseSnapshotOptions) (resp azfake.Responder[warehousesnapshot.ItemsClientDeleteWarehouseSnapshotResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleWarehouseSnapshotID, warehouseSnapshotID)
		resp = azfake.Responder[warehousesnapshot.ItemsClientDeleteWarehouseSnapshotResponse]{}
		resp.SetResponse(http.StatusOK, warehousesnapshot.ItemsClientDeleteWarehouseSnapshotResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteWarehouseSnapshot(ctx, exampleWorkspaceID, exampleWarehouseSnapshotID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}
