// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package warehousesnapshot

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateWarehouseSnapshot - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES WarehouseSnapshot.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a Warehouse snapshot the workspace must be on a supported Fabric capacity. For more information see: Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createWarehouseSnapshotRequest - A create Warehouse snapshot request payload.
//   - options - ItemsClientBeginCreateWarehouseSnapshotOptions contains the optional parameters for the ItemsClient.BeginCreateWarehouseSnapshot
//     method.
func (client *ItemsClient) BeginCreateWarehouseSnapshot(ctx context.Context, workspaceID string, createWarehouseSnapshotRequest CreateWarehouseSnapshotRequest, options *ItemsClientBeginCreateWarehouseSnapshotOptions) (*runtime.Poller[ItemsClientCreateWarehouseSnapshotResponse], error) {
	return client.beginCreateWarehouseSnapshot(ctx, workspaceID, createWarehouseSnapshotRequest, options)
}

// CreateWarehouseSnapshot - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES WarehouseSnapshot.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a Warehouse snapshot the workspace must be on a supported Fabric capacity. For more information see: Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createWarehouseSnapshot(ctx context.Context, workspaceID string, createWarehouseSnapshotRequest CreateWarehouseSnapshotRequest, options *ItemsClientBeginCreateWarehouseSnapshotOptions) (*http.Response, error) {
	var err error
	const operationName = "warehousesnapshot.ItemsClient.BeginCreateWarehouseSnapshot"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createWarehouseSnapshotCreateRequest(ctx, workspaceID, createWarehouseSnapshotRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createWarehouseSnapshotCreateRequest creates the CreateWarehouseSnapshot request.
func (client *ItemsClient) createWarehouseSnapshotCreateRequest(ctx context.Context, workspaceID string, createWarehouseSnapshotRequest CreateWarehouseSnapshotRequest, _ *ItemsClientBeginCreateWarehouseSnapshotOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehousesnapshots"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createWarehouseSnapshotRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteWarehouseSnapshot - PERMISSIONS The caller must have write permissions for the warehouse snapshot.
// REQUIRED DELEGATED SCOPES WarehouseSnapshot.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseSnapshotID - The Warehouse snapshot ID.
//   - options - ItemsClientDeleteWarehouseSnapshotOptions contains the optional parameters for the ItemsClient.DeleteWarehouseSnapshot
//     method.
func (client *ItemsClient) DeleteWarehouseSnapshot(ctx context.Context, workspaceID string, warehouseSnapshotID string, options *ItemsClientDeleteWarehouseSnapshotOptions) (ItemsClientDeleteWarehouseSnapshotResponse, error) {
	var err error
	const operationName = "warehousesnapshot.ItemsClient.DeleteWarehouseSnapshot"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteWarehouseSnapshotCreateRequest(ctx, workspaceID, warehouseSnapshotID, options)
	if err != nil {
		return ItemsClientDeleteWarehouseSnapshotResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteWarehouseSnapshotResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteWarehouseSnapshotResponse{}, err
	}
	return ItemsClientDeleteWarehouseSnapshotResponse{}, nil
}

// deleteWarehouseSnapshotCreateRequest creates the DeleteWarehouseSnapshot request.
func (client *ItemsClient) deleteWarehouseSnapshotCreateRequest(ctx context.Context, workspaceID string, warehouseSnapshotID string, _ *ItemsClientDeleteWarehouseSnapshotOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehousesnapshots/{warehouseSnapshotId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseSnapshotID == "" {
		return nil, errors.New("parameter warehouseSnapshotID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseSnapshotId}", url.PathEscape(warehouseSnapshotID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetWarehouseSnapshot - PERMISSIONS The caller must have read permissions for the warehouse snapshot.
// REQUIRED DELEGATED SCOPES WarehouseSnapshot.Read.All or WarehouseSnapshot.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseSnapshotID - The Warehouse snapshot ID.
//   - options - ItemsClientGetWarehouseSnapshotOptions contains the optional parameters for the ItemsClient.GetWarehouseSnapshot
//     method.
func (client *ItemsClient) GetWarehouseSnapshot(ctx context.Context, workspaceID string, warehouseSnapshotID string, options *ItemsClientGetWarehouseSnapshotOptions) (ItemsClientGetWarehouseSnapshotResponse, error) {
	var err error
	const operationName = "warehousesnapshot.ItemsClient.GetWarehouseSnapshot"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getWarehouseSnapshotCreateRequest(ctx, workspaceID, warehouseSnapshotID, options)
	if err != nil {
		return ItemsClientGetWarehouseSnapshotResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetWarehouseSnapshotResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetWarehouseSnapshotResponse{}, err
	}
	resp, err := client.getWarehouseSnapshotHandleResponse(httpResp)
	return resp, err
}

// getWarehouseSnapshotCreateRequest creates the GetWarehouseSnapshot request.
func (client *ItemsClient) getWarehouseSnapshotCreateRequest(ctx context.Context, workspaceID string, warehouseSnapshotID string, _ *ItemsClientGetWarehouseSnapshotOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehousesnapshots/{warehouseSnapshotId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseSnapshotID == "" {
		return nil, errors.New("parameter warehouseSnapshotID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseSnapshotId}", url.PathEscape(warehouseSnapshotID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getWarehouseSnapshotHandleResponse handles the GetWarehouseSnapshot response.
func (client *ItemsClient) getWarehouseSnapshotHandleResponse(resp *http.Response) (ItemsClientGetWarehouseSnapshotResponse, error) {
	result := ItemsClientGetWarehouseSnapshotResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WarehouseSnapshot); err != nil {
		return ItemsClientGetWarehouseSnapshotResponse{}, err
	}
	return result, nil
}

// NewListWarehouseSnapshotsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have a viewer workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListWarehouseSnapshotsOptions contains the optional parameters for the ItemsClient.NewListWarehouseSnapshotsPager
//     method.
func (client *ItemsClient) NewListWarehouseSnapshotsPager(workspaceID string, options *ItemsClientListWarehouseSnapshotsOptions) *runtime.Pager[ItemsClientListWarehouseSnapshotsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListWarehouseSnapshotsResponse]{
		More: func(page ItemsClientListWarehouseSnapshotsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListWarehouseSnapshotsResponse) (ItemsClientListWarehouseSnapshotsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "warehousesnapshot.ItemsClient.NewListWarehouseSnapshotsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listWarehouseSnapshotsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListWarehouseSnapshotsResponse{}, err
			}
			return client.listWarehouseSnapshotsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWarehouseSnapshotsCreateRequest creates the ListWarehouseSnapshots request.
func (client *ItemsClient) listWarehouseSnapshotsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListWarehouseSnapshotsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehousesnapshots"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWarehouseSnapshotsHandleResponse handles the ListWarehouseSnapshots response.
func (client *ItemsClient) listWarehouseSnapshotsHandleResponse(resp *http.Response) (ItemsClientListWarehouseSnapshotsResponse, error) {
	result := ItemsClientListWarehouseSnapshotsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WarehouseSnapshots); err != nil {
		return ItemsClientListWarehouseSnapshotsResponse{}, err
	}
	return result, nil
}

// UpdateWarehouseSnapshot - PERMISSIONS The caller must have read and write permissions for the warehouse snapshot.
// REQUIRED DELEGATED SCOPES WarehouseSnapshot.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - warehouseSnapshotID - The Warehouse snapshot ID.
//   - updateWarehouseSnapshotRequest - Update Warehouse snapshot request payload.
//   - options - ItemsClientUpdateWarehouseSnapshotOptions contains the optional parameters for the ItemsClient.UpdateWarehouseSnapshot
//     method.
func (client *ItemsClient) UpdateWarehouseSnapshot(ctx context.Context, workspaceID string, warehouseSnapshotID string, updateWarehouseSnapshotRequest UpdateWarehouseSnapshotRequest, options *ItemsClientUpdateWarehouseSnapshotOptions) (ItemsClientUpdateWarehouseSnapshotResponse, error) {
	var err error
	const operationName = "warehousesnapshot.ItemsClient.UpdateWarehouseSnapshot"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateWarehouseSnapshotCreateRequest(ctx, workspaceID, warehouseSnapshotID, updateWarehouseSnapshotRequest, options)
	if err != nil {
		return ItemsClientUpdateWarehouseSnapshotResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateWarehouseSnapshotResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateWarehouseSnapshotResponse{}, err
	}
	resp, err := client.updateWarehouseSnapshotHandleResponse(httpResp)
	return resp, err
}

// updateWarehouseSnapshotCreateRequest creates the UpdateWarehouseSnapshot request.
func (client *ItemsClient) updateWarehouseSnapshotCreateRequest(ctx context.Context, workspaceID string, warehouseSnapshotID string, updateWarehouseSnapshotRequest UpdateWarehouseSnapshotRequest, _ *ItemsClientUpdateWarehouseSnapshotOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/warehousesnapshots/{warehouseSnapshotId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if warehouseSnapshotID == "" {
		return nil, errors.New("parameter warehouseSnapshotID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{warehouseSnapshotId}", url.PathEscape(warehouseSnapshotID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateWarehouseSnapshotRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateWarehouseSnapshotHandleResponse handles the UpdateWarehouseSnapshot response.
func (client *ItemsClient) updateWarehouseSnapshotHandleResponse(resp *http.Response) (ItemsClientUpdateWarehouseSnapshotResponse, error) {
	result := ItemsClientUpdateWarehouseSnapshotResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WarehouseSnapshot); err != nil {
		return ItemsClientUpdateWarehouseSnapshotResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// CreateWarehouseSnapshot - returns ItemsClientCreateWarehouseSnapshotResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES WarehouseSnapshot.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a Warehouse snapshot the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types
//     [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createWarehouseSnapshotRequest - A create Warehouse snapshot request payload.
//   - options - ItemsClientBeginCreateWarehouseSnapshotOptions contains the optional parameters for the ItemsClient.BeginCreateWarehouseSnapshot method.
func (client *ItemsClient) CreateWarehouseSnapshot(ctx context.Context, workspaceID string, createWarehouseSnapshotRequest CreateWarehouseSnapshotRequest, options *ItemsClientBeginCreateWarehouseSnapshotOptions) (ItemsClientCreateWarehouseSnapshotResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateWarehouseSnapshot(ctx, workspaceID, createWarehouseSnapshotRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateWarehouseSnapshotResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateWarehouseSnapshotResponse{}, err
	}
	return result, err
}

// beginCreateWarehouseSnapshot creates the createWarehouseSnapshot request.
func (client *ItemsClient) beginCreateWarehouseSnapshot(ctx context.Context, workspaceID string, createWarehouseSnapshotRequest CreateWarehouseSnapshotRequest, options *ItemsClientBeginCreateWarehouseSnapshotOptions) (*runtime.Poller[ItemsClientCreateWarehouseSnapshotResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createWarehouseSnapshot(ctx, workspaceID, createWarehouseSnapshotRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateWarehouseSnapshotResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateWarehouseSnapshotResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateWarehouseSnapshotResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateWarehouseSnapshotResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListWarehouseSnapshots - returns array of WarehouseSnapshot from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have a viewer workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListWarehouseSnapshotsOptions contains the optional parameters for the ItemsClient.NewListWarehouseSnapshotsPager method.
func (client *ItemsClient) ListWarehouseSnapshots(ctx context.Context, workspaceID string, options *ItemsClientListWarehouseSnapshotsOptions) ([]WarehouseSnapshot, error) {
	pager := client.NewListWarehouseSnapshotsPager(workspaceID, options)
	mapper := func(resp ItemsClientListWarehouseSnapshotsResponse) []WarehouseSnapshot {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []WarehouseSnapshot{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []WarehouseSnapshot{}, err
	}
	return list, nil
}
