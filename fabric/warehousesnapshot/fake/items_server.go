// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/warehousesnapshot"
)

// ItemsServer is a fake server for instances of the warehousesnapshot.ItemsClient type.
type ItemsServer struct {
	// BeginCreateWarehouseSnapshot is the fake for method ItemsClient.BeginCreateWarehouseSnapshot
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateWarehouseSnapshot func(ctx context.Context, workspaceID string, createWarehouseSnapshotRequest warehousesnapshot.CreateWarehouseSnapshotRequest, options *warehousesnapshot.ItemsClientBeginCreateWarehouseSnapshotOptions) (resp azfake.PollerResponder[warehousesnapshot.ItemsClientCreateWarehouseSnapshotResponse], errResp azfake.ErrorResponder)

	// DeleteWarehouseSnapshot is the fake for method ItemsClient.DeleteWarehouseSnapshot
	// HTTP status codes to indicate success: http.StatusOK
	DeleteWarehouseSnapshot func(ctx context.Context, workspaceID string, warehouseSnapshotID string, options *warehousesnapshot.ItemsClientDeleteWarehouseSnapshotOptions) (resp azfake.Responder[warehousesnapshot.ItemsClientDeleteWarehouseSnapshotResponse], errResp azfake.ErrorResponder)

	// GetWarehouseSnapshot is the fake for method ItemsClient.GetWarehouseSnapshot
	// HTTP status codes to indicate success: http.StatusOK
	GetWarehouseSnapshot func(ctx context.Context, workspaceID string, warehouseSnapshotID string, options *warehousesnapshot.ItemsClientGetWarehouseSnapshotOptions) (resp azfake.Responder[warehousesnapshot.ItemsClientGetWarehouseSnapshotResponse], errResp azfake.ErrorResponder)

	// NewListWarehouseSnapshotsPager is the fake for method ItemsClient.NewListWarehouseSnapshotsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListWarehouseSnapshotsPager func(workspaceID string, options *warehousesnapshot.ItemsClientListWarehouseSnapshotsOptions) (resp azfake.PagerResponder[warehousesnapshot.ItemsClientListWarehouseSnapshotsResponse])

	// UpdateWarehouseSnapshot is the fake for method ItemsClient.UpdateWarehouseSnapshot
	// HTTP status codes to indicate success: http.StatusOK
	UpdateWarehouseSnapshot func(ctx context.Context, workspaceID string, warehouseSnapshotID string, updateWarehouseSnapshotRequest warehousesnapshot.UpdateWarehouseSnapshotRequest, options *warehousesnapshot.ItemsClientUpdateWarehouseSnapshotOptions) (resp azfake.Responder[warehousesnapshot.ItemsClientUpdateWarehouseSnapshotResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of warehousesnapshot.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                            srv,
		beginCreateWarehouseSnapshot:   newTracker[azfake.PollerResponder[warehousesnapshot.ItemsClientCreateWarehouseSnapshotResponse]](),
		newListWarehouseSnapshotsPager: newTracker[azfake.PagerResponder[warehousesnapshot.ItemsClientListWarehouseSnapshotsResponse]](),
	}
}

// ItemsServerTransport connects instances of warehousesnapshot.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                            *ItemsServer
	beginCreateWarehouseSnapshot   *tracker[azfake.PollerResponder[warehousesnapshot.ItemsClientCreateWarehouseSnapshotResponse]]
	newListWarehouseSnapshotsPager *tracker[azfake.PagerResponder[warehousesnapshot.ItemsClientListWarehouseSnapshotsResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateWarehouseSnapshot":
				res.resp, res.err = i.dispatchBeginCreateWarehouseSnapshot(req)
			case "ItemsClient.DeleteWarehouseSnapshot":
				res.resp, res.err = i.dispatchDeleteWarehouseSnapshot(req)
			case "ItemsClient.GetWarehouseSnapshot":
				res.resp, res.err = i.dispatchGetWarehouseSnapshot(req)
			case "ItemsClient.NewListWarehouseSnapshotsPager":
				res.resp, res.err = i.dispatchNewListWarehouseSnapshotsPager(req)
			case "ItemsClient.UpdateWarehouseSnapshot":
				res.resp, res.err = i.dispatchUpdateWarehouseSnapshot(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateWarehouseSnapshot(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateWarehouseSnapshot == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateWarehouseSnapshot not implemented")}
	}
	beginCreateWarehouseSnapshot := i.beginCreateWarehouseSnapshot.get(req)
	if beginCreateWarehouseSnapshot == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehousesnapshots`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[warehousesnapshot.CreateWarehouseSnapshotRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateWarehouseSnapshot(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateWarehouseSnapshot = &respr
		i.beginCreateWarehouseSnapshot.add(req, beginCreateWarehouseSnapshot)
	}

	resp, err := server.PollerResponderNext(beginCreateWarehouseSnapshot, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateWarehouseSnapshot.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateWarehouseSnapshot) {
		i.beginCreateWarehouseSnapshot.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteWarehouseSnapshot(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteWarehouseSnapshot == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteWarehouseSnapshot not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehousesnapshots/(?P<warehouseSnapshotId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	warehouseSnapshotIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("warehouseSnapshotId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteWarehouseSnapshot(req.Context(), workspaceIDParam, warehouseSnapshotIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetWarehouseSnapshot(req *http.Request) (*http.Response, error) {
	if i.srv.GetWarehouseSnapshot == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetWarehouseSnapshot not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehousesnapshots/(?P<warehouseSnapshotId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	warehouseSnapshotIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("warehouseSnapshotId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetWarehouseSnapshot(req.Context(), workspaceIDParam, warehouseSnapshotIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WarehouseSnapshot, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListWarehouseSnapshotsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListWarehouseSnapshotsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListWarehouseSnapshotsPager not implemented")}
	}
	newListWarehouseSnapshotsPager := i.newListWarehouseSnapshotsPager.get(req)
	if newListWarehouseSnapshotsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehousesnapshots`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *warehousesnapshot.ItemsClientListWarehouseSnapshotsOptions
		if continuationTokenParam != nil {
			options = &warehousesnapshot.ItemsClientListWarehouseSnapshotsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListWarehouseSnapshotsPager(workspaceIDParam, options)
		newListWarehouseSnapshotsPager = &resp
		i.newListWarehouseSnapshotsPager.add(req, newListWarehouseSnapshotsPager)
		server.PagerResponderInjectNextLinks(newListWarehouseSnapshotsPager, req, func(page *warehousesnapshot.ItemsClientListWarehouseSnapshotsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListWarehouseSnapshotsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListWarehouseSnapshotsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListWarehouseSnapshotsPager) {
		i.newListWarehouseSnapshotsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateWarehouseSnapshot(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateWarehouseSnapshot == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateWarehouseSnapshot not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warehousesnapshots/(?P<warehouseSnapshotId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[warehousesnapshot.UpdateWarehouseSnapshotRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	warehouseSnapshotIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("warehouseSnapshotId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateWarehouseSnapshot(req.Context(), workspaceIDParam, warehouseSnapshotIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WarehouseSnapshot, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
