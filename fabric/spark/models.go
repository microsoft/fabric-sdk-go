// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package spark

import "time"

// AutoScaleProperties - Autoscale properties.
type AutoScaleProperties struct {
	// REQUIRED; The status of the auto scale. False - Disabled, true - Enabled.
	Enabled *bool

	// REQUIRED; The maximum node count.
	MaxNodeCount *int32

	// REQUIRED; The minimum node count.
	MinNodeCount *int32
}

// AutomaticLogProperties - Automatic Log Properties.
type AutomaticLogProperties struct {
	// REQUIRED; The status of the automatic log. False - Disabled, true - Enabled.
	Enabled *bool
}

// CreateCustomPoolRequest - Create custom pool request payload.
type CreateCustomPoolRequest struct {
	// REQUIRED; Autoscale.
	AutoScale *AutoScaleProperties

	// REQUIRED; Dynamic executor allocation.
	DynamicExecutorAllocation *DynamicExecutorAllocationProperties

	// REQUIRED; Custom pool name.
	// The name must be between 1 and 64 characters long and must contain only letters, numbers, dashes, underscores and spaces.
	// Custom pool names must be unique within the workspace.
	// "Starter Pool" is a reserved custom pool name.
	Name *string

	// REQUIRED; Node family.
	NodeFamily *NodeFamily

	// REQUIRED; Node size.
	NodeSize *NodeSize
}

// CustomPool - Custom pool.
type CustomPool struct {
	// Autoscale.
	AutoScale *AutoScaleProperties

	// Dynamic executor allocation.
	DynamicExecutorAllocation *DynamicExecutorAllocationProperties

	// Custom pool ID.
	ID *string

	// Custom pool name.
	Name *string

	// Node family.
	NodeFamily *NodeFamily

	// Node size.
	NodeSize *NodeSize

	// Custom pool type.
	Type *CustomPoolType
}

type CustomPools struct {
	// REQUIRED; A list of custom pools.
	Value []CustomPool

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// Duration - A duration.
type Duration struct {
	// REQUIRED; The unit of time for the duration. Additional duration types may be added over time.
	TimeUnit *TimeUnit

	// REQUIRED; The number of timeUnits in the duration.
	Value *float32
}

// DynamicExecutorAllocationProperties - Dynamic executor allocation proerties.
type DynamicExecutorAllocationProperties struct {
	// REQUIRED; The status of the dynamic executor allocation. False - Disabled, true - Enabled.
	Enabled *bool

	// REQUIRED; The maximum executors.
	MaxExecutors *int32

	// REQUIRED; The minimum executors.
	MinExecutors *int32
}

// EnvironmentProperties - Properties of an environment.
type EnvironmentProperties struct {
	// The name of the default environment. Empty string indicated there is no workspace default environment.
	Name *string

	// Runtime [/fabric/data-engineering/runtime] version. For example: 1.3
	RuntimeVersion *string
}

// HighConcurrencyProperties - High Concurrency Properties.
type HighConcurrencyProperties struct {
	// The status of the high concurrency for notebook interactive run. False - Disabled, true - Enabled.
	NotebookInteractiveRunEnabled *bool

	// The status of the high concurrency for notebook pipeline run. False - Disabled, true - Enabled.
	NotebookPipelineRunEnabled *bool
}

type InstancePool struct {
	// Instance pool ID.
	ID *string

	// Instance pool name.
	Name *string

	// Instance pool type.
	Type *CustomPoolType
}

// ItemReference - An item reference object.
type ItemReference struct {
	// REQUIRED; The item reference type.
	ReferenceType *ItemReferenceType
}

// GetItemReference implements the ItemReferenceClassification interface for type ItemReference.
func (i *ItemReference) GetItemReference() *ItemReference { return i }

// ItemReferenceByID - An item reference by ID object.
type ItemReferenceByID struct {
	// REQUIRED; The ID of the item.
	ItemID *string

	// REQUIRED; The item reference type.
	ReferenceType *ItemReferenceType

	// REQUIRED; The workspace ID of the item.
	WorkspaceID *string
}

// GetItemReference implements the ItemReferenceClassification interface for type ItemReferenceByID.
func (i *ItemReferenceByID) GetItemReference() *ItemReference {
	return &ItemReference{
		ReferenceType: i.ReferenceType,
	}
}

// JobsProperties - Properties of a Spark job.
type JobsProperties struct {
	// Reserve maximum cores for active Spark jobs. When this setting is enabled, your Fabric capacity reserves the maximum number
	// of cores needed for active Spark jobs, ensuring job reliability by making
	// sure that cores are available if a job scales up. When this setting is disabled, jobs are started based on the minimum
	// number of cores needed, letting more jobs run at the same time. For more
	// information see job admission and management [/fabric/data-engineering/job-admission-management]. False - Disabled, true
	// - Enabled.
	ConservativeJobAdmissionEnabled *bool

	// Time to terminate inactive Spark sessions. The maximum is 14 days.
	SessionTimeoutInMinutes *int32
}

// LivySession - The livy session response
type LivySession struct {
	// Current attempt number.
	AttemptNumber *int32

	// Reason for the job cancellation.
	CancellationReason *string

	// ID of the capacity.
	CapacityID *string

	// ID of the consumer.
	ConsumerID *Principal

	// ID of the item creator. When isHighConcurrency is set to true this value might be different than itemId.
	CreatorItem *ItemReferenceByID

	// Timestamp when the job ended in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// Flag indicating high concurrency.
	IsHighConcurrency *bool

	// ID of the item.
	Item *ItemReferenceByID

	// Name of the item.
	ItemName *string

	// The item type.
	ItemType *ItemType

	// ID of the job instance.
	JobInstanceID *string

	// Current state of the job.
	JobType *JobType

	// ID of the Livy session or Livy batch.
	LivyID *string

	// Name of the Livy session or Livy batch.
	LivyName *string

	// The URI used to retrieve all Livy sessions for a given item.
	LivySessionItemResourceURI *string

	// Maximum number of attempts.
	MaxNumberOfAttempts *int32

	// Name of the operation. Possible values include: Notebook run, Notebook HC run and Notebook pipeline run.
	OperationName *string

	// Origin of the job.
	Origin *Origin

	// Duration for which the job was queued.
	QueuedDuration *Duration

	// Time it took the job to run.
	RunningDuration *Duration

	// The fabric runtime version.
	RuntimeVersion *string

	// A Spark application ID is a unique identifier assigned to each Apache Spark application. It also appears in the Spark UI.
	SparkApplicationID *string

	// Timestamp when the job started in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// Current state of the job.
	State *State

	// Timestamp when the job was submitted in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	SubmittedDateTime *time.Time

	// ID of the submitter.
	Submitter *Principal

	// Total duration of the job.
	TotalDuration *Duration
}

// LivySessions - A paginated list of livy sessions.
type LivySessions struct {
	// REQUIRED; A list of livy sessions.
	Value []LivySession

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// PoolProperties - Properties of a pool
type PoolProperties struct {
	// Customize compute configurations for items. False - Disabled, true - Enabled.
	CustomizeComputeEnabled *bool

	// Default pool for workspace. It should be a valid custom pool name. "Starter Pool" means use starter pool.
	DefaultPool *InstancePool

	// Customize starter pool. For more information about configuring starter pool, see configuring starter pool [/fabric/data-engineering/configure-starter-pools].
	StarterPool *StarterPoolProperties
}

// Principal - Represents an identity or a Microsoft Entra group.
type Principal struct {
	// REQUIRED; The principal's ID.
	ID *string

	// REQUIRED; The type of the principal. Additional principal types may be added over time.
	Type *PrincipalType

	// Group specific details. Applicable when the principal type is Group.
	GroupDetails *PrincipalGroupDetails

	// Service principal profile details. Applicable when the principal type is ServicePrincipalProfile.
	ServicePrincipalProfileDetails *PrincipalServicePrincipalProfileDetails

	// READ-ONLY; The principal's display name.
	DisplayName *string

	// READ-ONLY; Service principal specific details. Applicable when the principal type is ServicePrincipal.
	ServicePrincipalDetails *PrincipalServicePrincipalDetails

	// READ-ONLY; User principal specific details. Applicable when the principal type is User.
	UserDetails *PrincipalUserDetails
}

// PrincipalGroupDetails - Group specific details. Applicable when the principal type is Group.
type PrincipalGroupDetails struct {
	// The type of the group. Additional group types may be added over time.
	GroupType *GroupType
}

// PrincipalServicePrincipalDetails - Service principal specific details. Applicable when the principal type is ServicePrincipal.
type PrincipalServicePrincipalDetails struct {
	// READ-ONLY; The service principal's Microsoft Entra AppId.
	AADAppID *string
}

// PrincipalServicePrincipalProfileDetails - Service principal profile details. Applicable when the principal type is ServicePrincipalProfile.
type PrincipalServicePrincipalProfileDetails struct {
	// The service principal profile's parent principal.
	ParentPrincipal *Principal
}

// PrincipalUserDetails - User principal specific details. Applicable when the principal type is User.
type PrincipalUserDetails struct {
	// READ-ONLY; The user principal name.
	UserPrincipalName *string
}

// StarterPoolProperties - Custom starter pool.
type StarterPoolProperties struct {
	// The maximum executors count.
	MaxExecutors *int32

	// The maximum node count.
	MaxNodeCount *int32
}

// UpdateCustomPoolRequest - Update custom pool request payload.
type UpdateCustomPoolRequest struct {
	// Autoscale.
	AutoScale *AutoScaleProperties

	// Dynamic executor allocation.
	DynamicExecutorAllocation *DynamicExecutorAllocationProperties

	// Custom pool name.
	// The name must be between 1 and 64 characters long and must contain only letters, numbers, dashes, underscores and spaces.
	// Custom pool names must be unique within the workspace.
	// "Starter Pool" is a reserved custom pool name.
	Name *string

	// Node family.
	NodeFamily *NodeFamily

	// Node size.
	NodeSize *NodeSize
}

// UpdateWorkspaceSparkSettingsRequest - Update workspace Spark settings request payload.
type UpdateWorkspaceSparkSettingsRequest struct {
	// Automatic log settings.
	AutomaticLog *AutomaticLogProperties

	// Environment settings.
	Environment *EnvironmentProperties

	// High concurrency settings.
	HighConcurrency *HighConcurrencyProperties

	// Job management settings.
	Job *JobsProperties

	// Pool settings.
	Pool *PoolProperties
}

// WorkspaceSparkSettings - Workspace Spark settings.
type WorkspaceSparkSettings struct {
	// Automatic log settings.
	AutomaticLog *AutomaticLogProperties

	// Environment settings.
	Environment *EnvironmentProperties

	// High concurrency settings.
	HighConcurrency *HighConcurrencyProperties

	// Job management settings.
	Job *JobsProperties

	// Pool settings.
	Pool *PoolProperties
}
