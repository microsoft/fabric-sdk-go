// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/spark"
)

// CustomPoolsServer is a fake server for instances of the spark.CustomPoolsClient type.
type CustomPoolsServer struct {
	// CreateWorkspaceCustomPool is the fake for method CustomPoolsClient.CreateWorkspaceCustomPool
	// HTTP status codes to indicate success: http.StatusCreated
	CreateWorkspaceCustomPool func(ctx context.Context, workspaceID string, createCustomPoolRequest spark.CreateCustomPoolRequest, options *spark.CustomPoolsClientCreateWorkspaceCustomPoolOptions) (resp azfake.Responder[spark.CustomPoolsClientCreateWorkspaceCustomPoolResponse], errResp azfake.ErrorResponder)

	// DeleteWorkspaceCustomPool is the fake for method CustomPoolsClient.DeleteWorkspaceCustomPool
	// HTTP status codes to indicate success: http.StatusOK
	DeleteWorkspaceCustomPool func(ctx context.Context, workspaceID string, poolID string, options *spark.CustomPoolsClientDeleteWorkspaceCustomPoolOptions) (resp azfake.Responder[spark.CustomPoolsClientDeleteWorkspaceCustomPoolResponse], errResp azfake.ErrorResponder)

	// GetWorkspaceCustomPool is the fake for method CustomPoolsClient.GetWorkspaceCustomPool
	// HTTP status codes to indicate success: http.StatusOK
	GetWorkspaceCustomPool func(ctx context.Context, workspaceID string, poolID string, options *spark.CustomPoolsClientGetWorkspaceCustomPoolOptions) (resp azfake.Responder[spark.CustomPoolsClientGetWorkspaceCustomPoolResponse], errResp azfake.ErrorResponder)

	// NewListWorkspaceCustomPoolsPager is the fake for method CustomPoolsClient.NewListWorkspaceCustomPoolsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListWorkspaceCustomPoolsPager func(workspaceID string, options *spark.CustomPoolsClientListWorkspaceCustomPoolsOptions) (resp azfake.PagerResponder[spark.CustomPoolsClientListWorkspaceCustomPoolsResponse])

	// UpdateWorkspaceCustomPool is the fake for method CustomPoolsClient.UpdateWorkspaceCustomPool
	// HTTP status codes to indicate success: http.StatusOK
	UpdateWorkspaceCustomPool func(ctx context.Context, workspaceID string, poolID string, updateCustomPoolRequest spark.UpdateCustomPoolRequest, options *spark.CustomPoolsClientUpdateWorkspaceCustomPoolOptions) (resp azfake.Responder[spark.CustomPoolsClientUpdateWorkspaceCustomPoolResponse], errResp azfake.ErrorResponder)
}

// NewCustomPoolsServerTransport creates a new instance of CustomPoolsServerTransport with the provided implementation.
// The returned CustomPoolsServerTransport instance is connected to an instance of spark.CustomPoolsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCustomPoolsServerTransport(srv *CustomPoolsServer) *CustomPoolsServerTransport {
	return &CustomPoolsServerTransport{
		srv:                              srv,
		newListWorkspaceCustomPoolsPager: newTracker[azfake.PagerResponder[spark.CustomPoolsClientListWorkspaceCustomPoolsResponse]](),
	}
}

// CustomPoolsServerTransport connects instances of spark.CustomPoolsClient to instances of CustomPoolsServer.
// Don't use this type directly, use NewCustomPoolsServerTransport instead.
type CustomPoolsServerTransport struct {
	srv                              *CustomPoolsServer
	newListWorkspaceCustomPoolsPager *tracker[azfake.PagerResponder[spark.CustomPoolsClientListWorkspaceCustomPoolsResponse]]
}

// Do implements the policy.Transporter interface for CustomPoolsServerTransport.
func (c *CustomPoolsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return c.dispatchToMethodFake(req, method)
}

func (c *CustomPoolsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if customPoolsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = customPoolsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "CustomPoolsClient.CreateWorkspaceCustomPool":
				res.resp, res.err = c.dispatchCreateWorkspaceCustomPool(req)
			case "CustomPoolsClient.DeleteWorkspaceCustomPool":
				res.resp, res.err = c.dispatchDeleteWorkspaceCustomPool(req)
			case "CustomPoolsClient.GetWorkspaceCustomPool":
				res.resp, res.err = c.dispatchGetWorkspaceCustomPool(req)
			case "CustomPoolsClient.NewListWorkspaceCustomPoolsPager":
				res.resp, res.err = c.dispatchNewListWorkspaceCustomPoolsPager(req)
			case "CustomPoolsClient.UpdateWorkspaceCustomPool":
				res.resp, res.err = c.dispatchUpdateWorkspaceCustomPool(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (c *CustomPoolsServerTransport) dispatchCreateWorkspaceCustomPool(req *http.Request) (*http.Response, error) {
	if c.srv.CreateWorkspaceCustomPool == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateWorkspaceCustomPool not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/spark/pools`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[spark.CreateCustomPoolRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.CreateWorkspaceCustomPool(req.Context(), workspaceIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CustomPool, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Location; val != nil {
		resp.Header.Set("Location", *val)
	}
	return resp, nil
}

func (c *CustomPoolsServerTransport) dispatchDeleteWorkspaceCustomPool(req *http.Request) (*http.Response, error) {
	if c.srv.DeleteWorkspaceCustomPool == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteWorkspaceCustomPool not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/spark/pools/(?P<poolId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	poolIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("poolId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.DeleteWorkspaceCustomPool(req.Context(), workspaceIDParam, poolIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *CustomPoolsServerTransport) dispatchGetWorkspaceCustomPool(req *http.Request) (*http.Response, error) {
	if c.srv.GetWorkspaceCustomPool == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetWorkspaceCustomPool not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/spark/pools/(?P<poolId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	poolIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("poolId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.GetWorkspaceCustomPool(req.Context(), workspaceIDParam, poolIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CustomPool, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *CustomPoolsServerTransport) dispatchNewListWorkspaceCustomPoolsPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListWorkspaceCustomPoolsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListWorkspaceCustomPoolsPager not implemented")}
	}
	newListWorkspaceCustomPoolsPager := c.newListWorkspaceCustomPoolsPager.get(req)
	if newListWorkspaceCustomPoolsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/spark/pools`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *spark.CustomPoolsClientListWorkspaceCustomPoolsOptions
		if continuationTokenParam != nil {
			options = &spark.CustomPoolsClientListWorkspaceCustomPoolsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := c.srv.NewListWorkspaceCustomPoolsPager(workspaceIDParam, options)
		newListWorkspaceCustomPoolsPager = &resp
		c.newListWorkspaceCustomPoolsPager.add(req, newListWorkspaceCustomPoolsPager)
		server.PagerResponderInjectNextLinks(newListWorkspaceCustomPoolsPager, req, func(page *spark.CustomPoolsClientListWorkspaceCustomPoolsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListWorkspaceCustomPoolsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListWorkspaceCustomPoolsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListWorkspaceCustomPoolsPager) {
		c.newListWorkspaceCustomPoolsPager.remove(req)
	}
	return resp, nil
}

func (c *CustomPoolsServerTransport) dispatchUpdateWorkspaceCustomPool(req *http.Request) (*http.Response, error) {
	if c.srv.UpdateWorkspaceCustomPool == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateWorkspaceCustomPool not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/spark/pools/(?P<poolId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[spark.UpdateCustomPoolRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	poolIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("poolId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.UpdateWorkspaceCustomPool(req.Context(), workspaceIDParam, poolIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CustomPool, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to CustomPoolsServerTransport
var customPoolsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
