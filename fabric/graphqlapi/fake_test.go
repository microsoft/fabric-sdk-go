// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package graphqlapi_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/graphqlapi"
	"github.com/microsoft/fabric-sdk-go/fabric/graphqlapi/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *graphqlapi.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = graphqlapi.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListGraphQLApis() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List GraphQLApis in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := graphqlapi.GraphQLApis{
		Value: []graphqlapi.GraphQLAPI{
			{
				Type:        to.Ptr(graphqlapi.ItemTypeGraphQLAPI),
				Description: to.Ptr("An API for GraphQL item description."),
				DisplayName: to.Ptr("GraphQL 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(graphqlapi.ItemTypeGraphQLAPI),
				Description: to.Ptr("An API for GraphQL description."),
				DisplayName: to.Ptr("GraphQL 2"),
				ID:          to.Ptr("f697fb63-abd4-4399-9548-be7e3c3c0dac"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListGraphQLApisPager = func(workspaceID string, options *graphqlapi.ItemsClientListGraphQLApisOptions) (resp azfake.PagerResponder[graphqlapi.ItemsClientListGraphQLApisResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[graphqlapi.ItemsClientListGraphQLApisResponse]{}
		resp.AddPage(http.StatusOK, graphqlapi.ItemsClientListGraphQLApisResponse{GraphQLApis: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListGraphQLApisPager(exampleWorkspaceID, &graphqlapi.ItemsClientListGraphQLApisOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GraphQLApis))
		if err == nil {
			break
		}
	}
}
