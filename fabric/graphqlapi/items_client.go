// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package graphqlapi

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateGraphQLAPI - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES GraphQLApi.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a GraphQLApi the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createGraphQLAPIRequest - Create item request payload.
//   - options - ItemsClientBeginCreateGraphQLAPIOptions contains the optional parameters for the ItemsClient.BeginCreateGraphQLAPI
//     method.
func (client *ItemsClient) BeginCreateGraphQLAPI(ctx context.Context, workspaceID string, createGraphQLAPIRequest CreateGraphQLAPIRequest, options *ItemsClientBeginCreateGraphQLAPIOptions) (*runtime.Poller[ItemsClientCreateGraphQLAPIResponse], error) {
	return client.beginCreateGraphQLAPI(ctx, workspaceID, createGraphQLAPIRequest, options)
}

// CreateGraphQLAPI - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES GraphQLApi.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a GraphQLApi the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createGraphQLAPI(ctx context.Context, workspaceID string, createGraphQLAPIRequest CreateGraphQLAPIRequest, options *ItemsClientBeginCreateGraphQLAPIOptions) (*http.Response, error) {
	var err error
	const operationName = "graphqlapi.ItemsClient.BeginCreateGraphQLAPI"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createGraphQLAPICreateRequest(ctx, workspaceID, createGraphQLAPIRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createGraphQLAPICreateRequest creates the CreateGraphQLAPI request.
func (client *ItemsClient) createGraphQLAPICreateRequest(ctx context.Context, workspaceID string, createGraphQLAPIRequest CreateGraphQLAPIRequest, _ *ItemsClientBeginCreateGraphQLAPIOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/GraphQLApis"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createGraphQLAPIRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteGraphQLAPI - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES GraphQLApi.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - graphQLAPIID - The GraphQLApi ID.
//   - options - ItemsClientDeleteGraphQLAPIOptions contains the optional parameters for the ItemsClient.DeleteGraphQLAPI method.
func (client *ItemsClient) DeleteGraphQLAPI(ctx context.Context, workspaceID string, graphQLAPIID string, options *ItemsClientDeleteGraphQLAPIOptions) (ItemsClientDeleteGraphQLAPIResponse, error) {
	var err error
	const operationName = "graphqlapi.ItemsClient.DeleteGraphQLAPI"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteGraphQLAPICreateRequest(ctx, workspaceID, graphQLAPIID, options)
	if err != nil {
		return ItemsClientDeleteGraphQLAPIResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteGraphQLAPIResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteGraphQLAPIResponse{}, err
	}
	return ItemsClientDeleteGraphQLAPIResponse{}, nil
}

// deleteGraphQLAPICreateRequest creates the DeleteGraphQLAPI request.
func (client *ItemsClient) deleteGraphQLAPICreateRequest(ctx context.Context, workspaceID string, graphQLAPIID string, _ *ItemsClientDeleteGraphQLAPIOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/GraphQLApis/{GraphQLApiId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if graphQLAPIID == "" {
		return nil, errors.New("parameter graphQLAPIID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{GraphQLApiId}", url.PathEscape(graphQLAPIID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetGraphQLAPI - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES GraphQLApi.Read.All or GraphQLApi.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - graphQLAPIID - The GraphQLApi ID.
//   - options - ItemsClientGetGraphQLAPIOptions contains the optional parameters for the ItemsClient.GetGraphQLAPI method.
func (client *ItemsClient) GetGraphQLAPI(ctx context.Context, workspaceID string, graphQLAPIID string, options *ItemsClientGetGraphQLAPIOptions) (ItemsClientGetGraphQLAPIResponse, error) {
	var err error
	const operationName = "graphqlapi.ItemsClient.GetGraphQLAPI"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getGraphQLAPICreateRequest(ctx, workspaceID, graphQLAPIID, options)
	if err != nil {
		return ItemsClientGetGraphQLAPIResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetGraphQLAPIResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetGraphQLAPIResponse{}, err
	}
	resp, err := client.getGraphQLAPIHandleResponse(httpResp)
	return resp, err
}

// getGraphQLAPICreateRequest creates the GetGraphQLAPI request.
func (client *ItemsClient) getGraphQLAPICreateRequest(ctx context.Context, workspaceID string, graphQLAPIID string, _ *ItemsClientGetGraphQLAPIOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/GraphQLApis/{GraphQLApiId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if graphQLAPIID == "" {
		return nil, errors.New("parameter graphQLAPIID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{GraphQLApiId}", url.PathEscape(graphQLAPIID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getGraphQLAPIHandleResponse handles the GetGraphQLAPI response.
func (client *ItemsClient) getGraphQLAPIHandleResponse(resp *http.Response) (ItemsClientGetGraphQLAPIResponse, error) {
	result := ItemsClientGetGraphQLAPIResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GraphQLAPI); err != nil {
		return ItemsClientGetGraphQLAPIResponse{}, err
	}
	return result, nil
}

// NewListGraphQLApisPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListGraphQLApisOptions contains the optional parameters for the ItemsClient.NewListGraphQLApisPager
//     method.
func (client *ItemsClient) NewListGraphQLApisPager(workspaceID string, options *ItemsClientListGraphQLApisOptions) *runtime.Pager[ItemsClientListGraphQLApisResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListGraphQLApisResponse]{
		More: func(page ItemsClientListGraphQLApisResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListGraphQLApisResponse) (ItemsClientListGraphQLApisResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "graphqlapi.ItemsClient.NewListGraphQLApisPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listGraphQLApisCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListGraphQLApisResponse{}, err
			}
			return client.listGraphQLApisHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listGraphQLApisCreateRequest creates the ListGraphQLApis request.
func (client *ItemsClient) listGraphQLApisCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListGraphQLApisOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/GraphQLApis"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listGraphQLApisHandleResponse handles the ListGraphQLApis response.
func (client *ItemsClient) listGraphQLApisHandleResponse(resp *http.Response) (ItemsClientListGraphQLApisResponse, error) {
	result := ItemsClientListGraphQLApisResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GraphQLApis); err != nil {
		return ItemsClientListGraphQLApisResponse{}, err
	}
	return result, nil
}

// UpdateGraphQLAPI - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES GraphQLApi.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - graphQLAPIID - The GraphQLApi ID.
//   - updateGraphQLAPIRequest - Update GraphQLApi request payload.
//   - options - ItemsClientUpdateGraphQLAPIOptions contains the optional parameters for the ItemsClient.UpdateGraphQLAPI method.
func (client *ItemsClient) UpdateGraphQLAPI(ctx context.Context, workspaceID string, graphQLAPIID string, updateGraphQLAPIRequest UpdateGraphQLAPIRequest, options *ItemsClientUpdateGraphQLAPIOptions) (ItemsClientUpdateGraphQLAPIResponse, error) {
	var err error
	const operationName = "graphqlapi.ItemsClient.UpdateGraphQLAPI"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateGraphQLAPICreateRequest(ctx, workspaceID, graphQLAPIID, updateGraphQLAPIRequest, options)
	if err != nil {
		return ItemsClientUpdateGraphQLAPIResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateGraphQLAPIResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateGraphQLAPIResponse{}, err
	}
	resp, err := client.updateGraphQLAPIHandleResponse(httpResp)
	return resp, err
}

// updateGraphQLAPICreateRequest creates the UpdateGraphQLAPI request.
func (client *ItemsClient) updateGraphQLAPICreateRequest(ctx context.Context, workspaceID string, graphQLAPIID string, updateGraphQLAPIRequest UpdateGraphQLAPIRequest, _ *ItemsClientUpdateGraphQLAPIOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/GraphQLApis/{GraphQLApiId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if graphQLAPIID == "" {
		return nil, errors.New("parameter graphQLAPIID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{GraphQLApiId}", url.PathEscape(graphQLAPIID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateGraphQLAPIRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateGraphQLAPIHandleResponse handles the UpdateGraphQLAPI response.
func (client *ItemsClient) updateGraphQLAPIHandleResponse(resp *http.Response) (ItemsClientUpdateGraphQLAPIResponse, error) {
	result := ItemsClientUpdateGraphQLAPIResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GraphQLAPI); err != nil {
		return ItemsClientUpdateGraphQLAPIResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// CreateGraphQLAPI - returns ItemsClientCreateGraphQLAPIResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES GraphQLApi.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a GraphQLApi the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createGraphQLAPIRequest - Create item request payload.
//   - options - ItemsClientBeginCreateGraphQLAPIOptions contains the optional parameters for the ItemsClient.BeginCreateGraphQLAPI method.
func (client *ItemsClient) CreateGraphQLAPI(ctx context.Context, workspaceID string, createGraphQLAPIRequest CreateGraphQLAPIRequest, options *ItemsClientBeginCreateGraphQLAPIOptions) (ItemsClientCreateGraphQLAPIResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateGraphQLAPI(ctx, workspaceID, createGraphQLAPIRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateGraphQLAPIResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateGraphQLAPIResponse{}, err
	}
	return result, err
}

// beginCreateGraphQLAPI creates the createGraphQLAPI request.
func (client *ItemsClient) beginCreateGraphQLAPI(ctx context.Context, workspaceID string, createGraphQLAPIRequest CreateGraphQLAPIRequest, options *ItemsClientBeginCreateGraphQLAPIOptions) (*runtime.Poller[ItemsClientCreateGraphQLAPIResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createGraphQLAPI(ctx, workspaceID, createGraphQLAPIRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateGraphQLAPIResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateGraphQLAPIResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateGraphQLAPIResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateGraphQLAPIResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListGraphQLApis - returns array of GraphQLAPI from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListGraphQLApisOptions contains the optional parameters for the ItemsClient.NewListGraphQLApisPager method.
func (client *ItemsClient) ListGraphQLApis(ctx context.Context, workspaceID string, options *ItemsClientListGraphQLApisOptions) ([]GraphQLAPI, error) {
	pager := client.NewListGraphQLApisPager(workspaceID, options)
	mapper := func(resp ItemsClientListGraphQLApisResponse) []GraphQLAPI {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []GraphQLAPI{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []GraphQLAPI{}, err
	}
	return list, nil
}
