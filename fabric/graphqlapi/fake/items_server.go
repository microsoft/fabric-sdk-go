// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/graphqlapi"
)

// ItemsServer is a fake server for instances of the graphqlapi.ItemsClient type.
type ItemsServer struct {
	// BeginCreateGraphQLAPI is the fake for method ItemsClient.BeginCreateGraphQLAPI
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateGraphQLAPI func(ctx context.Context, workspaceID string, createGraphQLAPIRequest graphqlapi.CreateGraphQLAPIRequest, options *graphqlapi.ItemsClientBeginCreateGraphQLAPIOptions) (resp azfake.PollerResponder[graphqlapi.ItemsClientCreateGraphQLAPIResponse], errResp azfake.ErrorResponder)

	// DeleteGraphQLAPI is the fake for method ItemsClient.DeleteGraphQLAPI
	// HTTP status codes to indicate success: http.StatusOK
	DeleteGraphQLAPI func(ctx context.Context, workspaceID string, graphQLAPIID string, options *graphqlapi.ItemsClientDeleteGraphQLAPIOptions) (resp azfake.Responder[graphqlapi.ItemsClientDeleteGraphQLAPIResponse], errResp azfake.ErrorResponder)

	// GetGraphQLAPI is the fake for method ItemsClient.GetGraphQLAPI
	// HTTP status codes to indicate success: http.StatusOK
	GetGraphQLAPI func(ctx context.Context, workspaceID string, graphQLAPIID string, options *graphqlapi.ItemsClientGetGraphQLAPIOptions) (resp azfake.Responder[graphqlapi.ItemsClientGetGraphQLAPIResponse], errResp azfake.ErrorResponder)

	// NewListGraphQLApisPager is the fake for method ItemsClient.NewListGraphQLApisPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListGraphQLApisPager func(workspaceID string, options *graphqlapi.ItemsClientListGraphQLApisOptions) (resp azfake.PagerResponder[graphqlapi.ItemsClientListGraphQLApisResponse])

	// UpdateGraphQLAPI is the fake for method ItemsClient.UpdateGraphQLAPI
	// HTTP status codes to indicate success: http.StatusOK
	UpdateGraphQLAPI func(ctx context.Context, workspaceID string, graphQLAPIID string, updateGraphQLAPIRequest graphqlapi.UpdateGraphQLAPIRequest, options *graphqlapi.ItemsClientUpdateGraphQLAPIOptions) (resp azfake.Responder[graphqlapi.ItemsClientUpdateGraphQLAPIResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of graphqlapi.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                     srv,
		beginCreateGraphQLAPI:   newTracker[azfake.PollerResponder[graphqlapi.ItemsClientCreateGraphQLAPIResponse]](),
		newListGraphQLApisPager: newTracker[azfake.PagerResponder[graphqlapi.ItemsClientListGraphQLApisResponse]](),
	}
}

// ItemsServerTransport connects instances of graphqlapi.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                     *ItemsServer
	beginCreateGraphQLAPI   *tracker[azfake.PollerResponder[graphqlapi.ItemsClientCreateGraphQLAPIResponse]]
	newListGraphQLApisPager *tracker[azfake.PagerResponder[graphqlapi.ItemsClientListGraphQLApisResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateGraphQLAPI":
				res.resp, res.err = i.dispatchBeginCreateGraphQLAPI(req)
			case "ItemsClient.DeleteGraphQLAPI":
				res.resp, res.err = i.dispatchDeleteGraphQLAPI(req)
			case "ItemsClient.GetGraphQLAPI":
				res.resp, res.err = i.dispatchGetGraphQLAPI(req)
			case "ItemsClient.NewListGraphQLApisPager":
				res.resp, res.err = i.dispatchNewListGraphQLApisPager(req)
			case "ItemsClient.UpdateGraphQLAPI":
				res.resp, res.err = i.dispatchUpdateGraphQLAPI(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateGraphQLAPI(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateGraphQLAPI == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateGraphQLAPI not implemented")}
	}
	beginCreateGraphQLAPI := i.beginCreateGraphQLAPI.get(req)
	if beginCreateGraphQLAPI == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/GraphQLApis`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[graphqlapi.CreateGraphQLAPIRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateGraphQLAPI(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateGraphQLAPI = &respr
		i.beginCreateGraphQLAPI.add(req, beginCreateGraphQLAPI)
	}

	resp, err := server.PollerResponderNext(beginCreateGraphQLAPI, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateGraphQLAPI.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateGraphQLAPI) {
		i.beginCreateGraphQLAPI.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteGraphQLAPI(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteGraphQLAPI == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteGraphQLAPI not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/GraphQLApis/(?P<GraphQLApiId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	graphQLAPIIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("GraphQLApiId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteGraphQLAPI(req.Context(), workspaceIDParam, graphQLAPIIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetGraphQLAPI(req *http.Request) (*http.Response, error) {
	if i.srv.GetGraphQLAPI == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetGraphQLAPI not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/GraphQLApis/(?P<GraphQLApiId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	graphQLAPIIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("GraphQLApiId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetGraphQLAPI(req.Context(), workspaceIDParam, graphQLAPIIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GraphQLAPI, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListGraphQLApisPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListGraphQLApisPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListGraphQLApisPager not implemented")}
	}
	newListGraphQLApisPager := i.newListGraphQLApisPager.get(req)
	if newListGraphQLApisPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/GraphQLApis`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *graphqlapi.ItemsClientListGraphQLApisOptions
		if continuationTokenParam != nil {
			options = &graphqlapi.ItemsClientListGraphQLApisOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListGraphQLApisPager(workspaceIDParam, options)
		newListGraphQLApisPager = &resp
		i.newListGraphQLApisPager.add(req, newListGraphQLApisPager)
		server.PagerResponderInjectNextLinks(newListGraphQLApisPager, req, func(page *graphqlapi.ItemsClientListGraphQLApisResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListGraphQLApisPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListGraphQLApisPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListGraphQLApisPager) {
		i.newListGraphQLApisPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateGraphQLAPI(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateGraphQLAPI == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateGraphQLAPI not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/GraphQLApis/(?P<GraphQLApiId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[graphqlapi.UpdateGraphQLAPIRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	graphQLAPIIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("GraphQLApiId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateGraphQLAPI(req.Context(), workspaceIDParam, graphQLAPIIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GraphQLAPI, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
