// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package notebook

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateNotebook - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create notebook with definition, refer to Notebook definition [/rest/api/fabric/articles/item-management/definitions/notebook-definition]
// article.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Notebook.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a notebook the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createNotebookRequest - Create item request payload.
//   - options - ItemsClientBeginCreateNotebookOptions contains the optional parameters for the ItemsClient.BeginCreateNotebook
//     method.
func (client *ItemsClient) BeginCreateNotebook(ctx context.Context, workspaceID string, createNotebookRequest CreateNotebookRequest, options *ItemsClientBeginCreateNotebookOptions) (*runtime.Poller[ItemsClientCreateNotebookResponse], error) {
	return client.beginCreateNotebook(ctx, workspaceID, createNotebookRequest, options)
}

// CreateNotebook - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create notebook with definition, refer to Notebook definition [/rest/api/fabric/articles/item-management/definitions/notebook-definition]
// article.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Notebook.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a notebook the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createNotebook(ctx context.Context, workspaceID string, createNotebookRequest CreateNotebookRequest, options *ItemsClientBeginCreateNotebookOptions) (*http.Response, error) {
	var err error
	const operationName = "notebook.ItemsClient.BeginCreateNotebook"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createNotebookCreateRequest(ctx, workspaceID, createNotebookRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createNotebookCreateRequest creates the CreateNotebook request.
func (client *ItemsClient) createNotebookCreateRequest(ctx context.Context, workspaceID string, createNotebookRequest CreateNotebookRequest, options *ItemsClientBeginCreateNotebookOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/notebooks"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createNotebookRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteNotebook - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Notebook.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - notebookID - The notebook ID.
//   - options - ItemsClientDeleteNotebookOptions contains the optional parameters for the ItemsClient.DeleteNotebook method.
func (client *ItemsClient) DeleteNotebook(ctx context.Context, workspaceID string, notebookID string, options *ItemsClientDeleteNotebookOptions) (ItemsClientDeleteNotebookResponse, error) {
	var err error
	const operationName = "notebook.ItemsClient.DeleteNotebook"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteNotebookCreateRequest(ctx, workspaceID, notebookID, options)
	if err != nil {
		return ItemsClientDeleteNotebookResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteNotebookResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteNotebookResponse{}, err
	}
	return ItemsClientDeleteNotebookResponse{}, nil
}

// deleteNotebookCreateRequest creates the DeleteNotebook request.
func (client *ItemsClient) deleteNotebookCreateRequest(ctx context.Context, workspaceID string, notebookID string, options *ItemsClientDeleteNotebookOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/notebooks/{notebookId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if notebookID == "" {
		return nil, errors.New("parameter notebookID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{notebookId}", url.PathEscape(notebookID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetNotebook - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Notebook.Read.All or Notebook.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - notebookID - The notebook ID.
//   - options - ItemsClientGetNotebookOptions contains the optional parameters for the ItemsClient.GetNotebook method.
func (client *ItemsClient) GetNotebook(ctx context.Context, workspaceID string, notebookID string, options *ItemsClientGetNotebookOptions) (ItemsClientGetNotebookResponse, error) {
	var err error
	const operationName = "notebook.ItemsClient.GetNotebook"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getNotebookCreateRequest(ctx, workspaceID, notebookID, options)
	if err != nil {
		return ItemsClientGetNotebookResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetNotebookResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetNotebookResponse{}, err
	}
	resp, err := client.getNotebookHandleResponse(httpResp)
	return resp, err
}

// getNotebookCreateRequest creates the GetNotebook request.
func (client *ItemsClient) getNotebookCreateRequest(ctx context.Context, workspaceID string, notebookID string, options *ItemsClientGetNotebookOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/notebooks/{notebookId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if notebookID == "" {
		return nil, errors.New("parameter notebookID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{notebookId}", url.PathEscape(notebookID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNotebookHandleResponse handles the GetNotebook response.
func (client *ItemsClient) getNotebookHandleResponse(resp *http.Response) (ItemsClientGetNotebookResponse, error) {
	result := ItemsClientGetNotebookResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Notebook); err != nil {
		return ItemsClientGetNotebookResponse{}, err
	}
	return result, nil
}

// BeginGetNotebookDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a notebook's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Notebook.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS This API is blocked for a notebook with an encrypted sensitivity label.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - notebookID - The notebook ID.
//   - options - ItemsClientBeginGetNotebookDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetNotebookDefinition
//     method.
func (client *ItemsClient) BeginGetNotebookDefinition(ctx context.Context, workspaceID string, notebookID string, options *ItemsClientBeginGetNotebookDefinitionOptions) (*runtime.Poller[ItemsClientGetNotebookDefinitionResponse], error) {
	return client.beginGetNotebookDefinition(ctx, workspaceID, notebookID, options)
}

// GetNotebookDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a notebook's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Notebook.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS This API is blocked for a notebook with an encrypted sensitivity label.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getNotebookDefinition(ctx context.Context, workspaceID string, notebookID string, options *ItemsClientBeginGetNotebookDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "notebook.ItemsClient.BeginGetNotebookDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getNotebookDefinitionCreateRequest(ctx, workspaceID, notebookID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getNotebookDefinitionCreateRequest creates the GetNotebookDefinition request.
func (client *ItemsClient) getNotebookDefinitionCreateRequest(ctx context.Context, workspaceID string, notebookID string, options *ItemsClientBeginGetNotebookDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/notebooks/{notebookId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if notebookID == "" {
		return nil, errors.New("parameter notebookID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{notebookId}", url.PathEscape(notebookID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("format", *options.Format)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListNotebooksPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListNotebooksOptions contains the optional parameters for the ItemsClient.NewListNotebooksPager method.
func (client *ItemsClient) NewListNotebooksPager(workspaceID string, options *ItemsClientListNotebooksOptions) *runtime.Pager[ItemsClientListNotebooksResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListNotebooksResponse]{
		More: func(page ItemsClientListNotebooksResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListNotebooksResponse) (ItemsClientListNotebooksResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "notebook.ItemsClient.NewListNotebooksPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listNotebooksCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListNotebooksResponse{}, err
			}
			return client.listNotebooksHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listNotebooksCreateRequest creates the ListNotebooks request.
func (client *ItemsClient) listNotebooksCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListNotebooksOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/notebooks"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listNotebooksHandleResponse handles the ListNotebooks response.
func (client *ItemsClient) listNotebooksHandleResponse(resp *http.Response) (ItemsClientListNotebooksResponse, error) {
	result := ItemsClientListNotebooksResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Notebooks); err != nil {
		return ItemsClientListNotebooksResponse{}, err
	}
	return result, nil
}

// UpdateNotebook - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Notebook.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - notebookID - The notebook ID.
//   - updateNotebookRequest - Update notebook request payload.
//   - options - ItemsClientUpdateNotebookOptions contains the optional parameters for the ItemsClient.UpdateNotebook method.
func (client *ItemsClient) UpdateNotebook(ctx context.Context, workspaceID string, notebookID string, updateNotebookRequest UpdateNotebookRequest, options *ItemsClientUpdateNotebookOptions) (ItemsClientUpdateNotebookResponse, error) {
	var err error
	const operationName = "notebook.ItemsClient.UpdateNotebook"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateNotebookCreateRequest(ctx, workspaceID, notebookID, updateNotebookRequest, options)
	if err != nil {
		return ItemsClientUpdateNotebookResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateNotebookResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateNotebookResponse{}, err
	}
	resp, err := client.updateNotebookHandleResponse(httpResp)
	return resp, err
}

// updateNotebookCreateRequest creates the UpdateNotebook request.
func (client *ItemsClient) updateNotebookCreateRequest(ctx context.Context, workspaceID string, notebookID string, updateNotebookRequest UpdateNotebookRequest, options *ItemsClientUpdateNotebookOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/notebooks/{notebookId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if notebookID == "" {
		return nil, errors.New("parameter notebookID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{notebookId}", url.PathEscape(notebookID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateNotebookRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateNotebookHandleResponse handles the UpdateNotebook response.
func (client *ItemsClient) updateNotebookHandleResponse(resp *http.Response) (ItemsClientUpdateNotebookResponse, error) {
	result := ItemsClientUpdateNotebookResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Notebook); err != nil {
		return ItemsClientUpdateNotebookResponse{}, err
	}
	return result, nil
}

// BeginUpdateNotebookDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the notebook's definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Notebook.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - notebookID - The notebook ID.
//   - updateNotebookDefinitionRequest - Update notebook definition request payload.
//   - options - ItemsClientBeginUpdateNotebookDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateNotebookDefinition
//     method.
func (client *ItemsClient) BeginUpdateNotebookDefinition(ctx context.Context, workspaceID string, notebookID string, updateNotebookDefinitionRequest UpdateNotebookDefinitionRequest, options *ItemsClientBeginUpdateNotebookDefinitionOptions) (*runtime.Poller[ItemsClientUpdateNotebookDefinitionResponse], error) {
	return client.beginUpdateNotebookDefinition(ctx, workspaceID, notebookID, updateNotebookDefinitionRequest, options)
}

// UpdateNotebookDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the notebook's definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Notebook.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateNotebookDefinition(ctx context.Context, workspaceID string, notebookID string, updateNotebookDefinitionRequest UpdateNotebookDefinitionRequest, options *ItemsClientBeginUpdateNotebookDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "notebook.ItemsClient.BeginUpdateNotebookDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateNotebookDefinitionCreateRequest(ctx, workspaceID, notebookID, updateNotebookDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateNotebookDefinitionCreateRequest creates the UpdateNotebookDefinition request.
func (client *ItemsClient) updateNotebookDefinitionCreateRequest(ctx context.Context, workspaceID string, notebookID string, updateNotebookDefinitionRequest UpdateNotebookDefinitionRequest, options *ItemsClientBeginUpdateNotebookDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/notebooks/{notebookId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if notebookID == "" {
		return nil, errors.New("parameter notebookID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{notebookId}", url.PathEscape(notebookID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateNotebookDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateNotebook - returns ItemsClientCreateNotebookResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// To create notebook with definition, refer to Notebook definition [/rest/api/fabric/articles/item-management/definitions/notebook-definition] article.
//
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Notebook.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a notebook the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createNotebookRequest - Create item request payload.
//   - options - ItemsClientBeginCreateNotebookOptions contains the optional parameters for the ItemsClient.BeginCreateNotebook method.
func (client *ItemsClient) CreateNotebook(ctx context.Context, workspaceID string, createNotebookRequest CreateNotebookRequest, options *ItemsClientBeginCreateNotebookOptions) (ItemsClientCreateNotebookResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateNotebook(ctx, workspaceID, createNotebookRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateNotebookResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateNotebookResponse{}, err
	}
	return result, err
}

// beginCreateNotebook creates the createNotebook request.
func (client *ItemsClient) beginCreateNotebook(ctx context.Context, workspaceID string, createNotebookRequest CreateNotebookRequest, options *ItemsClientBeginCreateNotebookOptions) (*runtime.Poller[ItemsClientCreateNotebookResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createNotebook(ctx, workspaceID, createNotebookRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateNotebookResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateNotebookResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateNotebookResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateNotebookResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetNotebookDefinition - returns ItemsClientGetNotebookDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// When you get a notebook's public definition, the sensitivity label is not a part of the definition.
//
// PERMISSIONS The caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Notebook.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS This API is blocked for a notebook with an encrypted sensitivity label.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - notebookID - The notebook ID.
//   - options - ItemsClientBeginGetNotebookDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetNotebookDefinition method.
func (client *ItemsClient) GetNotebookDefinition(ctx context.Context, workspaceID string, notebookID string, options *ItemsClientBeginGetNotebookDefinitionOptions) (ItemsClientGetNotebookDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetNotebookDefinition(ctx, workspaceID, notebookID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetNotebookDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetNotebookDefinitionResponse{}, err
	}
	return result, err
}

// beginGetNotebookDefinition creates the getNotebookDefinition request.
func (client *ItemsClient) beginGetNotebookDefinition(ctx context.Context, workspaceID string, notebookID string, options *ItemsClientBeginGetNotebookDefinitionOptions) (*runtime.Poller[ItemsClientGetNotebookDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getNotebookDefinition(ctx, workspaceID, notebookID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetNotebookDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetNotebookDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetNotebookDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetNotebookDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateNotebookDefinition - returns ItemsClientUpdateNotebookDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// Updating the notebook's definition, does not affect its sensitivity label.
//
// PERMISSIONS The API caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Notebook.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - notebookID - The notebook ID.
//   - updateNotebookDefinitionRequest - Update notebook definition request payload.
//   - options - ItemsClientBeginUpdateNotebookDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateNotebookDefinition method.
func (client *ItemsClient) UpdateNotebookDefinition(ctx context.Context, workspaceID string, notebookID string, updateNotebookDefinitionRequest UpdateNotebookDefinitionRequest, options *ItemsClientBeginUpdateNotebookDefinitionOptions) (ItemsClientUpdateNotebookDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateNotebookDefinition(ctx, workspaceID, notebookID, updateNotebookDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateNotebookDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateNotebookDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateNotebookDefinition creates the updateNotebookDefinition request.
func (client *ItemsClient) beginUpdateNotebookDefinition(ctx context.Context, workspaceID string, notebookID string, updateNotebookDefinitionRequest UpdateNotebookDefinitionRequest, options *ItemsClientBeginUpdateNotebookDefinitionOptions) (*runtime.Poller[ItemsClientUpdateNotebookDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateNotebookDefinition(ctx, workspaceID, notebookID, updateNotebookDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateNotebookDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateNotebookDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateNotebookDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateNotebookDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListNotebooks - returns array of Notebook from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListNotebooksOptions contains the optional parameters for the ItemsClient.NewListNotebooksPager method.
func (client *ItemsClient) ListNotebooks(ctx context.Context, workspaceID string, options *ItemsClientListNotebooksOptions) ([]Notebook, error) {
	pager := client.NewListNotebooksPager(workspaceID, options)
	mapper := func(resp ItemsClientListNotebooksResponse) []Notebook {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Notebook{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []Notebook{}, err
	}
	return list, nil
}
