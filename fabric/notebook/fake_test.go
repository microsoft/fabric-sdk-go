// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package notebook_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/notebook"
	"github.com/microsoft/fabric-sdk-go/fabric/notebook/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *notebook.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = notebook.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListNotebooks() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List notebooks in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := notebook.Notebooks{
		Value: []notebook.Notebook{
			{
				Type:        to.Ptr(notebook.ItemTypeNotebook),
				Description: to.Ptr("A notebook description."),
				DisplayName: to.Ptr("Notebook Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListNotebooksPager = func(workspaceID string, options *notebook.ItemsClientListNotebooksOptions) (resp azfake.PagerResponder[notebook.ItemsClientListNotebooksResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[notebook.ItemsClientListNotebooksResponse]{}
		resp.AddPage(http.StatusOK, notebook.ItemsClientListNotebooksResponse{Notebooks: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListNotebooksPager(exampleWorkspaceID, &notebook.ItemsClientListNotebooksOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Notebooks))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateNotebook() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a notebook example"},
	})
	var exampleWorkspaceID string
	var exampleCreateNotebookRequest notebook.CreateNotebookRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateNotebookRequest = notebook.CreateNotebookRequest{
		Description: to.Ptr("A notebook description."),
		DisplayName: to.Ptr("Notebook 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateNotebook = func(ctx context.Context, workspaceID string, createNotebookRequest notebook.CreateNotebookRequest, options *notebook.ItemsClientBeginCreateNotebookOptions) (resp azfake.PollerResponder[notebook.ItemsClientCreateNotebookResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateNotebookRequest, createNotebookRequest))
		resp = azfake.PollerResponder[notebook.ItemsClientCreateNotebookResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, notebook.ItemsClientCreateNotebookResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateNotebook(ctx, exampleWorkspaceID, exampleCreateNotebookRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a notebook with public definition example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateNotebookRequest = notebook.CreateNotebookRequest{
		Description: to.Ptr("A notebook description"),
		Definition: &notebook.Definition{
			Format: to.Ptr("ipynb"),
			Parts: []notebook.DefinitionPart{
				{
					Path:        to.Ptr("notebook-content.py"),
					Payload:     to.Ptr("eyJuYmZvcm1hdCI6N..5ndWUiOiJweXRob24ifX19"),
					PayloadType: to.Ptr(notebook.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(notebook.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("Notebook 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateNotebook = func(ctx context.Context, workspaceID string, createNotebookRequest notebook.CreateNotebookRequest, options *notebook.ItemsClientBeginCreateNotebookOptions) (resp azfake.PollerResponder[notebook.ItemsClientCreateNotebookResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateNotebookRequest, createNotebookRequest))
		resp = azfake.PollerResponder[notebook.ItemsClientCreateNotebookResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, notebook.ItemsClientCreateNotebookResponse{}, nil)
		return
	}

	poller, err = client.BeginCreateNotebook(ctx, exampleWorkspaceID, exampleCreateNotebookRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetNotebook() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a notebook example"},
	})
	var exampleWorkspaceID string
	var exampleNotebookID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleNotebookID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := notebook.Notebook{
		Type:        to.Ptr(notebook.ItemTypeNotebook),
		Description: to.Ptr("A notebook description."),
		DisplayName: to.Ptr("Notebook 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetNotebook = func(ctx context.Context, workspaceID string, notebookID string, options *notebook.ItemsClientGetNotebookOptions) (resp azfake.Responder[notebook.ItemsClientGetNotebookResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleNotebookID, notebookID)
		resp = azfake.Responder[notebook.ItemsClientGetNotebookResponse]{}
		resp.SetResponse(http.StatusOK, notebook.ItemsClientGetNotebookResponse{Notebook: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetNotebook(ctx, exampleWorkspaceID, exampleNotebookID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Notebook))
}

func (testsuite *FakeTestSuite) TestItems_UpdateNotebook() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a notebook example"},
	})
	var exampleWorkspaceID string
	var exampleNotebookID string
	var exampleUpdateNotebookRequest notebook.UpdateNotebookRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleNotebookID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateNotebookRequest = notebook.UpdateNotebookRequest{
		Description: to.Ptr("A new description for notebook."),
		DisplayName: to.Ptr("Notebook's New name"),
	}

	exampleRes := notebook.Notebook{
		Type:        to.Ptr(notebook.ItemTypeNotebook),
		Description: to.Ptr("A new description for notebook."),
		DisplayName: to.Ptr("Notebook's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateNotebook = func(ctx context.Context, workspaceID string, notebookID string, updateNotebookRequest notebook.UpdateNotebookRequest, options *notebook.ItemsClientUpdateNotebookOptions) (resp azfake.Responder[notebook.ItemsClientUpdateNotebookResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleNotebookID, notebookID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateNotebookRequest, updateNotebookRequest))
		resp = azfake.Responder[notebook.ItemsClientUpdateNotebookResponse]{}
		resp.SetResponse(http.StatusOK, notebook.ItemsClientUpdateNotebookResponse{Notebook: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateNotebook(ctx, exampleWorkspaceID, exampleNotebookID, exampleUpdateNotebookRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Notebook))
}

func (testsuite *FakeTestSuite) TestItems_DeleteNotebook() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a notebook example"},
	})
	var exampleWorkspaceID string
	var exampleNotebookID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleNotebookID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteNotebook = func(ctx context.Context, workspaceID string, notebookID string, options *notebook.ItemsClientDeleteNotebookOptions) (resp azfake.Responder[notebook.ItemsClientDeleteNotebookResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleNotebookID, notebookID)
		resp = azfake.Responder[notebook.ItemsClientDeleteNotebookResponse]{}
		resp.SetResponse(http.StatusOK, notebook.ItemsClientDeleteNotebookResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteNotebook(ctx, exampleWorkspaceID, exampleNotebookID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetNotebookDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a notebook definition example"},
	})
	var exampleWorkspaceID string
	var exampleNotebookID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleNotebookID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := notebook.DefinitionResponse{
		Definition: &notebook.Definition{
			Parts: []notebook.DefinitionPart{
				{
					Path:        to.Ptr("notebook-content.py"),
					Payload:     to.Ptr("IyBGYWJyaWMgbm90ZWJv..5ndWUiOiJweXRob24ifX19"),
					PayloadType: to.Ptr(notebook.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(notebook.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetNotebookDefinition = func(ctx context.Context, workspaceID string, notebookID string, options *notebook.ItemsClientBeginGetNotebookDefinitionOptions) (resp azfake.PollerResponder[notebook.ItemsClientGetNotebookDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleNotebookID, notebookID)
		resp = azfake.PollerResponder[notebook.ItemsClientGetNotebookDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, notebook.ItemsClientGetNotebookDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetNotebookDefinition(ctx, exampleWorkspaceID, exampleNotebookID, &notebook.ItemsClientBeginGetNotebookDefinitionOptions{Format: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateNotebookDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a notebook definition example"},
	})
	var exampleWorkspaceID string
	var exampleNotebookID string
	var exampleUpdateNotebookDefinitionRequest notebook.UpdateNotebookDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleNotebookID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateNotebookDefinitionRequest = notebook.UpdateNotebookDefinitionRequest{
		Definition: &notebook.Definition{
			Parts: []notebook.DefinitionPart{
				{
					Path:        to.Ptr("notebook-content.py"),
					Payload:     to.Ptr("IyBGYWJyaWMgbm90ZWJv..."),
					PayloadType: to.Ptr(notebook.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(notebook.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateNotebookDefinition = func(ctx context.Context, workspaceID string, notebookID string, updateNotebookDefinitionRequest notebook.UpdateNotebookDefinitionRequest, options *notebook.ItemsClientBeginUpdateNotebookDefinitionOptions) (resp azfake.PollerResponder[notebook.ItemsClientUpdateNotebookDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleNotebookID, notebookID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateNotebookDefinitionRequest, updateNotebookDefinitionRequest))
		resp = azfake.PollerResponder[notebook.ItemsClientUpdateNotebookDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, notebook.ItemsClientUpdateNotebookDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateNotebookDefinition(ctx, exampleWorkspaceID, exampleNotebookID, exampleUpdateNotebookDefinitionRequest, &notebook.ItemsClientBeginUpdateNotebookDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}
