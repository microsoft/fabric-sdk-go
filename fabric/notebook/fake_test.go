// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package notebook_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"
	"time"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/notebook"
	"github.com/microsoft/fabric-sdk-go/fabric/notebook/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *notebook.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = notebook.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListNotebooks() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List notebooks in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := notebook.Notebooks{
		Value: []notebook.Notebook{
			{
				Type:        to.Ptr(notebook.ItemTypeNotebook),
				Description: to.Ptr("A notebook description."),
				DisplayName: to.Ptr("Notebook Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListNotebooksPager = func(workspaceID string, options *notebook.ItemsClientListNotebooksOptions) (resp azfake.PagerResponder[notebook.ItemsClientListNotebooksResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[notebook.ItemsClientListNotebooksResponse]{}
		resp.AddPage(http.StatusOK, notebook.ItemsClientListNotebooksResponse{Notebooks: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListNotebooksPager(exampleWorkspaceID, &notebook.ItemsClientListNotebooksOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Notebooks))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateNotebook() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a notebook example"},
	})
	var exampleWorkspaceID string
	var exampleCreateNotebookRequest notebook.CreateNotebookRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateNotebookRequest = notebook.CreateNotebookRequest{
		Description: to.Ptr("A notebook description."),
		DisplayName: to.Ptr("Notebook 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateNotebook = func(ctx context.Context, workspaceID string, createNotebookRequest notebook.CreateNotebookRequest, options *notebook.ItemsClientBeginCreateNotebookOptions) (resp azfake.PollerResponder[notebook.ItemsClientCreateNotebookResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateNotebookRequest, createNotebookRequest))
		resp = azfake.PollerResponder[notebook.ItemsClientCreateNotebookResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, notebook.ItemsClientCreateNotebookResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateNotebook(ctx, exampleWorkspaceID, exampleCreateNotebookRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a notebook with public definition example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateNotebookRequest = notebook.CreateNotebookRequest{
		Description: to.Ptr("A notebook description"),
		Definition: &notebook.Definition{
			Format: to.Ptr("ipynb"),
			Parts: []notebook.DefinitionPart{
				{
					Path:        to.Ptr("notebook-content.py"),
					Payload:     to.Ptr("eyJuYmZvcm1hdCI6N..5ndWUiOiJweXRob24ifX19"),
					PayloadType: to.Ptr(notebook.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(notebook.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("Notebook 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateNotebook = func(ctx context.Context, workspaceID string, createNotebookRequest notebook.CreateNotebookRequest, options *notebook.ItemsClientBeginCreateNotebookOptions) (resp azfake.PollerResponder[notebook.ItemsClientCreateNotebookResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateNotebookRequest, createNotebookRequest))
		resp = azfake.PollerResponder[notebook.ItemsClientCreateNotebookResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, notebook.ItemsClientCreateNotebookResponse{}, nil)
		return
	}

	poller, err = client.BeginCreateNotebook(ctx, exampleWorkspaceID, exampleCreateNotebookRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetNotebook() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a notebook example"},
	})
	var exampleWorkspaceID string
	var exampleNotebookID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleNotebookID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := notebook.Notebook{
		Type:        to.Ptr(notebook.ItemTypeNotebook),
		Description: to.Ptr("A notebook description."),
		DisplayName: to.Ptr("Notebook 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetNotebook = func(ctx context.Context, workspaceID string, notebookID string, options *notebook.ItemsClientGetNotebookOptions) (resp azfake.Responder[notebook.ItemsClientGetNotebookResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleNotebookID, notebookID)
		resp = azfake.Responder[notebook.ItemsClientGetNotebookResponse]{}
		resp.SetResponse(http.StatusOK, notebook.ItemsClientGetNotebookResponse{Notebook: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetNotebook(ctx, exampleWorkspaceID, exampleNotebookID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Notebook))
}

func (testsuite *FakeTestSuite) TestItems_UpdateNotebook() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a notebook example"},
	})
	var exampleWorkspaceID string
	var exampleNotebookID string
	var exampleUpdateNotebookRequest notebook.UpdateNotebookRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleNotebookID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateNotebookRequest = notebook.UpdateNotebookRequest{
		Description: to.Ptr("A new description for notebook."),
		DisplayName: to.Ptr("Notebook's New name"),
	}

	exampleRes := notebook.Notebook{
		Type:        to.Ptr(notebook.ItemTypeNotebook),
		Description: to.Ptr("A new description for notebook."),
		DisplayName: to.Ptr("Notebook's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateNotebook = func(ctx context.Context, workspaceID string, notebookID string, updateNotebookRequest notebook.UpdateNotebookRequest, options *notebook.ItemsClientUpdateNotebookOptions) (resp azfake.Responder[notebook.ItemsClientUpdateNotebookResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleNotebookID, notebookID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateNotebookRequest, updateNotebookRequest))
		resp = azfake.Responder[notebook.ItemsClientUpdateNotebookResponse]{}
		resp.SetResponse(http.StatusOK, notebook.ItemsClientUpdateNotebookResponse{Notebook: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateNotebook(ctx, exampleWorkspaceID, exampleNotebookID, exampleUpdateNotebookRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Notebook))
}

func (testsuite *FakeTestSuite) TestItems_DeleteNotebook() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a notebook example"},
	})
	var exampleWorkspaceID string
	var exampleNotebookID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleNotebookID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteNotebook = func(ctx context.Context, workspaceID string, notebookID string, options *notebook.ItemsClientDeleteNotebookOptions) (resp azfake.Responder[notebook.ItemsClientDeleteNotebookResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleNotebookID, notebookID)
		resp = azfake.Responder[notebook.ItemsClientDeleteNotebookResponse]{}
		resp.SetResponse(http.StatusOK, notebook.ItemsClientDeleteNotebookResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteNotebook(ctx, exampleWorkspaceID, exampleNotebookID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetNotebookDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a notebook definition example"},
	})
	var exampleWorkspaceID string
	var exampleNotebookID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleNotebookID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := notebook.DefinitionResponse{
		Definition: &notebook.Definition{
			Parts: []notebook.DefinitionPart{
				{
					Path:        to.Ptr("notebook-content.py"),
					Payload:     to.Ptr("IyBGYWJyaWMgbm90ZWJv..5ndWUiOiJweXRob24ifX19"),
					PayloadType: to.Ptr(notebook.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(notebook.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetNotebookDefinition = func(ctx context.Context, workspaceID string, notebookID string, options *notebook.ItemsClientBeginGetNotebookDefinitionOptions) (resp azfake.PollerResponder[notebook.ItemsClientGetNotebookDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleNotebookID, notebookID)
		resp = azfake.PollerResponder[notebook.ItemsClientGetNotebookDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, notebook.ItemsClientGetNotebookDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetNotebookDefinition(ctx, exampleWorkspaceID, exampleNotebookID, &notebook.ItemsClientBeginGetNotebookDefinitionOptions{Format: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateNotebookDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a notebook definition example"},
	})
	var exampleWorkspaceID string
	var exampleNotebookID string
	var exampleUpdateNotebookDefinitionRequest notebook.UpdateNotebookDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleNotebookID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateNotebookDefinitionRequest = notebook.UpdateNotebookDefinitionRequest{
		Definition: &notebook.Definition{
			Parts: []notebook.DefinitionPart{
				{
					Path:        to.Ptr("notebook-content.py"),
					Payload:     to.Ptr("IyBGYWJyaWMgbm90ZWJv..."),
					PayloadType: to.Ptr(notebook.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(notebook.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateNotebookDefinition = func(ctx context.Context, workspaceID string, notebookID string, updateNotebookDefinitionRequest notebook.UpdateNotebookDefinitionRequest, options *notebook.ItemsClientBeginUpdateNotebookDefinitionOptions) (resp azfake.PollerResponder[notebook.ItemsClientUpdateNotebookDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleNotebookID, notebookID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateNotebookDefinitionRequest, updateNotebookDefinitionRequest))
		resp = azfake.PollerResponder[notebook.ItemsClientUpdateNotebookDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, notebook.ItemsClientUpdateNotebookDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateNotebookDefinition(ctx, exampleWorkspaceID, exampleNotebookID, exampleUpdateNotebookDefinitionRequest, &notebook.ItemsClientBeginUpdateNotebookDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestLivySessions_ListLivySessions() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List all livy sessions example"},
	})
	var exampleWorkspaceID string
	var exampleNotebookID string
	exampleWorkspaceID = "f8113ba8-dd81-443e-811a-b385340f3f05"
	exampleNotebookID = "8cee7699-2e81-4121-9a53-cc9025046193"

	exampleRes := notebook.LivySessions{
		Value: []notebook.LivySession{
			{
				AttemptNumber:      to.Ptr[int32](1),
				CancellationReason: to.Ptr("User cancelled the Spark batch"),
				CapacityID:         to.Ptr("3c0cd366-dc28-4b6d-a525-4d415a8666e7"),
				CreatorItem: &notebook.ItemReferenceByID{
					ReferenceType: to.Ptr(notebook.ItemReferenceTypeByID),
					ItemID:        to.Ptr("8cee7699-2e81-4121-9a53-cc9025046193"),
					WorkspaceID:   to.Ptr("f8113ba8-dd81-443e-811a-b385340f3f05"),
				},
				EndDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-31T15:37:30.000Z"); return t }()),
				Item: &notebook.ItemReferenceByID{
					ReferenceType: to.Ptr(notebook.ItemReferenceTypeByID),
					ItemID:        to.Ptr("8cee7699-2e81-4121-9a53-cc9025046193"),
					WorkspaceID:   to.Ptr("f8113ba8-dd81-443e-811a-b385340f3f05"),
				},
				ItemName:                   to.Ptr("lh_itemName"),
				ItemType:                   to.Ptr(notebook.ItemTypeNotebook),
				JobInstanceID:              to.Ptr("c2baabbd-5327-430c-87a6-ff4f98285601"),
				JobType:                    to.Ptr(notebook.JobTypeSparkBatch),
				LivyID:                     to.Ptr("9611f500-bf44-42e0-a0de-78dacb374398"),
				LivyName:                   to.Ptr("random_test_name_app"),
				LivySessionItemResourceURI: to.Ptr(""),
				MaxNumberOfAttempts:        to.Ptr[int32](1),
				OperationName:              to.Ptr("Batch Livy Run"),
				Origin:                     to.Ptr(notebook.OriginSubmittedJob),
				QueuedDuration: &notebook.Duration{
					TimeUnit: to.Ptr(notebook.TimeUnitSeconds),
					Value:    to.Ptr[float32](1),
				},
				RunningDuration: &notebook.Duration{
					TimeUnit: to.Ptr(notebook.TimeUnitSeconds),
					Value:    to.Ptr[float32](180),
				},
				RuntimeVersion:     to.Ptr("1.3"),
				SparkApplicationID: to.Ptr("application_1730933685452_0001"),
				StartDateTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-31T15:34:11.000Z"); return t }()),
				State:              to.Ptr(notebook.StateCancelled),
				SubmittedDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-31T15:32:03.000Z"); return t }()),
				Submitter: &notebook.Principal{
					Type: to.Ptr(notebook.PrincipalTypeUser),
					ID:   to.Ptr("6f23a8a6-d954-4550-b91a-4df73ccd0311"),
				},
				TotalDuration: &notebook.Duration{
					TimeUnit: to.Ptr(notebook.TimeUnitSeconds),
					Value:    to.Ptr[float32](360),
				},
			}},
	}

	testsuite.serverFactory.LivySessionsServer.NewListLivySessionsPager = func(workspaceID string, notebookID string, options *notebook.LivySessionsClientListLivySessionsOptions) (resp azfake.PagerResponder[notebook.LivySessionsClientListLivySessionsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleNotebookID, notebookID)
		resp = azfake.PagerResponder[notebook.LivySessionsClientListLivySessionsResponse]{}
		resp.AddPage(http.StatusOK, notebook.LivySessionsClientListLivySessionsResponse{LivySessions: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewLivySessionsClient()
	pager := client.NewListLivySessionsPager(exampleWorkspaceID, exampleNotebookID, &notebook.LivySessionsClientListLivySessionsOptions{MaxResults: nil,
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.LivySessions))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestLivySessions_GetLivySession() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a livy session example"},
	})
	var exampleWorkspaceID string
	var exampleNotebookID string
	var exampleLivyID string
	exampleWorkspaceID = "f8113ba8-dd81-443e-811a-b385340f3f05"
	exampleNotebookID = "8cee7699-2e81-4121-9a53-cc9025046193"
	exampleLivyID = "9611f500-bf44-42e0-a0de-78dacb374398"

	exampleRes := notebook.LivySession{
		AttemptNumber:      to.Ptr[int32](1),
		CancellationReason: to.Ptr("User cancelled the Spark batch"),
		CapacityID:         to.Ptr("3c0cd366-dc28-4b6d-a525-4d415a8666e7"),
		CreatorItem: &notebook.ItemReferenceByID{
			ReferenceType: to.Ptr(notebook.ItemReferenceTypeByID),
			ItemID:        to.Ptr("8cee7699-2e81-4121-9a53-cc9025046193"),
			WorkspaceID:   to.Ptr("f8113ba8-dd81-443e-811a-b385340f3f05"),
		},
		EndDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-31T15:37:30.000Z"); return t }()),
		Item: &notebook.ItemReferenceByID{
			ReferenceType: to.Ptr(notebook.ItemReferenceTypeByID),
			ItemID:        to.Ptr("8cee7699-2e81-4121-9a53-cc9025046193"),
			WorkspaceID:   to.Ptr("f8113ba8-dd81-443e-811a-b385340f3f05"),
		},
		ItemName:                   to.Ptr("lh_itemName"),
		ItemType:                   to.Ptr(notebook.ItemTypeNotebook),
		JobInstanceID:              to.Ptr("c2baabbd-5327-430c-87a6-ff4f98285601"),
		JobType:                    to.Ptr(notebook.JobTypeSparkBatch),
		LivyID:                     to.Ptr("9611f500-bf44-42e0-a0de-78dacb374398"),
		LivyName:                   to.Ptr("random_test_name_app"),
		LivySessionItemResourceURI: to.Ptr(""),
		MaxNumberOfAttempts:        to.Ptr[int32](1),
		OperationName:              to.Ptr("Batch Livy Run"),
		Origin:                     to.Ptr(notebook.OriginSubmittedJob),
		QueuedDuration: &notebook.Duration{
			TimeUnit: to.Ptr(notebook.TimeUnitSeconds),
			Value:    to.Ptr[float32](1),
		},
		RunningDuration: &notebook.Duration{
			TimeUnit: to.Ptr(notebook.TimeUnitSeconds),
			Value:    to.Ptr[float32](180),
		},
		RuntimeVersion:     to.Ptr("1.3"),
		SparkApplicationID: to.Ptr("application_1730933685452_0001"),
		StartDateTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-31T15:34:11.000Z"); return t }()),
		State:              to.Ptr(notebook.StateCancelled),
		SubmittedDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-31T15:32:03.000Z"); return t }()),
		Submitter: &notebook.Principal{
			Type: to.Ptr(notebook.PrincipalTypeUser),
			ID:   to.Ptr("6f23a8a6-d954-4550-b91a-4df73ccd0311"),
		},
		TotalDuration: &notebook.Duration{
			TimeUnit: to.Ptr(notebook.TimeUnitSeconds),
			Value:    to.Ptr[float32](360),
		},
	}

	testsuite.serverFactory.LivySessionsServer.GetLivySession = func(ctx context.Context, workspaceID string, notebookID string, livyID string, options *notebook.LivySessionsClientGetLivySessionOptions) (resp azfake.Responder[notebook.LivySessionsClientGetLivySessionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleNotebookID, notebookID)
		testsuite.Require().Equal(exampleLivyID, livyID)
		resp = azfake.Responder[notebook.LivySessionsClientGetLivySessionResponse]{}
		resp.SetResponse(http.StatusOK, notebook.LivySessionsClientGetLivySessionResponse{LivySession: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewLivySessionsClient()
	res, err := client.GetLivySession(ctx, exampleWorkspaceID, exampleNotebookID, exampleLivyID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.LivySession))
}
