// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/notebook"
)

// ItemsServer is a fake server for instances of the notebook.ItemsClient type.
type ItemsServer struct {
	// BeginCreateNotebook is the fake for method ItemsClient.BeginCreateNotebook
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateNotebook func(ctx context.Context, workspaceID string, createNotebookRequest notebook.CreateNotebookRequest, options *notebook.ItemsClientBeginCreateNotebookOptions) (resp azfake.PollerResponder[notebook.ItemsClientCreateNotebookResponse], errResp azfake.ErrorResponder)

	// DeleteNotebook is the fake for method ItemsClient.DeleteNotebook
	// HTTP status codes to indicate success: http.StatusOK
	DeleteNotebook func(ctx context.Context, workspaceID string, notebookID string, options *notebook.ItemsClientDeleteNotebookOptions) (resp azfake.Responder[notebook.ItemsClientDeleteNotebookResponse], errResp azfake.ErrorResponder)

	// GetNotebook is the fake for method ItemsClient.GetNotebook
	// HTTP status codes to indicate success: http.StatusOK
	GetNotebook func(ctx context.Context, workspaceID string, notebookID string, options *notebook.ItemsClientGetNotebookOptions) (resp azfake.Responder[notebook.ItemsClientGetNotebookResponse], errResp azfake.ErrorResponder)

	// BeginGetNotebookDefinition is the fake for method ItemsClient.BeginGetNotebookDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetNotebookDefinition func(ctx context.Context, workspaceID string, notebookID string, options *notebook.ItemsClientBeginGetNotebookDefinitionOptions) (resp azfake.PollerResponder[notebook.ItemsClientGetNotebookDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListNotebooksPager is the fake for method ItemsClient.NewListNotebooksPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListNotebooksPager func(workspaceID string, options *notebook.ItemsClientListNotebooksOptions) (resp azfake.PagerResponder[notebook.ItemsClientListNotebooksResponse])

	// UpdateNotebook is the fake for method ItemsClient.UpdateNotebook
	// HTTP status codes to indicate success: http.StatusOK
	UpdateNotebook func(ctx context.Context, workspaceID string, notebookID string, updateNotebookRequest notebook.UpdateNotebookRequest, options *notebook.ItemsClientUpdateNotebookOptions) (resp azfake.Responder[notebook.ItemsClientUpdateNotebookResponse], errResp azfake.ErrorResponder)

	// BeginUpdateNotebookDefinition is the fake for method ItemsClient.BeginUpdateNotebookDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateNotebookDefinition func(ctx context.Context, workspaceID string, notebookID string, updateNotebookDefinitionRequest notebook.UpdateNotebookDefinitionRequest, options *notebook.ItemsClientBeginUpdateNotebookDefinitionOptions) (resp azfake.PollerResponder[notebook.ItemsClientUpdateNotebookDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of notebook.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                           srv,
		beginCreateNotebook:           newTracker[azfake.PollerResponder[notebook.ItemsClientCreateNotebookResponse]](),
		beginGetNotebookDefinition:    newTracker[azfake.PollerResponder[notebook.ItemsClientGetNotebookDefinitionResponse]](),
		newListNotebooksPager:         newTracker[azfake.PagerResponder[notebook.ItemsClientListNotebooksResponse]](),
		beginUpdateNotebookDefinition: newTracker[azfake.PollerResponder[notebook.ItemsClientUpdateNotebookDefinitionResponse]](),
	}
}

// ItemsServerTransport connects instances of notebook.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                           *ItemsServer
	beginCreateNotebook           *tracker[azfake.PollerResponder[notebook.ItemsClientCreateNotebookResponse]]
	beginGetNotebookDefinition    *tracker[azfake.PollerResponder[notebook.ItemsClientGetNotebookDefinitionResponse]]
	newListNotebooksPager         *tracker[azfake.PagerResponder[notebook.ItemsClientListNotebooksResponse]]
	beginUpdateNotebookDefinition *tracker[azfake.PollerResponder[notebook.ItemsClientUpdateNotebookDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "ItemsClient.BeginCreateNotebook":
			res.resp, res.err = i.dispatchBeginCreateNotebook(req)
		case "ItemsClient.DeleteNotebook":
			res.resp, res.err = i.dispatchDeleteNotebook(req)
		case "ItemsClient.GetNotebook":
			res.resp, res.err = i.dispatchGetNotebook(req)
		case "ItemsClient.BeginGetNotebookDefinition":
			res.resp, res.err = i.dispatchBeginGetNotebookDefinition(req)
		case "ItemsClient.NewListNotebooksPager":
			res.resp, res.err = i.dispatchNewListNotebooksPager(req)
		case "ItemsClient.UpdateNotebook":
			res.resp, res.err = i.dispatchUpdateNotebook(req)
		case "ItemsClient.BeginUpdateNotebookDefinition":
			res.resp, res.err = i.dispatchBeginUpdateNotebookDefinition(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateNotebook(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateNotebook == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateNotebook not implemented")}
	}
	beginCreateNotebook := i.beginCreateNotebook.get(req)
	if beginCreateNotebook == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/notebooks`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[notebook.CreateNotebookRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateNotebook(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateNotebook = &respr
		i.beginCreateNotebook.add(req, beginCreateNotebook)
	}

	resp, err := server.PollerResponderNext(beginCreateNotebook, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateNotebook.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateNotebook) {
		i.beginCreateNotebook.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteNotebook(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteNotebook == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteNotebook not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/notebooks/(?P<notebookId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	notebookIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("notebookId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteNotebook(req.Context(), workspaceIDParam, notebookIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetNotebook(req *http.Request) (*http.Response, error) {
	if i.srv.GetNotebook == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNotebook not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/notebooks/(?P<notebookId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	notebookIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("notebookId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetNotebook(req.Context(), workspaceIDParam, notebookIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Notebook, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginGetNotebookDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginGetNotebookDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetNotebookDefinition not implemented")}
	}
	beginGetNotebookDefinition := i.beginGetNotebookDefinition.get(req)
	if beginGetNotebookDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/notebooks/(?P<notebookId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		notebookIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("notebookId")])
		if err != nil {
			return nil, err
		}
		formatUnescaped, err := url.QueryUnescape(qp.Get("format"))
		if err != nil {
			return nil, err
		}
		formatParam := getOptional(formatUnescaped)
		var options *notebook.ItemsClientBeginGetNotebookDefinitionOptions
		if formatParam != nil {
			options = &notebook.ItemsClientBeginGetNotebookDefinitionOptions{
				Format: formatParam,
			}
		}
		respr, errRespr := i.srv.BeginGetNotebookDefinition(req.Context(), workspaceIDParam, notebookIDParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetNotebookDefinition = &respr
		i.beginGetNotebookDefinition.add(req, beginGetNotebookDefinition)
	}

	resp, err := server.PollerResponderNext(beginGetNotebookDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginGetNotebookDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetNotebookDefinition) {
		i.beginGetNotebookDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListNotebooksPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListNotebooksPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListNotebooksPager not implemented")}
	}
	newListNotebooksPager := i.newListNotebooksPager.get(req)
	if newListNotebooksPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/notebooks`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *notebook.ItemsClientListNotebooksOptions
		if continuationTokenParam != nil {
			options = &notebook.ItemsClientListNotebooksOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListNotebooksPager(workspaceIDParam, options)
		newListNotebooksPager = &resp
		i.newListNotebooksPager.add(req, newListNotebooksPager)
		server.PagerResponderInjectNextLinks(newListNotebooksPager, req, func(page *notebook.ItemsClientListNotebooksResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListNotebooksPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListNotebooksPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListNotebooksPager) {
		i.newListNotebooksPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateNotebook(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateNotebook == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateNotebook not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/notebooks/(?P<notebookId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[notebook.UpdateNotebookRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	notebookIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("notebookId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateNotebook(req.Context(), workspaceIDParam, notebookIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Notebook, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginUpdateNotebookDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateNotebookDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateNotebookDefinition not implemented")}
	}
	beginUpdateNotebookDefinition := i.beginUpdateNotebookDefinition.get(req)
	if beginUpdateNotebookDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/notebooks/(?P<notebookId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[notebook.UpdateNotebookDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		notebookIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("notebookId")])
		if err != nil {
			return nil, err
		}
		updateMetadataUnescaped, err := url.QueryUnescape(qp.Get("updateMetadata"))
		if err != nil {
			return nil, err
		}
		updateMetadataParam, err := parseOptional(updateMetadataUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *notebook.ItemsClientBeginUpdateNotebookDefinitionOptions
		if updateMetadataParam != nil {
			options = &notebook.ItemsClientBeginUpdateNotebookDefinitionOptions{
				UpdateMetadata: updateMetadataParam,
			}
		}
		respr, errRespr := i.srv.BeginUpdateNotebookDefinition(req.Context(), workspaceIDParam, notebookIDParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateNotebookDefinition = &respr
		i.beginUpdateNotebookDefinition.add(req, beginUpdateNotebookDefinition)
	}

	resp, err := server.PollerResponderNext(beginUpdateNotebookDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginUpdateNotebookDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateNotebookDefinition) {
		i.beginUpdateNotebookDefinition.remove(req)
	}

	return resp, nil
}
