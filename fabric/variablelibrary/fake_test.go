// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package variablelibrary_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/variablelibrary"
	"github.com/microsoft/fabric-sdk-go/fabric/variablelibrary/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *variablelibrary.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = variablelibrary.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListVariableLibraries() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List VariableLibraries in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := variablelibrary.VariableLibraries{
		Value: []variablelibrary.VariableLibrary{
			{
				Type:        to.Ptr(variablelibrary.ItemTypeVariableLibrary),
				Description: to.Ptr("A VariableLibrary description."),
				DisplayName: to.Ptr("VariableLibrary Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &variablelibrary.Properties{
					ActiveValueSetName: to.Ptr("Default value set"),
				},
			},
			{
				Type:        to.Ptr(variablelibrary.ItemTypeVariableLibrary),
				Description: to.Ptr("A VariableLibrary description."),
				DisplayName: to.Ptr("VariableLibrary Name 2"),
				ID:          to.Ptr("f697fb63-abd4-4399-9548-be7e3c3c0dac"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &variablelibrary.Properties{
					ActiveValueSetName: to.Ptr("valueSet1"),
				},
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListVariableLibrariesPager = func(workspaceID string, options *variablelibrary.ItemsClientListVariableLibrariesOptions) (resp azfake.PagerResponder[variablelibrary.ItemsClientListVariableLibrariesResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[variablelibrary.ItemsClientListVariableLibrariesResponse]{}
		resp.AddPage(http.StatusOK, variablelibrary.ItemsClientListVariableLibrariesResponse{VariableLibraries: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListVariableLibrariesPager(exampleWorkspaceID, &variablelibrary.ItemsClientListVariableLibrariesOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VariableLibraries))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateVariableLibrary() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a VariableLibrary example"},
	})
	var exampleWorkspaceID string
	var exampleCreateVariableLibraryRequest variablelibrary.CreateVariableLibraryRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateVariableLibraryRequest = variablelibrary.CreateVariableLibraryRequest{
		Description: to.Ptr("A VariableLibrary description."),
		DisplayName: to.Ptr("VariableLibrary 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateVariableLibrary = func(ctx context.Context, workspaceID string, createVariableLibraryRequest variablelibrary.CreateVariableLibraryRequest, options *variablelibrary.ItemsClientBeginCreateVariableLibraryOptions) (resp azfake.PollerResponder[variablelibrary.ItemsClientCreateVariableLibraryResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateVariableLibraryRequest, createVariableLibraryRequest))
		resp = azfake.PollerResponder[variablelibrary.ItemsClientCreateVariableLibraryResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, variablelibrary.ItemsClientCreateVariableLibraryResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateVariableLibrary(ctx, exampleWorkspaceID, exampleCreateVariableLibraryRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a VariableLibrary with public definition example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateVariableLibraryRequest = variablelibrary.CreateVariableLibraryRequest{
		Description: to.Ptr("A VariableLibrary description."),
		Definition: &variablelibrary.PublicDefinition{
			Format: to.Ptr("VariableLibraryV1"),
			Parts: []variablelibrary.PublicDefinitionPart{
				{
					Path:        to.Ptr("variables.json"),
					Payload:     to.Ptr("eyJleGVjdXRhYmxlRm..OWRmNDhhY2ZmZTgifQ=="),
					PayloadType: to.Ptr(variablelibrary.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("valueSets/valueSet1.json"),
					Payload:     to.Ptr("eyJleGVjdXRhYmxlRm..OWRmNDhhY2ZmZTgifQ=="),
					PayloadType: to.Ptr(variablelibrary.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("settings.json"),
					Payload:     to.Ptr("eyJleGVjdXRhYmxlRm..OWRmNDhhY2ZmZTgifQ=="),
					PayloadType: to.Ptr(variablelibrary.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(variablelibrary.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("VariableLibrary 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateVariableLibrary = func(ctx context.Context, workspaceID string, createVariableLibraryRequest variablelibrary.CreateVariableLibraryRequest, options *variablelibrary.ItemsClientBeginCreateVariableLibraryOptions) (resp azfake.PollerResponder[variablelibrary.ItemsClientCreateVariableLibraryResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateVariableLibraryRequest, createVariableLibraryRequest))
		resp = azfake.PollerResponder[variablelibrary.ItemsClientCreateVariableLibraryResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, variablelibrary.ItemsClientCreateVariableLibraryResponse{}, nil)
		return
	}

	poller, err = client.BeginCreateVariableLibrary(ctx, exampleWorkspaceID, exampleCreateVariableLibraryRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetVariableLibrary() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a VariableLibrary example"},
	})
	var exampleWorkspaceID string
	var exampleVariableLibraryID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleVariableLibraryID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := variablelibrary.VariableLibrary{
		Type:        to.Ptr(variablelibrary.ItemTypeVariableLibrary),
		Description: to.Ptr("A VariableLibrary description."),
		DisplayName: to.Ptr("VariableLibrary 1"),
		ID:          to.Ptr("41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"),
		WorkspaceID: to.Ptr("f089354e-8366-4e18-aea3-4cb4a3a50b48"),
		Properties: &variablelibrary.Properties{
			ActiveValueSetName: to.Ptr("Default value set"),
		},
	}

	testsuite.serverFactory.ItemsServer.GetVariableLibrary = func(ctx context.Context, workspaceID string, variableLibraryID string, options *variablelibrary.ItemsClientGetVariableLibraryOptions) (resp azfake.Responder[variablelibrary.ItemsClientGetVariableLibraryResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleVariableLibraryID, variableLibraryID)
		resp = azfake.Responder[variablelibrary.ItemsClientGetVariableLibraryResponse]{}
		resp.SetResponse(http.StatusOK, variablelibrary.ItemsClientGetVariableLibraryResponse{VariableLibrary: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetVariableLibrary(ctx, exampleWorkspaceID, exampleVariableLibraryID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VariableLibrary))
}

func (testsuite *FakeTestSuite) TestItems_UpdateVariableLibrary() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a VariableLibrary example"},
	})
	var exampleWorkspaceID string
	var exampleVariableLibraryID string
	var exampleUpdateVariableLibraryRequest variablelibrary.UpdateVariableLibraryRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleVariableLibraryID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateVariableLibraryRequest = variablelibrary.UpdateVariableLibraryRequest{
		Description: to.Ptr("VariableLibrary's New description"),
		DisplayName: to.Ptr("VariableLibrary's New name"),
		Properties: &variablelibrary.Properties{
			ActiveValueSetName: to.Ptr("SomeValueSetName"),
		},
	}

	exampleRes := variablelibrary.VariableLibrary{
		Type:        to.Ptr(variablelibrary.ItemTypeVariableLibrary),
		Description: to.Ptr("VariableLibrary's New description"),
		DisplayName: to.Ptr("VariableLibrary's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		Properties: &variablelibrary.Properties{
			ActiveValueSetName: to.Ptr("SomeValueSetName"),
		},
	}

	testsuite.serverFactory.ItemsServer.UpdateVariableLibrary = func(ctx context.Context, workspaceID string, variableLibraryID string, updateVariableLibraryRequest variablelibrary.UpdateVariableLibraryRequest, options *variablelibrary.ItemsClientUpdateVariableLibraryOptions) (resp azfake.Responder[variablelibrary.ItemsClientUpdateVariableLibraryResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleVariableLibraryID, variableLibraryID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateVariableLibraryRequest, updateVariableLibraryRequest))
		resp = azfake.Responder[variablelibrary.ItemsClientUpdateVariableLibraryResponse]{}
		resp.SetResponse(http.StatusOK, variablelibrary.ItemsClientUpdateVariableLibraryResponse{VariableLibrary: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateVariableLibrary(ctx, exampleWorkspaceID, exampleVariableLibraryID, exampleUpdateVariableLibraryRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VariableLibrary))
}

func (testsuite *FakeTestSuite) TestItems_DeleteVariableLibrary() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a VariableLibrary example"},
	})
	var exampleWorkspaceID string
	var exampleVariableLibraryID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleVariableLibraryID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteVariableLibrary = func(ctx context.Context, workspaceID string, variableLibraryID string, options *variablelibrary.ItemsClientDeleteVariableLibraryOptions) (resp azfake.Responder[variablelibrary.ItemsClientDeleteVariableLibraryResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleVariableLibraryID, variableLibraryID)
		resp = azfake.Responder[variablelibrary.ItemsClientDeleteVariableLibraryResponse]{}
		resp.SetResponse(http.StatusOK, variablelibrary.ItemsClientDeleteVariableLibraryResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteVariableLibrary(ctx, exampleWorkspaceID, exampleVariableLibraryID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetVariableLibraryDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a VariableLibrary public definition example"},
	})
	var exampleWorkspaceID string
	var exampleVariableLibraryID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleVariableLibraryID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := variablelibrary.DefinitionResponse{
		Definition: &variablelibrary.PublicDefinition{
			Parts: []variablelibrary.PublicDefinitionPart{
				{
					Path:        to.Ptr("variables.json"),
					Payload:     to.Ptr("eyJleGVjdXRhYmxlRm..OWRmNDhhY2ZmZTgifQ=="),
					PayloadType: to.Ptr(variablelibrary.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("valueSets/valueSet1.json"),
					Payload:     to.Ptr("eyJleGVjdXRhYmxlRm..OWRmNDhhY2ZmZTgifQ=="),
					PayloadType: to.Ptr(variablelibrary.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("settings.json"),
					Payload:     to.Ptr("eyJleGVjdXRhYmxlRm..OWRmNDhhY2ZmZTgifQ=="),
					PayloadType: to.Ptr(variablelibrary.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(variablelibrary.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetVariableLibraryDefinition = func(ctx context.Context, workspaceID string, variableLibraryID string, options *variablelibrary.ItemsClientBeginGetVariableLibraryDefinitionOptions) (resp azfake.PollerResponder[variablelibrary.ItemsClientGetVariableLibraryDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleVariableLibraryID, variableLibraryID)
		resp = azfake.PollerResponder[variablelibrary.ItemsClientGetVariableLibraryDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, variablelibrary.ItemsClientGetVariableLibraryDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetVariableLibraryDefinition(ctx, exampleWorkspaceID, exampleVariableLibraryID, &variablelibrary.ItemsClientBeginGetVariableLibraryDefinitionOptions{Format: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateVariableLibraryDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a VariableLibrary public definition example"},
	})
	var exampleWorkspaceID string
	var exampleVariableLibraryID string
	var exampleUpdateVariableLibraryDefinitionRequest variablelibrary.UpdateVariableLibraryDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleVariableLibraryID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateVariableLibraryDefinitionRequest = variablelibrary.UpdateVariableLibraryDefinitionRequest{
		Definition: &variablelibrary.PublicDefinition{
			Parts: []variablelibrary.PublicDefinitionPart{
				{
					Path:        to.Ptr("variables.json"),
					Payload:     to.Ptr("eyJleGVjdXRhYmxlRm..OWRmNDhhY2ZmZTgifQ=="),
					PayloadType: to.Ptr(variablelibrary.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("valueSets/valueSet1.json"),
					Payload:     to.Ptr("eyJleGVjdXRhYmxlRm..OWRmNDhhY2ZmZTgifQ=="),
					PayloadType: to.Ptr(variablelibrary.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("settings.json"),
					Payload:     to.Ptr("eyJleGVjdXRhYmxlRm..OWRmNDhhY2ZmZTgifQ=="),
					PayloadType: to.Ptr(variablelibrary.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(variablelibrary.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateVariableLibraryDefinition = func(ctx context.Context, workspaceID string, variableLibraryID string, updateVariableLibraryDefinitionRequest variablelibrary.UpdateVariableLibraryDefinitionRequest, options *variablelibrary.ItemsClientBeginUpdateVariableLibraryDefinitionOptions) (resp azfake.PollerResponder[variablelibrary.ItemsClientUpdateVariableLibraryDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleVariableLibraryID, variableLibraryID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateVariableLibraryDefinitionRequest, updateVariableLibraryDefinitionRequest))
		resp = azfake.PollerResponder[variablelibrary.ItemsClientUpdateVariableLibraryDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, variablelibrary.ItemsClientUpdateVariableLibraryDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateVariableLibraryDefinition(ctx, exampleWorkspaceID, exampleVariableLibraryID, exampleUpdateVariableLibraryDefinitionRequest, &variablelibrary.ItemsClientBeginUpdateVariableLibraryDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}
