// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package variablelibrary

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateVariableLibrary - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create VariableLibrary with a public definition, refer to VariableLibrary [/rest/api/fabric/articles/item-management/definitions/variable-library-definition]
// article.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES VariableLibrary.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a VariableLibrary the workspace must be on a supported Fabric capacity. For more information see: Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createVariableLibraryRequest - Create item request payload.
//   - options - ItemsClientBeginCreateVariableLibraryOptions contains the optional parameters for the ItemsClient.BeginCreateVariableLibrary
//     method.
func (client *ItemsClient) BeginCreateVariableLibrary(ctx context.Context, workspaceID string, createVariableLibraryRequest CreateVariableLibraryRequest, options *ItemsClientBeginCreateVariableLibraryOptions) (*runtime.Poller[ItemsClientCreateVariableLibraryResponse], error) {
	return client.beginCreateVariableLibrary(ctx, workspaceID, createVariableLibraryRequest, options)
}

// CreateVariableLibrary - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create VariableLibrary with a public definition, refer to VariableLibrary [/rest/api/fabric/articles/item-management/definitions/variable-library-definition]
// article.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES VariableLibrary.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a VariableLibrary the workspace must be on a supported Fabric capacity. For more information see: Microsoft
// Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createVariableLibrary(ctx context.Context, workspaceID string, createVariableLibraryRequest CreateVariableLibraryRequest, options *ItemsClientBeginCreateVariableLibraryOptions) (*http.Response, error) {
	var err error
	const operationName = "variablelibrary.ItemsClient.BeginCreateVariableLibrary"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createVariableLibraryCreateRequest(ctx, workspaceID, createVariableLibraryRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createVariableLibraryCreateRequest creates the CreateVariableLibrary request.
func (client *ItemsClient) createVariableLibraryCreateRequest(ctx context.Context, workspaceID string, createVariableLibraryRequest CreateVariableLibraryRequest, _ *ItemsClientBeginCreateVariableLibraryOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/VariableLibraries"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createVariableLibraryRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteVariableLibrary - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES VariableLibrary.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - variableLibraryID - The VariableLibrary ID.
//   - options - ItemsClientDeleteVariableLibraryOptions contains the optional parameters for the ItemsClient.DeleteVariableLibrary
//     method.
func (client *ItemsClient) DeleteVariableLibrary(ctx context.Context, workspaceID string, variableLibraryID string, options *ItemsClientDeleteVariableLibraryOptions) (ItemsClientDeleteVariableLibraryResponse, error) {
	var err error
	const operationName = "variablelibrary.ItemsClient.DeleteVariableLibrary"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteVariableLibraryCreateRequest(ctx, workspaceID, variableLibraryID, options)
	if err != nil {
		return ItemsClientDeleteVariableLibraryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteVariableLibraryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteVariableLibraryResponse{}, err
	}
	return ItemsClientDeleteVariableLibraryResponse{}, nil
}

// deleteVariableLibraryCreateRequest creates the DeleteVariableLibrary request.
func (client *ItemsClient) deleteVariableLibraryCreateRequest(ctx context.Context, workspaceID string, variableLibraryID string, _ *ItemsClientDeleteVariableLibraryOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/VariableLibraries/{variableLibraryId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if variableLibraryID == "" {
		return nil, errors.New("parameter variableLibraryID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{variableLibraryId}", url.PathEscape(variableLibraryID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetVariableLibrary - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES VariableLibrary.Read.All or VariableLibrary.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - variableLibraryID - The VariableLibrary ID.
//   - options - ItemsClientGetVariableLibraryOptions contains the optional parameters for the ItemsClient.GetVariableLibrary
//     method.
func (client *ItemsClient) GetVariableLibrary(ctx context.Context, workspaceID string, variableLibraryID string, options *ItemsClientGetVariableLibraryOptions) (ItemsClientGetVariableLibraryResponse, error) {
	var err error
	const operationName = "variablelibrary.ItemsClient.GetVariableLibrary"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getVariableLibraryCreateRequest(ctx, workspaceID, variableLibraryID, options)
	if err != nil {
		return ItemsClientGetVariableLibraryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetVariableLibraryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetVariableLibraryResponse{}, err
	}
	resp, err := client.getVariableLibraryHandleResponse(httpResp)
	return resp, err
}

// getVariableLibraryCreateRequest creates the GetVariableLibrary request.
func (client *ItemsClient) getVariableLibraryCreateRequest(ctx context.Context, workspaceID string, variableLibraryID string, _ *ItemsClientGetVariableLibraryOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/VariableLibraries/{variableLibraryId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if variableLibraryID == "" {
		return nil, errors.New("parameter variableLibraryID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{variableLibraryId}", url.PathEscape(variableLibraryID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getVariableLibraryHandleResponse handles the GetVariableLibrary response.
func (client *ItemsClient) getVariableLibraryHandleResponse(resp *http.Response) (ItemsClientGetVariableLibraryResponse, error) {
	result := ItemsClientGetVariableLibraryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VariableLibrary); err != nil {
		return ItemsClientGetVariableLibraryResponse{}, err
	}
	return result, nil
}

// BeginGetVariableLibraryDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a VariableLibrary's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES VariableLibrary.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - variableLibraryID - The VariableLibrary ID.
//   - options - ItemsClientBeginGetVariableLibraryDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetVariableLibraryDefinition
//     method.
func (client *ItemsClient) BeginGetVariableLibraryDefinition(ctx context.Context, workspaceID string, variableLibraryID string, options *ItemsClientBeginGetVariableLibraryDefinitionOptions) (*runtime.Poller[ItemsClientGetVariableLibraryDefinitionResponse], error) {
	return client.beginGetVariableLibraryDefinition(ctx, workspaceID, variableLibraryID, options)
}

// GetVariableLibraryDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a VariableLibrary's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES VariableLibrary.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getVariableLibraryDefinition(ctx context.Context, workspaceID string, variableLibraryID string, options *ItemsClientBeginGetVariableLibraryDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "variablelibrary.ItemsClient.BeginGetVariableLibraryDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getVariableLibraryDefinitionCreateRequest(ctx, workspaceID, variableLibraryID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getVariableLibraryDefinitionCreateRequest creates the GetVariableLibraryDefinition request.
func (client *ItemsClient) getVariableLibraryDefinitionCreateRequest(ctx context.Context, workspaceID string, variableLibraryID string, options *ItemsClientBeginGetVariableLibraryDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/VariableLibraries/{variableLibraryId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if variableLibraryID == "" {
		return nil, errors.New("parameter variableLibraryID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{variableLibraryId}", url.PathEscape(variableLibraryID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("format", *options.Format)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListVariableLibrariesPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListVariableLibrariesOptions contains the optional parameters for the ItemsClient.NewListVariableLibrariesPager
//     method.
func (client *ItemsClient) NewListVariableLibrariesPager(workspaceID string, options *ItemsClientListVariableLibrariesOptions) *runtime.Pager[ItemsClientListVariableLibrariesResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListVariableLibrariesResponse]{
		More: func(page ItemsClientListVariableLibrariesResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListVariableLibrariesResponse) (ItemsClientListVariableLibrariesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "variablelibrary.ItemsClient.NewListVariableLibrariesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listVariableLibrariesCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListVariableLibrariesResponse{}, err
			}
			return client.listVariableLibrariesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listVariableLibrariesCreateRequest creates the ListVariableLibraries request.
func (client *ItemsClient) listVariableLibrariesCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListVariableLibrariesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/VariableLibraries"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listVariableLibrariesHandleResponse handles the ListVariableLibraries response.
func (client *ItemsClient) listVariableLibrariesHandleResponse(resp *http.Response) (ItemsClientListVariableLibrariesResponse, error) {
	result := ItemsClientListVariableLibrariesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VariableLibraries); err != nil {
		return ItemsClientListVariableLibrariesResponse{}, err
	}
	return result, nil
}

// UpdateVariableLibrary - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES VariableLibrary.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - variableLibraryID - The VariableLibrary ID.
//   - updateVariableLibraryRequest - Update VariableLibrary request payload.
//   - options - ItemsClientUpdateVariableLibraryOptions contains the optional parameters for the ItemsClient.UpdateVariableLibrary
//     method.
func (client *ItemsClient) UpdateVariableLibrary(ctx context.Context, workspaceID string, variableLibraryID string, updateVariableLibraryRequest UpdateVariableLibraryRequest, options *ItemsClientUpdateVariableLibraryOptions) (ItemsClientUpdateVariableLibraryResponse, error) {
	var err error
	const operationName = "variablelibrary.ItemsClient.UpdateVariableLibrary"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateVariableLibraryCreateRequest(ctx, workspaceID, variableLibraryID, updateVariableLibraryRequest, options)
	if err != nil {
		return ItemsClientUpdateVariableLibraryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateVariableLibraryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateVariableLibraryResponse{}, err
	}
	resp, err := client.updateVariableLibraryHandleResponse(httpResp)
	return resp, err
}

// updateVariableLibraryCreateRequest creates the UpdateVariableLibrary request.
func (client *ItemsClient) updateVariableLibraryCreateRequest(ctx context.Context, workspaceID string, variableLibraryID string, updateVariableLibraryRequest UpdateVariableLibraryRequest, _ *ItemsClientUpdateVariableLibraryOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/VariableLibraries/{variableLibraryId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if variableLibraryID == "" {
		return nil, errors.New("parameter variableLibraryID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{variableLibraryId}", url.PathEscape(variableLibraryID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateVariableLibraryRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateVariableLibraryHandleResponse handles the UpdateVariableLibrary response.
func (client *ItemsClient) updateVariableLibraryHandleResponse(resp *http.Response) (ItemsClientUpdateVariableLibraryResponse, error) {
	result := ItemsClientUpdateVariableLibraryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VariableLibrary); err != nil {
		return ItemsClientUpdateVariableLibraryResponse{}, err
	}
	return result, nil
}

// BeginUpdateVariableLibraryDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the VariableLibrary's definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES VariableLibrary.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - variableLibraryID - The VariableLibrary ID.
//   - updateVariableLibraryDefinitionRequest - Update VariableLibrary definition request payload.
//   - options - ItemsClientBeginUpdateVariableLibraryDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateVariableLibraryDefinition
//     method.
func (client *ItemsClient) BeginUpdateVariableLibraryDefinition(ctx context.Context, workspaceID string, variableLibraryID string, updateVariableLibraryDefinitionRequest UpdateVariableLibraryDefinitionRequest, options *ItemsClientBeginUpdateVariableLibraryDefinitionOptions) (*runtime.Poller[ItemsClientUpdateVariableLibraryDefinitionResponse], error) {
	return client.beginUpdateVariableLibraryDefinition(ctx, workspaceID, variableLibraryID, updateVariableLibraryDefinitionRequest, options)
}

// UpdateVariableLibraryDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the VariableLibrary's definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES VariableLibrary.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateVariableLibraryDefinition(ctx context.Context, workspaceID string, variableLibraryID string, updateVariableLibraryDefinitionRequest UpdateVariableLibraryDefinitionRequest, options *ItemsClientBeginUpdateVariableLibraryDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "variablelibrary.ItemsClient.BeginUpdateVariableLibraryDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateVariableLibraryDefinitionCreateRequest(ctx, workspaceID, variableLibraryID, updateVariableLibraryDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateVariableLibraryDefinitionCreateRequest creates the UpdateVariableLibraryDefinition request.
func (client *ItemsClient) updateVariableLibraryDefinitionCreateRequest(ctx context.Context, workspaceID string, variableLibraryID string, updateVariableLibraryDefinitionRequest UpdateVariableLibraryDefinitionRequest, options *ItemsClientBeginUpdateVariableLibraryDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/VariableLibraries/{variableLibraryId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if variableLibraryID == "" {
		return nil, errors.New("parameter variableLibraryID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{variableLibraryId}", url.PathEscape(variableLibraryID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateVariableLibraryDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateVariableLibrary - returns ItemsClientCreateVariableLibraryResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// To create VariableLibrary with a public definition, refer to VariableLibrary [/rest/api/fabric/articles/item-management/definitions/variable-library-definition] article.
//
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES VariableLibrary.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a VariableLibrary the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types
//     [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createVariableLibraryRequest - Create item request payload.
//   - options - ItemsClientBeginCreateVariableLibraryOptions contains the optional parameters for the ItemsClient.BeginCreateVariableLibrary method.
func (client *ItemsClient) CreateVariableLibrary(ctx context.Context, workspaceID string, createVariableLibraryRequest CreateVariableLibraryRequest, options *ItemsClientBeginCreateVariableLibraryOptions) (ItemsClientCreateVariableLibraryResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateVariableLibrary(ctx, workspaceID, createVariableLibraryRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateVariableLibraryResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateVariableLibraryResponse{}, err
	}
	return result, err
}

// beginCreateVariableLibrary creates the createVariableLibrary request.
func (client *ItemsClient) beginCreateVariableLibrary(ctx context.Context, workspaceID string, createVariableLibraryRequest CreateVariableLibraryRequest, options *ItemsClientBeginCreateVariableLibraryOptions) (*runtime.Poller[ItemsClientCreateVariableLibraryResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createVariableLibrary(ctx, workspaceID, createVariableLibraryRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateVariableLibraryResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateVariableLibraryResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateVariableLibraryResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateVariableLibraryResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetVariableLibraryDefinition - returns ItemsClientGetVariableLibraryDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// When you get a VariableLibrary's public definition, the sensitivity label is not a part of the definition.
//
// PERMISSIONS The caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES VariableLibrary.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - variableLibraryID - The VariableLibrary ID.
//   - options - ItemsClientBeginGetVariableLibraryDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetVariableLibraryDefinition method.
func (client *ItemsClient) GetVariableLibraryDefinition(ctx context.Context, workspaceID string, variableLibraryID string, options *ItemsClientBeginGetVariableLibraryDefinitionOptions) (ItemsClientGetVariableLibraryDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetVariableLibraryDefinition(ctx, workspaceID, variableLibraryID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetVariableLibraryDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetVariableLibraryDefinitionResponse{}, err
	}
	return result, err
}

// beginGetVariableLibraryDefinition creates the getVariableLibraryDefinition request.
func (client *ItemsClient) beginGetVariableLibraryDefinition(ctx context.Context, workspaceID string, variableLibraryID string, options *ItemsClientBeginGetVariableLibraryDefinitionOptions) (*runtime.Poller[ItemsClientGetVariableLibraryDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getVariableLibraryDefinition(ctx, workspaceID, variableLibraryID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetVariableLibraryDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetVariableLibraryDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetVariableLibraryDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetVariableLibraryDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateVariableLibraryDefinition - returns ItemsClientUpdateVariableLibraryDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// Updating the VariableLibrary's definition, does not affect its sensitivity label.
//
// PERMISSIONS The API caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES VariableLibrary.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - variableLibraryID - The VariableLibrary ID.
//   - updateVariableLibraryDefinitionRequest - Update VariableLibrary definition request payload.
//   - options - ItemsClientBeginUpdateVariableLibraryDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateVariableLibraryDefinition method.
func (client *ItemsClient) UpdateVariableLibraryDefinition(ctx context.Context, workspaceID string, variableLibraryID string, updateVariableLibraryDefinitionRequest UpdateVariableLibraryDefinitionRequest, options *ItemsClientBeginUpdateVariableLibraryDefinitionOptions) (ItemsClientUpdateVariableLibraryDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateVariableLibraryDefinition(ctx, workspaceID, variableLibraryID, updateVariableLibraryDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateVariableLibraryDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateVariableLibraryDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateVariableLibraryDefinition creates the updateVariableLibraryDefinition request.
func (client *ItemsClient) beginUpdateVariableLibraryDefinition(ctx context.Context, workspaceID string, variableLibraryID string, updateVariableLibraryDefinitionRequest UpdateVariableLibraryDefinitionRequest, options *ItemsClientBeginUpdateVariableLibraryDefinitionOptions) (*runtime.Poller[ItemsClientUpdateVariableLibraryDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateVariableLibraryDefinition(ctx, workspaceID, variableLibraryID, updateVariableLibraryDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateVariableLibraryDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateVariableLibraryDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateVariableLibraryDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateVariableLibraryDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListVariableLibraries - returns array of VariableLibrary from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListVariableLibrariesOptions contains the optional parameters for the ItemsClient.NewListVariableLibrariesPager method.
func (client *ItemsClient) ListVariableLibraries(ctx context.Context, workspaceID string, options *ItemsClientListVariableLibrariesOptions) ([]VariableLibrary, error) {
	pager := client.NewListVariableLibrariesPager(workspaceID, options)
	mapper := func(resp ItemsClientListVariableLibrariesResponse) []VariableLibrary {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []VariableLibrary{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []VariableLibrary{}, err
	}
	return list, nil
}
