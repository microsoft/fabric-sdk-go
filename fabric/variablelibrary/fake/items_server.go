// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/variablelibrary"
)

// ItemsServer is a fake server for instances of the variablelibrary.ItemsClient type.
type ItemsServer struct {
	// BeginCreateVariableLibrary is the fake for method ItemsClient.BeginCreateVariableLibrary
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateVariableLibrary func(ctx context.Context, workspaceID string, createVariableLibraryRequest variablelibrary.CreateVariableLibraryRequest, options *variablelibrary.ItemsClientBeginCreateVariableLibraryOptions) (resp azfake.PollerResponder[variablelibrary.ItemsClientCreateVariableLibraryResponse], errResp azfake.ErrorResponder)

	// DeleteVariableLibrary is the fake for method ItemsClient.DeleteVariableLibrary
	// HTTP status codes to indicate success: http.StatusOK
	DeleteVariableLibrary func(ctx context.Context, workspaceID string, variableLibraryID string, options *variablelibrary.ItemsClientDeleteVariableLibraryOptions) (resp azfake.Responder[variablelibrary.ItemsClientDeleteVariableLibraryResponse], errResp azfake.ErrorResponder)

	// GetVariableLibrary is the fake for method ItemsClient.GetVariableLibrary
	// HTTP status codes to indicate success: http.StatusOK
	GetVariableLibrary func(ctx context.Context, workspaceID string, variableLibraryID string, options *variablelibrary.ItemsClientGetVariableLibraryOptions) (resp azfake.Responder[variablelibrary.ItemsClientGetVariableLibraryResponse], errResp azfake.ErrorResponder)

	// BeginGetVariableLibraryDefinition is the fake for method ItemsClient.BeginGetVariableLibraryDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetVariableLibraryDefinition func(ctx context.Context, workspaceID string, variableLibraryID string, options *variablelibrary.ItemsClientBeginGetVariableLibraryDefinitionOptions) (resp azfake.PollerResponder[variablelibrary.ItemsClientGetVariableLibraryDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListVariableLibrariesPager is the fake for method ItemsClient.NewListVariableLibrariesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListVariableLibrariesPager func(workspaceID string, options *variablelibrary.ItemsClientListVariableLibrariesOptions) (resp azfake.PagerResponder[variablelibrary.ItemsClientListVariableLibrariesResponse])

	// UpdateVariableLibrary is the fake for method ItemsClient.UpdateVariableLibrary
	// HTTP status codes to indicate success: http.StatusOK
	UpdateVariableLibrary func(ctx context.Context, workspaceID string, variableLibraryID string, updateVariableLibraryRequest variablelibrary.UpdateVariableLibraryRequest, options *variablelibrary.ItemsClientUpdateVariableLibraryOptions) (resp azfake.Responder[variablelibrary.ItemsClientUpdateVariableLibraryResponse], errResp azfake.ErrorResponder)

	// BeginUpdateVariableLibraryDefinition is the fake for method ItemsClient.BeginUpdateVariableLibraryDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateVariableLibraryDefinition func(ctx context.Context, workspaceID string, variableLibraryID string, updateVariableLibraryDefinitionRequest variablelibrary.UpdateVariableLibraryDefinitionRequest, options *variablelibrary.ItemsClientBeginUpdateVariableLibraryDefinitionOptions) (resp azfake.PollerResponder[variablelibrary.ItemsClientUpdateVariableLibraryDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of variablelibrary.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                                  srv,
		beginCreateVariableLibrary:           newTracker[azfake.PollerResponder[variablelibrary.ItemsClientCreateVariableLibraryResponse]](),
		beginGetVariableLibraryDefinition:    newTracker[azfake.PollerResponder[variablelibrary.ItemsClientGetVariableLibraryDefinitionResponse]](),
		newListVariableLibrariesPager:        newTracker[azfake.PagerResponder[variablelibrary.ItemsClientListVariableLibrariesResponse]](),
		beginUpdateVariableLibraryDefinition: newTracker[azfake.PollerResponder[variablelibrary.ItemsClientUpdateVariableLibraryDefinitionResponse]](),
	}
}

// ItemsServerTransport connects instances of variablelibrary.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                                  *ItemsServer
	beginCreateVariableLibrary           *tracker[azfake.PollerResponder[variablelibrary.ItemsClientCreateVariableLibraryResponse]]
	beginGetVariableLibraryDefinition    *tracker[azfake.PollerResponder[variablelibrary.ItemsClientGetVariableLibraryDefinitionResponse]]
	newListVariableLibrariesPager        *tracker[azfake.PagerResponder[variablelibrary.ItemsClientListVariableLibrariesResponse]]
	beginUpdateVariableLibraryDefinition *tracker[azfake.PollerResponder[variablelibrary.ItemsClientUpdateVariableLibraryDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateVariableLibrary":
				res.resp, res.err = i.dispatchBeginCreateVariableLibrary(req)
			case "ItemsClient.DeleteVariableLibrary":
				res.resp, res.err = i.dispatchDeleteVariableLibrary(req)
			case "ItemsClient.GetVariableLibrary":
				res.resp, res.err = i.dispatchGetVariableLibrary(req)
			case "ItemsClient.BeginGetVariableLibraryDefinition":
				res.resp, res.err = i.dispatchBeginGetVariableLibraryDefinition(req)
			case "ItemsClient.NewListVariableLibrariesPager":
				res.resp, res.err = i.dispatchNewListVariableLibrariesPager(req)
			case "ItemsClient.UpdateVariableLibrary":
				res.resp, res.err = i.dispatchUpdateVariableLibrary(req)
			case "ItemsClient.BeginUpdateVariableLibraryDefinition":
				res.resp, res.err = i.dispatchBeginUpdateVariableLibraryDefinition(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateVariableLibrary(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateVariableLibrary == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateVariableLibrary not implemented")}
	}
	beginCreateVariableLibrary := i.beginCreateVariableLibrary.get(req)
	if beginCreateVariableLibrary == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/VariableLibraries`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[variablelibrary.CreateVariableLibraryRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateVariableLibrary(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateVariableLibrary = &respr
		i.beginCreateVariableLibrary.add(req, beginCreateVariableLibrary)
	}

	resp, err := server.PollerResponderNext(beginCreateVariableLibrary, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateVariableLibrary.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateVariableLibrary) {
		i.beginCreateVariableLibrary.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteVariableLibrary(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteVariableLibrary == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteVariableLibrary not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/VariableLibraries/(?P<variableLibraryId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	variableLibraryIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("variableLibraryId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteVariableLibrary(req.Context(), workspaceIDParam, variableLibraryIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetVariableLibrary(req *http.Request) (*http.Response, error) {
	if i.srv.GetVariableLibrary == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetVariableLibrary not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/VariableLibraries/(?P<variableLibraryId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	variableLibraryIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("variableLibraryId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetVariableLibrary(req.Context(), workspaceIDParam, variableLibraryIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).VariableLibrary, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginGetVariableLibraryDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginGetVariableLibraryDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetVariableLibraryDefinition not implemented")}
	}
	beginGetVariableLibraryDefinition := i.beginGetVariableLibraryDefinition.get(req)
	if beginGetVariableLibraryDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/VariableLibraries/(?P<variableLibraryId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		variableLibraryIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("variableLibraryId")])
		if err != nil {
			return nil, err
		}
		formatUnescaped, err := url.QueryUnescape(qp.Get("format"))
		if err != nil {
			return nil, err
		}
		formatParam := getOptional(formatUnescaped)
		var options *variablelibrary.ItemsClientBeginGetVariableLibraryDefinitionOptions
		if formatParam != nil {
			options = &variablelibrary.ItemsClientBeginGetVariableLibraryDefinitionOptions{
				Format: formatParam,
			}
		}
		respr, errRespr := i.srv.BeginGetVariableLibraryDefinition(req.Context(), workspaceIDParam, variableLibraryIDParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetVariableLibraryDefinition = &respr
		i.beginGetVariableLibraryDefinition.add(req, beginGetVariableLibraryDefinition)
	}

	resp, err := server.PollerResponderNext(beginGetVariableLibraryDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginGetVariableLibraryDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetVariableLibraryDefinition) {
		i.beginGetVariableLibraryDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListVariableLibrariesPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListVariableLibrariesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListVariableLibrariesPager not implemented")}
	}
	newListVariableLibrariesPager := i.newListVariableLibrariesPager.get(req)
	if newListVariableLibrariesPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/VariableLibraries`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *variablelibrary.ItemsClientListVariableLibrariesOptions
		if continuationTokenParam != nil {
			options = &variablelibrary.ItemsClientListVariableLibrariesOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListVariableLibrariesPager(workspaceIDParam, options)
		newListVariableLibrariesPager = &resp
		i.newListVariableLibrariesPager.add(req, newListVariableLibrariesPager)
		server.PagerResponderInjectNextLinks(newListVariableLibrariesPager, req, func(page *variablelibrary.ItemsClientListVariableLibrariesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListVariableLibrariesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListVariableLibrariesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListVariableLibrariesPager) {
		i.newListVariableLibrariesPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateVariableLibrary(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateVariableLibrary == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateVariableLibrary not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/VariableLibraries/(?P<variableLibraryId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[variablelibrary.UpdateVariableLibraryRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	variableLibraryIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("variableLibraryId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateVariableLibrary(req.Context(), workspaceIDParam, variableLibraryIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).VariableLibrary, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginUpdateVariableLibraryDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateVariableLibraryDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateVariableLibraryDefinition not implemented")}
	}
	beginUpdateVariableLibraryDefinition := i.beginUpdateVariableLibraryDefinition.get(req)
	if beginUpdateVariableLibraryDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/VariableLibraries/(?P<variableLibraryId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[variablelibrary.UpdateVariableLibraryDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		variableLibraryIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("variableLibraryId")])
		if err != nil {
			return nil, err
		}
		updateMetadataUnescaped, err := url.QueryUnescape(qp.Get("updateMetadata"))
		if err != nil {
			return nil, err
		}
		updateMetadataParam, err := parseOptional(updateMetadataUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *variablelibrary.ItemsClientBeginUpdateVariableLibraryDefinitionOptions
		if updateMetadataParam != nil {
			options = &variablelibrary.ItemsClientBeginUpdateVariableLibraryDefinitionOptions{
				UpdateMetadata: updateMetadataParam,
			}
		}
		respr, errRespr := i.srv.BeginUpdateVariableLibraryDefinition(req.Context(), workspaceIDParam, variableLibraryIDParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateVariableLibraryDefinition = &respr
		i.beginUpdateVariableLibraryDefinition.add(req, beginUpdateVariableLibraryDefinition)
	}

	resp, err := server.PollerResponderNext(beginUpdateVariableLibraryDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginUpdateVariableLibraryDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateVariableLibraryDefinition) {
		i.beginUpdateVariableLibraryDefinition.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
