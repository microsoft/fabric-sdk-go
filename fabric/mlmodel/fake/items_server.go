// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/mlmodel"
)

// ItemsServer is a fake server for instances of the mlmodel.ItemsClient type.
type ItemsServer struct {
	// BeginCreateMLModel is the fake for method ItemsClient.BeginCreateMLModel
	// HTTP status codes to indicate success: http.StatusCreated, http.StatusAccepted
	BeginCreateMLModel func(ctx context.Context, workspaceID string, createMLModelRequest mlmodel.CreateMLModelRequest, options *mlmodel.ItemsClientBeginCreateMLModelOptions) (resp azfake.PollerResponder[mlmodel.ItemsClientCreateMLModelResponse], errResp azfake.ErrorResponder)

	// DeleteMLModel is the fake for method ItemsClient.DeleteMLModel
	// HTTP status codes to indicate success: http.StatusOK
	DeleteMLModel func(ctx context.Context, workspaceID string, mlModelID string, options *mlmodel.ItemsClientDeleteMLModelOptions) (resp azfake.Responder[mlmodel.ItemsClientDeleteMLModelResponse], errResp azfake.ErrorResponder)

	// GetMLModel is the fake for method ItemsClient.GetMLModel
	// HTTP status codes to indicate success: http.StatusOK
	GetMLModel func(ctx context.Context, workspaceID string, mlModelID string, options *mlmodel.ItemsClientGetMLModelOptions) (resp azfake.Responder[mlmodel.ItemsClientGetMLModelResponse], errResp azfake.ErrorResponder)

	// NewListMLModelsPager is the fake for method ItemsClient.NewListMLModelsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListMLModelsPager func(workspaceID string, options *mlmodel.ItemsClientListMLModelsOptions) (resp azfake.PagerResponder[mlmodel.ItemsClientListMLModelsResponse])

	// UpdateMLModel is the fake for method ItemsClient.UpdateMLModel
	// HTTP status codes to indicate success: http.StatusOK
	UpdateMLModel func(ctx context.Context, workspaceID string, mlModelID string, updateMLModelRequest mlmodel.UpdateMLModelRequest, options *mlmodel.ItemsClientUpdateMLModelOptions) (resp azfake.Responder[mlmodel.ItemsClientUpdateMLModelResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of mlmodel.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                  srv,
		beginCreateMLModel:   newTracker[azfake.PollerResponder[mlmodel.ItemsClientCreateMLModelResponse]](),
		newListMLModelsPager: newTracker[azfake.PagerResponder[mlmodel.ItemsClientListMLModelsResponse]](),
	}
}

// ItemsServerTransport connects instances of mlmodel.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                  *ItemsServer
	beginCreateMLModel   *tracker[azfake.PollerResponder[mlmodel.ItemsClientCreateMLModelResponse]]
	newListMLModelsPager *tracker[azfake.PagerResponder[mlmodel.ItemsClientListMLModelsResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ItemsClient.BeginCreateMLModel":
		resp, err = i.dispatchBeginCreateMLModel(req)
	case "ItemsClient.DeleteMLModel":
		resp, err = i.dispatchDeleteMLModel(req)
	case "ItemsClient.GetMLModel":
		resp, err = i.dispatchGetMLModel(req)
	case "ItemsClient.NewListMLModelsPager":
		resp, err = i.dispatchNewListMLModelsPager(req)
	case "ItemsClient.UpdateMLModel":
		resp, err = i.dispatchUpdateMLModel(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (i *ItemsServerTransport) dispatchBeginCreateMLModel(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateMLModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateMLModel not implemented")}
	}
	beginCreateMLModel := i.beginCreateMLModel.get(req)
	if beginCreateMLModel == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlModels`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[mlmodel.CreateMLModelRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateMLModel(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateMLModel = &respr
		i.beginCreateMLModel.add(req, beginCreateMLModel)
	}

	resp, err := server.PollerResponderNext(beginCreateMLModel, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateMLModel.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateMLModel) {
		i.beginCreateMLModel.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteMLModel(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteMLModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteMLModel not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlModels/(?P<mlModelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mlModelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mlModelId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteMLModel(req.Context(), workspaceIDParam, mlModelIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetMLModel(req *http.Request) (*http.Response, error) {
	if i.srv.GetMLModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMLModel not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlModels/(?P<mlModelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mlModelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mlModelId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetMLModel(req.Context(), workspaceIDParam, mlModelIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MLModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListMLModelsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListMLModelsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListMLModelsPager not implemented")}
	}
	newListMLModelsPager := i.newListMLModelsPager.get(req)
	if newListMLModelsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlModels`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *mlmodel.ItemsClientListMLModelsOptions
		if continuationTokenParam != nil {
			options = &mlmodel.ItemsClientListMLModelsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListMLModelsPager(workspaceIDParam, options)
		newListMLModelsPager = &resp
		i.newListMLModelsPager.add(req, newListMLModelsPager)
		server.PagerResponderInjectNextLinks(newListMLModelsPager, req, func(page *mlmodel.ItemsClientListMLModelsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListMLModelsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListMLModelsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListMLModelsPager) {
		i.newListMLModelsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateMLModel(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateMLModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateMLModel not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlModels/(?P<mlModelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[mlmodel.UpdateMLModelRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mlModelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mlModelId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateMLModel(req.Context(), workspaceIDParam, mlModelIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MLModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
