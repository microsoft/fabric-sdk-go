// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/mlmodel"
)

// EndpointServer is a fake server for instances of the mlmodel.EndpointClient type.
type EndpointServer struct {
	// BeginActivateMLModelEndpointVersion is the fake for method EndpointClient.BeginActivateMLModelEndpointVersion
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginActivateMLModelEndpointVersion func(ctx context.Context, workspaceID string, modelID string, name string, options *mlmodel.EndpointClientBeginActivateMLModelEndpointVersionOptions) (resp azfake.PollerResponder[mlmodel.EndpointClientActivateMLModelEndpointVersionResponse], errResp azfake.ErrorResponder)

	// BeginDeactivateAllMLModelEndpointVersions is the fake for method EndpointClient.BeginDeactivateAllMLModelEndpointVersions
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeactivateAllMLModelEndpointVersions func(ctx context.Context, workspaceID string, modelID string, options *mlmodel.EndpointClientBeginDeactivateAllMLModelEndpointVersionsOptions) (resp azfake.PollerResponder[mlmodel.EndpointClientDeactivateAllMLModelEndpointVersionsResponse], errResp azfake.ErrorResponder)

	// BeginDeactivateMLModelEndpointVersion is the fake for method EndpointClient.BeginDeactivateMLModelEndpointVersion
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeactivateMLModelEndpointVersion func(ctx context.Context, workspaceID string, modelID string, name string, options *mlmodel.EndpointClientBeginDeactivateMLModelEndpointVersionOptions) (resp azfake.PollerResponder[mlmodel.EndpointClientDeactivateMLModelEndpointVersionResponse], errResp azfake.ErrorResponder)

	// GetMLModelEndpoint is the fake for method EndpointClient.GetMLModelEndpoint
	// HTTP status codes to indicate success: http.StatusOK
	GetMLModelEndpoint func(ctx context.Context, workspaceID string, modelID string, options *mlmodel.EndpointClientGetMLModelEndpointOptions) (resp azfake.Responder[mlmodel.EndpointClientGetMLModelEndpointResponse], errResp azfake.ErrorResponder)

	// GetMLModelEndpointVersion is the fake for method EndpointClient.GetMLModelEndpointVersion
	// HTTP status codes to indicate success: http.StatusOK
	GetMLModelEndpointVersion func(ctx context.Context, workspaceID string, modelID string, name string, options *mlmodel.EndpointClientGetMLModelEndpointVersionOptions) (resp azfake.Responder[mlmodel.EndpointClientGetMLModelEndpointVersionResponse], errResp azfake.ErrorResponder)

	// NewListMLModelEndpointVersionsPager is the fake for method EndpointClient.NewListMLModelEndpointVersionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListMLModelEndpointVersionsPager func(workspaceID string, modelID string, options *mlmodel.EndpointClientListMLModelEndpointVersionsOptions) (resp azfake.PagerResponder[mlmodel.EndpointClientListMLModelEndpointVersionsResponse])

	// BeginScoreMLModelEndpoint is the fake for method EndpointClient.BeginScoreMLModelEndpoint
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginScoreMLModelEndpoint func(ctx context.Context, workspaceID string, modelID string, scoreDataRequest mlmodel.ScoreDataRequest, options *mlmodel.EndpointClientBeginScoreMLModelEndpointOptions) (resp azfake.PollerResponder[mlmodel.EndpointClientScoreMLModelEndpointResponse], errResp azfake.ErrorResponder)

	// BeginScoreMLModelEndpointVersion is the fake for method EndpointClient.BeginScoreMLModelEndpointVersion
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginScoreMLModelEndpointVersion func(ctx context.Context, workspaceID string, modelID string, name string, scoreDataRequest mlmodel.ScoreDataRequest, options *mlmodel.EndpointClientBeginScoreMLModelEndpointVersionOptions) (resp azfake.PollerResponder[mlmodel.EndpointClientScoreMLModelEndpointVersionResponse], errResp azfake.ErrorResponder)

	// UpdateMLModelEndpoint is the fake for method EndpointClient.UpdateMLModelEndpoint
	// HTTP status codes to indicate success: http.StatusOK
	UpdateMLModelEndpoint func(ctx context.Context, workspaceID string, modelID string, updateMLModelEndpointRequest mlmodel.UpdateMLModelEndpointRequest, options *mlmodel.EndpointClientUpdateMLModelEndpointOptions) (resp azfake.Responder[mlmodel.EndpointClientUpdateMLModelEndpointResponse], errResp azfake.ErrorResponder)

	// UpdateMLModelEndpointVersion is the fake for method EndpointClient.UpdateMLModelEndpointVersion
	// HTTP status codes to indicate success: http.StatusOK
	UpdateMLModelEndpointVersion func(ctx context.Context, workspaceID string, modelID string, name string, updateMLModelEndpointVersionRequest mlmodel.UpdateMLModelEndpointVersionRequest, options *mlmodel.EndpointClientUpdateMLModelEndpointVersionOptions) (resp azfake.Responder[mlmodel.EndpointClientUpdateMLModelEndpointVersionResponse], errResp azfake.ErrorResponder)
}

// NewEndpointServerTransport creates a new instance of EndpointServerTransport with the provided implementation.
// The returned EndpointServerTransport instance is connected to an instance of mlmodel.EndpointClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewEndpointServerTransport(srv *EndpointServer) *EndpointServerTransport {
	return &EndpointServerTransport{
		srv:                                 srv,
		beginActivateMLModelEndpointVersion: newTracker[azfake.PollerResponder[mlmodel.EndpointClientActivateMLModelEndpointVersionResponse]](),
		beginDeactivateAllMLModelEndpointVersions: newTracker[azfake.PollerResponder[mlmodel.EndpointClientDeactivateAllMLModelEndpointVersionsResponse]](),
		beginDeactivateMLModelEndpointVersion:     newTracker[azfake.PollerResponder[mlmodel.EndpointClientDeactivateMLModelEndpointVersionResponse]](),
		newListMLModelEndpointVersionsPager:       newTracker[azfake.PagerResponder[mlmodel.EndpointClientListMLModelEndpointVersionsResponse]](),
		beginScoreMLModelEndpoint:                 newTracker[azfake.PollerResponder[mlmodel.EndpointClientScoreMLModelEndpointResponse]](),
		beginScoreMLModelEndpointVersion:          newTracker[azfake.PollerResponder[mlmodel.EndpointClientScoreMLModelEndpointVersionResponse]](),
	}
}

// EndpointServerTransport connects instances of mlmodel.EndpointClient to instances of EndpointServer.
// Don't use this type directly, use NewEndpointServerTransport instead.
type EndpointServerTransport struct {
	srv                                       *EndpointServer
	beginActivateMLModelEndpointVersion       *tracker[azfake.PollerResponder[mlmodel.EndpointClientActivateMLModelEndpointVersionResponse]]
	beginDeactivateAllMLModelEndpointVersions *tracker[azfake.PollerResponder[mlmodel.EndpointClientDeactivateAllMLModelEndpointVersionsResponse]]
	beginDeactivateMLModelEndpointVersion     *tracker[azfake.PollerResponder[mlmodel.EndpointClientDeactivateMLModelEndpointVersionResponse]]
	newListMLModelEndpointVersionsPager       *tracker[azfake.PagerResponder[mlmodel.EndpointClientListMLModelEndpointVersionsResponse]]
	beginScoreMLModelEndpoint                 *tracker[azfake.PollerResponder[mlmodel.EndpointClientScoreMLModelEndpointResponse]]
	beginScoreMLModelEndpointVersion          *tracker[azfake.PollerResponder[mlmodel.EndpointClientScoreMLModelEndpointVersionResponse]]
}

// Do implements the policy.Transporter interface for EndpointServerTransport.
func (e *EndpointServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return e.dispatchToMethodFake(req, method)
}

func (e *EndpointServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if endpointServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = endpointServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "EndpointClient.BeginActivateMLModelEndpointVersion":
				res.resp, res.err = e.dispatchBeginActivateMLModelEndpointVersion(req)
			case "EndpointClient.BeginDeactivateAllMLModelEndpointVersions":
				res.resp, res.err = e.dispatchBeginDeactivateAllMLModelEndpointVersions(req)
			case "EndpointClient.BeginDeactivateMLModelEndpointVersion":
				res.resp, res.err = e.dispatchBeginDeactivateMLModelEndpointVersion(req)
			case "EndpointClient.GetMLModelEndpoint":
				res.resp, res.err = e.dispatchGetMLModelEndpoint(req)
			case "EndpointClient.GetMLModelEndpointVersion":
				res.resp, res.err = e.dispatchGetMLModelEndpointVersion(req)
			case "EndpointClient.NewListMLModelEndpointVersionsPager":
				res.resp, res.err = e.dispatchNewListMLModelEndpointVersionsPager(req)
			case "EndpointClient.BeginScoreMLModelEndpoint":
				res.resp, res.err = e.dispatchBeginScoreMLModelEndpoint(req)
			case "EndpointClient.BeginScoreMLModelEndpointVersion":
				res.resp, res.err = e.dispatchBeginScoreMLModelEndpointVersion(req)
			case "EndpointClient.UpdateMLModelEndpoint":
				res.resp, res.err = e.dispatchUpdateMLModelEndpoint(req)
			case "EndpointClient.UpdateMLModelEndpointVersion":
				res.resp, res.err = e.dispatchUpdateMLModelEndpointVersion(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (e *EndpointServerTransport) dispatchBeginActivateMLModelEndpointVersion(req *http.Request) (*http.Response, error) {
	if e.srv.BeginActivateMLModelEndpointVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginActivateMLModelEndpointVersion not implemented")}
	}
	beginActivateMLModelEndpointVersion := e.beginActivateMLModelEndpointVersion.get(req)
	if beginActivateMLModelEndpointVersion == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlmodels/(?P<modelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/endpoint/versions/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/activate`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		modelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("modelId")])
		if err != nil {
			return nil, err
		}
		nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginActivateMLModelEndpointVersion(req.Context(), workspaceIDParam, modelIDParam, nameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginActivateMLModelEndpointVersion = &respr
		e.beginActivateMLModelEndpointVersion.add(req, beginActivateMLModelEndpointVersion)
	}

	resp, err := server.PollerResponderNext(beginActivateMLModelEndpointVersion, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		e.beginActivateMLModelEndpointVersion.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginActivateMLModelEndpointVersion) {
		e.beginActivateMLModelEndpointVersion.remove(req)
	}

	return resp, nil
}

func (e *EndpointServerTransport) dispatchBeginDeactivateAllMLModelEndpointVersions(req *http.Request) (*http.Response, error) {
	if e.srv.BeginDeactivateAllMLModelEndpointVersions == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeactivateAllMLModelEndpointVersions not implemented")}
	}
	beginDeactivateAllMLModelEndpointVersions := e.beginDeactivateAllMLModelEndpointVersions.get(req)
	if beginDeactivateAllMLModelEndpointVersions == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlmodels/(?P<modelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/endpoint/versions/deactivateAll`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		modelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("modelId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginDeactivateAllMLModelEndpointVersions(req.Context(), workspaceIDParam, modelIDParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeactivateAllMLModelEndpointVersions = &respr
		e.beginDeactivateAllMLModelEndpointVersions.add(req, beginDeactivateAllMLModelEndpointVersions)
	}

	resp, err := server.PollerResponderNext(beginDeactivateAllMLModelEndpointVersions, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		e.beginDeactivateAllMLModelEndpointVersions.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeactivateAllMLModelEndpointVersions) {
		e.beginDeactivateAllMLModelEndpointVersions.remove(req)
	}

	return resp, nil
}

func (e *EndpointServerTransport) dispatchBeginDeactivateMLModelEndpointVersion(req *http.Request) (*http.Response, error) {
	if e.srv.BeginDeactivateMLModelEndpointVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeactivateMLModelEndpointVersion not implemented")}
	}
	beginDeactivateMLModelEndpointVersion := e.beginDeactivateMLModelEndpointVersion.get(req)
	if beginDeactivateMLModelEndpointVersion == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlmodels/(?P<modelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/endpoint/versions/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deactivate`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		modelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("modelId")])
		if err != nil {
			return nil, err
		}
		nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginDeactivateMLModelEndpointVersion(req.Context(), workspaceIDParam, modelIDParam, nameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeactivateMLModelEndpointVersion = &respr
		e.beginDeactivateMLModelEndpointVersion.add(req, beginDeactivateMLModelEndpointVersion)
	}

	resp, err := server.PollerResponderNext(beginDeactivateMLModelEndpointVersion, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		e.beginDeactivateMLModelEndpointVersion.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeactivateMLModelEndpointVersion) {
		e.beginDeactivateMLModelEndpointVersion.remove(req)
	}

	return resp, nil
}

func (e *EndpointServerTransport) dispatchGetMLModelEndpoint(req *http.Request) (*http.Response, error) {
	if e.srv.GetMLModelEndpoint == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMLModelEndpoint not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlmodels/(?P<modelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/endpoint`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	modelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("modelId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.GetMLModelEndpoint(req.Context(), workspaceIDParam, modelIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Endpoint, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *EndpointServerTransport) dispatchGetMLModelEndpointVersion(req *http.Request) (*http.Response, error) {
	if e.srv.GetMLModelEndpointVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMLModelEndpointVersion not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlmodels/(?P<modelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/endpoint/versions/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	modelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("modelId")])
	if err != nil {
		return nil, err
	}
	nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.GetMLModelEndpointVersion(req.Context(), workspaceIDParam, modelIDParam, nameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).EndpointVersionInfo, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *EndpointServerTransport) dispatchNewListMLModelEndpointVersionsPager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListMLModelEndpointVersionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListMLModelEndpointVersionsPager not implemented")}
	}
	newListMLModelEndpointVersionsPager := e.newListMLModelEndpointVersionsPager.get(req)
	if newListMLModelEndpointVersionsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlmodels/(?P<modelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/endpoint/versions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		modelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("modelId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *mlmodel.EndpointClientListMLModelEndpointVersionsOptions
		if continuationTokenParam != nil {
			options = &mlmodel.EndpointClientListMLModelEndpointVersionsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := e.srv.NewListMLModelEndpointVersionsPager(workspaceIDParam, modelIDParam, options)
		newListMLModelEndpointVersionsPager = &resp
		e.newListMLModelEndpointVersionsPager.add(req, newListMLModelEndpointVersionsPager)
		server.PagerResponderInjectNextLinks(newListMLModelEndpointVersionsPager, req, func(page *mlmodel.EndpointClientListMLModelEndpointVersionsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListMLModelEndpointVersionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		e.newListMLModelEndpointVersionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListMLModelEndpointVersionsPager) {
		e.newListMLModelEndpointVersionsPager.remove(req)
	}
	return resp, nil
}

func (e *EndpointServerTransport) dispatchBeginScoreMLModelEndpoint(req *http.Request) (*http.Response, error) {
	if e.srv.BeginScoreMLModelEndpoint == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginScoreMLModelEndpoint not implemented")}
	}
	beginScoreMLModelEndpoint := e.beginScoreMLModelEndpoint.get(req)
	if beginScoreMLModelEndpoint == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlModels/(?P<modelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/endpoint/score`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[mlmodel.ScoreDataRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		modelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("modelId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginScoreMLModelEndpoint(req.Context(), workspaceIDParam, modelIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginScoreMLModelEndpoint = &respr
		e.beginScoreMLModelEndpoint.add(req, beginScoreMLModelEndpoint)
	}

	resp, err := server.PollerResponderNext(beginScoreMLModelEndpoint, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginScoreMLModelEndpoint.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginScoreMLModelEndpoint) {
		e.beginScoreMLModelEndpoint.remove(req)
	}

	return resp, nil
}

func (e *EndpointServerTransport) dispatchBeginScoreMLModelEndpointVersion(req *http.Request) (*http.Response, error) {
	if e.srv.BeginScoreMLModelEndpointVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginScoreMLModelEndpointVersion not implemented")}
	}
	beginScoreMLModelEndpointVersion := e.beginScoreMLModelEndpointVersion.get(req)
	if beginScoreMLModelEndpointVersion == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlmodels/(?P<modelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/endpoint/versions/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/score`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[mlmodel.ScoreDataRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		modelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("modelId")])
		if err != nil {
			return nil, err
		}
		nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginScoreMLModelEndpointVersion(req.Context(), workspaceIDParam, modelIDParam, nameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginScoreMLModelEndpointVersion = &respr
		e.beginScoreMLModelEndpointVersion.add(req, beginScoreMLModelEndpointVersion)
	}

	resp, err := server.PollerResponderNext(beginScoreMLModelEndpointVersion, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginScoreMLModelEndpointVersion.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginScoreMLModelEndpointVersion) {
		e.beginScoreMLModelEndpointVersion.remove(req)
	}

	return resp, nil
}

func (e *EndpointServerTransport) dispatchUpdateMLModelEndpoint(req *http.Request) (*http.Response, error) {
	if e.srv.UpdateMLModelEndpoint == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateMLModelEndpoint not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlmodels/(?P<modelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/endpoint`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[mlmodel.UpdateMLModelEndpointRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	modelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("modelId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.UpdateMLModelEndpoint(req.Context(), workspaceIDParam, modelIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Endpoint, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *EndpointServerTransport) dispatchUpdateMLModelEndpointVersion(req *http.Request) (*http.Response, error) {
	if e.srv.UpdateMLModelEndpointVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateMLModelEndpointVersion not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mlmodels/(?P<modelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/endpoint/versions/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[mlmodel.UpdateMLModelEndpointVersionRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	modelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("modelId")])
	if err != nil {
		return nil, err
	}
	nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.UpdateMLModelEndpointVersion(req.Context(), workspaceIDParam, modelIDParam, nameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).EndpointVersionInfo, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to EndpointServerTransport
var endpointServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
