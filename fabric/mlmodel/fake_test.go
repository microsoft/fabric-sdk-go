// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package mlmodel_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/mlmodel"
	"github.com/microsoft/fabric-sdk-go/fabric/mlmodel/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *mlmodel.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = mlmodel.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListMLModels() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List machine learning models in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := mlmodel.MLModels{
		Value: []mlmodel.MLModel{
			{
				Type:        to.Ptr(mlmodel.ItemTypeMLModel),
				Description: to.Ptr("A machine learning model description."),
				DisplayName: to.Ptr("MLModel_1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(mlmodel.ItemTypeMLModel),
				Description: to.Ptr("A machine learning model description."),
				DisplayName: to.Ptr("MLModel_2"),
				ID:          to.Ptr("f2a6411d-c204-47d3-b992-5338be0d2cee"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListMLModelsPager = func(workspaceID string, options *mlmodel.ItemsClientListMLModelsOptions) (resp azfake.PagerResponder[mlmodel.ItemsClientListMLModelsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[mlmodel.ItemsClientListMLModelsResponse]{}
		resp.AddPage(http.StatusOK, mlmodel.ItemsClientListMLModelsResponse{MLModels: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListMLModelsPager(exampleWorkspaceID, &mlmodel.ItemsClientListMLModelsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.MLModels))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateMLModel() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a machine learning model example"},
	})
	var exampleWorkspaceID string
	var exampleCreateMLModelRequest mlmodel.CreateMLModelRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateMLModelRequest = mlmodel.CreateMLModelRequest{
		Description: to.Ptr("A machine learning model description."),
		DisplayName: to.Ptr("MLModel_1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateMLModel = func(ctx context.Context, workspaceID string, createMLModelRequest mlmodel.CreateMLModelRequest, options *mlmodel.ItemsClientBeginCreateMLModelOptions) (resp azfake.PollerResponder[mlmodel.ItemsClientCreateMLModelResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateMLModelRequest, createMLModelRequest))
		resp = azfake.PollerResponder[mlmodel.ItemsClientCreateMLModelResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, mlmodel.ItemsClientCreateMLModelResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateMLModel(ctx, exampleWorkspaceID, exampleCreateMLModelRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetMLModel() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a machine learning model example"},
	})
	var exampleWorkspaceID string
	var exampleMlModelID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleMlModelID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := mlmodel.MLModel{
		Type:        to.Ptr(mlmodel.ItemTypeMLModel),
		Description: to.Ptr("A machine learning model description."),
		DisplayName: to.Ptr("MLModel_1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetMLModel = func(ctx context.Context, workspaceID string, mlModelID string, options *mlmodel.ItemsClientGetMLModelOptions) (resp azfake.Responder[mlmodel.ItemsClientGetMLModelResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMlModelID, mlModelID)
		resp = azfake.Responder[mlmodel.ItemsClientGetMLModelResponse]{}
		resp.SetResponse(http.StatusOK, mlmodel.ItemsClientGetMLModelResponse{MLModel: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetMLModel(ctx, exampleWorkspaceID, exampleMlModelID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MLModel))
}

func (testsuite *FakeTestSuite) TestItems_UpdateMLModel() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a machine learning model example"},
	})
	var exampleWorkspaceID string
	var exampleMlModelID string
	var exampleUpdateMLModelRequest mlmodel.UpdateMLModelRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleMlModelID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateMLModelRequest = mlmodel.UpdateMLModelRequest{
		Description: to.Ptr("A new description for machine learning model."),
	}

	exampleRes := mlmodel.MLModel{
		Type:        to.Ptr(mlmodel.ItemTypeMLModel),
		Description: to.Ptr("A new description for machine learning model."),
		DisplayName: to.Ptr("MLModel's name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateMLModel = func(ctx context.Context, workspaceID string, mlModelID string, updateMLModelRequest mlmodel.UpdateMLModelRequest, options *mlmodel.ItemsClientUpdateMLModelOptions) (resp azfake.Responder[mlmodel.ItemsClientUpdateMLModelResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMlModelID, mlModelID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateMLModelRequest, updateMLModelRequest))
		resp = azfake.Responder[mlmodel.ItemsClientUpdateMLModelResponse]{}
		resp.SetResponse(http.StatusOK, mlmodel.ItemsClientUpdateMLModelResponse{MLModel: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateMLModel(ctx, exampleWorkspaceID, exampleMlModelID, exampleUpdateMLModelRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MLModel))
}

func (testsuite *FakeTestSuite) TestItems_DeleteMLModel() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a machine learning model example"},
	})
	var exampleWorkspaceID string
	var exampleMlModelID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleMlModelID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteMLModel = func(ctx context.Context, workspaceID string, mlModelID string, options *mlmodel.ItemsClientDeleteMLModelOptions) (resp azfake.Responder[mlmodel.ItemsClientDeleteMLModelResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleMlModelID, mlModelID)
		resp = azfake.Responder[mlmodel.ItemsClientDeleteMLModelResponse]{}
		resp.SetResponse(http.StatusOK, mlmodel.ItemsClientDeleteMLModelResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteMLModel(ctx, exampleWorkspaceID, exampleMlModelID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}
