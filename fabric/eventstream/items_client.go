// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package eventstream

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateEventstream - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API does not support create an eventstream with a definition.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Eventstream.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create an eventstream the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createEventstreamRequest - Create item request payload.
//   - options - ItemsClientBeginCreateEventstreamOptions contains the optional parameters for the ItemsClient.BeginCreateEventstream
//     method.
func (client *ItemsClient) BeginCreateEventstream(ctx context.Context, workspaceID string, createEventstreamRequest CreateEventstreamRequest, options *ItemsClientBeginCreateEventstreamOptions) (*runtime.Poller[ItemsClientCreateEventstreamResponse], error) {
	return client.beginCreateEventstream(ctx, workspaceID, createEventstreamRequest, options)
}

// CreateEventstream - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API does not support create an eventstream with a definition.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Eventstream.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create an eventstream the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createEventstream(ctx context.Context, workspaceID string, createEventstreamRequest CreateEventstreamRequest, options *ItemsClientBeginCreateEventstreamOptions) (*http.Response, error) {
	var err error
	const operationName = "eventstream.ItemsClient.BeginCreateEventstream"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createEventstreamCreateRequest(ctx, workspaceID, createEventstreamRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createEventstreamCreateRequest creates the CreateEventstream request.
func (client *ItemsClient) createEventstreamCreateRequest(ctx context.Context, workspaceID string, createEventstreamRequest CreateEventstreamRequest, _ *ItemsClientBeginCreateEventstreamOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/eventstreams"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createEventstreamRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteEventstream - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Eventstream.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - eventstreamID - The eventstream ID.
//   - options - ItemsClientDeleteEventstreamOptions contains the optional parameters for the ItemsClient.DeleteEventstream method.
func (client *ItemsClient) DeleteEventstream(ctx context.Context, workspaceID string, eventstreamID string, options *ItemsClientDeleteEventstreamOptions) (ItemsClientDeleteEventstreamResponse, error) {
	var err error
	const operationName = "eventstream.ItemsClient.DeleteEventstream"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteEventstreamCreateRequest(ctx, workspaceID, eventstreamID, options)
	if err != nil {
		return ItemsClientDeleteEventstreamResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteEventstreamResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteEventstreamResponse{}, err
	}
	return ItemsClientDeleteEventstreamResponse{}, nil
}

// deleteEventstreamCreateRequest creates the DeleteEventstream request.
func (client *ItemsClient) deleteEventstreamCreateRequest(ctx context.Context, workspaceID string, eventstreamID string, _ *ItemsClientDeleteEventstreamOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/eventstreams/{eventstreamId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if eventstreamID == "" {
		return nil, errors.New("parameter eventstreamID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventstreamId}", url.PathEscape(eventstreamID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetEventstream - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Eventstream.Read.All or Eventstream.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - eventstreamID - The eventstream ID.
//   - options - ItemsClientGetEventstreamOptions contains the optional parameters for the ItemsClient.GetEventstream method.
func (client *ItemsClient) GetEventstream(ctx context.Context, workspaceID string, eventstreamID string, options *ItemsClientGetEventstreamOptions) (ItemsClientGetEventstreamResponse, error) {
	var err error
	const operationName = "eventstream.ItemsClient.GetEventstream"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getEventstreamCreateRequest(ctx, workspaceID, eventstreamID, options)
	if err != nil {
		return ItemsClientGetEventstreamResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetEventstreamResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetEventstreamResponse{}, err
	}
	resp, err := client.getEventstreamHandleResponse(httpResp)
	return resp, err
}

// getEventstreamCreateRequest creates the GetEventstream request.
func (client *ItemsClient) getEventstreamCreateRequest(ctx context.Context, workspaceID string, eventstreamID string, _ *ItemsClientGetEventstreamOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/eventstreams/{eventstreamId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if eventstreamID == "" {
		return nil, errors.New("parameter eventstreamID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventstreamId}", url.PathEscape(eventstreamID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getEventstreamHandleResponse handles the GetEventstream response.
func (client *ItemsClient) getEventstreamHandleResponse(resp *http.Response) (ItemsClientGetEventstreamResponse, error) {
	result := ItemsClientGetEventstreamResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Eventstream); err != nil {
		return ItemsClientGetEventstreamResponse{}, err
	}
	return result, nil
}

// NewListEventstreamsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListEventstreamsOptions contains the optional parameters for the ItemsClient.NewListEventstreamsPager
//     method.
func (client *ItemsClient) NewListEventstreamsPager(workspaceID string, options *ItemsClientListEventstreamsOptions) *runtime.Pager[ItemsClientListEventstreamsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListEventstreamsResponse]{
		More: func(page ItemsClientListEventstreamsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListEventstreamsResponse) (ItemsClientListEventstreamsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "eventstream.ItemsClient.NewListEventstreamsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listEventstreamsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListEventstreamsResponse{}, err
			}
			return client.listEventstreamsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listEventstreamsCreateRequest creates the ListEventstreams request.
func (client *ItemsClient) listEventstreamsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListEventstreamsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/eventstreams"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listEventstreamsHandleResponse handles the ListEventstreams response.
func (client *ItemsClient) listEventstreamsHandleResponse(resp *http.Response) (ItemsClientListEventstreamsResponse, error) {
	result := ItemsClientListEventstreamsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Eventstreams); err != nil {
		return ItemsClientListEventstreamsResponse{}, err
	}
	return result, nil
}

// UpdateEventstream - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Eventstream.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - eventstreamID - The eventstream ID.
//   - updateEventstreamRequest - Update eventstream request payload.
//   - options - ItemsClientUpdateEventstreamOptions contains the optional parameters for the ItemsClient.UpdateEventstream method.
func (client *ItemsClient) UpdateEventstream(ctx context.Context, workspaceID string, eventstreamID string, updateEventstreamRequest UpdateEventstreamRequest, options *ItemsClientUpdateEventstreamOptions) (ItemsClientUpdateEventstreamResponse, error) {
	var err error
	const operationName = "eventstream.ItemsClient.UpdateEventstream"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateEventstreamCreateRequest(ctx, workspaceID, eventstreamID, updateEventstreamRequest, options)
	if err != nil {
		return ItemsClientUpdateEventstreamResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateEventstreamResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateEventstreamResponse{}, err
	}
	resp, err := client.updateEventstreamHandleResponse(httpResp)
	return resp, err
}

// updateEventstreamCreateRequest creates the UpdateEventstream request.
func (client *ItemsClient) updateEventstreamCreateRequest(ctx context.Context, workspaceID string, eventstreamID string, updateEventstreamRequest UpdateEventstreamRequest, _ *ItemsClientUpdateEventstreamOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/eventstreams/{eventstreamId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if eventstreamID == "" {
		return nil, errors.New("parameter eventstreamID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventstreamId}", url.PathEscape(eventstreamID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateEventstreamRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateEventstreamHandleResponse handles the UpdateEventstream response.
func (client *ItemsClient) updateEventstreamHandleResponse(resp *http.Response) (ItemsClientUpdateEventstreamResponse, error) {
	result := ItemsClientUpdateEventstreamResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Eventstream); err != nil {
		return ItemsClientUpdateEventstreamResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// CreateEventstream - returns ItemsClientCreateEventstreamResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// This API does not support create an eventstream with a definition.
//
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Eventstream.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create an eventstream the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createEventstreamRequest - Create item request payload.
//   - options - ItemsClientBeginCreateEventstreamOptions contains the optional parameters for the ItemsClient.BeginCreateEventstream method.
func (client *ItemsClient) CreateEventstream(ctx context.Context, workspaceID string, createEventstreamRequest CreateEventstreamRequest, options *ItemsClientBeginCreateEventstreamOptions) (ItemsClientCreateEventstreamResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateEventstream(ctx, workspaceID, createEventstreamRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateEventstreamResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateEventstreamResponse{}, err
	}
	return result, err
}

// beginCreateEventstream creates the createEventstream request.
func (client *ItemsClient) beginCreateEventstream(ctx context.Context, workspaceID string, createEventstreamRequest CreateEventstreamRequest, options *ItemsClientBeginCreateEventstreamOptions) (*runtime.Poller[ItemsClientCreateEventstreamResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createEventstream(ctx, workspaceID, createEventstreamRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateEventstreamResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateEventstreamResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateEventstreamResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateEventstreamResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListEventstreams - returns array of Eventstream from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListEventstreamsOptions contains the optional parameters for the ItemsClient.NewListEventstreamsPager method.
func (client *ItemsClient) ListEventstreams(ctx context.Context, workspaceID string, options *ItemsClientListEventstreamsOptions) ([]Eventstream, error) {
	pager := client.NewListEventstreamsPager(workspaceID, options)
	mapper := func(resp ItemsClientListEventstreamsResponse) []Eventstream {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Eventstream{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []Eventstream{}, err
	}
	return list, nil
}
