// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package eventstream_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"
	"time"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/eventstream"
	"github.com/microsoft/fabric-sdk-go/fabric/eventstream/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *eventstream.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = eventstream.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListEventstreams() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List eventstreams in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := eventstream.Eventstreams{
		Value: []eventstream.Eventstream{
			{
				Type:        to.Ptr(eventstream.ItemTypeEventstream),
				Description: to.Ptr("An eventstream description."),
				DisplayName: to.Ptr("Eventstream_1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(eventstream.ItemTypeEventstream),
				Description: to.Ptr("An eventstream description."),
				DisplayName: to.Ptr("Eventstream_2"),
				ID:          to.Ptr("dc307e72-3e89-4425-97c3-a364d86dddfa"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(eventstream.ItemTypeEventstream),
				Description: to.Ptr("An eventstream description."),
				DisplayName: to.Ptr("Eventstream_3"),
				ID:          to.Ptr("b48a1f80-862a-4b97-b672-7217bf064dc0"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListEventstreamsPager = func(workspaceID string, options *eventstream.ItemsClientListEventstreamsOptions) (resp azfake.PagerResponder[eventstream.ItemsClientListEventstreamsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[eventstream.ItemsClientListEventstreamsResponse]{}
		resp.AddPage(http.StatusOK, eventstream.ItemsClientListEventstreamsResponse{Eventstreams: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListEventstreamsPager(exampleWorkspaceID, &eventstream.ItemsClientListEventstreamsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Eventstreams))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateEventstream() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create an eventstream example"},
	})
	var exampleWorkspaceID string
	var exampleCreateEventstreamRequest eventstream.CreateEventstreamRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateEventstreamRequest = eventstream.CreateEventstreamRequest{
		Description: to.Ptr("Eventstream_1 description."),
		DisplayName: to.Ptr("Eventstream_1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateEventstream = func(ctx context.Context, workspaceID string, createEventstreamRequest eventstream.CreateEventstreamRequest, options *eventstream.ItemsClientBeginCreateEventstreamOptions) (resp azfake.PollerResponder[eventstream.ItemsClientCreateEventstreamResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateEventstreamRequest, createEventstreamRequest))
		resp = azfake.PollerResponder[eventstream.ItemsClientCreateEventstreamResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, eventstream.ItemsClientCreateEventstreamResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateEventstream(ctx, exampleWorkspaceID, exampleCreateEventstreamRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create an eventstream with public definition example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateEventstreamRequest = eventstream.CreateEventstreamRequest{
		Description: to.Ptr("Eventstream_1 description."),
		Definition: &eventstream.Definition{
			Format: to.Ptr("eventstream"),
			Parts: []eventstream.DefinitionPart{
				{
					Path:        to.Ptr("eventstream.json"),
					Payload:     to.Ptr("SSdkIGxpa2UgdG8gdGVsbCBh..IGpva2UgZm9yIHlvdS4K"),
					PayloadType: to.Ptr(eventstream.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("eventstreamProperties.json"),
					Payload:     to.Ptr("ewogICJyZXRlbnRpb25UaW1l..V2ZWwiOiAiTG93Igp9"),
					PayloadType: to.Ptr(eventstream.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(eventstream.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("Eventstream_1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateEventstream = func(ctx context.Context, workspaceID string, createEventstreamRequest eventstream.CreateEventstreamRequest, options *eventstream.ItemsClientBeginCreateEventstreamOptions) (resp azfake.PollerResponder[eventstream.ItemsClientCreateEventstreamResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateEventstreamRequest, createEventstreamRequest))
		resp = azfake.PollerResponder[eventstream.ItemsClientCreateEventstreamResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, eventstream.ItemsClientCreateEventstreamResponse{}, nil)
		return
	}

	poller, err = client.BeginCreateEventstream(ctx, exampleWorkspaceID, exampleCreateEventstreamRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetEventstream() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get an eventstream example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := eventstream.Eventstream{
		Type:        to.Ptr(eventstream.ItemTypeEventstream),
		Description: to.Ptr("An eventstream description."),
		DisplayName: to.Ptr("Eventstream_1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetEventstream = func(ctx context.Context, workspaceID string, eventstreamID string, options *eventstream.ItemsClientGetEventstreamOptions) (resp azfake.Responder[eventstream.ItemsClientGetEventstreamResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		resp = azfake.Responder[eventstream.ItemsClientGetEventstreamResponse]{}
		resp.SetResponse(http.StatusOK, eventstream.ItemsClientGetEventstreamResponse{Eventstream: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetEventstream(ctx, exampleWorkspaceID, exampleEventstreamID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Eventstream))
}

func (testsuite *FakeTestSuite) TestItems_UpdateEventstream() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update an eventstream example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	var exampleUpdateEventstreamRequest eventstream.UpdateEventstreamRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateEventstreamRequest = eventstream.UpdateEventstreamRequest{
		Description: to.Ptr("A new description for eventstream."),
		DisplayName: to.Ptr("Eventstream_New_Name"),
	}

	exampleRes := eventstream.Eventstream{
		Type:        to.Ptr(eventstream.ItemTypeEventstream),
		Description: to.Ptr("A new description for eventstream."),
		DisplayName: to.Ptr("Eventstream_New_Name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateEventstream = func(ctx context.Context, workspaceID string, eventstreamID string, updateEventstreamRequest eventstream.UpdateEventstreamRequest, options *eventstream.ItemsClientUpdateEventstreamOptions) (resp azfake.Responder[eventstream.ItemsClientUpdateEventstreamResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateEventstreamRequest, updateEventstreamRequest))
		resp = azfake.Responder[eventstream.ItemsClientUpdateEventstreamResponse]{}
		resp.SetResponse(http.StatusOK, eventstream.ItemsClientUpdateEventstreamResponse{Eventstream: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateEventstream(ctx, exampleWorkspaceID, exampleEventstreamID, exampleUpdateEventstreamRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Eventstream))
}

func (testsuite *FakeTestSuite) TestItems_DeleteEventstream() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete an eventstream example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteEventstream = func(ctx context.Context, workspaceID string, eventstreamID string, options *eventstream.ItemsClientDeleteEventstreamOptions) (resp azfake.Responder[eventstream.ItemsClientDeleteEventstreamResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		resp = azfake.Responder[eventstream.ItemsClientDeleteEventstreamResponse]{}
		resp.SetResponse(http.StatusOK, eventstream.ItemsClientDeleteEventstreamResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteEventstream(ctx, exampleWorkspaceID, exampleEventstreamID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetEventstreamDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get an eventstream definition example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleEventstreamID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := eventstream.DefinitionResponse{
		Definition: &eventstream.Definition{
			Parts: []eventstream.DefinitionPart{
				{
					Path:        to.Ptr("eventstream.json"),
					Payload:     to.Ptr("SSdkIGxpa2UgdG8gdGVsbCBh..IGpva2UgZm9yIHlvdS4K"),
					PayloadType: to.Ptr(eventstream.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("eventstreamProperties.json"),
					Payload:     to.Ptr("ewogICJyZXRlbnRpb25UaW1l..V2ZWwiOiAiTG93Igp9"),
					PayloadType: to.Ptr(eventstream.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(eventstream.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetEventstreamDefinition = func(ctx context.Context, workspaceID string, eventstreamID string, options *eventstream.ItemsClientBeginGetEventstreamDefinitionOptions) (resp azfake.PollerResponder[eventstream.ItemsClientGetEventstreamDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		resp = azfake.PollerResponder[eventstream.ItemsClientGetEventstreamDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, eventstream.ItemsClientGetEventstreamDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetEventstreamDefinition(ctx, exampleWorkspaceID, exampleEventstreamID, &eventstream.ItemsClientBeginGetEventstreamDefinitionOptions{Format: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateEventstreamDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update an eventstream definition example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	var exampleUpdateEventstreamDefinitionRequest eventstream.UpdateEventstreamDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateEventstreamDefinitionRequest = eventstream.UpdateEventstreamDefinitionRequest{
		Definition: &eventstream.Definition{
			Parts: []eventstream.DefinitionPart{
				{
					Path:        to.Ptr("eventstream.json"),
					Payload:     to.Ptr("SSdkIGxpa2UgdG8gdGVsbCBh..IGpva2UgZm9yIHlvdS4K"),
					PayloadType: to.Ptr(eventstream.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("eventstreamProperties.json"),
					Payload:     to.Ptr("ewogICJyZXRlbnRpb25UaW1l..V2ZWwiOiAiTG93Igp9"),
					PayloadType: to.Ptr(eventstream.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(eventstream.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateEventstreamDefinition = func(ctx context.Context, workspaceID string, eventstreamID string, updateEventstreamDefinitionRequest eventstream.UpdateEventstreamDefinitionRequest, options *eventstream.ItemsClientBeginUpdateEventstreamDefinitionOptions) (resp azfake.PollerResponder[eventstream.ItemsClientUpdateEventstreamDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateEventstreamDefinitionRequest, updateEventstreamDefinitionRequest))
		resp = azfake.PollerResponder[eventstream.ItemsClientUpdateEventstreamDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, eventstream.ItemsClientUpdateEventstreamDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateEventstreamDefinition(ctx, exampleWorkspaceID, exampleEventstreamID, exampleUpdateEventstreamDefinitionRequest, &eventstream.ItemsClientBeginUpdateEventstreamDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestTopology_GetEventstreamTopology() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get an eventstream topology example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "8c500070-073f-4a88-b478-8fabe1941c52"

	exampleRes := eventstream.TopologyResponse{
		CompatibilityLevel: to.Ptr(eventstream.CompatibilityLevelOne0),
		Destinations: []eventstream.DestinationResponseClassification{
			&eventstream.CustomEndpointDestinationResponse{
				Name: to.Ptr("CustomEndpointDestination"),
				ID:   to.Ptr("4642073b-c216-4675-a17c-ed2e75756330"),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("DerivedStreamName"),
					}},
				Status:     to.Ptr(eventstream.NodeStatusRunning),
				Type:       to.Ptr(eventstream.DestinationTypeCustomEndpoint),
				Properties: map[string]any{},
			},
			&eventstream.LakehouseDestinationResponse{
				Name: to.Ptr("LakehouseDestination"),
				ID:   to.Ptr("e1e2d0cc-87e5-46d9-977d-2a8eede7bef0"),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("DerivedStreamName"),
					}},
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.DestinationTypeLakehouse),
				Properties: &eventstream.LakehouseDestinationProperties{
					Schema:     to.Ptr("dbo"),
					DeltaTable: to.Ptr("deltaTable"),
					InputSerialization: &eventstream.JSONSerializationInfo{
						Type: to.Ptr(eventstream.SerializationTypeJSON),
						Properties: &eventstream.JSONSerializationProperties{
							Encoding: to.Ptr(eventstream.JSONSerializationPropertiesEncodingUTF8),
						},
					},
					ItemID:                   to.Ptr("ee579458-85ea-4652-bd77-5c7d7c298b2a"),
					MaximumDurationInSeconds: to.Ptr[int32](120),
					MinimumRows:              to.Ptr[int32](100000),
					WorkspaceID:              to.Ptr("9625b495-17b3-4d6c-aeea-a81ae76ba369"),
				},
			},
			&eventstream.EventhouseDestinationResponse{
				Name: to.Ptr("EventhouseProcessedIngestionModeDestination"),
				ID:   to.Ptr("49b5d6ec-f8af-4ae9-a4d6-5e94645efe1f"),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("EventStreamName-stream"),
					}},
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.DestinationTypeEventhouse),
				Properties: &eventstream.EventhouseProcessedIngestionModeDestinationProperties{
					DataIngestionMode: to.Ptr(eventstream.EventhouseDestinationPropertiesDataIngestionModeProcessedIngestion),
					ItemID:            to.Ptr("4c8c3353-9652-4567-b8f3-eb585ef01ba9"),
					WorkspaceID:       to.Ptr("9625b495-17b3-4d6c-aeea-a81ae76ba369"),
					DatabaseName:      to.Ptr("databaseName"),
					InputSerialization: &eventstream.JSONSerializationInfo{
						Type: to.Ptr(eventstream.SerializationTypeJSON),
						Properties: &eventstream.JSONSerializationProperties{
							Encoding: to.Ptr(eventstream.JSONSerializationPropertiesEncodingUTF8),
						},
					},
					TableName: to.Ptr("tableName"),
				},
			},
			&eventstream.EventhouseDestinationResponse{
				Name: to.Ptr("EventhouseDirectIngestionModeDestination"),
				ID:   to.Ptr("c0ca1c2a-b8c5-482c-98da-40088f988e9c"),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("EventStreamName-stream"),
					}},
				Status: to.Ptr(eventstream.NodeStatusExternal),
				Type:   to.Ptr(eventstream.DestinationTypeEventhouse),
				Properties: &eventstream.EventhouseDirectIngestionModeDestinationProperties{
					DataIngestionMode: to.Ptr(eventstream.EventhouseDestinationPropertiesDataIngestionModeDirectIngestion),
					ItemID:            to.Ptr("4c8c3353-9652-4567-b8f3-eb585ef01ba9"),
					WorkspaceID:       to.Ptr("9625b495-17b3-4d6c-aeea-a81ae76ba369"),
					ConnectionName:    to.Ptr("connectionName"),
					MappingRuleName:   to.Ptr("mappingRuleName"),
				},
			}},
		Operators: []eventstream.OperatorClassification{
			&eventstream.FilterOperator{
				Name: to.Ptr("FilterName"),
				Type: to.Ptr(eventstream.OperatorTypeFilter),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("EventStreamName-stream"),
					}},
				InputSchemas: []eventstream.InputSchema{
					{
						Name: to.Ptr("EventStreamName-stream"),
						Schema: &eventstream.Schema{
							Columns: []eventstream.ColumnSchema{
								{
									Name: to.Ptr("BikepointID"),
									Type: to.Ptr(eventstream.DataTypeNvarcharMax),
								},
								{
									Name: to.Ptr("Street"),
									Type: to.Ptr(eventstream.DataTypeNvarcharMax),
								},
								{
									Name: to.Ptr("Neighbourhood"),
									Type: to.Ptr(eventstream.DataTypeNvarcharMax),
								},
								{
									Name: to.Ptr("Latitude"),
									Type: to.Ptr(eventstream.DataTypeFloat),
								},
								{
									Name: to.Ptr("Longitude"),
									Type: to.Ptr(eventstream.DataTypeFloat),
								},
								{
									Name: to.Ptr("No_Bikes"),
									Type: to.Ptr(eventstream.DataTypeBigInt),
								},
								{
									Name: to.Ptr("No_Empty_Docks"),
									Type: to.Ptr(eventstream.DataTypeBigInt),
								},
								{
									Name: to.Ptr("Record_Example"),
									Type: to.Ptr(eventstream.DataTypeRecord),
									Fields: []eventstream.ColumnSchema{
										{
											Name: to.Ptr("column1"),
											Type: to.Ptr(eventstream.DataTypeBigInt),
										},
										{
											Name: to.Ptr("column2"),
											Type: to.Ptr(eventstream.DataTypeNvarcharMax),
										}},
								},
								{
									Name: to.Ptr("Array_Example"),
									Type: to.Ptr(eventstream.DataTypeArray),
									Items: &eventstream.ColumnSchema{
										Type: to.Ptr(eventstream.DataTypeBigInt),
									},
								}},
						},
					}},
				Properties: &eventstream.FilterOperatorProperties{
					Conditions: []eventstream.FilterCondition{
						{
							Column: &eventstream.ColumnReferenceExpression{
								ColumnName: to.Ptr("columnName"),
								ColumnPathSegments: []string{
									"path",
									"to",
									"column"},
								Node: to.Ptr("nodeName"),
							},
							OperatorType: to.Ptr(eventstream.FilterConditionOperatorTypeEquals),
							Value: &eventstream.LiteralExpression{
								DataType: to.Ptr(eventstream.DataTypeNvarcharMax),
								Value:    to.Ptr("stringValue"),
							},
						}},
				},
			},
			&eventstream.JoinOperator{
				Name: to.Ptr("JoinerName"),
				Type: to.Ptr(eventstream.OperatorTypeJoin),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("FilterName"),
					},
					{
						Name: to.Ptr("DerivedStreamName"),
					}},
				Properties: &eventstream.JoinOperatorProperties{
					Duration: &eventstream.OperatorCommonDuration{
						Unit:  to.Ptr(eventstream.OperatorCommonDurationUnitMinute),
						Value: to.Ptr[int32](1),
					},
					JoinOn: []eventstream.JoinOn{
						{
							Left: &eventstream.ColumnReferenceExpression{
								ColumnName: to.Ptr("leftColumnName"),
								Node:       to.Ptr("leftNodeName"),
							},
							Right: &eventstream.ColumnReferenceExpression{
								ColumnName: to.Ptr("rightColumnName"),
								Node:       to.Ptr("rightNodeName"),
							},
						}},
					JoinType: to.Ptr(eventstream.JoinOperatorPropertiesJoinTypeInner),
				},
			},
			&eventstream.ManageFieldsOperator{
				Name: to.Ptr("FieldsManagerName"),
				Type: to.Ptr(eventstream.OperatorTypeManageFields),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("DerivedStreamName"),
					}},
				InputSchemas: []eventstream.InputSchema{
					{
						Name: to.Ptr("DerivedStreamName"),
						Schema: &eventstream.Schema{
							Columns: []eventstream.ColumnSchema{
								{
									Name: to.Ptr("BikepointID"),
									Type: to.Ptr(eventstream.DataTypeNvarcharMax),
								},
								{
									Name: to.Ptr("Street"),
									Type: to.Ptr(eventstream.DataTypeNvarcharMax),
								},
								{
									Name: to.Ptr("Neighbourhood"),
									Type: to.Ptr(eventstream.DataTypeNvarcharMax),
								},
								{
									Name: to.Ptr("Latitude"),
									Type: to.Ptr(eventstream.DataTypeFloat),
								},
								{
									Name: to.Ptr("Longitude"),
									Type: to.Ptr(eventstream.DataTypeFloat),
								},
								{
									Name: to.Ptr("No_Bikes"),
									Type: to.Ptr(eventstream.DataTypeBigInt),
								},
								{
									Name: to.Ptr("No_Empty_Docks"),
									Type: to.Ptr(eventstream.DataTypeBigInt),
								}},
						},
					}},
				Properties: &eventstream.ManageFieldsOperatorProperties{
					Columns: []eventstream.ManageFieldsOperationClassification{
						&eventstream.ManageFieldsRenameOperation{
							Type:  to.Ptr(eventstream.TypeRename),
							Alias: to.Ptr("renameAlias"),
							Properties: &eventstream.RenameProperties{
								Column: &eventstream.ColumnReferenceExpression{
									ColumnName: to.Ptr("renameColumn"),
									Node:       to.Ptr("renameNode"),
								},
							},
						},
						&eventstream.ManageFieldsCastOperation{
							Type:  to.Ptr(eventstream.TypeCast),
							Alias: to.Ptr("castAlias"),
							Properties: &eventstream.CastProperties{
								Column: &eventstream.ColumnReferenceExpression{
									ColumnName: to.Ptr("castColumn"),
									Node:       to.Ptr("castNode"),
								},
								TargetDataType: to.Ptr(eventstream.DataTypeBigInt),
							},
						},
						&eventstream.ManageFieldsFunctionCallOperation{
							Type:  to.Ptr(eventstream.TypeFunctionCall),
							Alias: to.Ptr("indexOf"),
							Properties: &eventstream.FunctionCallProperties{
								Arguments: []any{
									"a",
									map[string]any{
										"columnName": "functionCallColumn",
										"node":       "functionCallNode",
									},
									float64(1)},
								FunctionName: to.Ptr("CharIndex"),
							},
						}},
				},
			},
			&eventstream.AggregateOperator{
				Name: to.Ptr("AggregatorName"),
				Type: to.Ptr(eventstream.OperatorTypeAggregate),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("DerivedStreamName"),
					}},
				Properties: &eventstream.AggregateOperatorProperties{
					Aggregations: []eventstream.InColumnAggregation{
						{
							AggregationFunction: to.Ptr(eventstream.AggregationFunctionAverage),
							Alias:               to.Ptr("aggregatedAlias"),
							Column: &eventstream.ColumnReferenceExpression{
								ColumnName: to.Ptr("aggregationColumn"),
								Node:       to.Ptr("aggregationNode"),
							},
							Duration: &eventstream.OperatorCommonDuration{
								Unit:  to.Ptr(eventstream.OperatorCommonDurationUnitMinute),
								Value: to.Ptr[int32](1),
							},
							PartitionBy: []eventstream.ColumnReferenceExpression{
								{
									ColumnName: to.Ptr("partitionByColumn"),
									Node:       to.Ptr("partitionByNode"),
								}},
						}},
				},
			},
			&eventstream.GroupByOperator{
				Name: to.Ptr("GroupByName"),
				Type: to.Ptr(eventstream.OperatorTypeGroupBy),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("DerivedStreamName"),
					}},
				Properties: &eventstream.GroupByOperatorProperties{
					Aggregations: []eventstream.Aggregation{
						{
							AggregationFunction: to.Ptr(eventstream.AggregationFunctionAverage),
							Alias:               to.Ptr("groupByAggregationAlias"),
							Column: &eventstream.ColumnReferenceExpression{
								ColumnName: to.Ptr("groupByAggregationColumn"),
								Node:       to.Ptr("groupByAggregationNode"),
							},
						}},
					GroupBy: []eventstream.ColumnReferenceExpression{
						{
							ColumnName: to.Ptr("groupByColumn"),
							Node:       to.Ptr("groupByNode"),
						}},
					Window: &eventstream.TumblingWindow{
						Type: to.Ptr(eventstream.GroupByWindowTypeTumbling),
						Properties: &eventstream.TumblingWindowProperties{
							Duration: &eventstream.OperatorCommonDuration{
								Unit:  to.Ptr(eventstream.OperatorCommonDurationUnitMinute),
								Value: to.Ptr[int32](5),
							},
							Offset: &eventstream.OperatorCommonDuration{
								Unit:  to.Ptr(eventstream.OperatorCommonDurationUnitMinute),
								Value: to.Ptr[int32](1),
							},
						},
					},
				},
			},
			&eventstream.UnionOperator{
				Name: to.Ptr("UnionName"),
				Type: to.Ptr(eventstream.OperatorTypeUnion),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("FilterName"),
					},
					{
						Name: to.Ptr("GroupByName"),
					}},
				Properties: map[string]any{},
			},
			&eventstream.ExpandOperator{
				Name: to.Ptr("ExpansionName"),
				Type: to.Ptr(eventstream.OperatorTypeExpand),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("MyNode"),
					}},
				Properties: &eventstream.ExpandOperatorProperties{
					Column: []eventstream.ColumnReferenceExpression{
						{
							ColumnName: to.Ptr("expansionColumn"),
							Node:       to.Ptr("expansionNode"),
						}},
					IgnoreMissingOrEmpty: to.Ptr(true),
				},
			}},
		Sources: []eventstream.SourceResponseClassification{
			&eventstream.AzureEventHubSourceResponse{
				Name:   to.Ptr("AzureEventHubSource"),
				ID:     to.Ptr("514d0e11-cf65-44fb-a292-fc88a2a78618"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeAzureEventHub),
				Properties: &eventstream.AzureEventHubSourceProperties{
					ConsumerGroupName: to.Ptr("$Default"),
					DataConnectionID:  to.Ptr("9c500070-073f-4a88-b478-8fabe1941c52"),
					InputSerialization: &eventstream.JSONSerializationInfo{
						Type: to.Ptr(eventstream.SerializationTypeJSON),
						Properties: &eventstream.JSONSerializationProperties{
							Encoding: to.Ptr(eventstream.JSONSerializationPropertiesEncodingUTF8),
						},
					},
				},
			},
			&eventstream.AzureIoTHubSourceResponse{
				Name:   to.Ptr("AzureIoTHubSource"),
				ID:     to.Ptr("e2886002-d696-4c05-969c-51361365cc24"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeAzureIoTHub),
				Properties: &eventstream.AzureIoTHubSourceProperties{
					ConsumerGroupName: to.Ptr("$Default"),
					DataConnectionID:  to.Ptr("8c500070-073f-4a88-b478-8fabe1941c52"),
					InputSerialization: &eventstream.JSONSerializationInfo{
						Type: to.Ptr(eventstream.SerializationTypeJSON),
						Properties: &eventstream.JSONSerializationProperties{
							Encoding: to.Ptr(eventstream.JSONSerializationPropertiesEncodingUTF8),
						},
					},
				},
			},
			&eventstream.CustomEndpointSourceResponse{
				Name:       to.Ptr("CustomEndpointSource"),
				ID:         to.Ptr("0d9bf4db-bc7f-4854-8579-6fdf244ed503"),
				Status:     to.Ptr(eventstream.NodeStatusRunning),
				Type:       to.Ptr(eventstream.SourceTypeCustomEndpoint),
				Properties: map[string]any{},
			},
			&eventstream.SampleDataSourceResponse{
				Name:   to.Ptr("SampleDataSource"),
				ID:     to.Ptr("19258e62-4de9-4c52-b45e-71502dc2ddea"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeSampleData),
				Properties: &eventstream.SampleDataSourceProperties{
					Type: to.Ptr(eventstream.SampleDataSourcePropertiesTypeBicycles),
				},
			},
			&eventstream.AmazonKinesisSourceResponse{
				Name:   to.Ptr("AmazonKinesisSource"),
				ID:     to.Ptr("7afaa265-1d67-416f-8183-e6e1b1ebb4ea"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeAmazonKinesis),
				Properties: &eventstream.AmazonKinesisSourceProperties{
					DataConnectionID: to.Ptr("2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"),
					Region:           to.Ptr(eventstream.AmazonKinesisSourcePropertiesRegionUsEast1),
				},
			},
			&eventstream.AmazonMSKKafkaSourceResponse{
				Name:   to.Ptr("AmazonMSKKafkaSource"),
				ID:     to.Ptr("d020dd19-e84c-42e1-b4be-87e58145e1b5"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeAmazonMSKKafka),
				Properties: &eventstream.AmazonMSKKafkaSourceProperties{
					AutoOffsetReset:   to.Ptr(eventstream.BaseKafkaSourcePropertiesAutoOffsetResetEarliest),
					ConsumerGroupName: to.Ptr("consumerGroupName"),
					DataConnectionID:  to.Ptr("2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"),
					Topic:             to.Ptr("topic"),
					SaslMechanism:     to.Ptr(eventstream.AmazonMSKKafkaSourcePropertiesSaslMechanismPLAIN),
					SecurityProtocol:  to.Ptr(eventstream.AmazonMSKKafkaSourcePropertiesSecurityProtocolSASLPLAINTEXT),
				},
			},
			&eventstream.ApacheKafkaSourceResponse{
				Name:   to.Ptr("ApacheKafkaSource"),
				ID:     to.Ptr("03a6dd4a-4627-422f-a287-2ccd7daf903d"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeApacheKafka),
				Properties: &eventstream.ApacheKafkaSourceProperties{
					AutoOffsetReset:   to.Ptr(eventstream.BaseKafkaSourcePropertiesAutoOffsetResetLatest),
					ConsumerGroupName: to.Ptr("consumerGroupName"),
					DataConnectionID:  to.Ptr("2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"),
					Topic:             to.Ptr("topic"),
					SaslMechanism:     to.Ptr(eventstream.ApacheKafkaSourcePropertiesSaslMechanismSCRAMSHA512),
					SecurityProtocol:  to.Ptr(eventstream.ApacheKafkaSourcePropertiesSecurityProtocolSASLSSL),
				},
			},
			&eventstream.ConfluentCloudSourceResponse{
				Name:   to.Ptr("ConfluentCloudSource"),
				ID:     to.Ptr("6f493321-6c12-40c6-9980-c2aa38804829"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeConfluentCloud),
				Properties: &eventstream.BaseKafkaSourceProperties{
					AutoOffsetReset:   to.Ptr(eventstream.BaseKafkaSourcePropertiesAutoOffsetResetEarliest),
					ConsumerGroupName: to.Ptr("consumerGroupName"),
					DataConnectionID:  to.Ptr("2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"),
					Topic:             to.Ptr("topic"),
				},
			},
			&eventstream.AzureCosmosDBCDCSourceResponse{
				Name:   to.Ptr("AzureCosmosDBCDCSource"),
				ID:     to.Ptr("e7f88779-0349-47e3-bead-85afc9d3c9a4"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeAzureCosmosDBCDC),
				Properties: &eventstream.AzureCosmosDBCDCSourceProperties{
					ContainerName:    to.Ptr("containerName"),
					DataConnectionID: to.Ptr("2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"),
					DatabaseName:     to.Ptr("databaseName"),
					OffsetPolicy:     to.Ptr(eventstream.AzureCosmosDBCDCSourcePropertiesOffsetPolicyEarliest),
				},
			},
			&eventstream.AzureSQLDBCDCSourceResponse{
				Name:   to.Ptr("AzureSQLDBCDCSource"),
				ID:     to.Ptr("da5ed80d-c672-4809-a7ac-6224aa2ab2c7"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeAzureSQLDBCDC),
				Properties: &eventstream.BaseSQLCDCSourceProperties{
					DataConnectionID: to.Ptr("2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"),
					TableName:        to.Ptr("tableName"),
				},
			},
			&eventstream.AzureSQLMIDBCDCSourceResponse{
				Name:   to.Ptr("AzureSQLMIDBCDCSource"),
				ID:     to.Ptr("745e401f-aac6-463f-b107-c336a2440abe"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeAzureSQLMIDBCDC),
				Properties: &eventstream.BaseSQLCDCSourceProperties{
					DataConnectionID: to.Ptr("2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"),
					TableName:        to.Ptr("tableName"),
				},
			},
			&eventstream.SQLServerOnVMDBCDCSourceResponse{
				Name:   to.Ptr("SQLServerOnVMDBCDCSource"),
				ID:     to.Ptr("759842ab-a968-498d-9f37-f46297da8b07"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeSQLServerOnVMDBCDC),
				Properties: &eventstream.BaseSQLCDCSourceProperties{
					DataConnectionID: to.Ptr("2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"),
					TableName:        to.Ptr("tableName"),
				},
			},
			&eventstream.MySQLCDCSourceResponse{
				Name:   to.Ptr("MySQLCDCSource"),
				ID:     to.Ptr("9791cd2a-19fb-4991-b878-2b061420a460"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeMySQLCDC),
				Properties: map[string]any{
					"dataConnectionId": "2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37",
					"port":             float64(3306),
					"serverId":         float64(9),
					"tableName":        "tableName",
				},
			},
			&eventstream.PostgreSQLCDCSourceResponse{
				Name:   to.Ptr("PostgreSQLCDCSource"),
				ID:     to.Ptr("57b3394b-bcf3-479a-952b-22a815e1d684"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypePostgreSQLCDC),
				Properties: &eventstream.PostgreSQLCDCSourceProperties{
					DataConnectionID: to.Ptr("2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"),
					TableName:        to.Ptr("tableName"),
					Port:             to.Ptr[int32](5432),
					SlotName:         to.Ptr("slotName"),
				},
			},
			&eventstream.GooglePubSubSourceResponse{
				Name:   to.Ptr("GooglePubSubSource"),
				ID:     to.Ptr("d5f702ca-8b2b-4ac5-88e7-50697cb1b207"),
				Status: to.Ptr(eventstream.NodeStatusRunning),
				Type:   to.Ptr(eventstream.SourceTypeGooglePubSub),
				Properties: &eventstream.GooglePubSubSourceProperties{
					DataConnectionID: to.Ptr("2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"),
				},
			}},
		Streams: []eventstream.StreamResponseClassification{
			&eventstream.DefaultStreamResponse{
				Name: to.Ptr("Eventstream-stream"),
				Type: to.Ptr(eventstream.StreamTypeDefaultStream),
				ID:   to.Ptr("8eff3cbe-f452-4d7f-bc2d-f35b4359c917"),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("AzureEventHubSource"),
					}},
				Properties: map[string]any{},
			},
			&eventstream.DerivedStreamResponse{
				Name: to.Ptr("DerivedStreamName"),
				Type: to.Ptr(eventstream.StreamTypeDerivedStream),
				ID:   to.Ptr("0f6f0dd8-9de2-48e2-92e7-e15b755b22a6"),
				InputNodes: []eventstream.NodeReference{
					{
						Name: to.Ptr("FilterName"),
					}},
				Properties: &eventstream.DerivedStreamProperties{
					InputSerialization: &eventstream.JSONSerializationInfo{
						Type: to.Ptr(eventstream.SerializationTypeJSON),
						Properties: &eventstream.JSONSerializationProperties{
							Encoding: to.Ptr(eventstream.JSONSerializationPropertiesEncodingUTF8),
						},
					},
				},
			}},
	}

	testsuite.serverFactory.TopologyServer.GetEventstreamTopology = func(ctx context.Context, workspaceID string, eventstreamID string, options *eventstream.TopologyClientGetEventstreamTopologyOptions) (resp azfake.Responder[eventstream.TopologyClientGetEventstreamTopologyResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		resp = azfake.Responder[eventstream.TopologyClientGetEventstreamTopologyResponse]{}
		resp.SetResponse(http.StatusOK, eventstream.TopologyClientGetEventstreamTopologyResponse{TopologyResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewTopologyClient()
	res, err := client.GetEventstreamTopology(ctx, exampleWorkspaceID, exampleEventstreamID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.TopologyResponse))
}

func (testsuite *FakeTestSuite) TestTopology_PauseEventstream() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Pause running an eventstream example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "8c500070-073f-4a88-b478-8fabe1941c52"

	testsuite.serverFactory.TopologyServer.PauseEventstream = func(ctx context.Context, workspaceID string, eventstreamID string, options *eventstream.TopologyClientPauseEventstreamOptions) (resp azfake.Responder[eventstream.TopologyClientPauseEventstreamResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		resp = azfake.Responder[eventstream.TopologyClientPauseEventstreamResponse]{}
		resp.SetResponse(http.StatusOK, eventstream.TopologyClientPauseEventstreamResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewTopologyClient()
	_, err = client.PauseEventstream(ctx, exampleWorkspaceID, exampleEventstreamID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestTopology_ResumeEventstream() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Resume running an eventstream example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	var exampleResumeEventstreamRequest eventstream.DataSourceStartRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "8c500070-073f-4a88-b478-8fabe1941c52"
	exampleResumeEventstreamRequest = eventstream.DataSourceStartRequest{
		StartType: to.Ptr(eventstream.DataSourceStartTypeNow),
	}

	testsuite.serverFactory.TopologyServer.ResumeEventstream = func(ctx context.Context, workspaceID string, eventstreamID string, resumeEventstreamRequest eventstream.DataSourceStartRequest, options *eventstream.TopologyClientResumeEventstreamOptions) (resp azfake.Responder[eventstream.TopologyClientResumeEventstreamResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		testsuite.Require().True(reflect.DeepEqual(exampleResumeEventstreamRequest, resumeEventstreamRequest))
		resp = azfake.Responder[eventstream.TopologyClientResumeEventstreamResponse]{}
		resp.SetResponse(http.StatusOK, eventstream.TopologyClientResumeEventstreamResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewTopologyClient()
	_, err = client.ResumeEventstream(ctx, exampleWorkspaceID, exampleEventstreamID, exampleResumeEventstreamRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestTopology_GetEventstreamSource() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get an eventstream source example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	var exampleSourceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "8c500070-073f-4a88-b478-8fabe1941c52"
	exampleSourceID = "e2886002-d696-4c05-969c-51361365cc24"

	exampleRes := eventstream.TopologyClientGetEventstreamSourceResponse{
		SourceResponseClassification: &eventstream.AzureEventHubSourceResponse{
			Name:   to.Ptr("AzureEventHubSource"),
			ID:     to.Ptr("e2886002-d696-4c05-969c-51361365cc24"),
			Status: to.Ptr(eventstream.NodeStatusRunning),
			Type:   to.Ptr(eventstream.SourceTypeAzureEventHub),
			Properties: &eventstream.AzureEventHubSourceProperties{
				ConsumerGroupName: to.Ptr("$Default"),
				DataConnectionID:  to.Ptr("9c500070-073f-4a88-b478-8fabe1941c52"),
				InputSerialization: &eventstream.JSONSerializationInfo{
					Type: to.Ptr(eventstream.SerializationTypeJSON),
					Properties: &eventstream.JSONSerializationProperties{
						Encoding: to.Ptr(eventstream.JSONSerializationPropertiesEncodingUTF8),
					},
				},
			},
		},
	}

	testsuite.serverFactory.TopologyServer.GetEventstreamSource = func(ctx context.Context, workspaceID string, eventstreamID string, sourceID string, options *eventstream.TopologyClientGetEventstreamSourceOptions) (resp azfake.Responder[eventstream.TopologyClientGetEventstreamSourceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		testsuite.Require().Equal(exampleSourceID, sourceID)
		resp = azfake.Responder[eventstream.TopologyClientGetEventstreamSourceResponse]{}
		resp.SetResponse(http.StatusOK, exampleRes, nil)
		return
	}

	client := testsuite.clientFactory.NewTopologyClient()
	res, err := client.GetEventstreamSource(ctx, exampleWorkspaceID, exampleEventstreamID, exampleSourceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res))
}

func (testsuite *FakeTestSuite) TestTopology_GetEventstreamDestination() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get an eventstream destination example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	var exampleDestinationID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "8c500070-073f-4a88-b478-8fabe1941c52"
	exampleDestinationID = "2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"

	exampleRes := eventstream.TopologyClientGetEventstreamDestinationResponse{
		DestinationResponseClassification: &eventstream.LakehouseDestinationResponse{
			Name: to.Ptr("LakehouseDestination"),
			ID:   to.Ptr("2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"),
			InputNodes: []eventstream.NodeReference{
				{
					Name: to.Ptr("InputNodeName"),
				}},
			Status: to.Ptr(eventstream.NodeStatusRunning),
			Type:   to.Ptr(eventstream.DestinationTypeLakehouse),
			Properties: &eventstream.LakehouseDestinationProperties{
				Schema:     to.Ptr("dbo"),
				DeltaTable: to.Ptr("deltaTable"),
				InputSerialization: &eventstream.JSONSerializationInfo{
					Type: to.Ptr(eventstream.SerializationTypeJSON),
					Properties: &eventstream.JSONSerializationProperties{
						Encoding: to.Ptr(eventstream.JSONSerializationPropertiesEncodingUTF8),
					},
				},
				ItemID:      to.Ptr("ee579458-85ea-4652-bd77-5c7d7c298b2a"),
				WorkspaceID: to.Ptr("9625b495-17b3-4d6c-aeea-a81ae76ba369"),
			},
		},
	}

	testsuite.serverFactory.TopologyServer.GetEventstreamDestination = func(ctx context.Context, workspaceID string, eventstreamID string, destinationID string, options *eventstream.TopologyClientGetEventstreamDestinationOptions) (resp azfake.Responder[eventstream.TopologyClientGetEventstreamDestinationResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		testsuite.Require().Equal(exampleDestinationID, destinationID)
		resp = azfake.Responder[eventstream.TopologyClientGetEventstreamDestinationResponse]{}
		resp.SetResponse(http.StatusOK, exampleRes, nil)
		return
	}

	client := testsuite.clientFactory.NewTopologyClient()
	res, err := client.GetEventstreamDestination(ctx, exampleWorkspaceID, exampleEventstreamID, exampleDestinationID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res))
}

func (testsuite *FakeTestSuite) TestTopology_GetEventstreamSourceConnection() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get an eventstream source connection example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	var exampleSourceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "8c500070-073f-4a88-b478-8fabe1941c52"
	exampleSourceID = "f344e2e0-e846-4991-ac26-d27dfb6a73c2"

	exampleRes := eventstream.SourceConnectionResponse{
		AccessKeys: &eventstream.AccessKeys{
			PrimaryConnectionString:   to.Ptr("connectionString1"),
			PrimaryKey:                to.Ptr("key1"),
			SecondaryConnectionString: to.Ptr("connectionString2"),
			SecondaryKey:              to.Ptr("key2"),
		},
		EventHubName:            to.Ptr("eventhub"),
		FullyQualifiedNamespace: to.Ptr("namespace.servicebus.windows.net"),
	}

	testsuite.serverFactory.TopologyServer.GetEventstreamSourceConnection = func(ctx context.Context, workspaceID string, eventstreamID string, sourceID string, options *eventstream.TopologyClientGetEventstreamSourceConnectionOptions) (resp azfake.Responder[eventstream.TopologyClientGetEventstreamSourceConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		testsuite.Require().Equal(exampleSourceID, sourceID)
		resp = azfake.Responder[eventstream.TopologyClientGetEventstreamSourceConnectionResponse]{}
		resp.SetResponse(http.StatusOK, eventstream.TopologyClientGetEventstreamSourceConnectionResponse{SourceConnectionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewTopologyClient()
	res, err := client.GetEventstreamSourceConnection(ctx, exampleWorkspaceID, exampleEventstreamID, exampleSourceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SourceConnectionResponse))
}

func (testsuite *FakeTestSuite) TestTopology_GetEventstreamDestinationConnection() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get an eventstream destination connection example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	var exampleDestinationID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "8c500070-073f-4a88-b478-8fabe1941c52"
	exampleDestinationID = "2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"

	exampleRes := eventstream.DestinationConnectionResponse{
		AccessKeys: &eventstream.AccessKeys{
			PrimaryConnectionString:   to.Ptr("connectionString1"),
			PrimaryKey:                to.Ptr("key1"),
			SecondaryConnectionString: to.Ptr("connectionString2"),
			SecondaryKey:              to.Ptr("key2"),
		},
		EventHubName:            to.Ptr("eventhub"),
		FullyQualifiedNamespace: to.Ptr("namespace.servicebus.windows.net"),
		ConsumerGroupName:       to.Ptr("$Default"),
	}

	testsuite.serverFactory.TopologyServer.GetEventstreamDestinationConnection = func(ctx context.Context, workspaceID string, eventstreamID string, destinationID string, options *eventstream.TopologyClientGetEventstreamDestinationConnectionOptions) (resp azfake.Responder[eventstream.TopologyClientGetEventstreamDestinationConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		testsuite.Require().Equal(exampleDestinationID, destinationID)
		resp = azfake.Responder[eventstream.TopologyClientGetEventstreamDestinationConnectionResponse]{}
		resp.SetResponse(http.StatusOK, eventstream.TopologyClientGetEventstreamDestinationConnectionResponse{DestinationConnectionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewTopologyClient()
	res, err := client.GetEventstreamDestinationConnection(ctx, exampleWorkspaceID, exampleEventstreamID, exampleDestinationID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DestinationConnectionResponse))
}

func (testsuite *FakeTestSuite) TestTopology_PauseEventstreamSource() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Pause running an eventstream source example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	var exampleSourceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "8c500070-073f-4a88-b478-8fabe1941c52"
	exampleSourceID = "e2886002-d696-4c05-969c-51361365cc24"

	testsuite.serverFactory.TopologyServer.PauseEventstreamSource = func(ctx context.Context, workspaceID string, eventstreamID string, sourceID string, options *eventstream.TopologyClientPauseEventstreamSourceOptions) (resp azfake.Responder[eventstream.TopologyClientPauseEventstreamSourceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		testsuite.Require().Equal(exampleSourceID, sourceID)
		resp = azfake.Responder[eventstream.TopologyClientPauseEventstreamSourceResponse]{}
		resp.SetResponse(http.StatusOK, eventstream.TopologyClientPauseEventstreamSourceResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewTopologyClient()
	_, err = client.PauseEventstreamSource(ctx, exampleWorkspaceID, exampleEventstreamID, exampleSourceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestTopology_ResumeEventstreamSource() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Resume running an eventstream source example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	var exampleSourceID string
	var exampleResumeEventstreamSourceRequest eventstream.DataSourceStartRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "8c500070-073f-4a88-b478-8fabe1941c52"
	exampleSourceID = "e2886002-d696-4c05-969c-51361365cc24"
	exampleResumeEventstreamSourceRequest = eventstream.DataSourceStartRequest{
		StartType: to.Ptr(eventstream.DataSourceStartTypeWhenLastStopped),
	}

	testsuite.serverFactory.TopologyServer.ResumeEventstreamSource = func(ctx context.Context, workspaceID string, eventstreamID string, sourceID string, resumeEventstreamSourceRequest eventstream.DataSourceStartRequest, options *eventstream.TopologyClientResumeEventstreamSourceOptions) (resp azfake.Responder[eventstream.TopologyClientResumeEventstreamSourceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		testsuite.Require().Equal(exampleSourceID, sourceID)
		testsuite.Require().True(reflect.DeepEqual(exampleResumeEventstreamSourceRequest, resumeEventstreamSourceRequest))
		resp = azfake.Responder[eventstream.TopologyClientResumeEventstreamSourceResponse]{}
		resp.SetResponse(http.StatusOK, eventstream.TopologyClientResumeEventstreamSourceResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewTopologyClient()
	_, err = client.ResumeEventstreamSource(ctx, exampleWorkspaceID, exampleEventstreamID, exampleSourceID, exampleResumeEventstreamSourceRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestTopology_PauseEventstreamDestination() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Pause running an eventstream destination example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	var exampleDestinationID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "8c500070-073f-4a88-b478-8fabe1941c52"
	exampleDestinationID = "2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"

	testsuite.serverFactory.TopologyServer.PauseEventstreamDestination = func(ctx context.Context, workspaceID string, eventstreamID string, destinationID string, options *eventstream.TopologyClientPauseEventstreamDestinationOptions) (resp azfake.Responder[eventstream.TopologyClientPauseEventstreamDestinationResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		testsuite.Require().Equal(exampleDestinationID, destinationID)
		resp = azfake.Responder[eventstream.TopologyClientPauseEventstreamDestinationResponse]{}
		resp.SetResponse(http.StatusOK, eventstream.TopologyClientPauseEventstreamDestinationResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewTopologyClient()
	_, err = client.PauseEventstreamDestination(ctx, exampleWorkspaceID, exampleEventstreamID, exampleDestinationID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestTopology_ResumeEventstreamDestination() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Resume running an eventstream destination example"},
	})
	var exampleWorkspaceID string
	var exampleEventstreamID string
	var exampleDestinationID string
	var exampleResumeEventstreamDestinationRequest eventstream.DataSourceStartRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEventstreamID = "8c500070-073f-4a88-b478-8fabe1941c52"
	exampleDestinationID = "2e4c91e7-0c4a-4cc4-abe3-cc7ba4310a37"
	exampleResumeEventstreamDestinationRequest = eventstream.DataSourceStartRequest{
		CustomStartDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-05-23T16:22:20.000Z"); return t }()),
		StartType:           to.Ptr(eventstream.DataSourceStartTypeCustomTime),
	}

	testsuite.serverFactory.TopologyServer.ResumeEventstreamDestination = func(ctx context.Context, workspaceID string, eventstreamID string, destinationID string, resumeEventstreamDestinationRequest eventstream.DataSourceStartRequest, options *eventstream.TopologyClientResumeEventstreamDestinationOptions) (resp azfake.Responder[eventstream.TopologyClientResumeEventstreamDestinationResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEventstreamID, eventstreamID)
		testsuite.Require().Equal(exampleDestinationID, destinationID)
		testsuite.Require().True(reflect.DeepEqual(exampleResumeEventstreamDestinationRequest, resumeEventstreamDestinationRequest))
		resp = azfake.Responder[eventstream.TopologyClientResumeEventstreamDestinationResponse]{}
		resp.SetResponse(http.StatusOK, eventstream.TopologyClientResumeEventstreamDestinationResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewTopologyClient()
	_, err = client.ResumeEventstreamDestination(ctx, exampleWorkspaceID, exampleEventstreamID, exampleDestinationID, exampleResumeEventstreamDestinationRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}
