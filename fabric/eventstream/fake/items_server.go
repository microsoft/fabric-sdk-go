// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/eventstream"
)

// ItemsServer is a fake server for instances of the eventstream.ItemsClient type.
type ItemsServer struct {
	// BeginCreateEventstream is the fake for method ItemsClient.BeginCreateEventstream
	// HTTP status codes to indicate success: http.StatusCreated, http.StatusAccepted
	BeginCreateEventstream func(ctx context.Context, workspaceID string, createEventstreamRequest eventstream.CreateEventstreamRequest, options *eventstream.ItemsClientBeginCreateEventstreamOptions) (resp azfake.PollerResponder[eventstream.ItemsClientCreateEventstreamResponse], errResp azfake.ErrorResponder)

	// DeleteEventstream is the fake for method ItemsClient.DeleteEventstream
	// HTTP status codes to indicate success: http.StatusOK
	DeleteEventstream func(ctx context.Context, workspaceID string, eventstreamID string, options *eventstream.ItemsClientDeleteEventstreamOptions) (resp azfake.Responder[eventstream.ItemsClientDeleteEventstreamResponse], errResp azfake.ErrorResponder)

	// GetEventstream is the fake for method ItemsClient.GetEventstream
	// HTTP status codes to indicate success: http.StatusOK
	GetEventstream func(ctx context.Context, workspaceID string, eventstreamID string, options *eventstream.ItemsClientGetEventstreamOptions) (resp azfake.Responder[eventstream.ItemsClientGetEventstreamResponse], errResp azfake.ErrorResponder)

	// NewListEventstreamsPager is the fake for method ItemsClient.NewListEventstreamsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListEventstreamsPager func(workspaceID string, options *eventstream.ItemsClientListEventstreamsOptions) (resp azfake.PagerResponder[eventstream.ItemsClientListEventstreamsResponse])

	// UpdateEventstream is the fake for method ItemsClient.UpdateEventstream
	// HTTP status codes to indicate success: http.StatusOK
	UpdateEventstream func(ctx context.Context, workspaceID string, eventstreamID string, updateEventstreamRequest eventstream.UpdateEventstreamRequest, options *eventstream.ItemsClientUpdateEventstreamOptions) (resp azfake.Responder[eventstream.ItemsClientUpdateEventstreamResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of eventstream.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                      srv,
		beginCreateEventstream:   newTracker[azfake.PollerResponder[eventstream.ItemsClientCreateEventstreamResponse]](),
		newListEventstreamsPager: newTracker[azfake.PagerResponder[eventstream.ItemsClientListEventstreamsResponse]](),
	}
}

// ItemsServerTransport connects instances of eventstream.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                      *ItemsServer
	beginCreateEventstream   *tracker[azfake.PollerResponder[eventstream.ItemsClientCreateEventstreamResponse]]
	newListEventstreamsPager *tracker[azfake.PagerResponder[eventstream.ItemsClientListEventstreamsResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ItemsClient.BeginCreateEventstream":
		resp, err = i.dispatchBeginCreateEventstream(req)
	case "ItemsClient.DeleteEventstream":
		resp, err = i.dispatchDeleteEventstream(req)
	case "ItemsClient.GetEventstream":
		resp, err = i.dispatchGetEventstream(req)
	case "ItemsClient.NewListEventstreamsPager":
		resp, err = i.dispatchNewListEventstreamsPager(req)
	case "ItemsClient.UpdateEventstream":
		resp, err = i.dispatchUpdateEventstream(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (i *ItemsServerTransport) dispatchBeginCreateEventstream(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateEventstream == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateEventstream not implemented")}
	}
	beginCreateEventstream := i.beginCreateEventstream.get(req)
	if beginCreateEventstream == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[eventstream.CreateEventstreamRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateEventstream(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateEventstream = &respr
		i.beginCreateEventstream.add(req, beginCreateEventstream)
	}

	resp, err := server.PollerResponderNext(beginCreateEventstream, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateEventstream.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateEventstream) {
		i.beginCreateEventstream.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteEventstream(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteEventstream == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteEventstream not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteEventstream(req.Context(), workspaceIDParam, eventstreamIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetEventstream(req *http.Request) (*http.Response, error) {
	if i.srv.GetEventstream == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEventstream not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetEventstream(req.Context(), workspaceIDParam, eventstreamIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Eventstream, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListEventstreamsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListEventstreamsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListEventstreamsPager not implemented")}
	}
	newListEventstreamsPager := i.newListEventstreamsPager.get(req)
	if newListEventstreamsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *eventstream.ItemsClientListEventstreamsOptions
		if continuationTokenParam != nil {
			options = &eventstream.ItemsClientListEventstreamsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListEventstreamsPager(workspaceIDParam, options)
		newListEventstreamsPager = &resp
		i.newListEventstreamsPager.add(req, newListEventstreamsPager)
		server.PagerResponderInjectNextLinks(newListEventstreamsPager, req, func(page *eventstream.ItemsClientListEventstreamsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListEventstreamsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListEventstreamsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListEventstreamsPager) {
		i.newListEventstreamsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateEventstream(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateEventstream == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateEventstream not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[eventstream.UpdateEventstreamRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateEventstream(req.Context(), workspaceIDParam, eventstreamIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Eventstream, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
