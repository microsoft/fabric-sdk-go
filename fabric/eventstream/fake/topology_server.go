// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/eventstream"
)

// TopologyServer is a fake server for instances of the eventstream.TopologyClient type.
type TopologyServer struct {
	// GetEventstreamDestination is the fake for method TopologyClient.GetEventstreamDestination
	// HTTP status codes to indicate success: http.StatusOK
	GetEventstreamDestination func(ctx context.Context, workspaceID string, eventstreamID string, destinationID string, options *eventstream.TopologyClientGetEventstreamDestinationOptions) (resp azfake.Responder[eventstream.TopologyClientGetEventstreamDestinationResponse], errResp azfake.ErrorResponder)

	// GetEventstreamDestinationConnection is the fake for method TopologyClient.GetEventstreamDestinationConnection
	// HTTP status codes to indicate success: http.StatusOK
	GetEventstreamDestinationConnection func(ctx context.Context, workspaceID string, eventstreamID string, destinationID string, options *eventstream.TopologyClientGetEventstreamDestinationConnectionOptions) (resp azfake.Responder[eventstream.TopologyClientGetEventstreamDestinationConnectionResponse], errResp azfake.ErrorResponder)

	// GetEventstreamSource is the fake for method TopologyClient.GetEventstreamSource
	// HTTP status codes to indicate success: http.StatusOK
	GetEventstreamSource func(ctx context.Context, workspaceID string, eventstreamID string, sourceID string, options *eventstream.TopologyClientGetEventstreamSourceOptions) (resp azfake.Responder[eventstream.TopologyClientGetEventstreamSourceResponse], errResp azfake.ErrorResponder)

	// GetEventstreamSourceConnection is the fake for method TopologyClient.GetEventstreamSourceConnection
	// HTTP status codes to indicate success: http.StatusOK
	GetEventstreamSourceConnection func(ctx context.Context, workspaceID string, eventstreamID string, sourceID string, options *eventstream.TopologyClientGetEventstreamSourceConnectionOptions) (resp azfake.Responder[eventstream.TopologyClientGetEventstreamSourceConnectionResponse], errResp azfake.ErrorResponder)

	// GetEventstreamTopology is the fake for method TopologyClient.GetEventstreamTopology
	// HTTP status codes to indicate success: http.StatusOK
	GetEventstreamTopology func(ctx context.Context, workspaceID string, eventstreamID string, options *eventstream.TopologyClientGetEventstreamTopologyOptions) (resp azfake.Responder[eventstream.TopologyClientGetEventstreamTopologyResponse], errResp azfake.ErrorResponder)

	// PauseEventstream is the fake for method TopologyClient.PauseEventstream
	// HTTP status codes to indicate success: http.StatusOK
	PauseEventstream func(ctx context.Context, workspaceID string, eventstreamID string, options *eventstream.TopologyClientPauseEventstreamOptions) (resp azfake.Responder[eventstream.TopologyClientPauseEventstreamResponse], errResp azfake.ErrorResponder)

	// PauseEventstreamDestination is the fake for method TopologyClient.PauseEventstreamDestination
	// HTTP status codes to indicate success: http.StatusOK
	PauseEventstreamDestination func(ctx context.Context, workspaceID string, eventstreamID string, destinationID string, options *eventstream.TopologyClientPauseEventstreamDestinationOptions) (resp azfake.Responder[eventstream.TopologyClientPauseEventstreamDestinationResponse], errResp azfake.ErrorResponder)

	// PauseEventstreamSource is the fake for method TopologyClient.PauseEventstreamSource
	// HTTP status codes to indicate success: http.StatusOK
	PauseEventstreamSource func(ctx context.Context, workspaceID string, eventstreamID string, sourceID string, options *eventstream.TopologyClientPauseEventstreamSourceOptions) (resp azfake.Responder[eventstream.TopologyClientPauseEventstreamSourceResponse], errResp azfake.ErrorResponder)

	// ResumeEventstream is the fake for method TopologyClient.ResumeEventstream
	// HTTP status codes to indicate success: http.StatusOK
	ResumeEventstream func(ctx context.Context, workspaceID string, eventstreamID string, resumeEventstreamRequest eventstream.DataSourceStartRequest, options *eventstream.TopologyClientResumeEventstreamOptions) (resp azfake.Responder[eventstream.TopologyClientResumeEventstreamResponse], errResp azfake.ErrorResponder)

	// ResumeEventstreamDestination is the fake for method TopologyClient.ResumeEventstreamDestination
	// HTTP status codes to indicate success: http.StatusOK
	ResumeEventstreamDestination func(ctx context.Context, workspaceID string, eventstreamID string, destinationID string, resumeEventstreamDestinationRequest eventstream.DataSourceStartRequest, options *eventstream.TopologyClientResumeEventstreamDestinationOptions) (resp azfake.Responder[eventstream.TopologyClientResumeEventstreamDestinationResponse], errResp azfake.ErrorResponder)

	// ResumeEventstreamSource is the fake for method TopologyClient.ResumeEventstreamSource
	// HTTP status codes to indicate success: http.StatusOK
	ResumeEventstreamSource func(ctx context.Context, workspaceID string, eventstreamID string, sourceID string, resumeEventstreamSourceRequest eventstream.DataSourceStartRequest, options *eventstream.TopologyClientResumeEventstreamSourceOptions) (resp azfake.Responder[eventstream.TopologyClientResumeEventstreamSourceResponse], errResp azfake.ErrorResponder)
}

// NewTopologyServerTransport creates a new instance of TopologyServerTransport with the provided implementation.
// The returned TopologyServerTransport instance is connected to an instance of eventstream.TopologyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewTopologyServerTransport(srv *TopologyServer) *TopologyServerTransport {
	return &TopologyServerTransport{srv: srv}
}

// TopologyServerTransport connects instances of eventstream.TopologyClient to instances of TopologyServer.
// Don't use this type directly, use NewTopologyServerTransport instead.
type TopologyServerTransport struct {
	srv *TopologyServer
}

// Do implements the policy.Transporter interface for TopologyServerTransport.
func (t *TopologyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return t.dispatchToMethodFake(req, method)
}

func (t *TopologyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if topologyServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = topologyServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "TopologyClient.GetEventstreamDestination":
				res.resp, res.err = t.dispatchGetEventstreamDestination(req)
			case "TopologyClient.GetEventstreamDestinationConnection":
				res.resp, res.err = t.dispatchGetEventstreamDestinationConnection(req)
			case "TopologyClient.GetEventstreamSource":
				res.resp, res.err = t.dispatchGetEventstreamSource(req)
			case "TopologyClient.GetEventstreamSourceConnection":
				res.resp, res.err = t.dispatchGetEventstreamSourceConnection(req)
			case "TopologyClient.GetEventstreamTopology":
				res.resp, res.err = t.dispatchGetEventstreamTopology(req)
			case "TopologyClient.PauseEventstream":
				res.resp, res.err = t.dispatchPauseEventstream(req)
			case "TopologyClient.PauseEventstreamDestination":
				res.resp, res.err = t.dispatchPauseEventstreamDestination(req)
			case "TopologyClient.PauseEventstreamSource":
				res.resp, res.err = t.dispatchPauseEventstreamSource(req)
			case "TopologyClient.ResumeEventstream":
				res.resp, res.err = t.dispatchResumeEventstream(req)
			case "TopologyClient.ResumeEventstreamDestination":
				res.resp, res.err = t.dispatchResumeEventstreamDestination(req)
			case "TopologyClient.ResumeEventstreamSource":
				res.resp, res.err = t.dispatchResumeEventstreamSource(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (t *TopologyServerTransport) dispatchGetEventstreamDestination(req *http.Request) (*http.Response, error) {
	if t.srv.GetEventstreamDestination == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEventstreamDestination not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/destinations/(?P<destinationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	destinationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("destinationId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.GetEventstreamDestination(req.Context(), workspaceIDParam, eventstreamIDParam, destinationIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DestinationResponseClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TopologyServerTransport) dispatchGetEventstreamDestinationConnection(req *http.Request) (*http.Response, error) {
	if t.srv.GetEventstreamDestinationConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEventstreamDestinationConnection not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/destinations/(?P<destinationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/connection`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	destinationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("destinationId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.GetEventstreamDestinationConnection(req.Context(), workspaceIDParam, eventstreamIDParam, destinationIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DestinationConnectionResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TopologyServerTransport) dispatchGetEventstreamSource(req *http.Request) (*http.Response, error) {
	if t.srv.GetEventstreamSource == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEventstreamSource not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sources/(?P<sourceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	sourceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("sourceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.GetEventstreamSource(req.Context(), workspaceIDParam, eventstreamIDParam, sourceIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SourceResponseClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TopologyServerTransport) dispatchGetEventstreamSourceConnection(req *http.Request) (*http.Response, error) {
	if t.srv.GetEventstreamSourceConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEventstreamSourceConnection not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sources/(?P<sourceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/connection`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	sourceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("sourceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.GetEventstreamSourceConnection(req.Context(), workspaceIDParam, eventstreamIDParam, sourceIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SourceConnectionResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TopologyServerTransport) dispatchGetEventstreamTopology(req *http.Request) (*http.Response, error) {
	if t.srv.GetEventstreamTopology == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEventstreamTopology not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/topology`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.GetEventstreamTopology(req.Context(), workspaceIDParam, eventstreamIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TopologyResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TopologyServerTransport) dispatchPauseEventstream(req *http.Request) (*http.Response, error) {
	if t.srv.PauseEventstream == nil {
		return nil, &nonRetriableError{errors.New("fake for method PauseEventstream not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/pause`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.PauseEventstream(req.Context(), workspaceIDParam, eventstreamIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TopologyServerTransport) dispatchPauseEventstreamDestination(req *http.Request) (*http.Response, error) {
	if t.srv.PauseEventstreamDestination == nil {
		return nil, &nonRetriableError{errors.New("fake for method PauseEventstreamDestination not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/destinations/(?P<destinationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/pause`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	destinationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("destinationId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.PauseEventstreamDestination(req.Context(), workspaceIDParam, eventstreamIDParam, destinationIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TopologyServerTransport) dispatchPauseEventstreamSource(req *http.Request) (*http.Response, error) {
	if t.srv.PauseEventstreamSource == nil {
		return nil, &nonRetriableError{errors.New("fake for method PauseEventstreamSource not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sources/(?P<sourceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/pause`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	sourceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("sourceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.PauseEventstreamSource(req.Context(), workspaceIDParam, eventstreamIDParam, sourceIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TopologyServerTransport) dispatchResumeEventstream(req *http.Request) (*http.Response, error) {
	if t.srv.ResumeEventstream == nil {
		return nil, &nonRetriableError{errors.New("fake for method ResumeEventstream not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resume`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[eventstream.DataSourceStartRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.ResumeEventstream(req.Context(), workspaceIDParam, eventstreamIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TopologyServerTransport) dispatchResumeEventstreamDestination(req *http.Request) (*http.Response, error) {
	if t.srv.ResumeEventstreamDestination == nil {
		return nil, &nonRetriableError{errors.New("fake for method ResumeEventstreamDestination not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/destinations/(?P<destinationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resume`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[eventstream.DataSourceStartRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	destinationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("destinationId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.ResumeEventstreamDestination(req.Context(), workspaceIDParam, eventstreamIDParam, destinationIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TopologyServerTransport) dispatchResumeEventstreamSource(req *http.Request) (*http.Response, error) {
	if t.srv.ResumeEventstreamSource == nil {
		return nil, &nonRetriableError{errors.New("fake for method ResumeEventstreamSource not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventstreams/(?P<eventstreamId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sources/(?P<sourceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resume`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[eventstream.DataSourceStartRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	eventstreamIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventstreamId")])
	if err != nil {
		return nil, err
	}
	sourceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("sourceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.ResumeEventstreamSource(req.Context(), workspaceIDParam, eventstreamIDParam, sourceIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to TopologyServerTransport
var topologyServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
