// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package eventhouse

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateEventhouse - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Eventhouse.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create an eventhouse the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createEventhouseRequest - Create eventhouse request payload.
//   - options - ItemsClientBeginCreateEventhouseOptions contains the optional parameters for the ItemsClient.BeginCreateEventhouse
//     method.
func (client *ItemsClient) BeginCreateEventhouse(ctx context.Context, workspaceID string, createEventhouseRequest CreateEventhouseRequest, options *ItemsClientBeginCreateEventhouseOptions) (*runtime.Poller[ItemsClientCreateEventhouseResponse], error) {
	return client.beginCreateEventhouse(ctx, workspaceID, createEventhouseRequest, options)
}

// CreateEventhouse - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Eventhouse.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create an eventhouse the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createEventhouse(ctx context.Context, workspaceID string, createEventhouseRequest CreateEventhouseRequest, options *ItemsClientBeginCreateEventhouseOptions) (*http.Response, error) {
	var err error
	const operationName = "eventhouse.ItemsClient.BeginCreateEventhouse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createEventhouseCreateRequest(ctx, workspaceID, createEventhouseRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createEventhouseCreateRequest creates the CreateEventhouse request.
func (client *ItemsClient) createEventhouseCreateRequest(ctx context.Context, workspaceID string, createEventhouseRequest CreateEventhouseRequest, _ *ItemsClientBeginCreateEventhouseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/eventhouses"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createEventhouseRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteEventhouse - PERMISSIONS The caller must have write permissions for the eventhouse.
// REQUIRED DELEGATED SCOPES Eventhouse.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - eventhouseID - The eventhouse ID.
//   - options - ItemsClientDeleteEventhouseOptions contains the optional parameters for the ItemsClient.DeleteEventhouse method.
func (client *ItemsClient) DeleteEventhouse(ctx context.Context, workspaceID string, eventhouseID string, options *ItemsClientDeleteEventhouseOptions) (ItemsClientDeleteEventhouseResponse, error) {
	var err error
	const operationName = "eventhouse.ItemsClient.DeleteEventhouse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteEventhouseCreateRequest(ctx, workspaceID, eventhouseID, options)
	if err != nil {
		return ItemsClientDeleteEventhouseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteEventhouseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteEventhouseResponse{}, err
	}
	return ItemsClientDeleteEventhouseResponse{}, nil
}

// deleteEventhouseCreateRequest creates the DeleteEventhouse request.
func (client *ItemsClient) deleteEventhouseCreateRequest(ctx context.Context, workspaceID string, eventhouseID string, _ *ItemsClientDeleteEventhouseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/eventhouses/{eventhouseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if eventhouseID == "" {
		return nil, errors.New("parameter eventhouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventhouseId}", url.PathEscape(eventhouseID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetEventhouse - PERMISSIONS The caller must have read permissions for the eventhouse.
// REQUIRED DELEGATED SCOPES Eventhouse.Read.All or Eventhouse.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - eventhouseID - The eventhouse ID.
//   - options - ItemsClientGetEventhouseOptions contains the optional parameters for the ItemsClient.GetEventhouse method.
func (client *ItemsClient) GetEventhouse(ctx context.Context, workspaceID string, eventhouseID string, options *ItemsClientGetEventhouseOptions) (ItemsClientGetEventhouseResponse, error) {
	var err error
	const operationName = "eventhouse.ItemsClient.GetEventhouse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getEventhouseCreateRequest(ctx, workspaceID, eventhouseID, options)
	if err != nil {
		return ItemsClientGetEventhouseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetEventhouseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetEventhouseResponse{}, err
	}
	resp, err := client.getEventhouseHandleResponse(httpResp)
	return resp, err
}

// getEventhouseCreateRequest creates the GetEventhouse request.
func (client *ItemsClient) getEventhouseCreateRequest(ctx context.Context, workspaceID string, eventhouseID string, _ *ItemsClientGetEventhouseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/eventhouses/{eventhouseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if eventhouseID == "" {
		return nil, errors.New("parameter eventhouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventhouseId}", url.PathEscape(eventhouseID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getEventhouseHandleResponse handles the GetEventhouse response.
func (client *ItemsClient) getEventhouseHandleResponse(resp *http.Response) (ItemsClientGetEventhouseResponse, error) {
	result := ItemsClientGetEventhouseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Eventhouse); err != nil {
		return ItemsClientGetEventhouseResponse{}, err
	}
	return result, nil
}

// BeginGetEventhouseDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the eventhouse.
// REQUIRED DELEGATED SCOPES Eventhouse.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - eventhouseID - The eventhouse ID.
//   - options - ItemsClientBeginGetEventhouseDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetEventhouseDefinition
//     method.
func (client *ItemsClient) BeginGetEventhouseDefinition(ctx context.Context, workspaceID string, eventhouseID string, options *ItemsClientBeginGetEventhouseDefinitionOptions) (*runtime.Poller[ItemsClientGetEventhouseDefinitionResponse], error) {
	return client.beginGetEventhouseDefinition(ctx, workspaceID, eventhouseID, options)
}

// GetEventhouseDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the eventhouse.
// REQUIRED DELEGATED SCOPES Eventhouse.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getEventhouseDefinition(ctx context.Context, workspaceID string, eventhouseID string, options *ItemsClientBeginGetEventhouseDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "eventhouse.ItemsClient.BeginGetEventhouseDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getEventhouseDefinitionCreateRequest(ctx, workspaceID, eventhouseID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getEventhouseDefinitionCreateRequest creates the GetEventhouseDefinition request.
func (client *ItemsClient) getEventhouseDefinitionCreateRequest(ctx context.Context, workspaceID string, eventhouseID string, options *ItemsClientBeginGetEventhouseDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/eventhouses/{eventhouseId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if eventhouseID == "" {
		return nil, errors.New("parameter eventhouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventhouseId}", url.PathEscape(eventhouseID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("format", *options.Format)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListEventhousesPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have a viewer workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListEventhousesOptions contains the optional parameters for the ItemsClient.NewListEventhousesPager
//     method.
func (client *ItemsClient) NewListEventhousesPager(workspaceID string, options *ItemsClientListEventhousesOptions) *runtime.Pager[ItemsClientListEventhousesResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListEventhousesResponse]{
		More: func(page ItemsClientListEventhousesResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListEventhousesResponse) (ItemsClientListEventhousesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "eventhouse.ItemsClient.NewListEventhousesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listEventhousesCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListEventhousesResponse{}, err
			}
			return client.listEventhousesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listEventhousesCreateRequest creates the ListEventhouses request.
func (client *ItemsClient) listEventhousesCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListEventhousesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/eventhouses"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listEventhousesHandleResponse handles the ListEventhouses response.
func (client *ItemsClient) listEventhousesHandleResponse(resp *http.Response) (ItemsClientListEventhousesResponse, error) {
	result := ItemsClientListEventhousesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Eventhouses); err != nil {
		return ItemsClientListEventhousesResponse{}, err
	}
	return result, nil
}

// UpdateEventhouse - PERMISSIONS The caller must have read and write permissions for the eventhouse.
// REQUIRED DELEGATED SCOPES Eventhouse.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - eventhouseID - The eventhouse ID.
//   - updateEventhouseRequest - Update eventhouse request payload.
//   - options - ItemsClientUpdateEventhouseOptions contains the optional parameters for the ItemsClient.UpdateEventhouse method.
func (client *ItemsClient) UpdateEventhouse(ctx context.Context, workspaceID string, eventhouseID string, updateEventhouseRequest UpdateEventhouseRequest, options *ItemsClientUpdateEventhouseOptions) (ItemsClientUpdateEventhouseResponse, error) {
	var err error
	const operationName = "eventhouse.ItemsClient.UpdateEventhouse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateEventhouseCreateRequest(ctx, workspaceID, eventhouseID, updateEventhouseRequest, options)
	if err != nil {
		return ItemsClientUpdateEventhouseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateEventhouseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateEventhouseResponse{}, err
	}
	resp, err := client.updateEventhouseHandleResponse(httpResp)
	return resp, err
}

// updateEventhouseCreateRequest creates the UpdateEventhouse request.
func (client *ItemsClient) updateEventhouseCreateRequest(ctx context.Context, workspaceID string, eventhouseID string, updateEventhouseRequest UpdateEventhouseRequest, _ *ItemsClientUpdateEventhouseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/eventhouses/{eventhouseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if eventhouseID == "" {
		return nil, errors.New("parameter eventhouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventhouseId}", url.PathEscape(eventhouseID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateEventhouseRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateEventhouseHandleResponse handles the UpdateEventhouse response.
func (client *ItemsClient) updateEventhouseHandleResponse(resp *http.Response) (ItemsClientUpdateEventhouseResponse, error) {
	result := ItemsClientUpdateEventhouseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Eventhouse); err != nil {
		return ItemsClientUpdateEventhouseResponse{}, err
	}
	return result, nil
}

// BeginUpdateEventhouseDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the eventhouse.
// REQUIRED DELEGATED SCOPES Eventhouse.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - eventhouseID - The eventhouse ID.
//   - updateEventhouseDefinitionRequest - Update eventhouse definition request payload.
//   - options - ItemsClientBeginUpdateEventhouseDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateEventhouseDefinition
//     method.
func (client *ItemsClient) BeginUpdateEventhouseDefinition(ctx context.Context, workspaceID string, eventhouseID string, updateEventhouseDefinitionRequest UpdateEventhouseDefinitionRequest, options *ItemsClientBeginUpdateEventhouseDefinitionOptions) (*runtime.Poller[ItemsClientUpdateEventhouseDefinitionResponse], error) {
	return client.beginUpdateEventhouseDefinition(ctx, workspaceID, eventhouseID, updateEventhouseDefinitionRequest, options)
}

// UpdateEventhouseDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the eventhouse.
// REQUIRED DELEGATED SCOPES Eventhouse.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateEventhouseDefinition(ctx context.Context, workspaceID string, eventhouseID string, updateEventhouseDefinitionRequest UpdateEventhouseDefinitionRequest, options *ItemsClientBeginUpdateEventhouseDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "eventhouse.ItemsClient.BeginUpdateEventhouseDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateEventhouseDefinitionCreateRequest(ctx, workspaceID, eventhouseID, updateEventhouseDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateEventhouseDefinitionCreateRequest creates the UpdateEventhouseDefinition request.
func (client *ItemsClient) updateEventhouseDefinitionCreateRequest(ctx context.Context, workspaceID string, eventhouseID string, updateEventhouseDefinitionRequest UpdateEventhouseDefinitionRequest, options *ItemsClientBeginUpdateEventhouseDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/eventhouses/{eventhouseId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if eventhouseID == "" {
		return nil, errors.New("parameter eventhouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventhouseId}", url.PathEscape(eventhouseID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateEventhouseDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateEventhouse - returns ItemsClientCreateEventhouseResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Eventhouse.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create an eventhouse the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createEventhouseRequest - Create eventhouse request payload.
//   - options - ItemsClientBeginCreateEventhouseOptions contains the optional parameters for the ItemsClient.BeginCreateEventhouse method.
func (client *ItemsClient) CreateEventhouse(ctx context.Context, workspaceID string, createEventhouseRequest CreateEventhouseRequest, options *ItemsClientBeginCreateEventhouseOptions) (ItemsClientCreateEventhouseResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateEventhouse(ctx, workspaceID, createEventhouseRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateEventhouseResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateEventhouseResponse{}, err
	}
	return result, err
}

// beginCreateEventhouse creates the createEventhouse request.
func (client *ItemsClient) beginCreateEventhouse(ctx context.Context, workspaceID string, createEventhouseRequest CreateEventhouseRequest, options *ItemsClientBeginCreateEventhouseOptions) (*runtime.Poller[ItemsClientCreateEventhouseResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createEventhouse(ctx, workspaceID, createEventhouseRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateEventhouseResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateEventhouseResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateEventhouseResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateEventhouseResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetEventhouseDefinition - returns ItemsClientGetEventhouseDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS The caller must have read and write permissions for the eventhouse.
//
// # REQUIRED DELEGATED SCOPES Eventhouse.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - eventhouseID - The eventhouse ID.
//   - options - ItemsClientBeginGetEventhouseDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetEventhouseDefinition method.
func (client *ItemsClient) GetEventhouseDefinition(ctx context.Context, workspaceID string, eventhouseID string, options *ItemsClientBeginGetEventhouseDefinitionOptions) (ItemsClientGetEventhouseDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetEventhouseDefinition(ctx, workspaceID, eventhouseID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetEventhouseDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetEventhouseDefinitionResponse{}, err
	}
	return result, err
}

// beginGetEventhouseDefinition creates the getEventhouseDefinition request.
func (client *ItemsClient) beginGetEventhouseDefinition(ctx context.Context, workspaceID string, eventhouseID string, options *ItemsClientBeginGetEventhouseDefinitionOptions) (*runtime.Poller[ItemsClientGetEventhouseDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getEventhouseDefinition(ctx, workspaceID, eventhouseID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetEventhouseDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetEventhouseDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetEventhouseDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetEventhouseDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateEventhouseDefinition - returns ItemsClientUpdateEventhouseDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS The caller must have read and write permissions for the eventhouse.
//
// # REQUIRED DELEGATED SCOPES Eventhouse.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - eventhouseID - The eventhouse ID.
//   - updateEventhouseDefinitionRequest - Update eventhouse definition request payload.
//   - options - ItemsClientBeginUpdateEventhouseDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateEventhouseDefinition method.
func (client *ItemsClient) UpdateEventhouseDefinition(ctx context.Context, workspaceID string, eventhouseID string, updateEventhouseDefinitionRequest UpdateEventhouseDefinitionRequest, options *ItemsClientBeginUpdateEventhouseDefinitionOptions) (ItemsClientUpdateEventhouseDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateEventhouseDefinition(ctx, workspaceID, eventhouseID, updateEventhouseDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateEventhouseDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateEventhouseDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateEventhouseDefinition creates the updateEventhouseDefinition request.
func (client *ItemsClient) beginUpdateEventhouseDefinition(ctx context.Context, workspaceID string, eventhouseID string, updateEventhouseDefinitionRequest UpdateEventhouseDefinitionRequest, options *ItemsClientBeginUpdateEventhouseDefinitionOptions) (*runtime.Poller[ItemsClientUpdateEventhouseDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateEventhouseDefinition(ctx, workspaceID, eventhouseID, updateEventhouseDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateEventhouseDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateEventhouseDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateEventhouseDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateEventhouseDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListEventhouses - returns array of Eventhouse from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have a viewer workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListEventhousesOptions contains the optional parameters for the ItemsClient.NewListEventhousesPager method.
func (client *ItemsClient) ListEventhouses(ctx context.Context, workspaceID string, options *ItemsClientListEventhousesOptions) ([]Eventhouse, error) {
	pager := client.NewListEventhousesPager(workspaceID, options)
	mapper := func(resp ItemsClientListEventhousesResponse) []Eventhouse {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Eventhouse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []Eventhouse{}, err
	}
	return list, nil
}
