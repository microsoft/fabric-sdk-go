// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package report

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateReport - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API requires a definition [/rest/api/fabric/articles/item-management/definitions/report-definition].
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Report.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a report item, the user must have the appropriate license. For more information see: Microsoft Fabric license
// types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createReportRequest - Create item request payload.
//   - options - ItemsClientBeginCreateReportOptions contains the optional parameters for the ItemsClient.BeginCreateReport method.
func (client *ItemsClient) BeginCreateReport(ctx context.Context, workspaceID string, createReportRequest CreateReportRequest, options *ItemsClientBeginCreateReportOptions) (*runtime.Poller[ItemsClientCreateReportResponse], error) {
	return client.beginCreateReport(ctx, workspaceID, createReportRequest, options)
}

// CreateReport - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API requires a definition [/rest/api/fabric/articles/item-management/definitions/report-definition].
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Report.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a report item, the user must have the appropriate license. For more information see: Microsoft Fabric license
// types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createReport(ctx context.Context, workspaceID string, createReportRequest CreateReportRequest, options *ItemsClientBeginCreateReportOptions) (*http.Response, error) {
	var err error
	const operationName = "report.ItemsClient.BeginCreateReport"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createReportCreateRequest(ctx, workspaceID, createReportRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createReportCreateRequest creates the CreateReport request.
func (client *ItemsClient) createReportCreateRequest(ctx context.Context, workspaceID string, createReportRequest CreateReportRequest, _ *ItemsClientBeginCreateReportOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/reports"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createReportRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteReport - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Report.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - reportID - The report ID.
//   - options - ItemsClientDeleteReportOptions contains the optional parameters for the ItemsClient.DeleteReport method.
func (client *ItemsClient) DeleteReport(ctx context.Context, workspaceID string, reportID string, options *ItemsClientDeleteReportOptions) (ItemsClientDeleteReportResponse, error) {
	var err error
	const operationName = "report.ItemsClient.DeleteReport"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteReportCreateRequest(ctx, workspaceID, reportID, options)
	if err != nil {
		return ItemsClientDeleteReportResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteReportResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteReportResponse{}, err
	}
	return ItemsClientDeleteReportResponse{}, nil
}

// deleteReportCreateRequest creates the DeleteReport request.
func (client *ItemsClient) deleteReportCreateRequest(ctx context.Context, workspaceID string, reportID string, _ *ItemsClientDeleteReportOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/reports/{reportId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if reportID == "" {
		return nil, errors.New("parameter reportID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reportId}", url.PathEscape(reportID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetReport - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Report.Read.All or Report.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - reportID - The report ID.
//   - options - ItemsClientGetReportOptions contains the optional parameters for the ItemsClient.GetReport method.
func (client *ItemsClient) GetReport(ctx context.Context, workspaceID string, reportID string, options *ItemsClientGetReportOptions) (ItemsClientGetReportResponse, error) {
	var err error
	const operationName = "report.ItemsClient.GetReport"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getReportCreateRequest(ctx, workspaceID, reportID, options)
	if err != nil {
		return ItemsClientGetReportResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetReportResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetReportResponse{}, err
	}
	resp, err := client.getReportHandleResponse(httpResp)
	return resp, err
}

// getReportCreateRequest creates the GetReport request.
func (client *ItemsClient) getReportCreateRequest(ctx context.Context, workspaceID string, reportID string, _ *ItemsClientGetReportOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/reports/{reportId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if reportID == "" {
		return nil, errors.New("parameter reportID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reportId}", url.PathEscape(reportID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getReportHandleResponse handles the GetReport response.
func (client *ItemsClient) getReportHandleResponse(resp *http.Response) (ItemsClientGetReportResponse, error) {
	result := ItemsClientGetReportResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Report); err != nil {
		return ItemsClientGetReportResponse{}, err
	}
	return result, nil
}

// BeginGetReportDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a report's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Report.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS This API is blocked for a report with an encrypted sensitivity label.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - reportID - The report ID.
//   - options - ItemsClientBeginGetReportDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetReportDefinition
//     method.
func (client *ItemsClient) BeginGetReportDefinition(ctx context.Context, workspaceID string, reportID string, options *ItemsClientBeginGetReportDefinitionOptions) (*runtime.Poller[ItemsClientGetReportDefinitionResponse], error) {
	return client.beginGetReportDefinition(ctx, workspaceID, reportID, options)
}

// GetReportDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a report's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Report.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS This API is blocked for a report with an encrypted sensitivity label.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getReportDefinition(ctx context.Context, workspaceID string, reportID string, options *ItemsClientBeginGetReportDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "report.ItemsClient.BeginGetReportDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getReportDefinitionCreateRequest(ctx, workspaceID, reportID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getReportDefinitionCreateRequest creates the GetReportDefinition request.
func (client *ItemsClient) getReportDefinitionCreateRequest(ctx context.Context, workspaceID string, reportID string, options *ItemsClientBeginGetReportDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/reports/{reportId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if reportID == "" {
		return nil, errors.New("parameter reportID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reportId}", url.PathEscape(reportID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("format", *options.Format)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListReportsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListReportsOptions contains the optional parameters for the ItemsClient.NewListReportsPager method.
func (client *ItemsClient) NewListReportsPager(workspaceID string, options *ItemsClientListReportsOptions) *runtime.Pager[ItemsClientListReportsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListReportsResponse]{
		More: func(page ItemsClientListReportsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListReportsResponse) (ItemsClientListReportsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "report.ItemsClient.NewListReportsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listReportsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListReportsResponse{}, err
			}
			return client.listReportsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listReportsCreateRequest creates the ListReports request.
func (client *ItemsClient) listReportsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListReportsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/reports"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listReportsHandleResponse handles the ListReports response.
func (client *ItemsClient) listReportsHandleResponse(resp *http.Response) (ItemsClientListReportsResponse, error) {
	result := ItemsClientListReportsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Reports); err != nil {
		return ItemsClientListReportsResponse{}, err
	}
	return result, nil
}

// UpdateReport - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Report.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - reportID - The report ID.
//   - updateReportRequest - Update report request payload.
//   - options - ItemsClientUpdateReportOptions contains the optional parameters for the ItemsClient.UpdateReport method.
func (client *ItemsClient) UpdateReport(ctx context.Context, workspaceID string, reportID string, updateReportRequest UpdateReportRequest, options *ItemsClientUpdateReportOptions) (ItemsClientUpdateReportResponse, error) {
	var err error
	const operationName = "report.ItemsClient.UpdateReport"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateReportCreateRequest(ctx, workspaceID, reportID, updateReportRequest, options)
	if err != nil {
		return ItemsClientUpdateReportResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateReportResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateReportResponse{}, err
	}
	resp, err := client.updateReportHandleResponse(httpResp)
	return resp, err
}

// updateReportCreateRequest creates the UpdateReport request.
func (client *ItemsClient) updateReportCreateRequest(ctx context.Context, workspaceID string, reportID string, updateReportRequest UpdateReportRequest, _ *ItemsClientUpdateReportOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/reports/{reportId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if reportID == "" {
		return nil, errors.New("parameter reportID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reportId}", url.PathEscape(reportID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateReportRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateReportHandleResponse handles the UpdateReport response.
func (client *ItemsClient) updateReportHandleResponse(resp *http.Response) (ItemsClientUpdateReportResponse, error) {
	result := ItemsClientUpdateReportResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Report); err != nil {
		return ItemsClientUpdateReportResponse{}, err
	}
	return result, nil
}

// BeginUpdateReportDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the report's definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Report.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - reportID - The report ID.
//   - updateReportDefinitionRequest - Update report definition request payload.
//   - options - ItemsClientBeginUpdateReportDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateReportDefinition
//     method.
func (client *ItemsClient) BeginUpdateReportDefinition(ctx context.Context, workspaceID string, reportID string, updateReportDefinitionRequest UpdateReportDefinitionRequest, options *ItemsClientBeginUpdateReportDefinitionOptions) (*runtime.Poller[ItemsClientUpdateReportDefinitionResponse], error) {
	return client.beginUpdateReportDefinition(ctx, workspaceID, reportID, updateReportDefinitionRequest, options)
}

// UpdateReportDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the report's definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Report.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateReportDefinition(ctx context.Context, workspaceID string, reportID string, updateReportDefinitionRequest UpdateReportDefinitionRequest, options *ItemsClientBeginUpdateReportDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "report.ItemsClient.BeginUpdateReportDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateReportDefinitionCreateRequest(ctx, workspaceID, reportID, updateReportDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateReportDefinitionCreateRequest creates the UpdateReportDefinition request.
func (client *ItemsClient) updateReportDefinitionCreateRequest(ctx context.Context, workspaceID string, reportID string, updateReportDefinitionRequest UpdateReportDefinitionRequest, options *ItemsClientBeginUpdateReportDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/reports/{reportId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if reportID == "" {
		return nil, errors.New("parameter reportID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reportId}", url.PathEscape(reportID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateReportDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateReport - returns ItemsClientCreateReportResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// This API requires a definition [/rest/api/fabric/articles/item-management/definitions/report-definition].
//
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Report.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a report item, the user must have the appropriate license. For more information see: Microsoft Fabric license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createReportRequest - Create item request payload.
//   - options - ItemsClientBeginCreateReportOptions contains the optional parameters for the ItemsClient.BeginCreateReport method.
func (client *ItemsClient) CreateReport(ctx context.Context, workspaceID string, createReportRequest CreateReportRequest, options *ItemsClientBeginCreateReportOptions) (ItemsClientCreateReportResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateReport(ctx, workspaceID, createReportRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateReportResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateReportResponse{}, err
	}
	return result, err
}

// beginCreateReport creates the createReport request.
func (client *ItemsClient) beginCreateReport(ctx context.Context, workspaceID string, createReportRequest CreateReportRequest, options *ItemsClientBeginCreateReportOptions) (*runtime.Poller[ItemsClientCreateReportResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createReport(ctx, workspaceID, createReportRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateReportResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateReportResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateReportResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateReportResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetReportDefinition - returns ItemsClientGetReportDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// When you get a report's public definition, the sensitivity label is not a part of the definition.
//
// PERMISSIONS The caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Report.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS This API is blocked for a report with an encrypted sensitivity label.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - reportID - The report ID.
//   - options - ItemsClientBeginGetReportDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetReportDefinition method.
func (client *ItemsClient) GetReportDefinition(ctx context.Context, workspaceID string, reportID string, options *ItemsClientBeginGetReportDefinitionOptions) (ItemsClientGetReportDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetReportDefinition(ctx, workspaceID, reportID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetReportDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetReportDefinitionResponse{}, err
	}
	return result, err
}

// beginGetReportDefinition creates the getReportDefinition request.
func (client *ItemsClient) beginGetReportDefinition(ctx context.Context, workspaceID string, reportID string, options *ItemsClientBeginGetReportDefinitionOptions) (*runtime.Poller[ItemsClientGetReportDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getReportDefinition(ctx, workspaceID, reportID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetReportDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetReportDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetReportDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetReportDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateReportDefinition - returns ItemsClientUpdateReportDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// Updating the report's definition, does not affect its sensitivity label.
//
// PERMISSIONS The API caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Report.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - reportID - The report ID.
//   - updateReportDefinitionRequest - Update report definition request payload.
//   - options - ItemsClientBeginUpdateReportDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateReportDefinition method.
func (client *ItemsClient) UpdateReportDefinition(ctx context.Context, workspaceID string, reportID string, updateReportDefinitionRequest UpdateReportDefinitionRequest, options *ItemsClientBeginUpdateReportDefinitionOptions) (ItemsClientUpdateReportDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateReportDefinition(ctx, workspaceID, reportID, updateReportDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateReportDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateReportDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateReportDefinition creates the updateReportDefinition request.
func (client *ItemsClient) beginUpdateReportDefinition(ctx context.Context, workspaceID string, reportID string, updateReportDefinitionRequest UpdateReportDefinitionRequest, options *ItemsClientBeginUpdateReportDefinitionOptions) (*runtime.Poller[ItemsClientUpdateReportDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateReportDefinition(ctx, workspaceID, reportID, updateReportDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateReportDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateReportDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateReportDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateReportDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListReports - returns array of Report from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListReportsOptions contains the optional parameters for the ItemsClient.NewListReportsPager method.
func (client *ItemsClient) ListReports(ctx context.Context, workspaceID string, options *ItemsClientListReportsOptions) ([]Report, error) {
	pager := client.NewListReportsPager(workspaceID, options)
	mapper := func(resp ItemsClientListReportsResponse) []Report {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Report{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []Report{}, err
	}
	return list, nil
}
