// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package report_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/report"
	"github.com/microsoft/fabric-sdk-go/fabric/report/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *report.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = report.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListReports() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List reports in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := report.Reports{
		Value: []report.Report{
			{
				Type:        to.Ptr(report.ItemTypeReport),
				Description: to.Ptr("A report description."),
				DisplayName: to.Ptr("Report Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListReportsPager = func(workspaceID string, options *report.ItemsClientListReportsOptions) (resp azfake.PagerResponder[report.ItemsClientListReportsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[report.ItemsClientListReportsResponse]{}
		resp.AddPage(http.StatusOK, report.ItemsClientListReportsResponse{Reports: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListReportsPager(exampleWorkspaceID, &report.ItemsClientListReportsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Reports))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateReport() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a report example"},
	})
	var exampleWorkspaceID string
	var exampleCreateReportRequest report.CreateReportRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateReportRequest = report.CreateReportRequest{
		Description: to.Ptr("A report description."),
		Definition: &report.Definition{
			Parts: []report.DefinitionPart{
				{
					Path:        to.Ptr("definition.pbir"),
					Payload:     to.Ptr("ew0KICAidmVyc2lvbiI..sYVN0eWxlTGl2ZSINCiAgICB9DQogIH0NCn0="),
					PayloadType: to.Ptr(report.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("report.json"),
					Payload:     to.Ptr("ewogICJjb25maWciOiA..3aWR0aCI6IDEyODAuMDAKICAgIH0KICBdCn0="),
					PayloadType: to.Ptr(report.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(report.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("Report 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateReport = func(ctx context.Context, workspaceID string, createReportRequest report.CreateReportRequest, options *report.ItemsClientBeginCreateReportOptions) (resp azfake.PollerResponder[report.ItemsClientCreateReportResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateReportRequest, createReportRequest))
		resp = azfake.PollerResponder[report.ItemsClientCreateReportResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, report.ItemsClientCreateReportResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateReport(ctx, exampleWorkspaceID, exampleCreateReportRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetReport() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a report example"},
	})
	var exampleWorkspaceID string
	var exampleReportID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleReportID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := report.Report{
		Type:        to.Ptr(report.ItemTypeReport),
		Description: to.Ptr("A report description."),
		DisplayName: to.Ptr("Report 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetReport = func(ctx context.Context, workspaceID string, reportID string, options *report.ItemsClientGetReportOptions) (resp azfake.Responder[report.ItemsClientGetReportResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleReportID, reportID)
		resp = azfake.Responder[report.ItemsClientGetReportResponse]{}
		resp.SetResponse(http.StatusOK, report.ItemsClientGetReportResponse{Report: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetReport(ctx, exampleWorkspaceID, exampleReportID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Report))
}

func (testsuite *FakeTestSuite) TestItems_UpdateReport() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a report example"},
	})
	var exampleWorkspaceID string
	var exampleReportID string
	var exampleUpdateReportRequest report.UpdateReportRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff211"
	exampleReportID = "5b218778-e7a5-4d73-8187-f10824047721"
	exampleUpdateReportRequest = report.UpdateReportRequest{
		Description: to.Ptr("A new description for report."),
		DisplayName: to.Ptr("Report's New name"),
	}

	exampleRes := report.Report{
		Type:        to.Ptr(report.ItemTypeReport),
		Description: to.Ptr("A new description for report."),
		DisplayName: to.Ptr("Report's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047721"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff211"),
	}

	testsuite.serverFactory.ItemsServer.UpdateReport = func(ctx context.Context, workspaceID string, reportID string, updateReportRequest report.UpdateReportRequest, options *report.ItemsClientUpdateReportOptions) (resp azfake.Responder[report.ItemsClientUpdateReportResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleReportID, reportID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateReportRequest, updateReportRequest))
		resp = azfake.Responder[report.ItemsClientUpdateReportResponse]{}
		resp.SetResponse(http.StatusOK, report.ItemsClientUpdateReportResponse{Report: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateReport(ctx, exampleWorkspaceID, exampleReportID, exampleUpdateReportRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Report))
}

func (testsuite *FakeTestSuite) TestItems_DeleteReport() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a report example"},
	})
	var exampleWorkspaceID string
	var exampleReportID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleReportID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteReport = func(ctx context.Context, workspaceID string, reportID string, options *report.ItemsClientDeleteReportOptions) (resp azfake.Responder[report.ItemsClientDeleteReportResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleReportID, reportID)
		resp = azfake.Responder[report.ItemsClientDeleteReportResponse]{}
		resp.SetResponse(http.StatusOK, report.ItemsClientDeleteReportResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteReport(ctx, exampleWorkspaceID, exampleReportID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetReportDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a report definition example"},
	})
	var exampleWorkspaceID string
	var exampleReportID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleReportID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := report.DefinitionResponse{
		Definition: &report.Definition{
			Parts: []report.DefinitionPart{
				{
					Path:        to.Ptr("report.json"),
					Payload:     to.Ptr("QmFzZTY0U3RyaW5n"),
					PayloadType: to.Ptr(report.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("definition.pbir"),
					Payload:     to.Ptr("QW5vdGhlckJhc2U2NFN0cmluZw"),
					PayloadType: to.Ptr(report.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(report.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetReportDefinition = func(ctx context.Context, workspaceID string, reportID string, options *report.ItemsClientBeginGetReportDefinitionOptions) (resp azfake.PollerResponder[report.ItemsClientGetReportDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleReportID, reportID)
		resp = azfake.PollerResponder[report.ItemsClientGetReportDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, report.ItemsClientGetReportDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetReportDefinition(ctx, exampleWorkspaceID, exampleReportID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateReportDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a report definition example"},
	})
	var exampleWorkspaceID string
	var exampleReportID string
	var exampleUpdateReportDefinitionRequest report.UpdateReportDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleReportID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateReportDefinitionRequest = report.UpdateReportDefinitionRequest{
		Definition: &report.Definition{
			Parts: []report.DefinitionPart{
				{
					Path:        to.Ptr("report.json"),
					Payload:     to.Ptr("QmFzZTY0U3RyaW5n"),
					PayloadType: to.Ptr(report.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("definition.pbir"),
					Payload:     to.Ptr("QW5vdGhlckJhc2U2NFN0cmluZw"),
					PayloadType: to.Ptr(report.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(report.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateReportDefinition = func(ctx context.Context, workspaceID string, reportID string, updateReportDefinitionRequest report.UpdateReportDefinitionRequest, options *report.ItemsClientBeginUpdateReportDefinitionOptions) (resp azfake.PollerResponder[report.ItemsClientUpdateReportDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleReportID, reportID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateReportDefinitionRequest, updateReportDefinitionRequest))
		resp = azfake.PollerResponder[report.ItemsClientUpdateReportDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, report.ItemsClientUpdateReportDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateReportDefinition(ctx, exampleWorkspaceID, exampleReportID, exampleUpdateReportDefinitionRequest, &report.ItemsClientBeginUpdateReportDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}
