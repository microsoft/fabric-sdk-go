// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/report"
)

// ItemsServer is a fake server for instances of the report.ItemsClient type.
type ItemsServer struct {
	// BeginCreateReport is the fake for method ItemsClient.BeginCreateReport
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateReport func(ctx context.Context, workspaceID string, createReportRequest report.CreateReportRequest, options *report.ItemsClientBeginCreateReportOptions) (resp azfake.PollerResponder[report.ItemsClientCreateReportResponse], errResp azfake.ErrorResponder)

	// DeleteReport is the fake for method ItemsClient.DeleteReport
	// HTTP status codes to indicate success: http.StatusOK
	DeleteReport func(ctx context.Context, workspaceID string, reportID string, options *report.ItemsClientDeleteReportOptions) (resp azfake.Responder[report.ItemsClientDeleteReportResponse], errResp azfake.ErrorResponder)

	// GetReport is the fake for method ItemsClient.GetReport
	// HTTP status codes to indicate success: http.StatusOK
	GetReport func(ctx context.Context, workspaceID string, reportID string, options *report.ItemsClientGetReportOptions) (resp azfake.Responder[report.ItemsClientGetReportResponse], errResp azfake.ErrorResponder)

	// BeginGetReportDefinition is the fake for method ItemsClient.BeginGetReportDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetReportDefinition func(ctx context.Context, workspaceID string, reportID string, options *report.ItemsClientBeginGetReportDefinitionOptions) (resp azfake.PollerResponder[report.ItemsClientGetReportDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListReportsPager is the fake for method ItemsClient.NewListReportsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListReportsPager func(workspaceID string, options *report.ItemsClientListReportsOptions) (resp azfake.PagerResponder[report.ItemsClientListReportsResponse])

	// UpdateReport is the fake for method ItemsClient.UpdateReport
	// HTTP status codes to indicate success: http.StatusOK
	UpdateReport func(ctx context.Context, workspaceID string, reportID string, updateReportRequest report.UpdateReportRequest, options *report.ItemsClientUpdateReportOptions) (resp azfake.Responder[report.ItemsClientUpdateReportResponse], errResp azfake.ErrorResponder)

	// BeginUpdateReportDefinition is the fake for method ItemsClient.BeginUpdateReportDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateReportDefinition func(ctx context.Context, workspaceID string, reportID string, updateReportDefinitionRequest report.UpdateReportDefinitionRequest, options *report.ItemsClientBeginUpdateReportDefinitionOptions) (resp azfake.PollerResponder[report.ItemsClientUpdateReportDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of report.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                         srv,
		beginCreateReport:           newTracker[azfake.PollerResponder[report.ItemsClientCreateReportResponse]](),
		beginGetReportDefinition:    newTracker[azfake.PollerResponder[report.ItemsClientGetReportDefinitionResponse]](),
		newListReportsPager:         newTracker[azfake.PagerResponder[report.ItemsClientListReportsResponse]](),
		beginUpdateReportDefinition: newTracker[azfake.PollerResponder[report.ItemsClientUpdateReportDefinitionResponse]](),
	}
}

// ItemsServerTransport connects instances of report.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                         *ItemsServer
	beginCreateReport           *tracker[azfake.PollerResponder[report.ItemsClientCreateReportResponse]]
	beginGetReportDefinition    *tracker[azfake.PollerResponder[report.ItemsClientGetReportDefinitionResponse]]
	newListReportsPager         *tracker[azfake.PagerResponder[report.ItemsClientListReportsResponse]]
	beginUpdateReportDefinition *tracker[azfake.PollerResponder[report.ItemsClientUpdateReportDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateReport":
				res.resp, res.err = i.dispatchBeginCreateReport(req)
			case "ItemsClient.DeleteReport":
				res.resp, res.err = i.dispatchDeleteReport(req)
			case "ItemsClient.GetReport":
				res.resp, res.err = i.dispatchGetReport(req)
			case "ItemsClient.BeginGetReportDefinition":
				res.resp, res.err = i.dispatchBeginGetReportDefinition(req)
			case "ItemsClient.NewListReportsPager":
				res.resp, res.err = i.dispatchNewListReportsPager(req)
			case "ItemsClient.UpdateReport":
				res.resp, res.err = i.dispatchUpdateReport(req)
			case "ItemsClient.BeginUpdateReportDefinition":
				res.resp, res.err = i.dispatchBeginUpdateReportDefinition(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateReport(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateReport == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateReport not implemented")}
	}
	beginCreateReport := i.beginCreateReport.get(req)
	if beginCreateReport == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/reports`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[report.CreateReportRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateReport(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateReport = &respr
		i.beginCreateReport.add(req, beginCreateReport)
	}

	resp, err := server.PollerResponderNext(beginCreateReport, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateReport.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateReport) {
		i.beginCreateReport.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteReport(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteReport == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteReport not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/reports/(?P<reportId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	reportIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("reportId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteReport(req.Context(), workspaceIDParam, reportIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetReport(req *http.Request) (*http.Response, error) {
	if i.srv.GetReport == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetReport not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/reports/(?P<reportId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	reportIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("reportId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetReport(req.Context(), workspaceIDParam, reportIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Report, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginGetReportDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginGetReportDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetReportDefinition not implemented")}
	}
	beginGetReportDefinition := i.beginGetReportDefinition.get(req)
	if beginGetReportDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/reports/(?P<reportId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		reportIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("reportId")])
		if err != nil {
			return nil, err
		}
		formatUnescaped, err := url.QueryUnescape(qp.Get("format"))
		if err != nil {
			return nil, err
		}
		formatParam := getOptional(formatUnescaped)
		var options *report.ItemsClientBeginGetReportDefinitionOptions
		if formatParam != nil {
			options = &report.ItemsClientBeginGetReportDefinitionOptions{
				Format: formatParam,
			}
		}
		respr, errRespr := i.srv.BeginGetReportDefinition(req.Context(), workspaceIDParam, reportIDParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetReportDefinition = &respr
		i.beginGetReportDefinition.add(req, beginGetReportDefinition)
	}

	resp, err := server.PollerResponderNext(beginGetReportDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginGetReportDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetReportDefinition) {
		i.beginGetReportDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListReportsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListReportsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListReportsPager not implemented")}
	}
	newListReportsPager := i.newListReportsPager.get(req)
	if newListReportsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/reports`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *report.ItemsClientListReportsOptions
		if continuationTokenParam != nil {
			options = &report.ItemsClientListReportsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListReportsPager(workspaceIDParam, options)
		newListReportsPager = &resp
		i.newListReportsPager.add(req, newListReportsPager)
		server.PagerResponderInjectNextLinks(newListReportsPager, req, func(page *report.ItemsClientListReportsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListReportsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListReportsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListReportsPager) {
		i.newListReportsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateReport(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateReport == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateReport not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/reports/(?P<reportId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[report.UpdateReportRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	reportIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("reportId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateReport(req.Context(), workspaceIDParam, reportIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Report, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginUpdateReportDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateReportDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateReportDefinition not implemented")}
	}
	beginUpdateReportDefinition := i.beginUpdateReportDefinition.get(req)
	if beginUpdateReportDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/reports/(?P<reportId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[report.UpdateReportDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		reportIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("reportId")])
		if err != nil {
			return nil, err
		}
		updateMetadataUnescaped, err := url.QueryUnescape(qp.Get("updateMetadata"))
		if err != nil {
			return nil, err
		}
		updateMetadataParam, err := parseOptional(updateMetadataUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *report.ItemsClientBeginUpdateReportDefinitionOptions
		if updateMetadataParam != nil {
			options = &report.ItemsClientBeginUpdateReportDefinitionOptions{
				UpdateMetadata: updateMetadataParam,
			}
		}
		respr, errRespr := i.srv.BeginUpdateReportDefinition(req.Context(), workspaceIDParam, reportIDParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateReportDefinition = &respr
		i.beginUpdateReportDefinition.add(req, beginUpdateReportDefinition)
	}

	resp, err := server.PollerResponderNext(beginUpdateReportDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginUpdateReportDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateReportDefinition) {
		i.beginUpdateReportDefinition.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
