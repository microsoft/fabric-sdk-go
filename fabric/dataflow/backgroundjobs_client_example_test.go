// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package dataflow_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"

	"github.com/microsoft/fabric-sdk-go/fabric/dataflow"
)

// Generated from example definition
func ExampleBackgroundJobsClient_ScheduleExecute() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := dataflow.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewBackgroundJobsClient().ScheduleExecute(ctx, "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1", "dddddddd-9999-0000-1111-eeeeeeeeeeee", dataflow.CreateDataflowExecuteScheduleRequest{
		Configuration: &dataflow.CronScheduleConfig{
			Type:            to.Ptr(dataflow.ScheduleTypeCron),
			EndDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-30T23:59:00.000Z"); return t }()),
			LocalTimeZoneID: to.Ptr("Central Standard Time"),
			StartDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-28T00:00:00.000Z"); return t }()),
			Interval:        to.Ptr[int32](10),
		},
		Enabled: to.Ptr(true),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleBackgroundJobsClient_ScheduleApplyChanges() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := dataflow.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewBackgroundJobsClient().ScheduleApplyChanges(ctx, "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1", "dddddddd-9999-0000-1111-eeeeeeeeeeee", dataflow.CreateDataflowApplyChangesScheduleRequest{
		Configuration: &dataflow.CronScheduleConfig{
			Type:            to.Ptr(dataflow.ScheduleTypeCron),
			EndDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-30T23:59:00.000Z"); return t }()),
			LocalTimeZoneID: to.Ptr("Central Standard Time"),
			StartDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-28T00:00:00.000Z"); return t }()),
			Interval:        to.Ptr[int32](10),
		},
		Enabled: to.Ptr(true),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleBackgroundJobsClient_RunOnDemandExecute_runDataflowExecuteJobInstanceWithNoRequestBodyExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := dataflow.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewBackgroundJobsClient().RunOnDemandExecute(ctx, "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1", "dddddddd-9999-0000-1111-eeeeeeeeeeee", "Execute", &dataflow.BackgroundJobsClientRunOnDemandExecuteOptions{RunOnDemandItemJobRequest: nil})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleBackgroundJobsClient_RunOnDemandExecute_runDataflowExecuteJobInstanceWithRequestBodyContainingParametersExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := dataflow.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewBackgroundJobsClient().RunOnDemandExecute(ctx, "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1", "dddddddd-9999-0000-1111-eeeeeeeeeeee", "Execute", &dataflow.BackgroundJobsClientRunOnDemandExecuteOptions{RunOnDemandItemJobRequest: &dataflow.RunOnDemandDataflowExecuteJobRequest{
		ExecutionData: &dataflow.ExecutionPayload{
			ExecuteOption: to.Ptr(dataflow.ExecuteOptionApplyChangesIfNeeded),
			Parameters: []dataflow.ItemJobParameter{
				{
					Type:          to.Ptr(dataflow.TypeAutomatic),
					ParameterName: to.Ptr("OrderKey"),
					Value:         float64(25),
				},
				{
					Type:          to.Ptr(dataflow.TypeAutomatic),
					ParameterName: to.Ptr("Threshold"),
					Value:         "start",
				}},
		},
	},
	})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleBackgroundJobsClient_RunOnDemandApplyChanges() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := dataflow.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewBackgroundJobsClient().RunOnDemandApplyChanges(ctx, "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1", "dddddddd-9999-0000-1111-eeeeeeeeeeee", "ApplyChanges", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}
