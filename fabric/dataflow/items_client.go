// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package dataflow

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateDataflow - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create Dataflow with a public definition, refer to Dataflow [/rest/api/fabric/articles/item-management/definitions/dataflow-definition]
// article.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Dataflow.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a Dataflow the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createDataflowRequest - Create item request payload.
//   - options - ItemsClientBeginCreateDataflowOptions contains the optional parameters for the ItemsClient.BeginCreateDataflow
//     method.
func (client *ItemsClient) BeginCreateDataflow(ctx context.Context, workspaceID string, createDataflowRequest CreateDataflowRequest, options *ItemsClientBeginCreateDataflowOptions) (*runtime.Poller[ItemsClientCreateDataflowResponse], error) {
	return client.beginCreateDataflow(ctx, workspaceID, createDataflowRequest, options)
}

// CreateDataflow - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create Dataflow with a public definition, refer to Dataflow [/rest/api/fabric/articles/item-management/definitions/dataflow-definition]
// article.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Dataflow.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a Dataflow the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric
// license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createDataflow(ctx context.Context, workspaceID string, createDataflowRequest CreateDataflowRequest, options *ItemsClientBeginCreateDataflowOptions) (*http.Response, error) {
	var err error
	const operationName = "dataflow.ItemsClient.BeginCreateDataflow"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createDataflowCreateRequest(ctx, workspaceID, createDataflowRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createDataflowCreateRequest creates the CreateDataflow request.
func (client *ItemsClient) createDataflowCreateRequest(ctx context.Context, workspaceID string, createDataflowRequest CreateDataflowRequest, _ *ItemsClientBeginCreateDataflowOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/dataflows"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createDataflowRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteDataflow - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Dataflow.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - dataflowID - The Dataflow ID.
//   - options - ItemsClientDeleteDataflowOptions contains the optional parameters for the ItemsClient.DeleteDataflow method.
func (client *ItemsClient) DeleteDataflow(ctx context.Context, workspaceID string, dataflowID string, options *ItemsClientDeleteDataflowOptions) (ItemsClientDeleteDataflowResponse, error) {
	var err error
	const operationName = "dataflow.ItemsClient.DeleteDataflow"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteDataflowCreateRequest(ctx, workspaceID, dataflowID, options)
	if err != nil {
		return ItemsClientDeleteDataflowResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteDataflowResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteDataflowResponse{}, err
	}
	return ItemsClientDeleteDataflowResponse{}, nil
}

// deleteDataflowCreateRequest creates the DeleteDataflow request.
func (client *ItemsClient) deleteDataflowCreateRequest(ctx context.Context, workspaceID string, dataflowID string, _ *ItemsClientDeleteDataflowOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/dataflows/{dataflowId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if dataflowID == "" {
		return nil, errors.New("parameter dataflowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowId}", url.PathEscape(dataflowID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetDataflow - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Dataflow.Read.All or Dataflow.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - dataflowID - The Dataflow ID.
//   - options - ItemsClientGetDataflowOptions contains the optional parameters for the ItemsClient.GetDataflow method.
func (client *ItemsClient) GetDataflow(ctx context.Context, workspaceID string, dataflowID string, options *ItemsClientGetDataflowOptions) (ItemsClientGetDataflowResponse, error) {
	var err error
	const operationName = "dataflow.ItemsClient.GetDataflow"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDataflowCreateRequest(ctx, workspaceID, dataflowID, options)
	if err != nil {
		return ItemsClientGetDataflowResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetDataflowResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetDataflowResponse{}, err
	}
	resp, err := client.getDataflowHandleResponse(httpResp)
	return resp, err
}

// getDataflowCreateRequest creates the GetDataflow request.
func (client *ItemsClient) getDataflowCreateRequest(ctx context.Context, workspaceID string, dataflowID string, _ *ItemsClientGetDataflowOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/dataflows/{dataflowId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if dataflowID == "" {
		return nil, errors.New("parameter dataflowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowId}", url.PathEscape(dataflowID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDataflowHandleResponse handles the GetDataflow response.
func (client *ItemsClient) getDataflowHandleResponse(resp *http.Response) (ItemsClientGetDataflowResponse, error) {
	result := ItemsClientGetDataflowResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Dataflow); err != nil {
		return ItemsClientGetDataflowResponse{}, err
	}
	return result, nil
}

// BeginGetDataflowDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a Dataflow's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Dataflow.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - dataflowID - The Dataflow ID.
//   - options - ItemsClientBeginGetDataflowDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetDataflowDefinition
//     method.
func (client *ItemsClient) BeginGetDataflowDefinition(ctx context.Context, workspaceID string, dataflowID string, options *ItemsClientBeginGetDataflowDefinitionOptions) (*runtime.Poller[ItemsClientGetDataflowDefinitionResponse], error) {
	return client.beginGetDataflowDefinition(ctx, workspaceID, dataflowID, options)
}

// GetDataflowDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a Dataflow's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Dataflow.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getDataflowDefinition(ctx context.Context, workspaceID string, dataflowID string, options *ItemsClientBeginGetDataflowDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "dataflow.ItemsClient.BeginGetDataflowDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDataflowDefinitionCreateRequest(ctx, workspaceID, dataflowID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getDataflowDefinitionCreateRequest creates the GetDataflowDefinition request.
func (client *ItemsClient) getDataflowDefinitionCreateRequest(ctx context.Context, workspaceID string, dataflowID string, _ *ItemsClientBeginGetDataflowDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/dataflows/{dataflowId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if dataflowID == "" {
		return nil, errors.New("parameter dataflowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowId}", url.PathEscape(dataflowID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListDataflowsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListDataflowsOptions contains the optional parameters for the ItemsClient.NewListDataflowsPager method.
func (client *ItemsClient) NewListDataflowsPager(workspaceID string, options *ItemsClientListDataflowsOptions) *runtime.Pager[ItemsClientListDataflowsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListDataflowsResponse]{
		More: func(page ItemsClientListDataflowsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListDataflowsResponse) (ItemsClientListDataflowsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "dataflow.ItemsClient.NewListDataflowsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listDataflowsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListDataflowsResponse{}, err
			}
			return client.listDataflowsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listDataflowsCreateRequest creates the ListDataflows request.
func (client *ItemsClient) listDataflowsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListDataflowsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/dataflows"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listDataflowsHandleResponse handles the ListDataflows response.
func (client *ItemsClient) listDataflowsHandleResponse(resp *http.Response) (ItemsClientListDataflowsResponse, error) {
	result := ItemsClientListDataflowsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Dataflows); err != nil {
		return ItemsClientListDataflowsResponse{}, err
	}
	return result, nil
}

// UpdateDataflow - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Dataflow.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - dataflowID - The Dataflow ID.
//   - updateDataflowRequest - Update Dataflow request payload.
//   - options - ItemsClientUpdateDataflowOptions contains the optional parameters for the ItemsClient.UpdateDataflow method.
func (client *ItemsClient) UpdateDataflow(ctx context.Context, workspaceID string, dataflowID string, updateDataflowRequest UpdateDataflowRequest, options *ItemsClientUpdateDataflowOptions) (ItemsClientUpdateDataflowResponse, error) {
	var err error
	const operationName = "dataflow.ItemsClient.UpdateDataflow"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateDataflowCreateRequest(ctx, workspaceID, dataflowID, updateDataflowRequest, options)
	if err != nil {
		return ItemsClientUpdateDataflowResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateDataflowResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateDataflowResponse{}, err
	}
	resp, err := client.updateDataflowHandleResponse(httpResp)
	return resp, err
}

// updateDataflowCreateRequest creates the UpdateDataflow request.
func (client *ItemsClient) updateDataflowCreateRequest(ctx context.Context, workspaceID string, dataflowID string, updateDataflowRequest UpdateDataflowRequest, _ *ItemsClientUpdateDataflowOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/dataflows/{dataflowId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if dataflowID == "" {
		return nil, errors.New("parameter dataflowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowId}", url.PathEscape(dataflowID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateDataflowRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateDataflowHandleResponse handles the UpdateDataflow response.
func (client *ItemsClient) updateDataflowHandleResponse(resp *http.Response) (ItemsClientUpdateDataflowResponse, error) {
	result := ItemsClientUpdateDataflowResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Dataflow); err != nil {
		return ItemsClientUpdateDataflowResponse{}, err
	}
	return result, nil
}

// BeginUpdateDataflowDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the Dataflow's definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Dataflow.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - dataflowID - The Dataflow ID.
//   - updateDataflowDefinitionRequest - Update Dataflow definition request payload.
//   - options - ItemsClientBeginUpdateDataflowDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateDataflowDefinition
//     method.
func (client *ItemsClient) BeginUpdateDataflowDefinition(ctx context.Context, workspaceID string, dataflowID string, updateDataflowDefinitionRequest UpdateDataflowDefinitionRequest, options *ItemsClientBeginUpdateDataflowDefinitionOptions) (*runtime.Poller[ItemsClientUpdateDataflowDefinitionResponse], error) {
	return client.beginUpdateDataflowDefinition(ctx, workspaceID, dataflowID, updateDataflowDefinitionRequest, options)
}

// UpdateDataflowDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the Dataflow's definition, does not affect its sensitivity label.
// PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Dataflow.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateDataflowDefinition(ctx context.Context, workspaceID string, dataflowID string, updateDataflowDefinitionRequest UpdateDataflowDefinitionRequest, options *ItemsClientBeginUpdateDataflowDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "dataflow.ItemsClient.BeginUpdateDataflowDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateDataflowDefinitionCreateRequest(ctx, workspaceID, dataflowID, updateDataflowDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateDataflowDefinitionCreateRequest creates the UpdateDataflowDefinition request.
func (client *ItemsClient) updateDataflowDefinitionCreateRequest(ctx context.Context, workspaceID string, dataflowID string, updateDataflowDefinitionRequest UpdateDataflowDefinitionRequest, options *ItemsClientBeginUpdateDataflowDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/dataflows/{dataflowId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if dataflowID == "" {
		return nil, errors.New("parameter dataflowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowId}", url.PathEscape(dataflowID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateDataflowDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateDataflow - returns ItemsClientCreateDataflowResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// To create Dataflow with a public definition, refer to Dataflow [/rest/api/fabric/articles/item-management/definitions/dataflow-definition] article.
//
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Dataflow.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a Dataflow the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createDataflowRequest - Create item request payload.
//   - options - ItemsClientBeginCreateDataflowOptions contains the optional parameters for the ItemsClient.BeginCreateDataflow method.
func (client *ItemsClient) CreateDataflow(ctx context.Context, workspaceID string, createDataflowRequest CreateDataflowRequest, options *ItemsClientBeginCreateDataflowOptions) (ItemsClientCreateDataflowResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateDataflow(ctx, workspaceID, createDataflowRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateDataflowResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateDataflowResponse{}, err
	}
	return result, err
}

// beginCreateDataflow creates the createDataflow request.
func (client *ItemsClient) beginCreateDataflow(ctx context.Context, workspaceID string, createDataflowRequest CreateDataflowRequest, options *ItemsClientBeginCreateDataflowOptions) (*runtime.Poller[ItemsClientCreateDataflowResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createDataflow(ctx, workspaceID, createDataflowRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateDataflowResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateDataflowResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateDataflowResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateDataflowResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetDataflowDefinition - returns ItemsClientGetDataflowDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// When you get a Dataflow's public definition, the sensitivity label is not a part of the definition.
//
// PERMISSIONS The caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Dataflow.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - dataflowID - The Dataflow ID.
//   - options - ItemsClientBeginGetDataflowDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetDataflowDefinition method.
func (client *ItemsClient) GetDataflowDefinition(ctx context.Context, workspaceID string, dataflowID string, options *ItemsClientBeginGetDataflowDefinitionOptions) (ItemsClientGetDataflowDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetDataflowDefinition(ctx, workspaceID, dataflowID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetDataflowDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetDataflowDefinitionResponse{}, err
	}
	return result, err
}

// beginGetDataflowDefinition creates the getDataflowDefinition request.
func (client *ItemsClient) beginGetDataflowDefinition(ctx context.Context, workspaceID string, dataflowID string, options *ItemsClientBeginGetDataflowDefinitionOptions) (*runtime.Poller[ItemsClientGetDataflowDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getDataflowDefinition(ctx, workspaceID, dataflowID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetDataflowDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetDataflowDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetDataflowDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetDataflowDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateDataflowDefinition - returns ItemsClientUpdateDataflowDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// Updating the Dataflow's definition, does not affect its sensitivity label.
//
// PERMISSIONS The API caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Dataflow.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - dataflowID - The Dataflow ID.
//   - updateDataflowDefinitionRequest - Update Dataflow definition request payload.
//   - options - ItemsClientBeginUpdateDataflowDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateDataflowDefinition method.
func (client *ItemsClient) UpdateDataflowDefinition(ctx context.Context, workspaceID string, dataflowID string, updateDataflowDefinitionRequest UpdateDataflowDefinitionRequest, options *ItemsClientBeginUpdateDataflowDefinitionOptions) (ItemsClientUpdateDataflowDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateDataflowDefinition(ctx, workspaceID, dataflowID, updateDataflowDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateDataflowDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateDataflowDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateDataflowDefinition creates the updateDataflowDefinition request.
func (client *ItemsClient) beginUpdateDataflowDefinition(ctx context.Context, workspaceID string, dataflowID string, updateDataflowDefinitionRequest UpdateDataflowDefinitionRequest, options *ItemsClientBeginUpdateDataflowDefinitionOptions) (*runtime.Poller[ItemsClientUpdateDataflowDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateDataflowDefinition(ctx, workspaceID, dataflowID, updateDataflowDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateDataflowDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateDataflowDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateDataflowDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateDataflowDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListDataflows - returns array of Dataflow from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListDataflowsOptions contains the optional parameters for the ItemsClient.NewListDataflowsPager method.
func (client *ItemsClient) ListDataflows(ctx context.Context, workspaceID string, options *ItemsClientListDataflowsOptions) ([]Dataflow, error) {
	pager := client.NewListDataflowsPager(workspaceID, options)
	mapper := func(resp ItemsClientListDataflowsResponse) []Dataflow {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Dataflow{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []Dataflow{}, err
	}
	return list, nil
}
