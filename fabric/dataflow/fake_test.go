// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package dataflow_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/dataflow"
	"github.com/microsoft/fabric-sdk-go/fabric/dataflow/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *dataflow.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = dataflow.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListDataflows() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Dataflows in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := dataflow.Dataflows{
		Value: []dataflow.Dataflow{
			{
				Type:        to.Ptr(dataflow.ItemTypeDataflow),
				Description: to.Ptr("A Dataflow description."),
				DisplayName: to.Ptr("TestDataflow"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(dataflow.ItemTypeDataflow),
				Description: to.Ptr("A Dataflow description."),
				DisplayName: to.Ptr("TestDataflow"),
				ID:          to.Ptr("f697fb63-abd4-4399-9548-be7e3c3c0dac"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListDataflowsPager = func(workspaceID string, options *dataflow.ItemsClientListDataflowsOptions) (resp azfake.PagerResponder[dataflow.ItemsClientListDataflowsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[dataflow.ItemsClientListDataflowsResponse]{}
		resp.AddPage(http.StatusOK, dataflow.ItemsClientListDataflowsResponse{Dataflows: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListDataflowsPager(exampleWorkspaceID, &dataflow.ItemsClientListDataflowsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Dataflows))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateDataflow() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a Dataflow example"},
	})
	var exampleWorkspaceID string
	var exampleCreateDataflowRequest dataflow.CreateDataflowRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateDataflowRequest = dataflow.CreateDataflowRequest{
		Description: to.Ptr("A Dataflow description."),
		DisplayName: to.Ptr("TestDataflow"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateDataflow = func(ctx context.Context, workspaceID string, createDataflowRequest dataflow.CreateDataflowRequest, options *dataflow.ItemsClientBeginCreateDataflowOptions) (resp azfake.PollerResponder[dataflow.ItemsClientCreateDataflowResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateDataflowRequest, createDataflowRequest))
		resp = azfake.PollerResponder[dataflow.ItemsClientCreateDataflowResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, dataflow.ItemsClientCreateDataflowResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateDataflow(ctx, exampleWorkspaceID, exampleCreateDataflowRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a Dataflow with public definition example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateDataflowRequest = dataflow.CreateDataflowRequest{
		Description: to.Ptr("A Dataflow description."),
		Definition: &dataflow.Definition{
			Parts: []dataflow.DefinitionPart{
				{
					Path:        to.Ptr("queryMetadata.json"),
					Payload:     to.Ptr("ewogICJmb3JtYXRWZXJzaW9uIjogIjIwMjUwMiIsCiAgImNvbXB1dGVFbmdpbmVTZXR0aW5ncyI6IHt9LAogICJuYW1lIjogIlRlc3REYXRhZmxvdyIsCiAgInF1ZXJ5R3JvdXBzIjogW10sCiAgImRvY3VtZW50TG9jYWxlIjogImVuLVVTIiwKICAicXVlcmllc01ldGFkYXRhIjogewogICAgInF1ZXJ5IjogewogICAgICAicXVlcnlJZCI6ICJiZTE3MjEwZi01YWNhLTQyMWEtOGMwYS1iZjYzMTQ4N2JiOGUiLAogICAgICAicXVlcnlOYW1lIjogIlF1ZXJ5IgogICAgfQogIH0sCiAgImNvbm5lY3Rpb25zIjogW10KfQ=="),
					PayloadType: to.Ptr(dataflow.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("mashup.pq"),
					Payload:     to.Ptr("W1N0YWdpbmdEZWZpbml0aW9uID0gW0tpbmQgPSAiRmFzdENvcHkiXV0Kc2VjdGlvbiBTZWN0aW9uMTsKc2hhcmVkIFF1ZXJ5ID0gbGV0CiAgU291cmNlID0gVGFibGUuRnJvbVJvd3MoSnNvbi5Eb2N1bWVudChCaW5hcnkuRGVjb21wcmVzcyhCaW5hcnkuRnJvbVRleHQoImk0NVdNbFRTVVhMT3p5bk56VE9LUjdDTmdleFluV2dsSXlSWkl5UlpJNlhZV0FBPSIsIEJpbmFyeUVuY29kaW5nLkJhc2U2NCksIENvbXByZXNzaW9uLkRlZmxhdGUpKSwgbGV0IF90ID0gKCh0eXBlIG51bGxhYmxlIHRleHQpIG1ldGEgW1NlcmlhbGl6ZWQuVGV4dCA9IHRydWVdKSBpbiB0eXBlIHRhYmxlIFtDb2x1bW4xID0gX3QsIENvbHVtbjIgPSBfdCwgQ29sdW1uMyA9IF90XSksCiAgIyJDaGFuZ2VkIGNvbHVtbiB0eXBlIiA9IFRhYmxlLlRyYW5zZm9ybUNvbHVtblR5cGVzKFNvdXJjZSwge3siQ29sdW1uMSIsIEludDY0LlR5cGV9LCB7IkNvbHVtbjIiLCB0eXBlIHRleHR9LCB7IkNvbHVtbjMiLCB0eXBlIHRleHR9fSkKaW4KICAjIkNoYW5nZWQgY29sdW1uIHR5cGUiOwo="),
					PayloadType: to.Ptr(dataflow.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFmbG93IiwKICAgICJkaXNwbGF5TmFtZSI6ICJUZXN0RGF0YWZsb3ciCiAgfSwKICAiY29uZmlnIjogewogICAgInZlcnNpb24iOiAiMi4wIiwKICAgICJsb2dpY2FsSWQiOiAiZjU4ZDJmODMtYTMwMC1iMTM1LTQ3ODgtMDU5NjgzY2Q1NzFjIgogIH0KfQ=="),
					PayloadType: to.Ptr(dataflow.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("TestDataflow"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateDataflow = func(ctx context.Context, workspaceID string, createDataflowRequest dataflow.CreateDataflowRequest, options *dataflow.ItemsClientBeginCreateDataflowOptions) (resp azfake.PollerResponder[dataflow.ItemsClientCreateDataflowResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateDataflowRequest, createDataflowRequest))
		resp = azfake.PollerResponder[dataflow.ItemsClientCreateDataflowResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, dataflow.ItemsClientCreateDataflowResponse{}, nil)
		return
	}

	poller, err = client.BeginCreateDataflow(ctx, exampleWorkspaceID, exampleCreateDataflowRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetDataflow() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a Dataflow example"},
	})
	var exampleWorkspaceID string
	var exampleDataflowID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleDataflowID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := dataflow.Dataflow{
		Type:        to.Ptr(dataflow.ItemTypeDataflow),
		Description: to.Ptr("A Dataflow description."),
		DisplayName: to.Ptr("TestDataflow"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetDataflow = func(ctx context.Context, workspaceID string, dataflowID string, options *dataflow.ItemsClientGetDataflowOptions) (resp azfake.Responder[dataflow.ItemsClientGetDataflowResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDataflowID, dataflowID)
		resp = azfake.Responder[dataflow.ItemsClientGetDataflowResponse]{}
		resp.SetResponse(http.StatusOK, dataflow.ItemsClientGetDataflowResponse{Dataflow: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetDataflow(ctx, exampleWorkspaceID, exampleDataflowID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Dataflow))
}

func (testsuite *FakeTestSuite) TestItems_UpdateDataflow() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a Dataflow example"},
	})
	var exampleWorkspaceID string
	var exampleDataflowID string
	var exampleUpdateDataflowRequest dataflow.UpdateDataflowRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleDataflowID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateDataflowRequest = dataflow.UpdateDataflowRequest{
		Description: to.Ptr("Dataflow's New description"),
		DisplayName: to.Ptr("Dataflow's New name"),
	}

	exampleRes := dataflow.Dataflow{
		Type:        to.Ptr(dataflow.ItemTypeDataflow),
		Description: to.Ptr("Dataflow's New description"),
		DisplayName: to.Ptr("Dataflow's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateDataflow = func(ctx context.Context, workspaceID string, dataflowID string, updateDataflowRequest dataflow.UpdateDataflowRequest, options *dataflow.ItemsClientUpdateDataflowOptions) (resp azfake.Responder[dataflow.ItemsClientUpdateDataflowResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDataflowID, dataflowID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateDataflowRequest, updateDataflowRequest))
		resp = azfake.Responder[dataflow.ItemsClientUpdateDataflowResponse]{}
		resp.SetResponse(http.StatusOK, dataflow.ItemsClientUpdateDataflowResponse{Dataflow: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateDataflow(ctx, exampleWorkspaceID, exampleDataflowID, exampleUpdateDataflowRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Dataflow))
}

func (testsuite *FakeTestSuite) TestItems_DeleteDataflow() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a Dataflow example"},
	})
	var exampleWorkspaceID string
	var exampleDataflowID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleDataflowID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteDataflow = func(ctx context.Context, workspaceID string, dataflowID string, options *dataflow.ItemsClientDeleteDataflowOptions) (resp azfake.Responder[dataflow.ItemsClientDeleteDataflowResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDataflowID, dataflowID)
		resp = azfake.Responder[dataflow.ItemsClientDeleteDataflowResponse]{}
		resp.SetResponse(http.StatusOK, dataflow.ItemsClientDeleteDataflowResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteDataflow(ctx, exampleWorkspaceID, exampleDataflowID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetDataflowDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a Dataflow public definition example"},
	})
	var exampleWorkspaceID string
	var exampleDataflowID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleDataflowID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := dataflow.DefinitionResponse{
		Definition: &dataflow.Definition{
			Parts: []dataflow.DefinitionPart{
				{
					Path:        to.Ptr("queryMetadata.json"),
					Payload:     to.Ptr("ewogICJmb3JtYXRWZXJzaW9uIjogIjIwMjUwMiIsCiAgImNvbXB1dGVFbmdpbmVTZXR0aW5ncyI6IHt9LAogICJuYW1lIjogIlRlc3REYXRhZmxvdyIsCiAgInF1ZXJ5R3JvdXBzIjogW10sCiAgImRvY3VtZW50TG9jYWxlIjogImVuLVVTIiwKICAicXVlcmllc01ldGFkYXRhIjogewogICAgInF1ZXJ5IjogewogICAgICAicXVlcnlJZCI6ICJiZTE3MjEwZi01YWNhLTQyMWEtOGMwYS1iZjYzMTQ4N2JiOGUiLAogICAgICAicXVlcnlOYW1lIjogIlF1ZXJ5IgogICAgfQogIH0sCiAgImNvbm5lY3Rpb25zIjogW10KfQ=="),
					PayloadType: to.Ptr(dataflow.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("mashup.pq"),
					Payload:     to.Ptr("W1N0YWdpbmdEZWZpbml0aW9uID0gW0tpbmQgPSAiRmFzdENvcHkiXV0Kc2VjdGlvbiBTZWN0aW9uMTsKc2hhcmVkIFF1ZXJ5ID0gbGV0CiAgU291cmNlID0gVGFibGUuRnJvbVJvd3MoSnNvbi5Eb2N1bWVudChCaW5hcnkuRGVjb21wcmVzcyhCaW5hcnkuRnJvbVRleHQoImk0NVdNbFRTVVhMT3p5bk56VE9LUjdDTmdleFluV2dsSXlSWkl5UlpJNlhZV0FBPSIsIEJpbmFyeUVuY29kaW5nLkJhc2U2NCksIENvbXByZXNzaW9uLkRlZmxhdGUpKSwgbGV0IF90ID0gKCh0eXBlIG51bGxhYmxlIHRleHQpIG1ldGEgW1NlcmlhbGl6ZWQuVGV4dCA9IHRydWVdKSBpbiB0eXBlIHRhYmxlIFtDb2x1bW4xID0gX3QsIENvbHVtbjIgPSBfdCwgQ29sdW1uMyA9IF90XSksCiAgIyJDaGFuZ2VkIGNvbHVtbiB0eXBlIiA9IFRhYmxlLlRyYW5zZm9ybUNvbHVtblR5cGVzKFNvdXJjZSwge3siQ29sdW1uMSIsIEludDY0LlR5cGV9LCB7IkNvbHVtbjIiLCB0eXBlIHRleHR9LCB7IkNvbHVtbjMiLCB0eXBlIHRleHR9fSkKaW4KICAjIkNoYW5nZWQgY29sdW1uIHR5cGUiOwo="),
					PayloadType: to.Ptr(dataflow.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFmbG93IiwKICAgICJkaXNwbGF5TmFtZSI6ICJUZXN0RGF0YWZsb3ciCiAgfSwKICAiY29uZmlnIjogewogICAgInZlcnNpb24iOiAiMi4wIiwKICAgICJsb2dpY2FsSWQiOiAiZjU4ZDJmODMtYTMwMC1iMTM1LTQ3ODgtMDU5NjgzY2Q1NzFjIgogIH0KfQ=="),
					PayloadType: to.Ptr(dataflow.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetDataflowDefinition = func(ctx context.Context, workspaceID string, dataflowID string, options *dataflow.ItemsClientBeginGetDataflowDefinitionOptions) (resp azfake.PollerResponder[dataflow.ItemsClientGetDataflowDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDataflowID, dataflowID)
		resp = azfake.PollerResponder[dataflow.ItemsClientGetDataflowDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, dataflow.ItemsClientGetDataflowDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetDataflowDefinition(ctx, exampleWorkspaceID, exampleDataflowID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateDataflowDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a Dataflow public definition example"},
	})
	var exampleWorkspaceID string
	var exampleDataflowID string
	var exampleUpdateDataflowDefinitionRequest dataflow.UpdateDataflowDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleDataflowID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateDataflowDefinitionRequest = dataflow.UpdateDataflowDefinitionRequest{
		Definition: &dataflow.Definition{
			Parts: []dataflow.DefinitionPart{
				{
					Path:        to.Ptr("queryMetadata.json"),
					Payload:     to.Ptr("ewogICJmb3JtYXRWZXJzaW9uIjogIjIwMjUwMiIsCiAgImNvbXB1dGVFbmdpbmVTZXR0aW5ncyI6IHt9LAogICJuYW1lIjogIlRlc3REYXRhZmxvdyIsCiAgInF1ZXJ5R3JvdXBzIjogW10sCiAgImRvY3VtZW50TG9jYWxlIjogImVuLVVTIiwKICAicXVlcmllc01ldGFkYXRhIjogewogICAgInF1ZXJ5IjogewogICAgICAicXVlcnlJZCI6ICJiZTE3MjEwZi01YWNhLTQyMWEtOGMwYS1iZjYzMTQ4N2JiOGUiLAogICAgICAicXVlcnlOYW1lIjogIlF1ZXJ5IgogICAgfQogIH0sCiAgImNvbm5lY3Rpb25zIjogW10KfQ=="),
					PayloadType: to.Ptr(dataflow.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("mashup.pq"),
					Payload:     to.Ptr("W1N0YWdpbmdEZWZpbml0aW9uID0gW0tpbmQgPSAiRmFzdENvcHkiXV0Kc2VjdGlvbiBTZWN0aW9uMTsKc2hhcmVkIFF1ZXJ5ID0gbGV0CiAgU291cmNlID0gVGFibGUuRnJvbVJvd3MoSnNvbi5Eb2N1bWVudChCaW5hcnkuRGVjb21wcmVzcyhCaW5hcnkuRnJvbVRleHQoImk0NVdNbFRTVVhMT3p5bk56VE9LUjdDTmdleFluV2dsSXlSWkl5UlpJNlhZV0FBPSIsIEJpbmFyeUVuY29kaW5nLkJhc2U2NCksIENvbXByZXNzaW9uLkRlZmxhdGUpKSwgbGV0IF90ID0gKCh0eXBlIG51bGxhYmxlIHRleHQpIG1ldGEgW1NlcmlhbGl6ZWQuVGV4dCA9IHRydWVdKSBpbiB0eXBlIHRhYmxlIFtDb2x1bW4xID0gX3QsIENvbHVtbjIgPSBfdCwgQ29sdW1uMyA9IF90XSksCiAgIyJDaGFuZ2VkIGNvbHVtbiB0eXBlIiA9IFRhYmxlLlRyYW5zZm9ybUNvbHVtblR5cGVzKFNvdXJjZSwge3siQ29sdW1uMSIsIEludDY0LlR5cGV9LCB7IkNvbHVtbjIiLCB0eXBlIHRleHR9LCB7IkNvbHVtbjMiLCB0eXBlIHRleHR9fSkKaW4KICAjIkNoYW5nZWQgY29sdW1uIHR5cGUiOwo="),
					PayloadType: to.Ptr(dataflow.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFmbG93IiwKICAgICJkaXNwbGF5TmFtZSI6ICJUZXN0RGF0YWZsb3ciCiAgfSwKICAiY29uZmlnIjogewogICAgInZlcnNpb24iOiAiMi4wIiwKICAgICJsb2dpY2FsSWQiOiAiZjU4ZDJmODMtYTMwMC1iMTM1LTQ3ODgtMDU5NjgzY2Q1NzFjIgogIH0KfQ=="),
					PayloadType: to.Ptr(dataflow.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateDataflowDefinition = func(ctx context.Context, workspaceID string, dataflowID string, updateDataflowDefinitionRequest dataflow.UpdateDataflowDefinitionRequest, options *dataflow.ItemsClientBeginUpdateDataflowDefinitionOptions) (resp azfake.PollerResponder[dataflow.ItemsClientUpdateDataflowDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDataflowID, dataflowID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateDataflowDefinitionRequest, updateDataflowDefinitionRequest))
		resp = azfake.PollerResponder[dataflow.ItemsClientUpdateDataflowDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, dataflow.ItemsClientUpdateDataflowDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateDataflowDefinition(ctx, exampleWorkspaceID, exampleDataflowID, exampleUpdateDataflowDefinitionRequest, &dataflow.ItemsClientBeginUpdateDataflowDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}
