// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package dataflow

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// BackgroundJobsClient contains the methods for the BackgroundJobs group.
// Don't use this type directly, use a constructor function instead.
type BackgroundJobsClient struct {
	internal *azcore.Client
	endpoint string
}

// RunOnDemandApplyChanges - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development
// purposes only. It may change based on feedback and is not recommended for production use.
// REQUIRED DELEGATED SCOPES For dataflows APIs use these scope types:
// * Specific scope: Dataflow.Execute.All
//
// for more information about scopes, see: scopes article [/rest/api/fabric/articles/scopes].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - dataflowID - The dataflow ID.
//   - jobType - ApplyChanges job type.
//   - options - BackgroundJobsClientRunOnDemandApplyChangesOptions contains the optional parameters for the BackgroundJobsClient.RunOnDemandApplyChanges
//     method.
func (client *BackgroundJobsClient) RunOnDemandApplyChanges(ctx context.Context, workspaceID string, dataflowID string, jobType string, options *BackgroundJobsClientRunOnDemandApplyChangesOptions) (BackgroundJobsClientRunOnDemandApplyChangesResponse, error) {
	var err error
	const operationName = "dataflow.BackgroundJobsClient.RunOnDemandApplyChanges"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.runOnDemandApplyChangesCreateRequest(ctx, workspaceID, dataflowID, jobType, options)
	if err != nil {
		return BackgroundJobsClientRunOnDemandApplyChangesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BackgroundJobsClientRunOnDemandApplyChangesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return BackgroundJobsClientRunOnDemandApplyChangesResponse{}, err
	}
	resp, err := client.runOnDemandApplyChangesHandleResponse(httpResp)
	return resp, err
}

// runOnDemandApplyChangesCreateRequest creates the RunOnDemandApplyChanges request.
func (client *BackgroundJobsClient) runOnDemandApplyChangesCreateRequest(ctx context.Context, workspaceID string, dataflowID string, jobType string, _ *BackgroundJobsClientRunOnDemandApplyChangesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/dataflows/{dataflowId}/jobs/instances"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if dataflowID == "" {
		return nil, errors.New("parameter dataflowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowId}", url.PathEscape(dataflowID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("jobType", jobType)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// runOnDemandApplyChangesHandleResponse handles the RunOnDemandApplyChanges response.
func (client *BackgroundJobsClient) runOnDemandApplyChangesHandleResponse(resp *http.Response) (BackgroundJobsClientRunOnDemandApplyChangesResponse, error) {
	result := BackgroundJobsClientRunOnDemandApplyChangesResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return BackgroundJobsClientRunOnDemandApplyChangesResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	return result, nil
}

// RunOnDemandExecute - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes
// only. It may change based on feedback and is not recommended for production use.
// REQUIRED DELEGATED SCOPES For dataflows APIs use these scope types:
// * Specific scope: Dataflow.Execute.All
//
// for more information about scopes, see: scopes article [/rest/api/fabric/articles/scopes].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - dataflowID - The dataflow ID.
//   - jobType - Execute job type. Refresh can also be used as an alias for Execute.
//   - options - BackgroundJobsClientRunOnDemandExecuteOptions contains the optional parameters for the BackgroundJobsClient.RunOnDemandExecute
//     method.
func (client *BackgroundJobsClient) RunOnDemandExecute(ctx context.Context, workspaceID string, dataflowID string, jobType string, options *BackgroundJobsClientRunOnDemandExecuteOptions) (BackgroundJobsClientRunOnDemandExecuteResponse, error) {
	var err error
	const operationName = "dataflow.BackgroundJobsClient.RunOnDemandExecute"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.runOnDemandExecuteCreateRequest(ctx, workspaceID, dataflowID, jobType, options)
	if err != nil {
		return BackgroundJobsClientRunOnDemandExecuteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BackgroundJobsClientRunOnDemandExecuteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return BackgroundJobsClientRunOnDemandExecuteResponse{}, err
	}
	resp, err := client.runOnDemandExecuteHandleResponse(httpResp)
	return resp, err
}

// runOnDemandExecuteCreateRequest creates the RunOnDemandExecute request.
func (client *BackgroundJobsClient) runOnDemandExecuteCreateRequest(ctx context.Context, workspaceID string, dataflowID string, jobType string, options *BackgroundJobsClientRunOnDemandExecuteOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/dataflows/{dataflowId}/jobs/instances"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if dataflowID == "" {
		return nil, errors.New("parameter dataflowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowId}", url.PathEscape(dataflowID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("jobType", jobType)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.RunOnDemandItemJobRequest != nil {
		if err := runtime.MarshalAsJSON(req, *options.RunOnDemandItemJobRequest); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// runOnDemandExecuteHandleResponse handles the RunOnDemandExecute response.
func (client *BackgroundJobsClient) runOnDemandExecuteHandleResponse(resp *http.Response) (BackgroundJobsClientRunOnDemandExecuteResponse, error) {
	result := BackgroundJobsClientRunOnDemandExecuteResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return BackgroundJobsClientRunOnDemandExecuteResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	return result, nil
}

// ScheduleApplyChanges - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes
// only. It may change based on feedback and is not recommended for production use.
// REQUIRED DELEGATED SCOPES: Dataflow.Execute.All and Dataflow.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - dataflowID - The item ID.
//   - createScheduleRequest - A apply changes dataflow schedule create request.
//   - options - BackgroundJobsClientScheduleApplyChangesOptions contains the optional parameters for the BackgroundJobsClient.ScheduleApplyChanges
//     method.
func (client *BackgroundJobsClient) ScheduleApplyChanges(ctx context.Context, workspaceID string, dataflowID string, createScheduleRequest CreateDataflowApplyChangesScheduleRequest, options *BackgroundJobsClientScheduleApplyChangesOptions) (BackgroundJobsClientScheduleApplyChangesResponse, error) {
	var err error
	const operationName = "dataflow.BackgroundJobsClient.ScheduleApplyChanges"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.scheduleApplyChangesCreateRequest(ctx, workspaceID, dataflowID, createScheduleRequest, options)
	if err != nil {
		return BackgroundJobsClientScheduleApplyChangesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BackgroundJobsClientScheduleApplyChangesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = core.NewResponseError(httpResp)
		return BackgroundJobsClientScheduleApplyChangesResponse{}, err
	}
	resp, err := client.scheduleApplyChangesHandleResponse(httpResp)
	return resp, err
}

// scheduleApplyChangesCreateRequest creates the ScheduleApplyChanges request.
func (client *BackgroundJobsClient) scheduleApplyChangesCreateRequest(ctx context.Context, workspaceID string, dataflowID string, createScheduleRequest CreateDataflowApplyChangesScheduleRequest, _ *BackgroundJobsClientScheduleApplyChangesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/dataflows/{dataflowId}/jobs/ApplyChanges/schedules"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if dataflowID == "" {
		return nil, errors.New("parameter dataflowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowId}", url.PathEscape(dataflowID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createScheduleRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// scheduleApplyChangesHandleResponse handles the ScheduleApplyChanges response.
func (client *BackgroundJobsClient) scheduleApplyChangesHandleResponse(resp *http.Response) (BackgroundJobsClientScheduleApplyChangesResponse, error) {
	result := BackgroundJobsClientScheduleApplyChangesResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Schedule); err != nil {
		return BackgroundJobsClientScheduleApplyChangesResponse{}, err
	}
	return result, nil
}

// ScheduleExecute - > [!NOTE] This API is part of a Preview release and is provided for evaluation and development purposes
// only. It may change based on feedback and is not recommended for production use.
// REQUIRED DELEGATED SCOPES: Dataflow.Execute.All and Dataflow.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - dataflowID - The item ID.
//   - createScheduleRequest - A dataflow execute schedule create request.
//   - options - BackgroundJobsClientScheduleExecuteOptions contains the optional parameters for the BackgroundJobsClient.ScheduleExecute
//     method.
func (client *BackgroundJobsClient) ScheduleExecute(ctx context.Context, workspaceID string, dataflowID string, createScheduleRequest CreateDataflowExecuteScheduleRequest, options *BackgroundJobsClientScheduleExecuteOptions) (BackgroundJobsClientScheduleExecuteResponse, error) {
	var err error
	const operationName = "dataflow.BackgroundJobsClient.ScheduleExecute"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.scheduleExecuteCreateRequest(ctx, workspaceID, dataflowID, createScheduleRequest, options)
	if err != nil {
		return BackgroundJobsClientScheduleExecuteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BackgroundJobsClientScheduleExecuteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = core.NewResponseError(httpResp)
		return BackgroundJobsClientScheduleExecuteResponse{}, err
	}
	resp, err := client.scheduleExecuteHandleResponse(httpResp)
	return resp, err
}

// scheduleExecuteCreateRequest creates the ScheduleExecute request.
func (client *BackgroundJobsClient) scheduleExecuteCreateRequest(ctx context.Context, workspaceID string, dataflowID string, createScheduleRequest CreateDataflowExecuteScheduleRequest, _ *BackgroundJobsClientScheduleExecuteOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/dataflows/{dataflowId}/jobs/Execute/schedules"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if dataflowID == "" {
		return nil, errors.New("parameter dataflowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowId}", url.PathEscape(dataflowID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createScheduleRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// scheduleExecuteHandleResponse handles the ScheduleExecute response.
func (client *BackgroundJobsClient) scheduleExecuteHandleResponse(resp *http.Response) (BackgroundJobsClientScheduleExecuteResponse, error) {
	result := BackgroundJobsClientScheduleExecuteResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Schedule); err != nil {
		return BackgroundJobsClientScheduleExecuteResponse{}, err
	}
	return result, nil
}

// Custom code starts below
