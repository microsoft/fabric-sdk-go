// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package dataflow

import "time"

// CreateDataflowApplyChangesScheduleRequest - Create dataflow apply changes schedule plan request payload.
type CreateDataflowApplyChangesScheduleRequest struct {
	// REQUIRED; The actual data contains the time/weekdays of this schedule.
	Configuration ScheduleConfigClassification

	// REQUIRED; Whether this schedule is enabled. True - Enabled, False - Disabled.
	Enabled *bool
}

// CreateDataflowExecuteScheduleRequest - Create dataflow execute schedule plan request payload.
type CreateDataflowExecuteScheduleRequest struct {
	// REQUIRED; The actual data contains the time/weekdays of this schedule.
	Configuration ScheduleConfigClassification

	// REQUIRED; Whether this schedule is enabled. True - Enabled, False - Disabled.
	Enabled *bool
}

// CreateDataflowRequest - Create Dataflow request payload.
type CreateDataflowRequest struct {
	// REQUIRED; The Dataflow display name. The display name must follow naming rules according to item type.
	DisplayName *string

	// The Dataflow public definition.
	Definition *Definition

	// The Dataflow description. Maximum length is 256 characters.
	Description *string

	// The folder ID. If not specified or null, the Dataflow is created with the workspace as its folder.
	FolderID *string
}

type CronScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time interval in minutes. A number between 1 and 5270400 (10 years).
	Interval *int32

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type CronScheduleConfig.
func (c *CronScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     c.EndDateTime,
		LocalTimeZoneID: c.LocalTimeZoneID,
		StartDateTime:   c.StartDateTime,
		Type:            c.Type,
	}
}

type DailyScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; A list of time slots in the hh:mm format. The maximum time slots you can use is 100.
	Times []string

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type DailyScheduleConfig.
func (d *DailyScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     d.EndDateTime,
		LocalTimeZoneID: d.LocalTimeZoneID,
		StartDateTime:   d.StartDateTime,
		Type:            d.Type,
	}
}

// Dataflow - A Dataflow object.
type Dataflow struct {
	// REQUIRED; The item type.
	Type *ItemType

	// The item description.
	Description *string

	// The item display name.
	DisplayName *string

	// READ-ONLY; The folder ID.
	FolderID *string

	// READ-ONLY; The item ID.
	ID *string

	// READ-ONLY; List of applied tags.
	Tags []ItemTag

	// READ-ONLY; The workspace ID.
	WorkspaceID *string
}

// Dataflows - A list of Dataflows.
type Dataflows struct {
	// REQUIRED; A list of Dataflows.
	Value []Dataflow

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// DayOfMonth - Specifies a date to trigger the job. The value must be a valid date. Otherwise, it will be skipped.
type DayOfMonth struct {
	// REQUIRED; Specifies a date to trigger the job, using a value between 1 and 31. For example, 2 means the second day of the
	// month. The date must be valid. If an invalid date is provided, such as February 31st, it
	// will automatically skip to the month that includes the 31st day.
	DayOfMonth *int32

	// REQUIRED; An enumerator that lists the day for triggering jobs. Additional types may be added over time.
	OccurrenceType *OccurrenceType
}

// GetMonthlyOccurrence implements the MonthlyOccurrenceClassification interface for type DayOfMonth.
func (d *DayOfMonth) GetMonthlyOccurrence() *MonthlyOccurrence {
	return &MonthlyOccurrence{
		OccurrenceType: d.OccurrenceType,
	}
}

// Definition - Dataflow public definition object. Refer to this article [/rest/api/fabric/articles/item-management/definitions/dataflow-definition]
// for more details on how to craft a Dataflow public definition.
type Definition struct {
	// REQUIRED; A list of definition parts.
	Parts []DefinitionPart
}

// DefinitionPart - Dataflow definition part object.
type DefinitionPart struct {
	// The Dataflow public definition part path.
	Path *string

	// The Dataflow public definition part payload.
	Payload *string

	// The payload type.
	PayloadType *PayloadType
}

// DefinitionResponse - Dataflow public definition response.
type DefinitionResponse struct {
	// READ-ONLY; Dataflow public definition object. Refer to this article [/rest/api/fabric/articles/item-management/definitions/dataflow-definition]
	// for more details on how to craft a Dataflow public definition.
	Definition *Definition
}

// ExecutionPayload - The execution data payload for Dataflow
type ExecutionPayload struct {
	// Options to run the execute operation. Additional executeOptions may be added over time.
	ExecuteOption *ExecuteOption

	// A list of parameters to override during execution.
	Parameters []ItemJobParameter
}

// ItemJobParameter - Parameter details.
type ItemJobParameter struct {
	// REQUIRED; Name of the parameter.
	ParameterName *string

	// REQUIRED; The parameter type. Additional parameter types may be added over time.
	Type *Type

	// REQUIRED; The value of the parameter to override during execution.
	Value any
}

// ItemTag - Represents a tag applied on an item.
type ItemTag struct {
	// REQUIRED; The name of the tag.
	DisplayName *string

	// REQUIRED; The tag ID.
	ID *string
}

// MonthlyOccurrence - Specifies the day for triggering jobs
type MonthlyOccurrence struct {
	// REQUIRED; An enumerator that lists the day for triggering jobs. Additional types may be added over time.
	OccurrenceType *OccurrenceType
}

// GetMonthlyOccurrence implements the MonthlyOccurrenceClassification interface for type MonthlyOccurrence.
func (m *MonthlyOccurrence) GetMonthlyOccurrence() *MonthlyOccurrence { return m }

type MonthlyScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; A date for triggering the job.
	Occurrence MonthlyOccurrenceClassification

	// REQUIRED; Specifies the monthly job repeat interval. For example, when set to 1 the job is triggered every month.
	Recurrence *int32

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; A list of time slots in the hh:mm format. The maximum time slots you can use is 100.
	Times []string

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type MonthlyScheduleConfig.
func (m *MonthlyScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     m.EndDateTime,
		LocalTimeZoneID: m.LocalTimeZoneID,
		StartDateTime:   m.StartDateTime,
		Type:            m.Type,
	}
}

// OrdinalWeekday - Specifies the ordinal week and weekday to trigger the job. The value must be a valid date. Otherwise,
// it will be skipped.
type OrdinalWeekday struct {
	// REQUIRED; An enumerator that lists the day for triggering jobs. Additional types may be added over time.
	OccurrenceType *OccurrenceType

	// REQUIRED; The week of the month.
	WeekIndex *WeekIndex

	// REQUIRED; Week day for triggering jobs.
	Weekday *DayOfWeek
}

// GetMonthlyOccurrence implements the MonthlyOccurrenceClassification interface for type OrdinalWeekday.
func (o *OrdinalWeekday) GetMonthlyOccurrence() *MonthlyOccurrence {
	return &MonthlyOccurrence{
		OccurrenceType: o.OccurrenceType,
	}
}

// Principal - Represents an identity or a Microsoft Entra group.
type Principal struct {
	// REQUIRED; The principal's ID.
	ID *string

	// REQUIRED; The type of the principal. Additional principal types may be added over time.
	Type *PrincipalType

	// Group specific details. Applicable when the principal type is Group.
	GroupDetails *PrincipalGroupDetails

	// Service principal profile details. Applicable when the principal type is ServicePrincipalProfile.
	ServicePrincipalProfileDetails *PrincipalServicePrincipalProfileDetails

	// READ-ONLY; The principal's display name.
	DisplayName *string

	// READ-ONLY; Service principal specific details. Applicable when the principal type is ServicePrincipal.
	ServicePrincipalDetails *PrincipalServicePrincipalDetails

	// READ-ONLY; User principal specific details. Applicable when the principal type is User.
	UserDetails *PrincipalUserDetails
}

// PrincipalGroupDetails - Group specific details. Applicable when the principal type is Group.
type PrincipalGroupDetails struct {
	// The type of the group. Additional group types may be added over time.
	GroupType *GroupType
}

// PrincipalServicePrincipalDetails - Service principal specific details. Applicable when the principal type is ServicePrincipal.
type PrincipalServicePrincipalDetails struct {
	// READ-ONLY; The service principal's Microsoft Entra AppId.
	AADAppID *string
}

// PrincipalServicePrincipalProfileDetails - Service principal profile details. Applicable when the principal type is ServicePrincipalProfile.
type PrincipalServicePrincipalProfileDetails struct {
	// The service principal profile's parent principal.
	ParentPrincipal *Principal
}

// PrincipalUserDetails - User principal specific details. Applicable when the principal type is User.
type PrincipalUserDetails struct {
	// READ-ONLY; The user principal name.
	UserPrincipalName *string
}

// RunOnDemandDataflowExecuteJobRequest - Run on demand execute dataflow job instance payload
type RunOnDemandDataflowExecuteJobRequest struct {
	// Payload for run on-demand execute job request. Needed only if the dataflow has parameterization enabled.
	ExecutionData *ExecutionPayload
}

// Schedule - Dataflow schedule.
type Schedule struct {
	// REQUIRED; Whether this schedule is enabled. True - Enabled, False - Disabled.
	Enabled *bool

	// REQUIRED; The schedule ID.
	ID *string

	// The actual data contains the time/weekdays of this schedule.
	Configuration ScheduleConfigClassification

	// The created time stamp of this schedule in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	CreatedDateTime *time.Time

	// The user identity that created this schedule or last modified.
	Owner *Principal
}

// ScheduleConfig - Item schedule plan detail settings.
type ScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type ScheduleConfig.
func (s *ScheduleConfig) GetScheduleConfig() *ScheduleConfig { return s }

// UpdateDataflowDefinitionRequest - Update Dataflow public definition request payload.
type UpdateDataflowDefinitionRequest struct {
	// REQUIRED; Dataflow public definition object. Refer to this article [/rest/api/fabric/articles/item-management/definitions/dataflow-definition]
	// for more details on how to craft a Dataflow public definition.
	Definition *Definition
}

// UpdateDataflowRequest - Update Dataflow request.
type UpdateDataflowRequest struct {
	// The Dataflow description. Maximum length is 256 characters.
	Description *string

	// The Dataflow display name. The display name must follow naming rules according to item type.
	DisplayName *string
}

type WeeklyScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; A list of time slots in the hh:mm format. The maximum time slots you can use is 100.
	Times []string

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType

	// REQUIRED; A list of weekdays, at most seven elements are allowed.
	Weekdays []DayOfWeek
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type WeeklyScheduleConfig.
func (w *WeeklyScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     w.EndDateTime,
		LocalTimeZoneID: w.LocalTimeZoneID,
		StartDateTime:   w.StartDateTime,
		Type:            w.Type,
	}
}
