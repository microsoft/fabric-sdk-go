// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/dataflow"
)

// ItemsServer is a fake server for instances of the dataflow.ItemsClient type.
type ItemsServer struct {
	// BeginCreateDataflow is the fake for method ItemsClient.BeginCreateDataflow
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateDataflow func(ctx context.Context, workspaceID string, createDataflowRequest dataflow.CreateDataflowRequest, options *dataflow.ItemsClientBeginCreateDataflowOptions) (resp azfake.PollerResponder[dataflow.ItemsClientCreateDataflowResponse], errResp azfake.ErrorResponder)

	// DeleteDataflow is the fake for method ItemsClient.DeleteDataflow
	// HTTP status codes to indicate success: http.StatusOK
	DeleteDataflow func(ctx context.Context, workspaceID string, dataflowID string, options *dataflow.ItemsClientDeleteDataflowOptions) (resp azfake.Responder[dataflow.ItemsClientDeleteDataflowResponse], errResp azfake.ErrorResponder)

	// GetDataflow is the fake for method ItemsClient.GetDataflow
	// HTTP status codes to indicate success: http.StatusOK
	GetDataflow func(ctx context.Context, workspaceID string, dataflowID string, options *dataflow.ItemsClientGetDataflowOptions) (resp azfake.Responder[dataflow.ItemsClientGetDataflowResponse], errResp azfake.ErrorResponder)

	// BeginGetDataflowDefinition is the fake for method ItemsClient.BeginGetDataflowDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetDataflowDefinition func(ctx context.Context, workspaceID string, dataflowID string, options *dataflow.ItemsClientBeginGetDataflowDefinitionOptions) (resp azfake.PollerResponder[dataflow.ItemsClientGetDataflowDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListDataflowsPager is the fake for method ItemsClient.NewListDataflowsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListDataflowsPager func(workspaceID string, options *dataflow.ItemsClientListDataflowsOptions) (resp azfake.PagerResponder[dataflow.ItemsClientListDataflowsResponse])

	// UpdateDataflow is the fake for method ItemsClient.UpdateDataflow
	// HTTP status codes to indicate success: http.StatusOK
	UpdateDataflow func(ctx context.Context, workspaceID string, dataflowID string, updateDataflowRequest dataflow.UpdateDataflowRequest, options *dataflow.ItemsClientUpdateDataflowOptions) (resp azfake.Responder[dataflow.ItemsClientUpdateDataflowResponse], errResp azfake.ErrorResponder)

	// BeginUpdateDataflowDefinition is the fake for method ItemsClient.BeginUpdateDataflowDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateDataflowDefinition func(ctx context.Context, workspaceID string, dataflowID string, updateDataflowDefinitionRequest dataflow.UpdateDataflowDefinitionRequest, options *dataflow.ItemsClientBeginUpdateDataflowDefinitionOptions) (resp azfake.PollerResponder[dataflow.ItemsClientUpdateDataflowDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of dataflow.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                           srv,
		beginCreateDataflow:           newTracker[azfake.PollerResponder[dataflow.ItemsClientCreateDataflowResponse]](),
		beginGetDataflowDefinition:    newTracker[azfake.PollerResponder[dataflow.ItemsClientGetDataflowDefinitionResponse]](),
		newListDataflowsPager:         newTracker[azfake.PagerResponder[dataflow.ItemsClientListDataflowsResponse]](),
		beginUpdateDataflowDefinition: newTracker[azfake.PollerResponder[dataflow.ItemsClientUpdateDataflowDefinitionResponse]](),
	}
}

// ItemsServerTransport connects instances of dataflow.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                           *ItemsServer
	beginCreateDataflow           *tracker[azfake.PollerResponder[dataflow.ItemsClientCreateDataflowResponse]]
	beginGetDataflowDefinition    *tracker[azfake.PollerResponder[dataflow.ItemsClientGetDataflowDefinitionResponse]]
	newListDataflowsPager         *tracker[azfake.PagerResponder[dataflow.ItemsClientListDataflowsResponse]]
	beginUpdateDataflowDefinition *tracker[azfake.PollerResponder[dataflow.ItemsClientUpdateDataflowDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateDataflow":
				res.resp, res.err = i.dispatchBeginCreateDataflow(req)
			case "ItemsClient.DeleteDataflow":
				res.resp, res.err = i.dispatchDeleteDataflow(req)
			case "ItemsClient.GetDataflow":
				res.resp, res.err = i.dispatchGetDataflow(req)
			case "ItemsClient.BeginGetDataflowDefinition":
				res.resp, res.err = i.dispatchBeginGetDataflowDefinition(req)
			case "ItemsClient.NewListDataflowsPager":
				res.resp, res.err = i.dispatchNewListDataflowsPager(req)
			case "ItemsClient.UpdateDataflow":
				res.resp, res.err = i.dispatchUpdateDataflow(req)
			case "ItemsClient.BeginUpdateDataflowDefinition":
				res.resp, res.err = i.dispatchBeginUpdateDataflowDefinition(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateDataflow(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateDataflow == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateDataflow not implemented")}
	}
	beginCreateDataflow := i.beginCreateDataflow.get(req)
	if beginCreateDataflow == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflows`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[dataflow.CreateDataflowRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateDataflow(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateDataflow = &respr
		i.beginCreateDataflow.add(req, beginCreateDataflow)
	}

	resp, err := server.PollerResponderNext(beginCreateDataflow, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateDataflow.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateDataflow) {
		i.beginCreateDataflow.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteDataflow(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteDataflow == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteDataflow not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflows/(?P<dataflowId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	dataflowIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataflowId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteDataflow(req.Context(), workspaceIDParam, dataflowIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetDataflow(req *http.Request) (*http.Response, error) {
	if i.srv.GetDataflow == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDataflow not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflows/(?P<dataflowId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	dataflowIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataflowId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetDataflow(req.Context(), workspaceIDParam, dataflowIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Dataflow, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginGetDataflowDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginGetDataflowDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetDataflowDefinition not implemented")}
	}
	beginGetDataflowDefinition := i.beginGetDataflowDefinition.get(req)
	if beginGetDataflowDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflows/(?P<dataflowId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		dataflowIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataflowId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginGetDataflowDefinition(req.Context(), workspaceIDParam, dataflowIDParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetDataflowDefinition = &respr
		i.beginGetDataflowDefinition.add(req, beginGetDataflowDefinition)
	}

	resp, err := server.PollerResponderNext(beginGetDataflowDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginGetDataflowDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetDataflowDefinition) {
		i.beginGetDataflowDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListDataflowsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListDataflowsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListDataflowsPager not implemented")}
	}
	newListDataflowsPager := i.newListDataflowsPager.get(req)
	if newListDataflowsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflows`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *dataflow.ItemsClientListDataflowsOptions
		if continuationTokenParam != nil {
			options = &dataflow.ItemsClientListDataflowsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListDataflowsPager(workspaceIDParam, options)
		newListDataflowsPager = &resp
		i.newListDataflowsPager.add(req, newListDataflowsPager)
		server.PagerResponderInjectNextLinks(newListDataflowsPager, req, func(page *dataflow.ItemsClientListDataflowsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListDataflowsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListDataflowsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListDataflowsPager) {
		i.newListDataflowsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateDataflow(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateDataflow == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateDataflow not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflows/(?P<dataflowId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[dataflow.UpdateDataflowRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	dataflowIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataflowId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateDataflow(req.Context(), workspaceIDParam, dataflowIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Dataflow, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginUpdateDataflowDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateDataflowDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateDataflowDefinition not implemented")}
	}
	beginUpdateDataflowDefinition := i.beginUpdateDataflowDefinition.get(req)
	if beginUpdateDataflowDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflows/(?P<dataflowId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[dataflow.UpdateDataflowDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		dataflowIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataflowId")])
		if err != nil {
			return nil, err
		}
		updateMetadataUnescaped, err := url.QueryUnescape(qp.Get("updateMetadata"))
		if err != nil {
			return nil, err
		}
		updateMetadataParam, err := parseOptional(updateMetadataUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *dataflow.ItemsClientBeginUpdateDataflowDefinitionOptions
		if updateMetadataParam != nil {
			options = &dataflow.ItemsClientBeginUpdateDataflowDefinitionOptions{
				UpdateMetadata: updateMetadataParam,
			}
		}
		respr, errRespr := i.srv.BeginUpdateDataflowDefinition(req.Context(), workspaceIDParam, dataflowIDParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateDataflowDefinition = &respr
		i.beginUpdateDataflowDefinition.add(req, beginUpdateDataflowDefinition)
	}

	resp, err := server.PollerResponderNext(beginUpdateDataflowDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginUpdateDataflowDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateDataflowDefinition) {
		i.beginUpdateDataflowDefinition.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
