// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package sparkjobdefinition_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/sparkjobdefinition"
	"github.com/microsoft/fabric-sdk-go/fabric/sparkjobdefinition/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *sparkjobdefinition.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = sparkjobdefinition.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListSparkJobDefinitions() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List spark job definitions in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := sparkjobdefinition.SparkJobDefinitions{
		Value: []sparkjobdefinition.SparkJobDefinition{
			{
				Type:        to.Ptr(sparkjobdefinition.ItemTypeSparkJobDefinition),
				Description: to.Ptr("A spark job definition description."),
				DisplayName: to.Ptr("SparkJobDefinition Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &sparkjobdefinition.Properties{
					OneLakeRootPath: to.Ptr("https://onelake.dfs.fabric.microsoft.com/f089354e-8366-4e18-aea3-4cb4a3a50b48/41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"),
				},
			},
			{
				Type:        to.Ptr(sparkjobdefinition.ItemTypeSparkJobDefinition),
				Description: to.Ptr("A spark job definition description."),
				DisplayName: to.Ptr("SparkJobDefinition Name 2"),
				ID:          to.Ptr("f697fb63-abd4-4399-9548-be7e3c3c0dac"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &sparkjobdefinition.Properties{
					OneLakeRootPath: to.Ptr("https://onelake.dfs.fabric.microsoft.com/f089354e-8366-4e18-aea3-4cb4a3a50b48/d8f6cf16-3aac-4440-9d76-a03d86b7ae3e"),
				},
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListSparkJobDefinitionsPager = func(workspaceID string, options *sparkjobdefinition.ItemsClientListSparkJobDefinitionsOptions) (resp azfake.PagerResponder[sparkjobdefinition.ItemsClientListSparkJobDefinitionsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[sparkjobdefinition.ItemsClientListSparkJobDefinitionsResponse]{}
		resp.AddPage(http.StatusOK, sparkjobdefinition.ItemsClientListSparkJobDefinitionsResponse{SparkJobDefinitions: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListSparkJobDefinitionsPager(exampleWorkspaceID, &sparkjobdefinition.ItemsClientListSparkJobDefinitionsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SparkJobDefinitions))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateSparkJobDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a spark job definition example"},
	})
	var exampleWorkspaceID string
	var exampleCreateSparkJobDefinitionRequest sparkjobdefinition.CreateSparkJobDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateSparkJobDefinitionRequest = sparkjobdefinition.CreateSparkJobDefinitionRequest{
		Description: to.Ptr("A spark job definition description."),
		DisplayName: to.Ptr("SparkJobDefinition 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateSparkJobDefinition = func(ctx context.Context, workspaceID string, createSparkJobDefinitionRequest sparkjobdefinition.CreateSparkJobDefinitionRequest, options *sparkjobdefinition.ItemsClientBeginCreateSparkJobDefinitionOptions) (resp azfake.PollerResponder[sparkjobdefinition.ItemsClientCreateSparkJobDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateSparkJobDefinitionRequest, createSparkJobDefinitionRequest))
		resp = azfake.PollerResponder[sparkjobdefinition.ItemsClientCreateSparkJobDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, sparkjobdefinition.ItemsClientCreateSparkJobDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateSparkJobDefinition(ctx, exampleWorkspaceID, exampleCreateSparkJobDefinitionRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a spark job definition with public definition example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateSparkJobDefinitionRequest = sparkjobdefinition.CreateSparkJobDefinitionRequest{
		Description: to.Ptr("A spark job definition description."),
		Definition: &sparkjobdefinition.PublicDefinition{
			Format: to.Ptr("SparkJobDefinitionV1"),
			Parts: []sparkjobdefinition.PublicDefinitionPart{
				{
					Path:        to.Ptr("SparkJobDefinitionV1.json"),
					Payload:     to.Ptr("eyJleGVjdXRhYmxlRm..OWRmNDhhY2ZmZTgifQ=="),
					PayloadType: to.Ptr(sparkjobdefinition.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(sparkjobdefinition.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("SparkJobDefinition 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateSparkJobDefinition = func(ctx context.Context, workspaceID string, createSparkJobDefinitionRequest sparkjobdefinition.CreateSparkJobDefinitionRequest, options *sparkjobdefinition.ItemsClientBeginCreateSparkJobDefinitionOptions) (resp azfake.PollerResponder[sparkjobdefinition.ItemsClientCreateSparkJobDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateSparkJobDefinitionRequest, createSparkJobDefinitionRequest))
		resp = azfake.PollerResponder[sparkjobdefinition.ItemsClientCreateSparkJobDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, sparkjobdefinition.ItemsClientCreateSparkJobDefinitionResponse{}, nil)
		return
	}

	poller, err = client.BeginCreateSparkJobDefinition(ctx, exampleWorkspaceID, exampleCreateSparkJobDefinitionRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetSparkJobDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a spark job definition example"},
	})
	var exampleWorkspaceID string
	var exampleSparkJobDefinitionID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleSparkJobDefinitionID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := sparkjobdefinition.SparkJobDefinition{
		Type:        to.Ptr(sparkjobdefinition.ItemTypeSparkJobDefinition),
		Description: to.Ptr("A spark job definition description."),
		DisplayName: to.Ptr("SparkJobDefinition 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		Properties: &sparkjobdefinition.Properties{
			OneLakeRootPath: to.Ptr("https://onelake.dfs.fabric.microsoft.com/f089354e-8366-4e18-aea3-4cb4a3a50b48/41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"),
		},
	}

	testsuite.serverFactory.ItemsServer.GetSparkJobDefinition = func(ctx context.Context, workspaceID string, sparkJobDefinitionID string, options *sparkjobdefinition.ItemsClientGetSparkJobDefinitionOptions) (resp azfake.Responder[sparkjobdefinition.ItemsClientGetSparkJobDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSparkJobDefinitionID, sparkJobDefinitionID)
		resp = azfake.Responder[sparkjobdefinition.ItemsClientGetSparkJobDefinitionResponse]{}
		resp.SetResponse(http.StatusOK, sparkjobdefinition.ItemsClientGetSparkJobDefinitionResponse{SparkJobDefinition: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetSparkJobDefinition(ctx, exampleWorkspaceID, exampleSparkJobDefinitionID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SparkJobDefinition))
}

func (testsuite *FakeTestSuite) TestItems_UpdateSparkJobDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a spark job definition example"},
	})
	var exampleWorkspaceID string
	var exampleSparkJobDefinitionID string
	var exampleUpdateSparkJobDefinitionRequest sparkjobdefinition.UpdateSparkJobDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleSparkJobDefinitionID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateSparkJobDefinitionRequest = sparkjobdefinition.UpdateSparkJobDefinitionRequest{
		Description: to.Ptr("SparkJobDefinition's New description"),
		DisplayName: to.Ptr("SparkJobDefinition's New name"),
	}

	exampleRes := sparkjobdefinition.SparkJobDefinition{
		Type:        to.Ptr(sparkjobdefinition.ItemTypeSparkJobDefinition),
		Description: to.Ptr("SparkJobDefinition's New description"),
		DisplayName: to.Ptr("SparkJobDefinition's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateSparkJobDefinition = func(ctx context.Context, workspaceID string, sparkJobDefinitionID string, updateSparkJobDefinitionRequest sparkjobdefinition.UpdateSparkJobDefinitionRequest, options *sparkjobdefinition.ItemsClientUpdateSparkJobDefinitionOptions) (resp azfake.Responder[sparkjobdefinition.ItemsClientUpdateSparkJobDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSparkJobDefinitionID, sparkJobDefinitionID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateSparkJobDefinitionRequest, updateSparkJobDefinitionRequest))
		resp = azfake.Responder[sparkjobdefinition.ItemsClientUpdateSparkJobDefinitionResponse]{}
		resp.SetResponse(http.StatusOK, sparkjobdefinition.ItemsClientUpdateSparkJobDefinitionResponse{SparkJobDefinition: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateSparkJobDefinition(ctx, exampleWorkspaceID, exampleSparkJobDefinitionID, exampleUpdateSparkJobDefinitionRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SparkJobDefinition))
}

func (testsuite *FakeTestSuite) TestItems_DeleteSparkJobDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a spark job definition example"},
	})
	var exampleWorkspaceID string
	var exampleSparkJobDefinitionID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleSparkJobDefinitionID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteSparkJobDefinition = func(ctx context.Context, workspaceID string, sparkJobDefinitionID string, options *sparkjobdefinition.ItemsClientDeleteSparkJobDefinitionOptions) (resp azfake.Responder[sparkjobdefinition.ItemsClientDeleteSparkJobDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSparkJobDefinitionID, sparkJobDefinitionID)
		resp = azfake.Responder[sparkjobdefinition.ItemsClientDeleteSparkJobDefinitionResponse]{}
		resp.SetResponse(http.StatusOK, sparkjobdefinition.ItemsClientDeleteSparkJobDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteSparkJobDefinition(ctx, exampleWorkspaceID, exampleSparkJobDefinitionID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetSparkJobDefinitionDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a spark job definition public definition example"},
	})
	var exampleWorkspaceID string
	var exampleSparkJobDefinitionID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleSparkJobDefinitionID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := sparkjobdefinition.Response{
		Definition: &sparkjobdefinition.PublicDefinition{
			Parts: []sparkjobdefinition.PublicDefinitionPart{
				{
					Path:        to.Ptr("SparkJobDefinitionV1.json"),
					Payload:     to.Ptr("ew0KICAiZXhlY3V0YW..OWRmNDhhY2ZmZTgifQ"),
					PayloadType: to.Ptr(sparkjobdefinition.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(sparkjobdefinition.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetSparkJobDefinitionDefinition = func(ctx context.Context, workspaceID string, sparkJobDefinitionID string, options *sparkjobdefinition.ItemsClientBeginGetSparkJobDefinitionDefinitionOptions) (resp azfake.PollerResponder[sparkjobdefinition.ItemsClientGetSparkJobDefinitionDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSparkJobDefinitionID, sparkJobDefinitionID)
		resp = azfake.PollerResponder[sparkjobdefinition.ItemsClientGetSparkJobDefinitionDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, sparkjobdefinition.ItemsClientGetSparkJobDefinitionDefinitionResponse{Response: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetSparkJobDefinitionDefinition(ctx, exampleWorkspaceID, exampleSparkJobDefinitionID, &sparkjobdefinition.ItemsClientBeginGetSparkJobDefinitionDefinitionOptions{Format: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Response))
}

func (testsuite *FakeTestSuite) TestItems_UpdateSparkJobDefinitionDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a spark job definition public definition example"},
	})
	var exampleWorkspaceID string
	var exampleSparkJobDefinitionID string
	var exampleUpdateSparkJobDefinitionRequest sparkjobdefinition.UpdateSparkJobDefinitionDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleSparkJobDefinitionID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateSparkJobDefinitionRequest = sparkjobdefinition.UpdateSparkJobDefinitionDefinitionRequest{}

	testsuite.serverFactory.ItemsServer.BeginUpdateSparkJobDefinitionDefinition = func(ctx context.Context, workspaceID string, sparkJobDefinitionID string, updateSparkJobDefinitionRequest sparkjobdefinition.UpdateSparkJobDefinitionDefinitionRequest, options *sparkjobdefinition.ItemsClientBeginUpdateSparkJobDefinitionDefinitionOptions) (resp azfake.PollerResponder[sparkjobdefinition.ItemsClientUpdateSparkJobDefinitionDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSparkJobDefinitionID, sparkJobDefinitionID)
		resp = azfake.PollerResponder[sparkjobdefinition.ItemsClientUpdateSparkJobDefinitionDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, sparkjobdefinition.ItemsClientUpdateSparkJobDefinitionDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateSparkJobDefinitionDefinition(ctx, exampleWorkspaceID, exampleSparkJobDefinitionID, exampleUpdateSparkJobDefinitionRequest, &sparkjobdefinition.ItemsClientBeginUpdateSparkJobDefinitionDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestBackgroundJobs_RunOnDemandSparkJobDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Run SparkJobDefinition with no request body."},
	})
	var exampleWorkspaceID string
	var exampleSparkJobDefinitionID string
	var exampleJobType string
	exampleWorkspaceID = "4b218778-e7a5-4d73-8187-f10824047715"
	exampleSparkJobDefinitionID = "431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7"
	exampleJobType = "sparkjob"

	testsuite.serverFactory.BackgroundJobsServer.RunOnDemandSparkJobDefinition = func(ctx context.Context, workspaceID string, sparkJobDefinitionID string, jobType string, options *sparkjobdefinition.BackgroundJobsClientRunOnDemandSparkJobDefinitionOptions) (resp azfake.Responder[sparkjobdefinition.BackgroundJobsClientRunOnDemandSparkJobDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSparkJobDefinitionID, sparkJobDefinitionID)
		testsuite.Require().Equal(exampleJobType, jobType)
		resp = azfake.Responder[sparkjobdefinition.BackgroundJobsClientRunOnDemandSparkJobDefinitionResponse]{}
		resp.SetResponse(http.StatusAccepted, sparkjobdefinition.BackgroundJobsClientRunOnDemandSparkJobDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewBackgroundJobsClient()
	_, err = client.RunOnDemandSparkJobDefinition(ctx, exampleWorkspaceID, exampleSparkJobDefinitionID, exampleJobType, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}
