// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/sparkjobdefinition"
)

// ItemsServer is a fake server for instances of the sparkjobdefinition.ItemsClient type.
type ItemsServer struct {
	// BeginCreateSparkJobDefinition is the fake for method ItemsClient.BeginCreateSparkJobDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateSparkJobDefinition func(ctx context.Context, workspaceID string, createSparkJobDefinitionRequest sparkjobdefinition.CreateSparkJobDefinitionRequest, options *sparkjobdefinition.ItemsClientBeginCreateSparkJobDefinitionOptions) (resp azfake.PollerResponder[sparkjobdefinition.ItemsClientCreateSparkJobDefinitionResponse], errResp azfake.ErrorResponder)

	// DeleteSparkJobDefinition is the fake for method ItemsClient.DeleteSparkJobDefinition
	// HTTP status codes to indicate success: http.StatusOK
	DeleteSparkJobDefinition func(ctx context.Context, workspaceID string, sparkJobDefinitionID string, options *sparkjobdefinition.ItemsClientDeleteSparkJobDefinitionOptions) (resp azfake.Responder[sparkjobdefinition.ItemsClientDeleteSparkJobDefinitionResponse], errResp azfake.ErrorResponder)

	// GetSparkJobDefinition is the fake for method ItemsClient.GetSparkJobDefinition
	// HTTP status codes to indicate success: http.StatusOK
	GetSparkJobDefinition func(ctx context.Context, workspaceID string, sparkJobDefinitionID string, options *sparkjobdefinition.ItemsClientGetSparkJobDefinitionOptions) (resp azfake.Responder[sparkjobdefinition.ItemsClientGetSparkJobDefinitionResponse], errResp azfake.ErrorResponder)

	// BeginGetSparkJobDefinitionDefinition is the fake for method ItemsClient.BeginGetSparkJobDefinitionDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetSparkJobDefinitionDefinition func(ctx context.Context, workspaceID string, sparkJobDefinitionID string, options *sparkjobdefinition.ItemsClientBeginGetSparkJobDefinitionDefinitionOptions) (resp azfake.PollerResponder[sparkjobdefinition.ItemsClientGetSparkJobDefinitionDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListSparkJobDefinitionsPager is the fake for method ItemsClient.NewListSparkJobDefinitionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListSparkJobDefinitionsPager func(workspaceID string, options *sparkjobdefinition.ItemsClientListSparkJobDefinitionsOptions) (resp azfake.PagerResponder[sparkjobdefinition.ItemsClientListSparkJobDefinitionsResponse])

	// UpdateSparkJobDefinition is the fake for method ItemsClient.UpdateSparkJobDefinition
	// HTTP status codes to indicate success: http.StatusOK
	UpdateSparkJobDefinition func(ctx context.Context, workspaceID string, sparkJobDefinitionID string, updateSparkJobDefinitionRequest sparkjobdefinition.UpdateSparkJobDefinitionRequest, options *sparkjobdefinition.ItemsClientUpdateSparkJobDefinitionOptions) (resp azfake.Responder[sparkjobdefinition.ItemsClientUpdateSparkJobDefinitionResponse], errResp azfake.ErrorResponder)

	// BeginUpdateSparkJobDefinitionDefinition is the fake for method ItemsClient.BeginUpdateSparkJobDefinitionDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateSparkJobDefinitionDefinition func(ctx context.Context, workspaceID string, sparkJobDefinitionID string, updateSparkJobDefinitionRequest sparkjobdefinition.UpdateSparkJobDefinitionDefinitionRequest, options *sparkjobdefinition.ItemsClientBeginUpdateSparkJobDefinitionDefinitionOptions) (resp azfake.PollerResponder[sparkjobdefinition.ItemsClientUpdateSparkJobDefinitionDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of sparkjobdefinition.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                                     srv,
		beginCreateSparkJobDefinition:           newTracker[azfake.PollerResponder[sparkjobdefinition.ItemsClientCreateSparkJobDefinitionResponse]](),
		beginGetSparkJobDefinitionDefinition:    newTracker[azfake.PollerResponder[sparkjobdefinition.ItemsClientGetSparkJobDefinitionDefinitionResponse]](),
		newListSparkJobDefinitionsPager:         newTracker[azfake.PagerResponder[sparkjobdefinition.ItemsClientListSparkJobDefinitionsResponse]](),
		beginUpdateSparkJobDefinitionDefinition: newTracker[azfake.PollerResponder[sparkjobdefinition.ItemsClientUpdateSparkJobDefinitionDefinitionResponse]](),
	}
}

// ItemsServerTransport connects instances of sparkjobdefinition.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                                     *ItemsServer
	beginCreateSparkJobDefinition           *tracker[azfake.PollerResponder[sparkjobdefinition.ItemsClientCreateSparkJobDefinitionResponse]]
	beginGetSparkJobDefinitionDefinition    *tracker[azfake.PollerResponder[sparkjobdefinition.ItemsClientGetSparkJobDefinitionDefinitionResponse]]
	newListSparkJobDefinitionsPager         *tracker[azfake.PagerResponder[sparkjobdefinition.ItemsClientListSparkJobDefinitionsResponse]]
	beginUpdateSparkJobDefinitionDefinition *tracker[azfake.PollerResponder[sparkjobdefinition.ItemsClientUpdateSparkJobDefinitionDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateSparkJobDefinition":
				res.resp, res.err = i.dispatchBeginCreateSparkJobDefinition(req)
			case "ItemsClient.DeleteSparkJobDefinition":
				res.resp, res.err = i.dispatchDeleteSparkJobDefinition(req)
			case "ItemsClient.GetSparkJobDefinition":
				res.resp, res.err = i.dispatchGetSparkJobDefinition(req)
			case "ItemsClient.BeginGetSparkJobDefinitionDefinition":
				res.resp, res.err = i.dispatchBeginGetSparkJobDefinitionDefinition(req)
			case "ItemsClient.NewListSparkJobDefinitionsPager":
				res.resp, res.err = i.dispatchNewListSparkJobDefinitionsPager(req)
			case "ItemsClient.UpdateSparkJobDefinition":
				res.resp, res.err = i.dispatchUpdateSparkJobDefinition(req)
			case "ItemsClient.BeginUpdateSparkJobDefinitionDefinition":
				res.resp, res.err = i.dispatchBeginUpdateSparkJobDefinitionDefinition(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateSparkJobDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateSparkJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateSparkJobDefinition not implemented")}
	}
	beginCreateSparkJobDefinition := i.beginCreateSparkJobDefinition.get(req)
	if beginCreateSparkJobDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sparkJobDefinitions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[sparkjobdefinition.CreateSparkJobDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateSparkJobDefinition(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateSparkJobDefinition = &respr
		i.beginCreateSparkJobDefinition.add(req, beginCreateSparkJobDefinition)
	}

	resp, err := server.PollerResponderNext(beginCreateSparkJobDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateSparkJobDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateSparkJobDefinition) {
		i.beginCreateSparkJobDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteSparkJobDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteSparkJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteSparkJobDefinition not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sparkJobDefinitions/(?P<sparkJobDefinitionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	sparkJobDefinitionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("sparkJobDefinitionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteSparkJobDefinition(req.Context(), workspaceIDParam, sparkJobDefinitionIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetSparkJobDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.GetSparkJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetSparkJobDefinition not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sparkJobDefinitions/(?P<sparkJobDefinitionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	sparkJobDefinitionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("sparkJobDefinitionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetSparkJobDefinition(req.Context(), workspaceIDParam, sparkJobDefinitionIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SparkJobDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginGetSparkJobDefinitionDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginGetSparkJobDefinitionDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetSparkJobDefinitionDefinition not implemented")}
	}
	beginGetSparkJobDefinitionDefinition := i.beginGetSparkJobDefinitionDefinition.get(req)
	if beginGetSparkJobDefinitionDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sparkJobDefinitions/(?P<sparkJobDefinitionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		sparkJobDefinitionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("sparkJobDefinitionId")])
		if err != nil {
			return nil, err
		}
		formatUnescaped, err := url.QueryUnescape(qp.Get("format"))
		if err != nil {
			return nil, err
		}
		formatParam := getOptional(formatUnescaped)
		var options *sparkjobdefinition.ItemsClientBeginGetSparkJobDefinitionDefinitionOptions
		if formatParam != nil {
			options = &sparkjobdefinition.ItemsClientBeginGetSparkJobDefinitionDefinitionOptions{
				Format: formatParam,
			}
		}
		respr, errRespr := i.srv.BeginGetSparkJobDefinitionDefinition(req.Context(), workspaceIDParam, sparkJobDefinitionIDParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetSparkJobDefinitionDefinition = &respr
		i.beginGetSparkJobDefinitionDefinition.add(req, beginGetSparkJobDefinitionDefinition)
	}

	resp, err := server.PollerResponderNext(beginGetSparkJobDefinitionDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginGetSparkJobDefinitionDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetSparkJobDefinitionDefinition) {
		i.beginGetSparkJobDefinitionDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListSparkJobDefinitionsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListSparkJobDefinitionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListSparkJobDefinitionsPager not implemented")}
	}
	newListSparkJobDefinitionsPager := i.newListSparkJobDefinitionsPager.get(req)
	if newListSparkJobDefinitionsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sparkJobDefinitions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *sparkjobdefinition.ItemsClientListSparkJobDefinitionsOptions
		if continuationTokenParam != nil {
			options = &sparkjobdefinition.ItemsClientListSparkJobDefinitionsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListSparkJobDefinitionsPager(workspaceIDParam, options)
		newListSparkJobDefinitionsPager = &resp
		i.newListSparkJobDefinitionsPager.add(req, newListSparkJobDefinitionsPager)
		server.PagerResponderInjectNextLinks(newListSparkJobDefinitionsPager, req, func(page *sparkjobdefinition.ItemsClientListSparkJobDefinitionsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListSparkJobDefinitionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListSparkJobDefinitionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListSparkJobDefinitionsPager) {
		i.newListSparkJobDefinitionsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateSparkJobDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateSparkJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateSparkJobDefinition not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sparkJobDefinitions/(?P<sparkJobDefinitionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[sparkjobdefinition.UpdateSparkJobDefinitionRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	sparkJobDefinitionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("sparkJobDefinitionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateSparkJobDefinition(req.Context(), workspaceIDParam, sparkJobDefinitionIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SparkJobDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginUpdateSparkJobDefinitionDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateSparkJobDefinitionDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateSparkJobDefinitionDefinition not implemented")}
	}
	beginUpdateSparkJobDefinitionDefinition := i.beginUpdateSparkJobDefinitionDefinition.get(req)
	if beginUpdateSparkJobDefinitionDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sparkJobDefinitions/(?P<sparkJobDefinitionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[sparkjobdefinition.UpdateSparkJobDefinitionDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		sparkJobDefinitionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("sparkJobDefinitionId")])
		if err != nil {
			return nil, err
		}
		updateMetadataUnescaped, err := url.QueryUnescape(qp.Get("updateMetadata"))
		if err != nil {
			return nil, err
		}
		updateMetadataParam, err := parseOptional(updateMetadataUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *sparkjobdefinition.ItemsClientBeginUpdateSparkJobDefinitionDefinitionOptions
		if updateMetadataParam != nil {
			options = &sparkjobdefinition.ItemsClientBeginUpdateSparkJobDefinitionDefinitionOptions{
				UpdateMetadata: updateMetadataParam,
			}
		}
		respr, errRespr := i.srv.BeginUpdateSparkJobDefinitionDefinition(req.Context(), workspaceIDParam, sparkJobDefinitionIDParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateSparkJobDefinitionDefinition = &respr
		i.beginUpdateSparkJobDefinitionDefinition.add(req, beginUpdateSparkJobDefinitionDefinition)
	}

	resp, err := server.PollerResponderNext(beginUpdateSparkJobDefinitionDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginUpdateSparkJobDefinitionDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateSparkJobDefinitionDefinition) {
		i.beginUpdateSparkJobDefinitionDefinition.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
