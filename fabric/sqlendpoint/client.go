// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package sqlendpoint

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// Client contains the methods for the SQLEndpoint group.
// Don't use this type directly, use a constructor function instead.
type Client struct {
	internal *azcore.Client
	endpoint string
}

// GetSQLAuditSettings - PERMISSIONS The caller must have reader or higher item permission.
// REQUIRED DELEGATED SCOPES SqlEndpoint.Read.All or SqlEndpoint.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - options - ClientGetSQLAuditSettingsOptions contains the optional parameters for the Client.GetSQLAuditSettings method.
func (client *Client) GetSQLAuditSettings(ctx context.Context, workspaceID string, itemID string, options *ClientGetSQLAuditSettingsOptions) (ClientGetSQLAuditSettingsResponse, error) {
	var err error
	const operationName = "sqlendpoint.Client.GetSQLAuditSettings"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getSQLAuditSettingsCreateRequest(ctx, workspaceID, itemID, options)
	if err != nil {
		return ClientGetSQLAuditSettingsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientGetSQLAuditSettingsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ClientGetSQLAuditSettingsResponse{}, err
	}
	resp, err := client.getSQLAuditSettingsHandleResponse(httpResp)
	return resp, err
}

// getSQLAuditSettingsCreateRequest creates the GetSQLAuditSettings request.
func (client *Client) getSQLAuditSettingsCreateRequest(ctx context.Context, workspaceID string, itemID string, _ *ClientGetSQLAuditSettingsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/sqlEndpoints/{itemId}/settings/sqlAudit"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSQLAuditSettingsHandleResponse handles the GetSQLAuditSettings response.
func (client *Client) getSQLAuditSettingsHandleResponse(resp *http.Response) (ClientGetSQLAuditSettingsResponse, error) {
	result := ClientGetSQLAuditSettingsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLAuditSettings); err != nil {
		return ClientGetSQLAuditSettingsResponse{}, err
	}
	return result, nil
}

// SetAuditActionsAndGroups - PERMISSIONS The caller must have audit item permission.
// REQUIRED DELEGATED SCOPES Item.Audit.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - setAuditActionsAndGroupsRequest - Set audit actions and groups request payload.
//   - options - ClientSetAuditActionsAndGroupsOptions contains the optional parameters for the Client.SetAuditActionsAndGroups
//     method.
func (client *Client) SetAuditActionsAndGroups(ctx context.Context, workspaceID string, itemID string, setAuditActionsAndGroupsRequest []string, options *ClientSetAuditActionsAndGroupsOptions) (ClientSetAuditActionsAndGroupsResponse, error) {
	var err error
	const operationName = "sqlendpoint.Client.SetAuditActionsAndGroups"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.setAuditActionsAndGroupsCreateRequest(ctx, workspaceID, itemID, setAuditActionsAndGroupsRequest, options)
	if err != nil {
		return ClientSetAuditActionsAndGroupsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientSetAuditActionsAndGroupsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ClientSetAuditActionsAndGroupsResponse{}, err
	}
	return ClientSetAuditActionsAndGroupsResponse{}, nil
}

// setAuditActionsAndGroupsCreateRequest creates the SetAuditActionsAndGroups request.
func (client *Client) setAuditActionsAndGroupsCreateRequest(ctx context.Context, workspaceID string, itemID string, setAuditActionsAndGroupsRequest []string, _ *ClientSetAuditActionsAndGroupsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/sqlEndpoints/{itemId}/settings/sqlAudit/setAuditActionsAndGroups"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, setAuditActionsAndGroupsRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateSQLAuditSettings - PERMISSIONS The caller must have audit item permission.
// REQUIRED DELEGATED SCOPES Item.Audit.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - itemID - The item ID.
//   - updateAuditSettingsRequest - Update SQL audit settings request payload.
//   - options - ClientUpdateSQLAuditSettingsOptions contains the optional parameters for the Client.UpdateSQLAuditSettings method.
func (client *Client) UpdateSQLAuditSettings(ctx context.Context, workspaceID string, itemID string, updateAuditSettingsRequest SQLAuditSettingsUpdate, options *ClientUpdateSQLAuditSettingsOptions) (ClientUpdateSQLAuditSettingsResponse, error) {
	var err error
	const operationName = "sqlendpoint.Client.UpdateSQLAuditSettings"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateSQLAuditSettingsCreateRequest(ctx, workspaceID, itemID, updateAuditSettingsRequest, options)
	if err != nil {
		return ClientUpdateSQLAuditSettingsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientUpdateSQLAuditSettingsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ClientUpdateSQLAuditSettingsResponse{}, err
	}
	resp, err := client.updateSQLAuditSettingsHandleResponse(httpResp)
	return resp, err
}

// updateSQLAuditSettingsCreateRequest creates the UpdateSQLAuditSettings request.
func (client *Client) updateSQLAuditSettingsCreateRequest(ctx context.Context, workspaceID string, itemID string, updateAuditSettingsRequest SQLAuditSettingsUpdate, _ *ClientUpdateSQLAuditSettingsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/sqlEndpoints/{itemId}/settings/sqlAudit"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if itemID == "" {
		return nil, errors.New("parameter itemID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{itemId}", url.PathEscape(itemID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateAuditSettingsRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateSQLAuditSettingsHandleResponse handles the UpdateSQLAuditSettings response.
func (client *Client) updateSQLAuditSettingsHandleResponse(resp *http.Response) (ClientUpdateSQLAuditSettingsResponse, error) {
	result := ClientUpdateSQLAuditSettingsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLAuditSettings); err != nil {
		return ClientUpdateSQLAuditSettingsResponse{}, err
	}
	return result, nil
}
