// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package sqlendpoint_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/sqlendpoint"
	"github.com/microsoft/fabric-sdk-go/fabric/sqlendpoint/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *sqlendpoint.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = sqlendpoint.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListSQLEndpoints() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List SQL endpoints in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := sqlendpoint.SQLEndpoints{
		Value: []sqlendpoint.SQLEndpoint{
			{
				Type:        to.Ptr(sqlendpoint.ItemTypeSQLEndpoint),
				Description: to.Ptr("A SQL endpoint description."),
				DisplayName: to.Ptr("SQLEndpoint Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListSQLEndpointsPager = func(workspaceID string, options *sqlendpoint.ItemsClientListSQLEndpointsOptions) (resp azfake.PagerResponder[sqlendpoint.ItemsClientListSQLEndpointsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[sqlendpoint.ItemsClientListSQLEndpointsResponse]{}
		resp.AddPage(http.StatusOK, sqlendpoint.ItemsClientListSQLEndpointsResponse{SQLEndpoints: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListSQLEndpointsPager(exampleWorkspaceID, &sqlendpoint.ItemsClientListSQLEndpointsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SQLEndpoints))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_GetConnectionString() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get connection string example"},
	})
	var exampleWorkspaceID string
	var exampleSqlEndpointID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleSqlEndpointID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := sqlendpoint.ConnectionStringResponse{
		ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m-jh0bi.zcf.datawarehouse.fabric.microsoft.com"),
	}

	testsuite.serverFactory.ItemsServer.GetConnectionString = func(ctx context.Context, workspaceID string, sqlEndpointID string, options *sqlendpoint.ItemsClientGetConnectionStringOptions) (resp azfake.Responder[sqlendpoint.ItemsClientGetConnectionStringResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSqlEndpointID, sqlEndpointID)
		resp = azfake.Responder[sqlendpoint.ItemsClientGetConnectionStringResponse]{}
		resp.SetResponse(http.StatusOK, sqlendpoint.ItemsClientGetConnectionStringResponse{ConnectionStringResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetConnectionString(ctx, exampleWorkspaceID, exampleSqlEndpointID, &sqlendpoint.ItemsClientGetConnectionStringOptions{GuestTenantID: to.Ptr("6e335e92-a2a2-4b5a-970a-bd6a89fbb765"),
		PrivateLinkType: to.Ptr(sqlendpoint.PrivateLinkTypeWorkspace),
	})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ConnectionStringResponse))
}

func (testsuite *FakeTestSuite) TestSQLEndpoint_UpdateSQLAuditSettings() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update SQL Audit Settings"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleUpdateAuditSettingsRequest sqlendpoint.SQLAuditSettingsUpdate
	exampleWorkspaceID = "a97f3e88-9f0a-4183-b1d9-31e6eb00e778"
	exampleItemID = "70bcc992-a346-4f21-afe5-8b9ed1596a2b"
	exampleUpdateAuditSettingsRequest = sqlendpoint.SQLAuditSettingsUpdate{
		RetentionDays: to.Ptr[int32](10),
		State:         to.Ptr(sqlendpoint.AuditSettingsStateEnabled),
	}

	testsuite.serverFactory.Server.UpdateSQLAuditSettings = func(ctx context.Context, workspaceID string, itemID string, updateAuditSettingsRequest sqlendpoint.SQLAuditSettingsUpdate, options *sqlendpoint.ClientUpdateSQLAuditSettingsOptions) (resp azfake.Responder[sqlendpoint.ClientUpdateSQLAuditSettingsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateAuditSettingsRequest, updateAuditSettingsRequest))
		resp = azfake.Responder[sqlendpoint.ClientUpdateSQLAuditSettingsResponse]{}
		resp.SetResponse(http.StatusOK, sqlendpoint.ClientUpdateSQLAuditSettingsResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewClient()
	_, err = client.UpdateSQLAuditSettings(ctx, exampleWorkspaceID, exampleItemID, exampleUpdateAuditSettingsRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestSQLEndpoint_GetSQLAuditSettings() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get SQL Audit Settings"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	exampleWorkspaceID = "a97f3e88-9f0a-4183-b1d9-31e6eb00e778"
	exampleItemID = "70bcc992-a346-4f21-afe5-8b9ed1596a2b"

	exampleRes := sqlendpoint.SQLAuditSettings{
		AuditActionsAndGroups: []string{
			"SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"},
		RetentionDays: to.Ptr[int32](10),
		State:         to.Ptr(sqlendpoint.AuditSettingsStateEnabled),
	}

	testsuite.serverFactory.Server.GetSQLAuditSettings = func(ctx context.Context, workspaceID string, itemID string, options *sqlendpoint.ClientGetSQLAuditSettingsOptions) (resp azfake.Responder[sqlendpoint.ClientGetSQLAuditSettingsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		resp = azfake.Responder[sqlendpoint.ClientGetSQLAuditSettingsResponse]{}
		resp.SetResponse(http.StatusOK, sqlendpoint.ClientGetSQLAuditSettingsResponse{SQLAuditSettings: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewClient()
	res, err := client.GetSQLAuditSettings(ctx, exampleWorkspaceID, exampleItemID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SQLAuditSettings))
}

func (testsuite *FakeTestSuite) TestSQLEndpoint_SetAuditActionsAndGroups() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Set SQL Audit Groups"},
	})
	var exampleWorkspaceID string
	var exampleItemID string
	var exampleSetAuditActionsAndGroupsRequest []string
	exampleWorkspaceID = "a97f3e88-9f0a-4183-b1d9-31e6eb00e778"
	exampleItemID = "70bcc992-a346-4f21-afe5-8b9ed1596a2b"
	exampleSetAuditActionsAndGroupsRequest = []string{
		"SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
		"FAILED_DATABASE_AUTHENTICATION_GROUP",
		"BATCH_COMPLETED_GROUP"}

	testsuite.serverFactory.Server.SetAuditActionsAndGroups = func(ctx context.Context, workspaceID string, itemID string, setAuditActionsAndGroupsRequest []string, options *sqlendpoint.ClientSetAuditActionsAndGroupsOptions) (resp azfake.Responder[sqlendpoint.ClientSetAuditActionsAndGroupsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleItemID, itemID)
		testsuite.Require().Equal(exampleSetAuditActionsAndGroupsRequest, setAuditActionsAndGroupsRequest)
		resp = azfake.Responder[sqlendpoint.ClientSetAuditActionsAndGroupsResponse]{}
		resp.SetResponse(http.StatusOK, sqlendpoint.ClientSetAuditActionsAndGroupsResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewClient()
	_, err = client.SetAuditActionsAndGroups(ctx, exampleWorkspaceID, exampleItemID, exampleSetAuditActionsAndGroupsRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}
