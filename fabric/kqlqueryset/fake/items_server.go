// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/kqlqueryset"
)

// ItemsServer is a fake server for instances of the kqlqueryset.ItemsClient type.
type ItemsServer struct {
	// BeginCreateKQLQueryset is the fake for method ItemsClient.BeginCreateKQLQueryset
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateKQLQueryset func(ctx context.Context, workspaceID string, createKQLQuerysetRequest kqlqueryset.CreateKQLQuerysetRequest, options *kqlqueryset.ItemsClientBeginCreateKQLQuerysetOptions) (resp azfake.PollerResponder[kqlqueryset.ItemsClientCreateKQLQuerysetResponse], errResp azfake.ErrorResponder)

	// DeleteKQLQueryset is the fake for method ItemsClient.DeleteKQLQueryset
	// HTTP status codes to indicate success: http.StatusOK
	DeleteKQLQueryset func(ctx context.Context, workspaceID string, kqlQuerysetID string, options *kqlqueryset.ItemsClientDeleteKQLQuerysetOptions) (resp azfake.Responder[kqlqueryset.ItemsClientDeleteKQLQuerysetResponse], errResp azfake.ErrorResponder)

	// GetKQLQueryset is the fake for method ItemsClient.GetKQLQueryset
	// HTTP status codes to indicate success: http.StatusOK
	GetKQLQueryset func(ctx context.Context, workspaceID string, kqlQuerysetID string, options *kqlqueryset.ItemsClientGetKQLQuerysetOptions) (resp azfake.Responder[kqlqueryset.ItemsClientGetKQLQuerysetResponse], errResp azfake.ErrorResponder)

	// BeginGetKQLQuerysetDefinition is the fake for method ItemsClient.BeginGetKQLQuerysetDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetKQLQuerysetDefinition func(ctx context.Context, workspaceID string, kqlQuerysetID string, options *kqlqueryset.ItemsClientBeginGetKQLQuerysetDefinitionOptions) (resp azfake.PollerResponder[kqlqueryset.ItemsClientGetKQLQuerysetDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListKQLQuerysetsPager is the fake for method ItemsClient.NewListKQLQuerysetsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListKQLQuerysetsPager func(workspaceID string, options *kqlqueryset.ItemsClientListKQLQuerysetsOptions) (resp azfake.PagerResponder[kqlqueryset.ItemsClientListKQLQuerysetsResponse])

	// UpdateKQLQueryset is the fake for method ItemsClient.UpdateKQLQueryset
	// HTTP status codes to indicate success: http.StatusOK
	UpdateKQLQueryset func(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetRequest kqlqueryset.UpdateKQLQuerysetRequest, options *kqlqueryset.ItemsClientUpdateKQLQuerysetOptions) (resp azfake.Responder[kqlqueryset.ItemsClientUpdateKQLQuerysetResponse], errResp azfake.ErrorResponder)

	// BeginUpdateKQLQuerysetDefinition is the fake for method ItemsClient.BeginUpdateKQLQuerysetDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateKQLQuerysetDefinition func(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetDefinitionRequest kqlqueryset.UpdateKQLQuerysetDefinitionRequest, options *kqlqueryset.ItemsClientBeginUpdateKQLQuerysetDefinitionOptions) (resp azfake.PollerResponder[kqlqueryset.ItemsClientUpdateKQLQuerysetDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of kqlqueryset.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                              srv,
		beginCreateKQLQueryset:           newTracker[azfake.PollerResponder[kqlqueryset.ItemsClientCreateKQLQuerysetResponse]](),
		beginGetKQLQuerysetDefinition:    newTracker[azfake.PollerResponder[kqlqueryset.ItemsClientGetKQLQuerysetDefinitionResponse]](),
		newListKQLQuerysetsPager:         newTracker[azfake.PagerResponder[kqlqueryset.ItemsClientListKQLQuerysetsResponse]](),
		beginUpdateKQLQuerysetDefinition: newTracker[azfake.PollerResponder[kqlqueryset.ItemsClientUpdateKQLQuerysetDefinitionResponse]](),
	}
}

// ItemsServerTransport connects instances of kqlqueryset.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                              *ItemsServer
	beginCreateKQLQueryset           *tracker[azfake.PollerResponder[kqlqueryset.ItemsClientCreateKQLQuerysetResponse]]
	beginGetKQLQuerysetDefinition    *tracker[azfake.PollerResponder[kqlqueryset.ItemsClientGetKQLQuerysetDefinitionResponse]]
	newListKQLQuerysetsPager         *tracker[azfake.PagerResponder[kqlqueryset.ItemsClientListKQLQuerysetsResponse]]
	beginUpdateKQLQuerysetDefinition *tracker[azfake.PollerResponder[kqlqueryset.ItemsClientUpdateKQLQuerysetDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.BeginCreateKQLQueryset":
				res.resp, res.err = i.dispatchBeginCreateKQLQueryset(req)
			case "ItemsClient.DeleteKQLQueryset":
				res.resp, res.err = i.dispatchDeleteKQLQueryset(req)
			case "ItemsClient.GetKQLQueryset":
				res.resp, res.err = i.dispatchGetKQLQueryset(req)
			case "ItemsClient.BeginGetKQLQuerysetDefinition":
				res.resp, res.err = i.dispatchBeginGetKQLQuerysetDefinition(req)
			case "ItemsClient.NewListKQLQuerysetsPager":
				res.resp, res.err = i.dispatchNewListKQLQuerysetsPager(req)
			case "ItemsClient.UpdateKQLQueryset":
				res.resp, res.err = i.dispatchUpdateKQLQueryset(req)
			case "ItemsClient.BeginUpdateKQLQuerysetDefinition":
				res.resp, res.err = i.dispatchBeginUpdateKQLQuerysetDefinition(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateKQLQueryset(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateKQLQueryset == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateKQLQueryset not implemented")}
	}
	beginCreateKQLQueryset := i.beginCreateKQLQueryset.get(req)
	if beginCreateKQLQueryset == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlQuerysets`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[kqlqueryset.CreateKQLQuerysetRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateKQLQueryset(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateKQLQueryset = &respr
		i.beginCreateKQLQueryset.add(req, beginCreateKQLQueryset)
	}

	resp, err := server.PollerResponderNext(beginCreateKQLQueryset, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateKQLQueryset.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateKQLQueryset) {
		i.beginCreateKQLQueryset.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteKQLQueryset(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteKQLQueryset == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteKQLQueryset not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlQuerysets/(?P<kqlQuerysetId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlQuerysetIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlQuerysetId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteKQLQueryset(req.Context(), workspaceIDParam, kqlQuerysetIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetKQLQueryset(req *http.Request) (*http.Response, error) {
	if i.srv.GetKQLQueryset == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetKQLQueryset not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlQuerysets/(?P<kqlQuerysetId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlQuerysetIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlQuerysetId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetKQLQueryset(req.Context(), workspaceIDParam, kqlQuerysetIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KQLQueryset, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginGetKQLQuerysetDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginGetKQLQuerysetDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetKQLQuerysetDefinition not implemented")}
	}
	beginGetKQLQuerysetDefinition := i.beginGetKQLQuerysetDefinition.get(req)
	if beginGetKQLQuerysetDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlQuerysets/(?P<kqlQuerysetId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		kqlQuerysetIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlQuerysetId")])
		if err != nil {
			return nil, err
		}
		formatUnescaped, err := url.QueryUnescape(qp.Get("format"))
		if err != nil {
			return nil, err
		}
		formatParam := getOptional(formatUnescaped)
		var options *kqlqueryset.ItemsClientBeginGetKQLQuerysetDefinitionOptions
		if formatParam != nil {
			options = &kqlqueryset.ItemsClientBeginGetKQLQuerysetDefinitionOptions{
				Format: formatParam,
			}
		}
		respr, errRespr := i.srv.BeginGetKQLQuerysetDefinition(req.Context(), workspaceIDParam, kqlQuerysetIDParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetKQLQuerysetDefinition = &respr
		i.beginGetKQLQuerysetDefinition.add(req, beginGetKQLQuerysetDefinition)
	}

	resp, err := server.PollerResponderNext(beginGetKQLQuerysetDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginGetKQLQuerysetDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetKQLQuerysetDefinition) {
		i.beginGetKQLQuerysetDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListKQLQuerysetsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListKQLQuerysetsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListKQLQuerysetsPager not implemented")}
	}
	newListKQLQuerysetsPager := i.newListKQLQuerysetsPager.get(req)
	if newListKQLQuerysetsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlQuerysets`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *kqlqueryset.ItemsClientListKQLQuerysetsOptions
		if continuationTokenParam != nil {
			options = &kqlqueryset.ItemsClientListKQLQuerysetsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListKQLQuerysetsPager(workspaceIDParam, options)
		newListKQLQuerysetsPager = &resp
		i.newListKQLQuerysetsPager.add(req, newListKQLQuerysetsPager)
		server.PagerResponderInjectNextLinks(newListKQLQuerysetsPager, req, func(page *kqlqueryset.ItemsClientListKQLQuerysetsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListKQLQuerysetsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListKQLQuerysetsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListKQLQuerysetsPager) {
		i.newListKQLQuerysetsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateKQLQueryset(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateKQLQueryset == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateKQLQueryset not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlQuerysets/(?P<kqlQuerysetId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[kqlqueryset.UpdateKQLQuerysetRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlQuerysetIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlQuerysetId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateKQLQueryset(req.Context(), workspaceIDParam, kqlQuerysetIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KQLQueryset, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginUpdateKQLQuerysetDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateKQLQuerysetDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateKQLQuerysetDefinition not implemented")}
	}
	beginUpdateKQLQuerysetDefinition := i.beginUpdateKQLQuerysetDefinition.get(req)
	if beginUpdateKQLQuerysetDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlQuerysets/(?P<kqlQuerysetId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[kqlqueryset.UpdateKQLQuerysetDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		kqlQuerysetIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlQuerysetId")])
		if err != nil {
			return nil, err
		}
		updateMetadataUnescaped, err := url.QueryUnescape(qp.Get("updateMetadata"))
		if err != nil {
			return nil, err
		}
		updateMetadataParam, err := parseOptional(updateMetadataUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *kqlqueryset.ItemsClientBeginUpdateKQLQuerysetDefinitionOptions
		if updateMetadataParam != nil {
			options = &kqlqueryset.ItemsClientBeginUpdateKQLQuerysetDefinitionOptions{
				UpdateMetadata: updateMetadataParam,
			}
		}
		respr, errRespr := i.srv.BeginUpdateKQLQuerysetDefinition(req.Context(), workspaceIDParam, kqlQuerysetIDParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateKQLQuerysetDefinition = &respr
		i.beginUpdateKQLQuerysetDefinition.add(req, beginUpdateKQLQuerysetDefinition)
	}

	resp, err := server.PollerResponderNext(beginUpdateKQLQuerysetDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginUpdateKQLQuerysetDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateKQLQuerysetDefinition) {
		i.beginUpdateKQLQuerysetDefinition.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
