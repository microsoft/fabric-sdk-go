// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/kqlqueryset"
)

// ItemsServer is a fake server for instances of the kqlqueryset.ItemsClient type.
type ItemsServer struct {
	// DeleteKQLQueryset is the fake for method ItemsClient.DeleteKQLQueryset
	// HTTP status codes to indicate success: http.StatusOK
	DeleteKQLQueryset func(ctx context.Context, workspaceID string, kqlQuerysetID string, options *kqlqueryset.ItemsClientDeleteKQLQuerysetOptions) (resp azfake.Responder[kqlqueryset.ItemsClientDeleteKQLQuerysetResponse], errResp azfake.ErrorResponder)

	// GetKQLQueryset is the fake for method ItemsClient.GetKQLQueryset
	// HTTP status codes to indicate success: http.StatusOK
	GetKQLQueryset func(ctx context.Context, workspaceID string, kqlQuerysetID string, options *kqlqueryset.ItemsClientGetKQLQuerysetOptions) (resp azfake.Responder[kqlqueryset.ItemsClientGetKQLQuerysetResponse], errResp azfake.ErrorResponder)

	// NewListKQLQuerysetsPager is the fake for method ItemsClient.NewListKQLQuerysetsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListKQLQuerysetsPager func(workspaceID string, options *kqlqueryset.ItemsClientListKQLQuerysetsOptions) (resp azfake.PagerResponder[kqlqueryset.ItemsClientListKQLQuerysetsResponse])

	// UpdateKQLQueryset is the fake for method ItemsClient.UpdateKQLQueryset
	// HTTP status codes to indicate success: http.StatusOK
	UpdateKQLQueryset func(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetRequest kqlqueryset.UpdateKQLQuerysetRequest, options *kqlqueryset.ItemsClientUpdateKQLQuerysetOptions) (resp azfake.Responder[kqlqueryset.ItemsClientUpdateKQLQuerysetResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of kqlqueryset.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                      srv,
		newListKQLQuerysetsPager: newTracker[azfake.PagerResponder[kqlqueryset.ItemsClientListKQLQuerysetsResponse]](),
	}
}

// ItemsServerTransport connects instances of kqlqueryset.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                      *ItemsServer
	newListKQLQuerysetsPager *tracker[azfake.PagerResponder[kqlqueryset.ItemsClientListKQLQuerysetsResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ItemsClient.DeleteKQLQueryset":
		resp, err = i.dispatchDeleteKQLQueryset(req)
	case "ItemsClient.GetKQLQueryset":
		resp, err = i.dispatchGetKQLQueryset(req)
	case "ItemsClient.NewListKQLQuerysetsPager":
		resp, err = i.dispatchNewListKQLQuerysetsPager(req)
	case "ItemsClient.UpdateKQLQueryset":
		resp, err = i.dispatchUpdateKQLQueryset(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (i *ItemsServerTransport) dispatchDeleteKQLQueryset(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteKQLQueryset == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteKQLQueryset not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlQuerysets/(?P<kqlQuerysetId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlQuerysetIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlQuerysetId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteKQLQueryset(req.Context(), workspaceIDParam, kqlQuerysetIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetKQLQueryset(req *http.Request) (*http.Response, error) {
	if i.srv.GetKQLQueryset == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetKQLQueryset not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlQuerysets/(?P<kqlQuerysetId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlQuerysetIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlQuerysetId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetKQLQueryset(req.Context(), workspaceIDParam, kqlQuerysetIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KQLQueryset, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListKQLQuerysetsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListKQLQuerysetsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListKQLQuerysetsPager not implemented")}
	}
	newListKQLQuerysetsPager := i.newListKQLQuerysetsPager.get(req)
	if newListKQLQuerysetsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlQuerysets`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *kqlqueryset.ItemsClientListKQLQuerysetsOptions
		if continuationTokenParam != nil {
			options = &kqlqueryset.ItemsClientListKQLQuerysetsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListKQLQuerysetsPager(workspaceIDParam, options)
		newListKQLQuerysetsPager = &resp
		i.newListKQLQuerysetsPager.add(req, newListKQLQuerysetsPager)
		server.PagerResponderInjectNextLinks(newListKQLQuerysetsPager, req, func(page *kqlqueryset.ItemsClientListKQLQuerysetsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListKQLQuerysetsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListKQLQuerysetsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListKQLQuerysetsPager) {
		i.newListKQLQuerysetsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateKQLQueryset(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateKQLQueryset == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateKQLQueryset not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kqlQuerysets/(?P<kqlQuerysetId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[kqlqueryset.UpdateKQLQuerysetRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	kqlQuerysetIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("kqlQuerysetId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateKQLQueryset(req.Context(), workspaceIDParam, kqlQuerysetIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KQLQueryset, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
