// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package kqlqueryset

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateKQLQueryset - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create a KQL queryset with definition, refer to the KQL queryset definition article [/rest/api/fabric/articles/item-management/definitions/kql-queryset-definition].
// PERMISSIONS The caller must have a contributor workspace role.
// REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createKQLQuerysetRequest - Create item request payload.
//   - options - ItemsClientBeginCreateKQLQuerysetOptions contains the optional parameters for the ItemsClient.BeginCreateKQLQueryset
//     method.
func (client *ItemsClient) BeginCreateKQLQueryset(ctx context.Context, workspaceID string, createKQLQuerysetRequest CreateKQLQuerysetRequest, options *ItemsClientBeginCreateKQLQuerysetOptions) (*runtime.Poller[ItemsClientCreateKQLQuerysetResponse], error) {
	return client.beginCreateKQLQueryset(ctx, workspaceID, createKQLQuerysetRequest, options)
}

// CreateKQLQueryset - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create a KQL queryset with definition, refer to the KQL queryset definition article [/rest/api/fabric/articles/item-management/definitions/kql-queryset-definition].
// PERMISSIONS The caller must have a contributor workspace role.
// REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createKQLQueryset(ctx context.Context, workspaceID string, createKQLQuerysetRequest CreateKQLQuerysetRequest, options *ItemsClientBeginCreateKQLQuerysetOptions) (*http.Response, error) {
	var err error
	const operationName = "kqlqueryset.ItemsClient.BeginCreateKQLQueryset"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createKQLQuerysetCreateRequest(ctx, workspaceID, createKQLQuerysetRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createKQLQuerysetCreateRequest creates the CreateKQLQueryset request.
func (client *ItemsClient) createKQLQuerysetCreateRequest(ctx context.Context, workspaceID string, createKQLQuerysetRequest CreateKQLQuerysetRequest, _ *ItemsClientBeginCreateKQLQuerysetOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/kqlQuerysets"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createKQLQuerysetRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteKQLQueryset - PERMISSIONS The caller must have write permissions for the KQL queryset.
// REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - kqlQuerysetID - The KQL queryset ID.
//   - options - ItemsClientDeleteKQLQuerysetOptions contains the optional parameters for the ItemsClient.DeleteKQLQueryset method.
func (client *ItemsClient) DeleteKQLQueryset(ctx context.Context, workspaceID string, kqlQuerysetID string, options *ItemsClientDeleteKQLQuerysetOptions) (ItemsClientDeleteKQLQuerysetResponse, error) {
	var err error
	const operationName = "kqlqueryset.ItemsClient.DeleteKQLQueryset"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteKQLQuerysetCreateRequest(ctx, workspaceID, kqlQuerysetID, options)
	if err != nil {
		return ItemsClientDeleteKQLQuerysetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteKQLQuerysetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteKQLQuerysetResponse{}, err
	}
	return ItemsClientDeleteKQLQuerysetResponse{}, nil
}

// deleteKQLQuerysetCreateRequest creates the DeleteKQLQueryset request.
func (client *ItemsClient) deleteKQLQuerysetCreateRequest(ctx context.Context, workspaceID string, kqlQuerysetID string, _ *ItemsClientDeleteKQLQuerysetOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/kqlQuerysets/{kqlQuerysetId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if kqlQuerysetID == "" {
		return nil, errors.New("parameter kqlQuerysetID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{kqlQuerysetId}", url.PathEscape(kqlQuerysetID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetKQLQueryset - PERMISSIONS The caller must have read permissions for the KQL qeryset.
// REQUIRED DELEGATED SCOPES KQLQueryset.Read.All or KQLQueryset.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - kqlQuerysetID - The KQL queryset ID.
//   - options - ItemsClientGetKQLQuerysetOptions contains the optional parameters for the ItemsClient.GetKQLQueryset method.
func (client *ItemsClient) GetKQLQueryset(ctx context.Context, workspaceID string, kqlQuerysetID string, options *ItemsClientGetKQLQuerysetOptions) (ItemsClientGetKQLQuerysetResponse, error) {
	var err error
	const operationName = "kqlqueryset.ItemsClient.GetKQLQueryset"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getKQLQuerysetCreateRequest(ctx, workspaceID, kqlQuerysetID, options)
	if err != nil {
		return ItemsClientGetKQLQuerysetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetKQLQuerysetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetKQLQuerysetResponse{}, err
	}
	resp, err := client.getKQLQuerysetHandleResponse(httpResp)
	return resp, err
}

// getKQLQuerysetCreateRequest creates the GetKQLQueryset request.
func (client *ItemsClient) getKQLQuerysetCreateRequest(ctx context.Context, workspaceID string, kqlQuerysetID string, _ *ItemsClientGetKQLQuerysetOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/kqlQuerysets/{kqlQuerysetId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if kqlQuerysetID == "" {
		return nil, errors.New("parameter kqlQuerysetID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{kqlQuerysetId}", url.PathEscape(kqlQuerysetID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getKQLQuerysetHandleResponse handles the GetKQLQueryset response.
func (client *ItemsClient) getKQLQuerysetHandleResponse(resp *http.Response) (ItemsClientGetKQLQuerysetResponse, error) {
	result := ItemsClientGetKQLQuerysetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.KQLQueryset); err != nil {
		return ItemsClientGetKQLQuerysetResponse{}, err
	}
	return result, nil
}

// BeginGetKQLQuerysetDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS
// The caller must have read and write permissions for the KQL queryset.
// REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - kqlQuerysetID - The KQL queryset ID.
//   - options - ItemsClientBeginGetKQLQuerysetDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetKQLQuerysetDefinition
//     method.
func (client *ItemsClient) BeginGetKQLQuerysetDefinition(ctx context.Context, workspaceID string, kqlQuerysetID string, options *ItemsClientBeginGetKQLQuerysetDefinitionOptions) (*runtime.Poller[ItemsClientGetKQLQuerysetDefinitionResponse], error) {
	return client.beginGetKQLQuerysetDefinition(ctx, workspaceID, kqlQuerysetID, options)
}

// GetKQLQuerysetDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS
// The caller must have read and write permissions for the KQL queryset.
// REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getKQLQuerysetDefinition(ctx context.Context, workspaceID string, kqlQuerysetID string, options *ItemsClientBeginGetKQLQuerysetDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "kqlqueryset.ItemsClient.BeginGetKQLQuerysetDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getKQLQuerysetDefinitionCreateRequest(ctx, workspaceID, kqlQuerysetID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getKQLQuerysetDefinitionCreateRequest creates the GetKQLQuerysetDefinition request.
func (client *ItemsClient) getKQLQuerysetDefinitionCreateRequest(ctx context.Context, workspaceID string, kqlQuerysetID string, options *ItemsClientBeginGetKQLQuerysetDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/kqlQuerysets/{kqlQuerysetId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if kqlQuerysetID == "" {
		return nil, errors.New("parameter kqlQuerysetID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{kqlQuerysetId}", url.PathEscape(kqlQuerysetID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("format", *options.Format)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListKQLQuerysetsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have a viewer workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListKQLQuerysetsOptions contains the optional parameters for the ItemsClient.NewListKQLQuerysetsPager
//     method.
func (client *ItemsClient) NewListKQLQuerysetsPager(workspaceID string, options *ItemsClientListKQLQuerysetsOptions) *runtime.Pager[ItemsClientListKQLQuerysetsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListKQLQuerysetsResponse]{
		More: func(page ItemsClientListKQLQuerysetsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListKQLQuerysetsResponse) (ItemsClientListKQLQuerysetsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "kqlqueryset.ItemsClient.NewListKQLQuerysetsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listKQLQuerysetsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListKQLQuerysetsResponse{}, err
			}
			return client.listKQLQuerysetsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listKQLQuerysetsCreateRequest creates the ListKQLQuerysets request.
func (client *ItemsClient) listKQLQuerysetsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListKQLQuerysetsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/kqlQuerysets"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listKQLQuerysetsHandleResponse handles the ListKQLQuerysets response.
func (client *ItemsClient) listKQLQuerysetsHandleResponse(resp *http.Response) (ItemsClientListKQLQuerysetsResponse, error) {
	result := ItemsClientListKQLQuerysetsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.KQLQuerysets); err != nil {
		return ItemsClientListKQLQuerysetsResponse{}, err
	}
	return result, nil
}

// UpdateKQLQueryset - PERMISSIONS The caller must have read and write permissions for the KQL queryset.
// REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - kqlQuerysetID - The KQL queryset ID.
//   - updateKQLQuerysetRequest - Update KQL queryset request payload.
//   - options - ItemsClientUpdateKQLQuerysetOptions contains the optional parameters for the ItemsClient.UpdateKQLQueryset method.
func (client *ItemsClient) UpdateKQLQueryset(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetRequest UpdateKQLQuerysetRequest, options *ItemsClientUpdateKQLQuerysetOptions) (ItemsClientUpdateKQLQuerysetResponse, error) {
	var err error
	const operationName = "kqlqueryset.ItemsClient.UpdateKQLQueryset"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateKQLQuerysetCreateRequest(ctx, workspaceID, kqlQuerysetID, updateKQLQuerysetRequest, options)
	if err != nil {
		return ItemsClientUpdateKQLQuerysetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateKQLQuerysetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateKQLQuerysetResponse{}, err
	}
	resp, err := client.updateKQLQuerysetHandleResponse(httpResp)
	return resp, err
}

// updateKQLQuerysetCreateRequest creates the UpdateKQLQueryset request.
func (client *ItemsClient) updateKQLQuerysetCreateRequest(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetRequest UpdateKQLQuerysetRequest, _ *ItemsClientUpdateKQLQuerysetOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/kqlQuerysets/{kqlQuerysetId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if kqlQuerysetID == "" {
		return nil, errors.New("parameter kqlQuerysetID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{kqlQuerysetId}", url.PathEscape(kqlQuerysetID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateKQLQuerysetRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateKQLQuerysetHandleResponse handles the UpdateKQLQueryset response.
func (client *ItemsClient) updateKQLQuerysetHandleResponse(resp *http.Response) (ItemsClientUpdateKQLQuerysetResponse, error) {
	result := ItemsClientUpdateKQLQuerysetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.KQLQueryset); err != nil {
		return ItemsClientUpdateKQLQuerysetResponse{}, err
	}
	return result, nil
}

// BeginUpdateKQLQuerysetDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the KQL queryset.
// REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - kqlQuerysetID - The KQL queryset ID.
//   - updateKQLQuerysetDefinitionRequest - Update KQL queryset definition request payload.
//   - options - ItemsClientBeginUpdateKQLQuerysetDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateKQLQuerysetDefinition
//     method.
func (client *ItemsClient) BeginUpdateKQLQuerysetDefinition(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetDefinitionRequest UpdateKQLQuerysetDefinitionRequest, options *ItemsClientBeginUpdateKQLQuerysetDefinitionOptions) (*runtime.Poller[ItemsClientUpdateKQLQuerysetDefinitionResponse], error) {
	return client.beginUpdateKQLQuerysetDefinition(ctx, workspaceID, kqlQuerysetID, updateKQLQuerysetDefinitionRequest, options)
}

// UpdateKQLQuerysetDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// PERMISSIONS The caller must have read and write permissions for the KQL queryset.
// REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateKQLQuerysetDefinition(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetDefinitionRequest UpdateKQLQuerysetDefinitionRequest, options *ItemsClientBeginUpdateKQLQuerysetDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "kqlqueryset.ItemsClient.BeginUpdateKQLQuerysetDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateKQLQuerysetDefinitionCreateRequest(ctx, workspaceID, kqlQuerysetID, updateKQLQuerysetDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateKQLQuerysetDefinitionCreateRequest creates the UpdateKQLQuerysetDefinition request.
func (client *ItemsClient) updateKQLQuerysetDefinitionCreateRequest(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetDefinitionRequest UpdateKQLQuerysetDefinitionRequest, options *ItemsClientBeginUpdateKQLQuerysetDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/kqlQuerysets/{kqlQuerysetId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if kqlQuerysetID == "" {
		return nil, errors.New("parameter kqlQuerysetID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{kqlQuerysetId}", url.PathEscape(kqlQuerysetID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateKQLQuerysetDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateKQLQueryset - returns ItemsClientCreateKQLQuerysetResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// To create a KQL queryset with definition, refer to the KQL queryset definition article [/rest/api/fabric/articles/item-management/definitions/kql-queryset-definition].
//
// PERMISSIONS The caller must have a contributor workspace role.
//
// # REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createKQLQuerysetRequest - Create item request payload.
//   - options - ItemsClientBeginCreateKQLQuerysetOptions contains the optional parameters for the ItemsClient.BeginCreateKQLQueryset method.
func (client *ItemsClient) CreateKQLQueryset(ctx context.Context, workspaceID string, createKQLQuerysetRequest CreateKQLQuerysetRequest, options *ItemsClientBeginCreateKQLQuerysetOptions) (ItemsClientCreateKQLQuerysetResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateKQLQueryset(ctx, workspaceID, createKQLQuerysetRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateKQLQuerysetResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateKQLQuerysetResponse{}, err
	}
	return result, err
}

// beginCreateKQLQueryset creates the createKQLQueryset request.
func (client *ItemsClient) beginCreateKQLQueryset(ctx context.Context, workspaceID string, createKQLQuerysetRequest CreateKQLQuerysetRequest, options *ItemsClientBeginCreateKQLQuerysetOptions) (*runtime.Poller[ItemsClientCreateKQLQuerysetResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createKQLQueryset(ctx, workspaceID, createKQLQuerysetRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateKQLQuerysetResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateKQLQuerysetResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateKQLQuerysetResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateKQLQuerysetResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetKQLQuerysetDefinition - returns ItemsClientGetKQLQuerysetDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS
// The caller must have read and write permissions for the KQL queryset.
//
// # REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - kqlQuerysetID - The KQL queryset ID.
//   - options - ItemsClientBeginGetKQLQuerysetDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetKQLQuerysetDefinition method.
func (client *ItemsClient) GetKQLQuerysetDefinition(ctx context.Context, workspaceID string, kqlQuerysetID string, options *ItemsClientBeginGetKQLQuerysetDefinitionOptions) (ItemsClientGetKQLQuerysetDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetKQLQuerysetDefinition(ctx, workspaceID, kqlQuerysetID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetKQLQuerysetDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetKQLQuerysetDefinitionResponse{}, err
	}
	return result, err
}

// beginGetKQLQuerysetDefinition creates the getKQLQuerysetDefinition request.
func (client *ItemsClient) beginGetKQLQuerysetDefinition(ctx context.Context, workspaceID string, kqlQuerysetID string, options *ItemsClientBeginGetKQLQuerysetDefinitionOptions) (*runtime.Poller[ItemsClientGetKQLQuerysetDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getKQLQuerysetDefinition(ctx, workspaceID, kqlQuerysetID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetKQLQuerysetDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetKQLQuerysetDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetKQLQuerysetDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetKQLQuerysetDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateKQLQuerysetDefinition - returns ItemsClientUpdateKQLQuerysetDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// PERMISSIONS The caller must have read and write permissions for the KQL queryset.
//
// # REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - kqlQuerysetID - The KQL queryset ID.
//   - updateKQLQuerysetDefinitionRequest - Update KQL queryset definition request payload.
//   - options - ItemsClientBeginUpdateKQLQuerysetDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateKQLQuerysetDefinition method.
func (client *ItemsClient) UpdateKQLQuerysetDefinition(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetDefinitionRequest UpdateKQLQuerysetDefinitionRequest, options *ItemsClientBeginUpdateKQLQuerysetDefinitionOptions) (ItemsClientUpdateKQLQuerysetDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateKQLQuerysetDefinition(ctx, workspaceID, kqlQuerysetID, updateKQLQuerysetDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateKQLQuerysetDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateKQLQuerysetDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateKQLQuerysetDefinition creates the updateKQLQuerysetDefinition request.
func (client *ItemsClient) beginUpdateKQLQuerysetDefinition(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetDefinitionRequest UpdateKQLQuerysetDefinitionRequest, options *ItemsClientBeginUpdateKQLQuerysetDefinitionOptions) (*runtime.Poller[ItemsClientUpdateKQLQuerysetDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateKQLQuerysetDefinition(ctx, workspaceID, kqlQuerysetID, updateKQLQuerysetDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateKQLQuerysetDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateKQLQuerysetDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateKQLQuerysetDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateKQLQuerysetDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListKQLQuerysets - returns array of KQLQueryset from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have a viewer workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListKQLQuerysetsOptions contains the optional parameters for the ItemsClient.NewListKQLQuerysetsPager method.
func (client *ItemsClient) ListKQLQuerysets(ctx context.Context, workspaceID string, options *ItemsClientListKQLQuerysetsOptions) ([]KQLQueryset, error) {
	pager := client.NewListKQLQuerysetsPager(workspaceID, options)
	mapper := func(resp ItemsClientListKQLQuerysetsResponse) []KQLQueryset {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []KQLQueryset{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []KQLQueryset{}, err
	}
	return list, nil
}
