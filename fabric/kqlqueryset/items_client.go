// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package kqlqueryset

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// DeleteKQLQueryset - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - kqlQuerysetID - The KQL queryset ID.
//   - options - ItemsClientDeleteKQLQuerysetOptions contains the optional parameters for the ItemsClient.DeleteKQLQueryset method.
func (client *ItemsClient) DeleteKQLQueryset(ctx context.Context, workspaceID string, kqlQuerysetID string, options *ItemsClientDeleteKQLQuerysetOptions) (ItemsClientDeleteKQLQuerysetResponse, error) {
	var err error
	const operationName = "kqlqueryset.ItemsClient.DeleteKQLQueryset"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteKQLQuerysetCreateRequest(ctx, workspaceID, kqlQuerysetID, options)
	if err != nil {
		return ItemsClientDeleteKQLQuerysetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteKQLQuerysetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteKQLQuerysetResponse{}, err
	}
	return ItemsClientDeleteKQLQuerysetResponse{}, nil
}

// deleteKQLQuerysetCreateRequest creates the DeleteKQLQueryset request.
func (client *ItemsClient) deleteKQLQuerysetCreateRequest(ctx context.Context, workspaceID string, kqlQuerysetID string, options *ItemsClientDeleteKQLQuerysetOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/kqlQuerysets/{kqlQuerysetId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if kqlQuerysetID == "" {
		return nil, errors.New("parameter kqlQuerysetID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{kqlQuerysetId}", url.PathEscape(kqlQuerysetID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetKQLQueryset - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES KQLQueryset.Read.All or KQLQueryset.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - kqlQuerysetID - The KQL queryset ID.
//   - options - ItemsClientGetKQLQuerysetOptions contains the optional parameters for the ItemsClient.GetKQLQueryset method.
func (client *ItemsClient) GetKQLQueryset(ctx context.Context, workspaceID string, kqlQuerysetID string, options *ItemsClientGetKQLQuerysetOptions) (ItemsClientGetKQLQuerysetResponse, error) {
	var err error
	const operationName = "kqlqueryset.ItemsClient.GetKQLQueryset"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getKQLQuerysetCreateRequest(ctx, workspaceID, kqlQuerysetID, options)
	if err != nil {
		return ItemsClientGetKQLQuerysetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetKQLQuerysetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetKQLQuerysetResponse{}, err
	}
	resp, err := client.getKQLQuerysetHandleResponse(httpResp)
	return resp, err
}

// getKQLQuerysetCreateRequest creates the GetKQLQueryset request.
func (client *ItemsClient) getKQLQuerysetCreateRequest(ctx context.Context, workspaceID string, kqlQuerysetID string, options *ItemsClientGetKQLQuerysetOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/kqlQuerysets/{kqlQuerysetId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if kqlQuerysetID == "" {
		return nil, errors.New("parameter kqlQuerysetID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{kqlQuerysetId}", url.PathEscape(kqlQuerysetID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getKQLQuerysetHandleResponse handles the GetKQLQueryset response.
func (client *ItemsClient) getKQLQuerysetHandleResponse(resp *http.Response) (ItemsClientGetKQLQuerysetResponse, error) {
	result := ItemsClientGetKQLQuerysetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.KQLQueryset); err != nil {
		return ItemsClientGetKQLQuerysetResponse{}, err
	}
	return result, nil
}

// NewListKQLQuerysetsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListKQLQuerysetsOptions contains the optional parameters for the ItemsClient.NewListKQLQuerysetsPager
//     method.
func (client *ItemsClient) NewListKQLQuerysetsPager(workspaceID string, options *ItemsClientListKQLQuerysetsOptions) *runtime.Pager[ItemsClientListKQLQuerysetsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListKQLQuerysetsResponse]{
		More: func(page ItemsClientListKQLQuerysetsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListKQLQuerysetsResponse) (ItemsClientListKQLQuerysetsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "kqlqueryset.ItemsClient.NewListKQLQuerysetsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listKQLQuerysetsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListKQLQuerysetsResponse{}, err
			}
			return client.listKQLQuerysetsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listKQLQuerysetsCreateRequest creates the ListKQLQuerysets request.
func (client *ItemsClient) listKQLQuerysetsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListKQLQuerysetsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/kqlQuerysets"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listKQLQuerysetsHandleResponse handles the ListKQLQuerysets response.
func (client *ItemsClient) listKQLQuerysetsHandleResponse(resp *http.Response) (ItemsClientListKQLQuerysetsResponse, error) {
	result := ItemsClientListKQLQuerysetsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.KQLQuerysets); err != nil {
		return ItemsClientListKQLQuerysetsResponse{}, err
	}
	return result, nil
}

// UpdateKQLQueryset - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES KQLQueryset.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - kqlQuerysetID - The KQL queryset ID.
//   - updateKQLQuerysetRequest - Update KQL queryset request payload.
//   - options - ItemsClientUpdateKQLQuerysetOptions contains the optional parameters for the ItemsClient.UpdateKQLQueryset method.
func (client *ItemsClient) UpdateKQLQueryset(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetRequest UpdateKQLQuerysetRequest, options *ItemsClientUpdateKQLQuerysetOptions) (ItemsClientUpdateKQLQuerysetResponse, error) {
	var err error
	const operationName = "kqlqueryset.ItemsClient.UpdateKQLQueryset"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateKQLQuerysetCreateRequest(ctx, workspaceID, kqlQuerysetID, updateKQLQuerysetRequest, options)
	if err != nil {
		return ItemsClientUpdateKQLQuerysetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateKQLQuerysetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateKQLQuerysetResponse{}, err
	}
	resp, err := client.updateKQLQuerysetHandleResponse(httpResp)
	return resp, err
}

// updateKQLQuerysetCreateRequest creates the UpdateKQLQueryset request.
func (client *ItemsClient) updateKQLQuerysetCreateRequest(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetRequest UpdateKQLQuerysetRequest, options *ItemsClientUpdateKQLQuerysetOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/kqlQuerysets/{kqlQuerysetId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if kqlQuerysetID == "" {
		return nil, errors.New("parameter kqlQuerysetID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{kqlQuerysetId}", url.PathEscape(kqlQuerysetID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateKQLQuerysetRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateKQLQuerysetHandleResponse handles the UpdateKQLQueryset response.
func (client *ItemsClient) updateKQLQuerysetHandleResponse(resp *http.Response) (ItemsClientUpdateKQLQuerysetResponse, error) {
	result := ItemsClientUpdateKQLQuerysetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.KQLQueryset); err != nil {
		return ItemsClientUpdateKQLQuerysetResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// ListKQLQuerysets - returns array of KQLQueryset from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListKQLQuerysetsOptions contains the optional parameters for the ItemsClient.NewListKQLQuerysetsPager method.
func (client *ItemsClient) ListKQLQuerysets(ctx context.Context, workspaceID string, options *ItemsClientListKQLQuerysetsOptions) ([]KQLQueryset, error) {
	pager := client.NewListKQLQuerysetsPager(workspaceID, options)
	mapper := func(resp ItemsClientListKQLQuerysetsResponse) []KQLQueryset {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		return nil, err
	}
	return list, nil
}
