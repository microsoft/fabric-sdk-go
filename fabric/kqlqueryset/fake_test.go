// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package kqlqueryset_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/kqlqueryset"
	"github.com/microsoft/fabric-sdk-go/fabric/kqlqueryset/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *kqlqueryset.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = kqlqueryset.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListKQLQuerysets() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List KQL querysets in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := kqlqueryset.KQLQuerysets{
		Value: []kqlqueryset.KQLQueryset{
			{
				Type:        to.Ptr(kqlqueryset.ItemTypeKQLQueryset),
				Description: to.Ptr("A KQL queryset description."),
				DisplayName: to.Ptr("KQLQueryset_1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(kqlqueryset.ItemTypeKQLQueryset),
				Description: to.Ptr("A KQL queryset description."),
				DisplayName: to.Ptr("KQLQueryset_2"),
				ID:          to.Ptr("4c9adc22-ffb1-491f-baaa-9c9987745591"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
			{
				Type:        to.Ptr(kqlqueryset.ItemTypeKQLQueryset),
				Description: to.Ptr("A KQL queryset description."),
				DisplayName: to.Ptr("KQLQueryset_3"),
				ID:          to.Ptr("8b681594-894d-4adf-8ae8-aed415dd1de6"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListKQLQuerysetsPager = func(workspaceID string, options *kqlqueryset.ItemsClientListKQLQuerysetsOptions) (resp azfake.PagerResponder[kqlqueryset.ItemsClientListKQLQuerysetsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[kqlqueryset.ItemsClientListKQLQuerysetsResponse]{}
		resp.AddPage(http.StatusOK, kqlqueryset.ItemsClientListKQLQuerysetsResponse{KQLQuerysets: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListKQLQuerysetsPager(exampleWorkspaceID, &kqlqueryset.ItemsClientListKQLQuerysetsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.KQLQuerysets))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_GetKQLQueryset() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a KQL queryset example"},
	})
	var exampleWorkspaceID string
	var exampleKqlQuerysetID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleKqlQuerysetID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := kqlqueryset.KQLQueryset{
		Type:        to.Ptr(kqlqueryset.ItemTypeKQLQueryset),
		Description: to.Ptr("A KQL queryset description."),
		DisplayName: to.Ptr("KQLQueryset_1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetKQLQueryset = func(ctx context.Context, workspaceID string, kqlQuerysetID string, options *kqlqueryset.ItemsClientGetKQLQuerysetOptions) (resp azfake.Responder[kqlqueryset.ItemsClientGetKQLQuerysetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleKqlQuerysetID, kqlQuerysetID)
		resp = azfake.Responder[kqlqueryset.ItemsClientGetKQLQuerysetResponse]{}
		resp.SetResponse(http.StatusOK, kqlqueryset.ItemsClientGetKQLQuerysetResponse{KQLQueryset: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetKQLQueryset(ctx, exampleWorkspaceID, exampleKqlQuerysetID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.KQLQueryset))
}

func (testsuite *FakeTestSuite) TestItems_UpdateKQLQueryset() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a KQL queryset example"},
	})
	var exampleWorkspaceID string
	var exampleKqlQuerysetID string
	var exampleUpdateKQLQuerysetRequest kqlqueryset.UpdateKQLQuerysetRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleKqlQuerysetID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateKQLQuerysetRequest = kqlqueryset.UpdateKQLQuerysetRequest{
		Description: to.Ptr("A new description for KQL queryset."),
		DisplayName: to.Ptr("KQLQueryset_New_Name"),
	}

	exampleRes := kqlqueryset.KQLQueryset{
		Type:        to.Ptr(kqlqueryset.ItemTypeKQLQueryset),
		Description: to.Ptr("A new description for KQL queryset."),
		DisplayName: to.Ptr("KQLQueryset_New_Name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateKQLQueryset = func(ctx context.Context, workspaceID string, kqlQuerysetID string, updateKQLQuerysetRequest kqlqueryset.UpdateKQLQuerysetRequest, options *kqlqueryset.ItemsClientUpdateKQLQuerysetOptions) (resp azfake.Responder[kqlqueryset.ItemsClientUpdateKQLQuerysetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleKqlQuerysetID, kqlQuerysetID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateKQLQuerysetRequest, updateKQLQuerysetRequest))
		resp = azfake.Responder[kqlqueryset.ItemsClientUpdateKQLQuerysetResponse]{}
		resp.SetResponse(http.StatusOK, kqlqueryset.ItemsClientUpdateKQLQuerysetResponse{KQLQueryset: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateKQLQueryset(ctx, exampleWorkspaceID, exampleKqlQuerysetID, exampleUpdateKQLQuerysetRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.KQLQueryset))
}

func (testsuite *FakeTestSuite) TestItems_DeleteKQLQueryset() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a KQL queryset example"},
	})
	var exampleWorkspaceID string
	var exampleKqlQuerysetID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleKqlQuerysetID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteKQLQueryset = func(ctx context.Context, workspaceID string, kqlQuerysetID string, options *kqlqueryset.ItemsClientDeleteKQLQuerysetOptions) (resp azfake.Responder[kqlqueryset.ItemsClientDeleteKQLQuerysetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleKqlQuerysetID, kqlQuerysetID)
		resp = azfake.Responder[kqlqueryset.ItemsClientDeleteKQLQuerysetResponse]{}
		resp.SetResponse(http.StatusOK, kqlqueryset.ItemsClientDeleteKQLQuerysetResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteKQLQueryset(ctx, exampleWorkspaceID, exampleKqlQuerysetID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}
