// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package mirroreddatabase

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
)

// MirroringClient contains the methods for the Mirroring group.
// Don't use this type directly, use a constructor function instead.
type MirroringClient struct {
	internal *azcore.Client
	endpoint string
}

// GetMirroringStatus - PERMISSIONS The caller must have read permissions for the mirrored database.
// REQUIRED DELEGATED SCOPES MirroredDatabase.Read.All or MirroredDatabase.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredDatabaseID - The mirrored database ID.
//   - options - MirroringClientGetMirroringStatusOptions contains the optional parameters for the MirroringClient.GetMirroringStatus
//     method.
func (client *MirroringClient) GetMirroringStatus(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *MirroringClientGetMirroringStatusOptions) (MirroringClientGetMirroringStatusResponse, error) {
	var err error
	const operationName = "mirroreddatabase.MirroringClient.GetMirroringStatus"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getMirroringStatusCreateRequest(ctx, workspaceID, mirroredDatabaseID, options)
	if err != nil {
		return MirroringClientGetMirroringStatusResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MirroringClientGetMirroringStatusResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return MirroringClientGetMirroringStatusResponse{}, err
	}
	resp, err := client.getMirroringStatusHandleResponse(httpResp)
	return resp, err
}

// getMirroringStatusCreateRequest creates the GetMirroringStatus request.
func (client *MirroringClient) getMirroringStatusCreateRequest(ctx context.Context, workspaceID string, mirroredDatabaseID string, _ *MirroringClientGetMirroringStatusOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredDatabases/{mirroredDatabaseId}/getMirroringStatus"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredDatabaseID == "" {
		return nil, errors.New("parameter mirroredDatabaseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredDatabaseId}", url.PathEscape(mirroredDatabaseID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMirroringStatusHandleResponse handles the GetMirroringStatus response.
func (client *MirroringClient) getMirroringStatusHandleResponse(resp *http.Response) (MirroringClientGetMirroringStatusResponse, error) {
	result := MirroringClientGetMirroringStatusResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MirroringStatusResponse); err != nil {
		return MirroringClientGetMirroringStatusResponse{}, err
	}
	return result, nil
}

// NewGetTablesMirroringStatusPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have read permissions for the mirrored database.
// REQUIRED DELEGATED SCOPES MirroredDatabase.Read.All or MirroredDatabase.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredDatabaseID - The mirrored database ID.
//   - options - MirroringClientGetTablesMirroringStatusOptions contains the optional parameters for the MirroringClient.NewGetTablesMirroringStatusPager
//     method.
func (client *MirroringClient) NewGetTablesMirroringStatusPager(workspaceID string, mirroredDatabaseID string, options *MirroringClientGetTablesMirroringStatusOptions) *runtime.Pager[MirroringClientGetTablesMirroringStatusResponse] {
	return runtime.NewPager(runtime.PagingHandler[MirroringClientGetTablesMirroringStatusResponse]{
		More: func(page MirroringClientGetTablesMirroringStatusResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *MirroringClientGetTablesMirroringStatusResponse) (MirroringClientGetTablesMirroringStatusResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "mirroreddatabase.MirroringClient.NewGetTablesMirroringStatusPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.getTablesMirroringStatusCreateRequest(ctx, workspaceID, mirroredDatabaseID, options)
			}, nil)
			if err != nil {
				return MirroringClientGetTablesMirroringStatusResponse{}, err
			}
			return client.getTablesMirroringStatusHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// getTablesMirroringStatusCreateRequest creates the GetTablesMirroringStatus request.
func (client *MirroringClient) getTablesMirroringStatusCreateRequest(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *MirroringClientGetTablesMirroringStatusOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredDatabases/{mirroredDatabaseId}/getTablesMirroringStatus"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredDatabaseID == "" {
		return nil, errors.New("parameter mirroredDatabaseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredDatabaseId}", url.PathEscape(mirroredDatabaseID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getTablesMirroringStatusHandleResponse handles the GetTablesMirroringStatus response.
func (client *MirroringClient) getTablesMirroringStatusHandleResponse(resp *http.Response) (MirroringClientGetTablesMirroringStatusResponse, error) {
	result := MirroringClientGetTablesMirroringStatusResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TablesMirroringStatusResponse); err != nil {
		return MirroringClientGetTablesMirroringStatusResponse{}, err
	}
	return result, nil
}

// StartMirroring - PERMISSIONS The caller must have read and write permissions for the mirrored database.
// REQUIRED DELEGATED SCOPES MirroredDatabase.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredDatabaseID - The mirrored database ID.
//   - options - MirroringClientStartMirroringOptions contains the optional parameters for the MirroringClient.StartMirroring
//     method.
func (client *MirroringClient) StartMirroring(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *MirroringClientStartMirroringOptions) (MirroringClientStartMirroringResponse, error) {
	var err error
	const operationName = "mirroreddatabase.MirroringClient.StartMirroring"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.startMirroringCreateRequest(ctx, workspaceID, mirroredDatabaseID, options)
	if err != nil {
		return MirroringClientStartMirroringResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MirroringClientStartMirroringResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return MirroringClientStartMirroringResponse{}, err
	}
	return MirroringClientStartMirroringResponse{}, nil
}

// startMirroringCreateRequest creates the StartMirroring request.
func (client *MirroringClient) startMirroringCreateRequest(ctx context.Context, workspaceID string, mirroredDatabaseID string, _ *MirroringClientStartMirroringOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredDatabases/{mirroredDatabaseId}/startMirroring"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredDatabaseID == "" {
		return nil, errors.New("parameter mirroredDatabaseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredDatabaseId}", url.PathEscape(mirroredDatabaseID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// StopMirroring - PERMISSIONS The caller must have read and write permissions for the mirrored database.
// REQUIRED DELEGATED SCOPES MirroredDatabase.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredDatabaseID - The mirrored database ID.
//   - options - MirroringClientStopMirroringOptions contains the optional parameters for the MirroringClient.StopMirroring method.
func (client *MirroringClient) StopMirroring(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *MirroringClientStopMirroringOptions) (MirroringClientStopMirroringResponse, error) {
	var err error
	const operationName = "mirroreddatabase.MirroringClient.StopMirroring"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.stopMirroringCreateRequest(ctx, workspaceID, mirroredDatabaseID, options)
	if err != nil {
		return MirroringClientStopMirroringResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MirroringClientStopMirroringResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return MirroringClientStopMirroringResponse{}, err
	}
	return MirroringClientStopMirroringResponse{}, nil
}

// stopMirroringCreateRequest creates the StopMirroring request.
func (client *MirroringClient) stopMirroringCreateRequest(ctx context.Context, workspaceID string, mirroredDatabaseID string, _ *MirroringClientStopMirroringOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredDatabases/{mirroredDatabaseId}/stopMirroring"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredDatabaseID == "" {
		return nil, errors.New("parameter mirroredDatabaseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredDatabaseId}", url.PathEscape(mirroredDatabaseID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Custom code starts below

// GetTablesMirroringStatus - returns array of TableMirroringStatusResponse from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have read permissions for the mirrored database.
//
// # REQUIRED DELEGATED SCOPES MirroredDatabase.Read.All or MirroredDatabase.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredDatabaseID - The mirrored database ID.
//   - options - MirroringClientGetTablesMirroringStatusOptions contains the optional parameters for the MirroringClient.NewGetTablesMirroringStatusPager method.
func (client *MirroringClient) GetTablesMirroringStatus(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *MirroringClientGetTablesMirroringStatusOptions) ([]TableMirroringStatusResponse, error) {
	pager := client.NewGetTablesMirroringStatusPager(workspaceID, mirroredDatabaseID, options)
	mapper := func(resp MirroringClientGetTablesMirroringStatusResponse) []TableMirroringStatusResponse {
		return resp.Data
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []TableMirroringStatusResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []TableMirroringStatusResponse{}, err
	}
	return list, nil
}
