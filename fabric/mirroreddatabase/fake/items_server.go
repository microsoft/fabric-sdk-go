// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/mirroreddatabase"
)

// ItemsServer is a fake server for instances of the mirroreddatabase.ItemsClient type.
type ItemsServer struct {
	// CreateMirroredDatabase is the fake for method ItemsClient.CreateMirroredDatabase
	// HTTP status codes to indicate success: http.StatusCreated
	CreateMirroredDatabase func(ctx context.Context, workspaceID string, createMirroredDatabaseRequest mirroreddatabase.CreateMirroredDatabaseRequest, options *mirroreddatabase.ItemsClientCreateMirroredDatabaseOptions) (resp azfake.Responder[mirroreddatabase.ItemsClientCreateMirroredDatabaseResponse], errResp azfake.ErrorResponder)

	// DeleteMirroredDatabase is the fake for method ItemsClient.DeleteMirroredDatabase
	// HTTP status codes to indicate success: http.StatusOK
	DeleteMirroredDatabase func(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *mirroreddatabase.ItemsClientDeleteMirroredDatabaseOptions) (resp azfake.Responder[mirroreddatabase.ItemsClientDeleteMirroredDatabaseResponse], errResp azfake.ErrorResponder)

	// GetMirroredDatabase is the fake for method ItemsClient.GetMirroredDatabase
	// HTTP status codes to indicate success: http.StatusOK
	GetMirroredDatabase func(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *mirroreddatabase.ItemsClientGetMirroredDatabaseOptions) (resp azfake.Responder[mirroreddatabase.ItemsClientGetMirroredDatabaseResponse], errResp azfake.ErrorResponder)

	// GetMirroredDatabaseDefinition is the fake for method ItemsClient.GetMirroredDatabaseDefinition
	// HTTP status codes to indicate success: http.StatusOK
	GetMirroredDatabaseDefinition func(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *mirroreddatabase.ItemsClientGetMirroredDatabaseDefinitionOptions) (resp azfake.Responder[mirroreddatabase.ItemsClientGetMirroredDatabaseDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListMirroredDatabasesPager is the fake for method ItemsClient.NewListMirroredDatabasesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListMirroredDatabasesPager func(workspaceID string, options *mirroreddatabase.ItemsClientListMirroredDatabasesOptions) (resp azfake.PagerResponder[mirroreddatabase.ItemsClientListMirroredDatabasesResponse])

	// UpdateMirroredDatabase is the fake for method ItemsClient.UpdateMirroredDatabase
	// HTTP status codes to indicate success: http.StatusOK
	UpdateMirroredDatabase func(ctx context.Context, workspaceID string, mirroredDatabaseID string, updateMirroredDatabaseRequest mirroreddatabase.UpdateMirroredDatabaseRequest, options *mirroreddatabase.ItemsClientUpdateMirroredDatabaseOptions) (resp azfake.Responder[mirroreddatabase.ItemsClientUpdateMirroredDatabaseResponse], errResp azfake.ErrorResponder)

	// UpdateMirroredDatabaseDefinition is the fake for method ItemsClient.UpdateMirroredDatabaseDefinition
	// HTTP status codes to indicate success: http.StatusOK
	UpdateMirroredDatabaseDefinition func(ctx context.Context, workspaceID string, mirroredDatabaseID string, updateMirroredDatabaseDefinitionRequest mirroreddatabase.UpdateMirroredDatabaseDefinitionRequest, options *mirroreddatabase.ItemsClientUpdateMirroredDatabaseDefinitionOptions) (resp azfake.Responder[mirroreddatabase.ItemsClientUpdateMirroredDatabaseDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of mirroreddatabase.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                           srv,
		newListMirroredDatabasesPager: newTracker[azfake.PagerResponder[mirroreddatabase.ItemsClientListMirroredDatabasesResponse]](),
	}
}

// ItemsServerTransport connects instances of mirroreddatabase.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                           *ItemsServer
	newListMirroredDatabasesPager *tracker[azfake.PagerResponder[mirroreddatabase.ItemsClientListMirroredDatabasesResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if itemsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = itemsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ItemsClient.CreateMirroredDatabase":
				res.resp, res.err = i.dispatchCreateMirroredDatabase(req)
			case "ItemsClient.DeleteMirroredDatabase":
				res.resp, res.err = i.dispatchDeleteMirroredDatabase(req)
			case "ItemsClient.GetMirroredDatabase":
				res.resp, res.err = i.dispatchGetMirroredDatabase(req)
			case "ItemsClient.GetMirroredDatabaseDefinition":
				res.resp, res.err = i.dispatchGetMirroredDatabaseDefinition(req)
			case "ItemsClient.NewListMirroredDatabasesPager":
				res.resp, res.err = i.dispatchNewListMirroredDatabasesPager(req)
			case "ItemsClient.UpdateMirroredDatabase":
				res.resp, res.err = i.dispatchUpdateMirroredDatabase(req)
			case "ItemsClient.UpdateMirroredDatabaseDefinition":
				res.resp, res.err = i.dispatchUpdateMirroredDatabaseDefinition(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchCreateMirroredDatabase(req *http.Request) (*http.Response, error) {
	if i.srv.CreateMirroredDatabase == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateMirroredDatabase not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredDatabases`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[mirroreddatabase.CreateMirroredDatabaseRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.CreateMirroredDatabase(req.Context(), workspaceIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MirroredDatabase, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteMirroredDatabase(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteMirroredDatabase == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteMirroredDatabase not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredDatabases/(?P<mirroredDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mirroredDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredDatabaseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteMirroredDatabase(req.Context(), workspaceIDParam, mirroredDatabaseIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetMirroredDatabase(req *http.Request) (*http.Response, error) {
	if i.srv.GetMirroredDatabase == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMirroredDatabase not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredDatabases/(?P<mirroredDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mirroredDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredDatabaseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetMirroredDatabase(req.Context(), workspaceIDParam, mirroredDatabaseIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MirroredDatabase, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetMirroredDatabaseDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.GetMirroredDatabaseDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMirroredDatabaseDefinition not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredDatabases/(?P<mirroredDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mirroredDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredDatabaseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetMirroredDatabaseDefinition(req.Context(), workspaceIDParam, mirroredDatabaseIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DefinitionResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListMirroredDatabasesPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListMirroredDatabasesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListMirroredDatabasesPager not implemented")}
	}
	newListMirroredDatabasesPager := i.newListMirroredDatabasesPager.get(req)
	if newListMirroredDatabasesPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredDatabases`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *mirroreddatabase.ItemsClientListMirroredDatabasesOptions
		if continuationTokenParam != nil {
			options = &mirroreddatabase.ItemsClientListMirroredDatabasesOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListMirroredDatabasesPager(workspaceIDParam, options)
		newListMirroredDatabasesPager = &resp
		i.newListMirroredDatabasesPager.add(req, newListMirroredDatabasesPager)
		server.PagerResponderInjectNextLinks(newListMirroredDatabasesPager, req, func(page *mirroreddatabase.ItemsClientListMirroredDatabasesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListMirroredDatabasesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListMirroredDatabasesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListMirroredDatabasesPager) {
		i.newListMirroredDatabasesPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateMirroredDatabase(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateMirroredDatabase == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateMirroredDatabase not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredDatabases/(?P<mirroredDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[mirroreddatabase.UpdateMirroredDatabaseRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mirroredDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredDatabaseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateMirroredDatabase(req.Context(), workspaceIDParam, mirroredDatabaseIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MirroredDatabase, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateMirroredDatabaseDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateMirroredDatabaseDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateMirroredDatabaseDefinition not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredDatabases/(?P<mirroredDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[mirroreddatabase.UpdateMirroredDatabaseDefinitionRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mirroredDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredDatabaseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateMirroredDatabaseDefinition(req.Context(), workspaceIDParam, mirroredDatabaseIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ItemsServerTransport
var itemsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
