// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/mirroreddatabase"
)

// MirroringServer is a fake server for instances of the mirroreddatabase.MirroringClient type.
type MirroringServer struct {
	// GetMirroringStatus is the fake for method MirroringClient.GetMirroringStatus
	// HTTP status codes to indicate success: http.StatusOK
	GetMirroringStatus func(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *mirroreddatabase.MirroringClientGetMirroringStatusOptions) (resp azfake.Responder[mirroreddatabase.MirroringClientGetMirroringStatusResponse], errResp azfake.ErrorResponder)

	// NewGetTablesMirroringStatusPager is the fake for method MirroringClient.NewGetTablesMirroringStatusPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetTablesMirroringStatusPager func(workspaceID string, mirroredDatabaseID string, options *mirroreddatabase.MirroringClientGetTablesMirroringStatusOptions) (resp azfake.PagerResponder[mirroreddatabase.MirroringClientGetTablesMirroringStatusResponse])

	// StartMirroring is the fake for method MirroringClient.StartMirroring
	// HTTP status codes to indicate success: http.StatusOK
	StartMirroring func(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *mirroreddatabase.MirroringClientStartMirroringOptions) (resp azfake.Responder[mirroreddatabase.MirroringClientStartMirroringResponse], errResp azfake.ErrorResponder)

	// StopMirroring is the fake for method MirroringClient.StopMirroring
	// HTTP status codes to indicate success: http.StatusOK
	StopMirroring func(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *mirroreddatabase.MirroringClientStopMirroringOptions) (resp azfake.Responder[mirroreddatabase.MirroringClientStopMirroringResponse], errResp azfake.ErrorResponder)
}

// NewMirroringServerTransport creates a new instance of MirroringServerTransport with the provided implementation.
// The returned MirroringServerTransport instance is connected to an instance of mirroreddatabase.MirroringClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewMirroringServerTransport(srv *MirroringServer) *MirroringServerTransport {
	return &MirroringServerTransport{
		srv:                              srv,
		newGetTablesMirroringStatusPager: newTracker[azfake.PagerResponder[mirroreddatabase.MirroringClientGetTablesMirroringStatusResponse]](),
	}
}

// MirroringServerTransport connects instances of mirroreddatabase.MirroringClient to instances of MirroringServer.
// Don't use this type directly, use NewMirroringServerTransport instead.
type MirroringServerTransport struct {
	srv                              *MirroringServer
	newGetTablesMirroringStatusPager *tracker[azfake.PagerResponder[mirroreddatabase.MirroringClientGetTablesMirroringStatusResponse]]
}

// Do implements the policy.Transporter interface for MirroringServerTransport.
func (m *MirroringServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return m.dispatchToMethodFake(req, method)
}

func (m *MirroringServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if mirroringServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = mirroringServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "MirroringClient.GetMirroringStatus":
				res.resp, res.err = m.dispatchGetMirroringStatus(req)
			case "MirroringClient.NewGetTablesMirroringStatusPager":
				res.resp, res.err = m.dispatchNewGetTablesMirroringStatusPager(req)
			case "MirroringClient.StartMirroring":
				res.resp, res.err = m.dispatchStartMirroring(req)
			case "MirroringClient.StopMirroring":
				res.resp, res.err = m.dispatchStopMirroring(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (m *MirroringServerTransport) dispatchGetMirroringStatus(req *http.Request) (*http.Response, error) {
	if m.srv.GetMirroringStatus == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMirroringStatus not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredDatabases/(?P<mirroredDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getMirroringStatus`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mirroredDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredDatabaseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.GetMirroringStatus(req.Context(), workspaceIDParam, mirroredDatabaseIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MirroringStatusResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MirroringServerTransport) dispatchNewGetTablesMirroringStatusPager(req *http.Request) (*http.Response, error) {
	if m.srv.NewGetTablesMirroringStatusPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetTablesMirroringStatusPager not implemented")}
	}
	newGetTablesMirroringStatusPager := m.newGetTablesMirroringStatusPager.get(req)
	if newGetTablesMirroringStatusPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredDatabases/(?P<mirroredDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getTablesMirroringStatus`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		mirroredDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredDatabaseId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *mirroreddatabase.MirroringClientGetTablesMirroringStatusOptions
		if continuationTokenParam != nil {
			options = &mirroreddatabase.MirroringClientGetTablesMirroringStatusOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := m.srv.NewGetTablesMirroringStatusPager(workspaceIDParam, mirroredDatabaseIDParam, options)
		newGetTablesMirroringStatusPager = &resp
		m.newGetTablesMirroringStatusPager.add(req, newGetTablesMirroringStatusPager)
		server.PagerResponderInjectNextLinks(newGetTablesMirroringStatusPager, req, func(page *mirroreddatabase.MirroringClientGetTablesMirroringStatusResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetTablesMirroringStatusPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		m.newGetTablesMirroringStatusPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetTablesMirroringStatusPager) {
		m.newGetTablesMirroringStatusPager.remove(req)
	}
	return resp, nil
}

func (m *MirroringServerTransport) dispatchStartMirroring(req *http.Request) (*http.Response, error) {
	if m.srv.StartMirroring == nil {
		return nil, &nonRetriableError{errors.New("fake for method StartMirroring not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredDatabases/(?P<mirroredDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/startMirroring`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mirroredDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredDatabaseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.StartMirroring(req.Context(), workspaceIDParam, mirroredDatabaseIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MirroringServerTransport) dispatchStopMirroring(req *http.Request) (*http.Response, error) {
	if m.srv.StopMirroring == nil {
		return nil, &nonRetriableError{errors.New("fake for method StopMirroring not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mirroredDatabases/(?P<mirroredDatabaseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/stopMirroring`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	mirroredDatabaseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("mirroredDatabaseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.StopMirroring(req.Context(), workspaceIDParam, mirroredDatabaseIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to MirroringServerTransport
var mirroringServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
