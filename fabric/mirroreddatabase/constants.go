// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package mirroreddatabase

// ItemType - The type of the item. Additional item types may be added over time.
type ItemType string

const (
	// ItemTypeDashboard - PowerBI dashboard.
	ItemTypeDashboard ItemType = "Dashboard"
	// ItemTypeDataPipeline - A data pipeline.
	ItemTypeDataPipeline ItemType = "DataPipeline"
	// ItemTypeDatamart - PowerBI datamart.
	ItemTypeDatamart ItemType = "Datamart"
	// ItemTypeEnvironment - An environment.
	ItemTypeEnvironment ItemType = "Environment"
	// ItemTypeEventhouse - An eventhouse.
	ItemTypeEventhouse ItemType = "Eventhouse"
	// ItemTypeEventstream - An eventstream.
	ItemTypeEventstream ItemType = "Eventstream"
	// ItemTypeKQLDashboard - A KQL dashboard.
	ItemTypeKQLDashboard ItemType = "KQLDashboard"
	// ItemTypeKQLDatabase - A KQL database.
	ItemTypeKQLDatabase ItemType = "KQLDatabase"
	// ItemTypeKQLQueryset - A KQL queryset.
	ItemTypeKQLQueryset ItemType = "KQLQueryset"
	// ItemTypeLakehouse - A lakehouse.
	ItemTypeLakehouse ItemType = "Lakehouse"
	// ItemTypeMLExperiment - A machine learning experiment.
	ItemTypeMLExperiment ItemType = "MLExperiment"
	// ItemTypeMLModel - A machine learning model.
	ItemTypeMLModel ItemType = "MLModel"
	// ItemTypeMirroredDatabase - A mirrored database.
	ItemTypeMirroredDatabase ItemType = "MirroredDatabase"
	// ItemTypeMirroredWarehouse - A mirrored warehouse.
	ItemTypeMirroredWarehouse ItemType = "MirroredWarehouse"
	// ItemTypeNotebook - A notebook.
	ItemTypeNotebook ItemType = "Notebook"
	// ItemTypePaginatedReport - PowerBI paginated report.
	ItemTypePaginatedReport ItemType = "PaginatedReport"
	// ItemTypeReflex - A Reflex.
	ItemTypeReflex ItemType = "Reflex"
	// ItemTypeReport - PowerBI report.
	ItemTypeReport ItemType = "Report"
	// ItemTypeSQLEndpoint - An SQL endpoint.
	ItemTypeSQLEndpoint ItemType = "SQLEndpoint"
	// ItemTypeSemanticModel - PowerBI semantic model.
	ItemTypeSemanticModel ItemType = "SemanticModel"
	// ItemTypeSparkJobDefinition - A spark job definition.
	ItemTypeSparkJobDefinition ItemType = "SparkJobDefinition"
	// ItemTypeWarehouse - A warehouse.
	ItemTypeWarehouse ItemType = "Warehouse"
)

// PossibleItemTypeValues returns the possible values for the ItemType const type.
func PossibleItemTypeValues() []ItemType {
	return []ItemType{
		ItemTypeDashboard,
		ItemTypeDataPipeline,
		ItemTypeDatamart,
		ItemTypeEnvironment,
		ItemTypeEventhouse,
		ItemTypeEventstream,
		ItemTypeKQLDashboard,
		ItemTypeKQLDatabase,
		ItemTypeKQLQueryset,
		ItemTypeLakehouse,
		ItemTypeMLExperiment,
		ItemTypeMLModel,
		ItemTypeMirroredDatabase,
		ItemTypeMirroredWarehouse,
		ItemTypeNotebook,
		ItemTypePaginatedReport,
		ItemTypeReflex,
		ItemTypeReport,
		ItemTypeSQLEndpoint,
		ItemTypeSemanticModel,
		ItemTypeSparkJobDefinition,
		ItemTypeWarehouse,
	}
}

// MirroringStatus - The mirroring status type. Additional MirroringStatus types may be added over time.
type MirroringStatus string

const (
	// MirroringStatusInitialized - The associated SQL endpoint provisioning is succeeded and the mirrored database is ready for
	// start.
	MirroringStatusInitialized MirroringStatus = "Initialized"
	// MirroringStatusInitializing - The associated SQL endpoint provisioning is in progress.
	MirroringStatusInitializing MirroringStatus = "Initializing"
	// MirroringStatusRunning - The mirroring instance for the mirrored database is running.
	MirroringStatusRunning MirroringStatus = "Running"
	// MirroringStatusStarting - The mirroring instance for the mirrored database is starting.
	MirroringStatusStarting MirroringStatus = "Starting"
	// MirroringStatusStopped - The mirroring instance for the mirrored database is stopped.
	MirroringStatusStopped MirroringStatus = "Stopped"
	// MirroringStatusStopping - The mirroring instance for the mirrored database is stopping.
	MirroringStatusStopping MirroringStatus = "Stopping"
)

// PossibleMirroringStatusValues returns the possible values for the MirroringStatus const type.
func PossibleMirroringStatusValues() []MirroringStatus {
	return []MirroringStatus{
		MirroringStatusInitialized,
		MirroringStatusInitializing,
		MirroringStatusRunning,
		MirroringStatusStarting,
		MirroringStatusStopped,
		MirroringStatusStopping,
	}
}

// PayloadType - The type of the definition part payload. Additional payload types may be added over time.
type PayloadType string

const (
	// PayloadTypeInlineBase64 - Inline Base 64.
	PayloadTypeInlineBase64 PayloadType = "InlineBase64"
)

// PossiblePayloadTypeValues returns the possible values for the PayloadType const type.
func PossiblePayloadTypeValues() []PayloadType {
	return []PayloadType{
		PayloadTypeInlineBase64,
	}
}

// SQLEndpointProvisioningStatus - The SQL endpoint provisioning status type. Additional SqlEndpointProvisioningStatus types
// may be added over time.
type SQLEndpointProvisioningStatus string

const (
	// SQLEndpointProvisioningStatusFailed - SQL endpoint provisioning failed.
	SQLEndpointProvisioningStatusFailed SQLEndpointProvisioningStatus = "Failed"
	// SQLEndpointProvisioningStatusInProgress - SQL endpoint provisioning is in progress.
	SQLEndpointProvisioningStatusInProgress SQLEndpointProvisioningStatus = "InProgress"
	// SQLEndpointProvisioningStatusSuccess - SQL endpoint provisioning succeeded.
	SQLEndpointProvisioningStatusSuccess SQLEndpointProvisioningStatus = "Success"
)

// PossibleSQLEndpointProvisioningStatusValues returns the possible values for the SQLEndpointProvisioningStatus const type.
func PossibleSQLEndpointProvisioningStatusValues() []SQLEndpointProvisioningStatus {
	return []SQLEndpointProvisioningStatus{
		SQLEndpointProvisioningStatusFailed,
		SQLEndpointProvisioningStatusInProgress,
		SQLEndpointProvisioningStatusSuccess,
	}
}

// TableMirroringStatus - The table mirroring status type. Additional TableMirroringStatus types may be added over time.
type TableMirroringStatus string

const (
	// TableMirroringStatusFailed - Mirroing of the table failed with error.
	TableMirroringStatusFailed TableMirroringStatus = "Failed"
	// TableMirroringStatusInitialized - Mirroing of the table is initialized.
	TableMirroringStatusInitialized TableMirroringStatus = "Initialized"
	// TableMirroringStatusReplicating - The table is replicating.
	TableMirroringStatusReplicating TableMirroringStatus = "Replicating"
	// TableMirroringStatusReseeding - The table is reseeding.
	TableMirroringStatusReseeding TableMirroringStatus = "Reseeding"
	// TableMirroringStatusSnapshotting - The table is snapshotting.
	TableMirroringStatusSnapshotting TableMirroringStatus = "Snapshotting"
	// TableMirroringStatusStopped - Mirroring of the table is stopped.
	TableMirroringStatusStopped TableMirroringStatus = "Stopped"
)

// PossibleTableMirroringStatusValues returns the possible values for the TableMirroringStatus const type.
func PossibleTableMirroringStatusValues() []TableMirroringStatus {
	return []TableMirroringStatus{
		TableMirroringStatusFailed,
		TableMirroringStatusInitialized,
		TableMirroringStatusReplicating,
		TableMirroringStatusReseeding,
		TableMirroringStatusSnapshotting,
		TableMirroringStatusStopped,
	}
}
