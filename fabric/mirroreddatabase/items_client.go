// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package mirroreddatabase

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// CreateMirroredDatabase - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES MirroredDatabase.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createMirroredDatabaseRequest - Create item request payload.
//   - options - ItemsClientCreateMirroredDatabaseOptions contains the optional parameters for the ItemsClient.CreateMirroredDatabase
//     method.
func (client *ItemsClient) CreateMirroredDatabase(ctx context.Context, workspaceID string, createMirroredDatabaseRequest CreateMirroredDatabaseRequest, options *ItemsClientCreateMirroredDatabaseOptions) (ItemsClientCreateMirroredDatabaseResponse, error) {
	var err error
	const operationName = "mirroreddatabase.ItemsClient.CreateMirroredDatabase"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createMirroredDatabaseCreateRequest(ctx, workspaceID, createMirroredDatabaseRequest, options)
	if err != nil {
		return ItemsClientCreateMirroredDatabaseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientCreateMirroredDatabaseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = core.NewResponseError(httpResp)
		return ItemsClientCreateMirroredDatabaseResponse{}, err
	}
	resp, err := client.createMirroredDatabaseHandleResponse(httpResp)
	return resp, err
}

// createMirroredDatabaseCreateRequest creates the CreateMirroredDatabase request.
func (client *ItemsClient) createMirroredDatabaseCreateRequest(ctx context.Context, workspaceID string, createMirroredDatabaseRequest CreateMirroredDatabaseRequest, _ *ItemsClientCreateMirroredDatabaseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredDatabases"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createMirroredDatabaseRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// createMirroredDatabaseHandleResponse handles the CreateMirroredDatabase response.
func (client *ItemsClient) createMirroredDatabaseHandleResponse(resp *http.Response) (ItemsClientCreateMirroredDatabaseResponse, error) {
	result := ItemsClientCreateMirroredDatabaseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MirroredDatabase); err != nil {
		return ItemsClientCreateMirroredDatabaseResponse{}, err
	}
	return result, nil
}

// DeleteMirroredDatabase - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES MirroredDatabase.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredDatabaseID - The mirrored database ID.
//   - options - ItemsClientDeleteMirroredDatabaseOptions contains the optional parameters for the ItemsClient.DeleteMirroredDatabase
//     method.
func (client *ItemsClient) DeleteMirroredDatabase(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *ItemsClientDeleteMirroredDatabaseOptions) (ItemsClientDeleteMirroredDatabaseResponse, error) {
	var err error
	const operationName = "mirroreddatabase.ItemsClient.DeleteMirroredDatabase"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteMirroredDatabaseCreateRequest(ctx, workspaceID, mirroredDatabaseID, options)
	if err != nil {
		return ItemsClientDeleteMirroredDatabaseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteMirroredDatabaseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteMirroredDatabaseResponse{}, err
	}
	return ItemsClientDeleteMirroredDatabaseResponse{}, nil
}

// deleteMirroredDatabaseCreateRequest creates the DeleteMirroredDatabase request.
func (client *ItemsClient) deleteMirroredDatabaseCreateRequest(ctx context.Context, workspaceID string, mirroredDatabaseID string, _ *ItemsClientDeleteMirroredDatabaseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredDatabases/{mirroredDatabaseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredDatabaseID == "" {
		return nil, errors.New("parameter mirroredDatabaseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredDatabaseId}", url.PathEscape(mirroredDatabaseID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetMirroredDatabase - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES MirroredDatabase.Read.All or MirroredDatabase.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredDatabaseID - The mirrored database ID.
//   - options - ItemsClientGetMirroredDatabaseOptions contains the optional parameters for the ItemsClient.GetMirroredDatabase
//     method.
func (client *ItemsClient) GetMirroredDatabase(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *ItemsClientGetMirroredDatabaseOptions) (ItemsClientGetMirroredDatabaseResponse, error) {
	var err error
	const operationName = "mirroreddatabase.ItemsClient.GetMirroredDatabase"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getMirroredDatabaseCreateRequest(ctx, workspaceID, mirroredDatabaseID, options)
	if err != nil {
		return ItemsClientGetMirroredDatabaseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetMirroredDatabaseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetMirroredDatabaseResponse{}, err
	}
	resp, err := client.getMirroredDatabaseHandleResponse(httpResp)
	return resp, err
}

// getMirroredDatabaseCreateRequest creates the GetMirroredDatabase request.
func (client *ItemsClient) getMirroredDatabaseCreateRequest(ctx context.Context, workspaceID string, mirroredDatabaseID string, _ *ItemsClientGetMirroredDatabaseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredDatabases/{mirroredDatabaseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredDatabaseID == "" {
		return nil, errors.New("parameter mirroredDatabaseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredDatabaseId}", url.PathEscape(mirroredDatabaseID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMirroredDatabaseHandleResponse handles the GetMirroredDatabase response.
func (client *ItemsClient) getMirroredDatabaseHandleResponse(resp *http.Response) (ItemsClientGetMirroredDatabaseResponse, error) {
	result := ItemsClientGetMirroredDatabaseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MirroredDatabase); err != nil {
		return ItemsClientGetMirroredDatabaseResponse{}, err
	}
	return result, nil
}

// GetMirroredDatabaseDefinition - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES MirroredDatabase.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredDatabaseID - The mirrored database ID.
//   - options - ItemsClientGetMirroredDatabaseDefinitionOptions contains the optional parameters for the ItemsClient.GetMirroredDatabaseDefinition
//     method.
func (client *ItemsClient) GetMirroredDatabaseDefinition(ctx context.Context, workspaceID string, mirroredDatabaseID string, options *ItemsClientGetMirroredDatabaseDefinitionOptions) (ItemsClientGetMirroredDatabaseDefinitionResponse, error) {
	var err error
	const operationName = "mirroreddatabase.ItemsClient.GetMirroredDatabaseDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getMirroredDatabaseDefinitionCreateRequest(ctx, workspaceID, mirroredDatabaseID, options)
	if err != nil {
		return ItemsClientGetMirroredDatabaseDefinitionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetMirroredDatabaseDefinitionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetMirroredDatabaseDefinitionResponse{}, err
	}
	resp, err := client.getMirroredDatabaseDefinitionHandleResponse(httpResp)
	return resp, err
}

// getMirroredDatabaseDefinitionCreateRequest creates the GetMirroredDatabaseDefinition request.
func (client *ItemsClient) getMirroredDatabaseDefinitionCreateRequest(ctx context.Context, workspaceID string, mirroredDatabaseID string, _ *ItemsClientGetMirroredDatabaseDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredDatabases/{mirroredDatabaseId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredDatabaseID == "" {
		return nil, errors.New("parameter mirroredDatabaseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredDatabaseId}", url.PathEscape(mirroredDatabaseID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMirroredDatabaseDefinitionHandleResponse handles the GetMirroredDatabaseDefinition response.
func (client *ItemsClient) getMirroredDatabaseDefinitionHandleResponse(resp *http.Response) (ItemsClientGetMirroredDatabaseDefinitionResponse, error) {
	result := ItemsClientGetMirroredDatabaseDefinitionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DefinitionResponse); err != nil {
		return ItemsClientGetMirroredDatabaseDefinitionResponse{}, err
	}
	return result, nil
}

// NewListMirroredDatabasesPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListMirroredDatabasesOptions contains the optional parameters for the ItemsClient.NewListMirroredDatabasesPager
//     method.
func (client *ItemsClient) NewListMirroredDatabasesPager(workspaceID string, options *ItemsClientListMirroredDatabasesOptions) *runtime.Pager[ItemsClientListMirroredDatabasesResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListMirroredDatabasesResponse]{
		More: func(page ItemsClientListMirroredDatabasesResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListMirroredDatabasesResponse) (ItemsClientListMirroredDatabasesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "mirroreddatabase.ItemsClient.NewListMirroredDatabasesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listMirroredDatabasesCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListMirroredDatabasesResponse{}, err
			}
			return client.listMirroredDatabasesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listMirroredDatabasesCreateRequest creates the ListMirroredDatabases request.
func (client *ItemsClient) listMirroredDatabasesCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListMirroredDatabasesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredDatabases"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listMirroredDatabasesHandleResponse handles the ListMirroredDatabases response.
func (client *ItemsClient) listMirroredDatabasesHandleResponse(resp *http.Response) (ItemsClientListMirroredDatabasesResponse, error) {
	result := ItemsClientListMirroredDatabasesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MirroredDatabases); err != nil {
		return ItemsClientListMirroredDatabasesResponse{}, err
	}
	return result, nil
}

// UpdateMirroredDatabase - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES MirroredDatabase.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredDatabaseID - The mirrored database ID.
//   - updateMirroredDatabaseRequest - Update mirrored database request payload.
//   - options - ItemsClientUpdateMirroredDatabaseOptions contains the optional parameters for the ItemsClient.UpdateMirroredDatabase
//     method.
func (client *ItemsClient) UpdateMirroredDatabase(ctx context.Context, workspaceID string, mirroredDatabaseID string, updateMirroredDatabaseRequest UpdateMirroredDatabaseRequest, options *ItemsClientUpdateMirroredDatabaseOptions) (ItemsClientUpdateMirroredDatabaseResponse, error) {
	var err error
	const operationName = "mirroreddatabase.ItemsClient.UpdateMirroredDatabase"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateMirroredDatabaseCreateRequest(ctx, workspaceID, mirroredDatabaseID, updateMirroredDatabaseRequest, options)
	if err != nil {
		return ItemsClientUpdateMirroredDatabaseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateMirroredDatabaseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateMirroredDatabaseResponse{}, err
	}
	resp, err := client.updateMirroredDatabaseHandleResponse(httpResp)
	return resp, err
}

// updateMirroredDatabaseCreateRequest creates the UpdateMirroredDatabase request.
func (client *ItemsClient) updateMirroredDatabaseCreateRequest(ctx context.Context, workspaceID string, mirroredDatabaseID string, updateMirroredDatabaseRequest UpdateMirroredDatabaseRequest, _ *ItemsClientUpdateMirroredDatabaseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredDatabases/{mirroredDatabaseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredDatabaseID == "" {
		return nil, errors.New("parameter mirroredDatabaseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredDatabaseId}", url.PathEscape(mirroredDatabaseID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateMirroredDatabaseRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateMirroredDatabaseHandleResponse handles the UpdateMirroredDatabase response.
func (client *ItemsClient) updateMirroredDatabaseHandleResponse(resp *http.Response) (ItemsClientUpdateMirroredDatabaseResponse, error) {
	result := ItemsClientUpdateMirroredDatabaseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MirroredDatabase); err != nil {
		return ItemsClientUpdateMirroredDatabaseResponse{}, err
	}
	return result, nil
}

// UpdateMirroredDatabaseDefinition - PERMISSIONS The API caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES MirroredDatabase.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - mirroredDatabaseID - The mirrored database ID.
//   - updateMirroredDatabaseDefinitionRequest - Update mirrored database definition request payload.
//   - options - ItemsClientUpdateMirroredDatabaseDefinitionOptions contains the optional parameters for the ItemsClient.UpdateMirroredDatabaseDefinition
//     method.
func (client *ItemsClient) UpdateMirroredDatabaseDefinition(ctx context.Context, workspaceID string, mirroredDatabaseID string, updateMirroredDatabaseDefinitionRequest UpdateMirroredDatabaseDefinitionRequest, options *ItemsClientUpdateMirroredDatabaseDefinitionOptions) (ItemsClientUpdateMirroredDatabaseDefinitionResponse, error) {
	var err error
	const operationName = "mirroreddatabase.ItemsClient.UpdateMirroredDatabaseDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateMirroredDatabaseDefinitionCreateRequest(ctx, workspaceID, mirroredDatabaseID, updateMirroredDatabaseDefinitionRequest, options)
	if err != nil {
		return ItemsClientUpdateMirroredDatabaseDefinitionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateMirroredDatabaseDefinitionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateMirroredDatabaseDefinitionResponse{}, err
	}
	return ItemsClientUpdateMirroredDatabaseDefinitionResponse{}, nil
}

// updateMirroredDatabaseDefinitionCreateRequest creates the UpdateMirroredDatabaseDefinition request.
func (client *ItemsClient) updateMirroredDatabaseDefinitionCreateRequest(ctx context.Context, workspaceID string, mirroredDatabaseID string, updateMirroredDatabaseDefinitionRequest UpdateMirroredDatabaseDefinitionRequest, _ *ItemsClientUpdateMirroredDatabaseDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/mirroredDatabases/{mirroredDatabaseId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if mirroredDatabaseID == "" {
		return nil, errors.New("parameter mirroredDatabaseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mirroredDatabaseId}", url.PathEscape(mirroredDatabaseID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateMirroredDatabaseDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// ListMirroredDatabases - returns array of MirroredDatabase from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | No | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | No |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListMirroredDatabasesOptions contains the optional parameters for the ItemsClient.NewListMirroredDatabasesPager method.
func (client *ItemsClient) ListMirroredDatabases(ctx context.Context, workspaceID string, options *ItemsClientListMirroredDatabasesOptions) ([]MirroredDatabase, error) {
	pager := client.NewListMirroredDatabasesPager(workspaceID, options)
	mapper := func(resp ItemsClientListMirroredDatabasesResponse) []MirroredDatabase {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []MirroredDatabase{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []MirroredDatabase{}, err
	}
	return list, nil
}
