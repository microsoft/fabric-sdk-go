// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/environment"
)

// ItemsServer is a fake server for instances of the environment.ItemsClient type.
type ItemsServer struct {
	// BeginCreateEnvironment is the fake for method ItemsClient.BeginCreateEnvironment
	// HTTP status codes to indicate success: http.StatusCreated, http.StatusAccepted
	BeginCreateEnvironment func(ctx context.Context, workspaceID string, createEnvironmentRequest environment.CreateEnvironmentRequest, options *environment.ItemsClientBeginCreateEnvironmentOptions) (resp azfake.PollerResponder[environment.ItemsClientCreateEnvironmentResponse], errResp azfake.ErrorResponder)

	// DeleteEnvironment is the fake for method ItemsClient.DeleteEnvironment
	// HTTP status codes to indicate success: http.StatusOK
	DeleteEnvironment func(ctx context.Context, workspaceID string, environmentID string, options *environment.ItemsClientDeleteEnvironmentOptions) (resp azfake.Responder[environment.ItemsClientDeleteEnvironmentResponse], errResp azfake.ErrorResponder)

	// GetEnvironment is the fake for method ItemsClient.GetEnvironment
	// HTTP status codes to indicate success: http.StatusOK
	GetEnvironment func(ctx context.Context, workspaceID string, environmentID string, options *environment.ItemsClientGetEnvironmentOptions) (resp azfake.Responder[environment.ItemsClientGetEnvironmentResponse], errResp azfake.ErrorResponder)

	// NewListEnvironmentsPager is the fake for method ItemsClient.NewListEnvironmentsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListEnvironmentsPager func(workspaceID string, options *environment.ItemsClientListEnvironmentsOptions) (resp azfake.PagerResponder[environment.ItemsClientListEnvironmentsResponse])

	// UpdateEnvironment is the fake for method ItemsClient.UpdateEnvironment
	// HTTP status codes to indicate success: http.StatusOK
	UpdateEnvironment func(ctx context.Context, workspaceID string, environmentID string, updateEnvironmentRequest environment.UpdateEnvironmentRequest, options *environment.ItemsClientUpdateEnvironmentOptions) (resp azfake.Responder[environment.ItemsClientUpdateEnvironmentResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of environment.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                      srv,
		beginCreateEnvironment:   newTracker[azfake.PollerResponder[environment.ItemsClientCreateEnvironmentResponse]](),
		newListEnvironmentsPager: newTracker[azfake.PagerResponder[environment.ItemsClientListEnvironmentsResponse]](),
	}
}

// ItemsServerTransport connects instances of environment.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                      *ItemsServer
	beginCreateEnvironment   *tracker[azfake.PollerResponder[environment.ItemsClientCreateEnvironmentResponse]]
	newListEnvironmentsPager *tracker[azfake.PagerResponder[environment.ItemsClientListEnvironmentsResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ItemsClient.BeginCreateEnvironment":
		resp, err = i.dispatchBeginCreateEnvironment(req)
	case "ItemsClient.DeleteEnvironment":
		resp, err = i.dispatchDeleteEnvironment(req)
	case "ItemsClient.GetEnvironment":
		resp, err = i.dispatchGetEnvironment(req)
	case "ItemsClient.NewListEnvironmentsPager":
		resp, err = i.dispatchNewListEnvironmentsPager(req)
	case "ItemsClient.UpdateEnvironment":
		resp, err = i.dispatchUpdateEnvironment(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (i *ItemsServerTransport) dispatchBeginCreateEnvironment(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateEnvironment == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateEnvironment not implemented")}
	}
	beginCreateEnvironment := i.beginCreateEnvironment.get(req)
	if beginCreateEnvironment == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/environments`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[environment.CreateEnvironmentRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateEnvironment(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateEnvironment = &respr
		i.beginCreateEnvironment.add(req, beginCreateEnvironment)
	}

	resp, err := server.PollerResponderNext(beginCreateEnvironment, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateEnvironment.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateEnvironment) {
		i.beginCreateEnvironment.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteEnvironment(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteEnvironment == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteEnvironment not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/environments/(?P<environmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	environmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("environmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteEnvironment(req.Context(), workspaceIDParam, environmentIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetEnvironment(req *http.Request) (*http.Response, error) {
	if i.srv.GetEnvironment == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEnvironment not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/environments/(?P<environmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	environmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("environmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetEnvironment(req.Context(), workspaceIDParam, environmentIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Environment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListEnvironmentsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListEnvironmentsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListEnvironmentsPager not implemented")}
	}
	newListEnvironmentsPager := i.newListEnvironmentsPager.get(req)
	if newListEnvironmentsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/environments`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *environment.ItemsClientListEnvironmentsOptions
		if continuationTokenParam != nil {
			options = &environment.ItemsClientListEnvironmentsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListEnvironmentsPager(workspaceIDParam, options)
		newListEnvironmentsPager = &resp
		i.newListEnvironmentsPager.add(req, newListEnvironmentsPager)
		server.PagerResponderInjectNextLinks(newListEnvironmentsPager, req, func(page *environment.ItemsClientListEnvironmentsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListEnvironmentsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListEnvironmentsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListEnvironmentsPager) {
		i.newListEnvironmentsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateEnvironment(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateEnvironment == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateEnvironment not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/environments/(?P<environmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[environment.UpdateEnvironmentRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	environmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("environmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateEnvironment(req.Context(), workspaceIDParam, environmentIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Environment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
