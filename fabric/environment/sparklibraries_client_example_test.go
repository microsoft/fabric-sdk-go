// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package environment_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"

	"github.com/microsoft/fabric-sdk-go/fabric/environment"
)

// Generated from example definition
func ExampleSparkLibrariesClient_GetStagingLibraries() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := environment.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewSparkLibrariesClient().GetStagingLibraries(ctx, "f089354e-8366-4e18-aea3-4cb4a3a50b48", "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Libraries = environment.Libraries{
	// 	CustomLibraries: &environment.CustomLibraries{
	// 		JarFiles: []string{
	// 			"samplejar.jar"},
	// 			PyFiles: []string{
	// 				"samplepython.py"},
	// 				RTarFiles: []string{
	// 					"sampleR.tar.gz"},
	// 					WheelFiles: []string{
	// 						"samplewheel-0.18.0-py2.py3-none-any.whl"},
	// 					},
	// 					EnvironmentYml: to.Ptr("dependencies:\r\n- pip:\r\n  - matplotlib==3.4.3"),
	// 				}
}

// Generated from example definition
func ExampleSparkLibrariesClient_UploadStagingLibrary() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := environment.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewSparkLibrariesClient().UploadStagingLibrary(ctx, "f089354e-8366-4e18-aea3-4cb4a3a50b48", "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleSparkLibrariesClient_DeleteStagingLibrary() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := environment.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewSparkLibrariesClient().DeleteStagingLibrary(ctx, "f089354e-8366-4e18-aea3-4cb4a3a50b48", "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87", "samplelibrary.jar", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleSparkLibrariesClient_GetPublishedLibraries() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := environment.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewSparkLibrariesClient().GetPublishedLibraries(ctx, "f089354e-8366-4e18-aea3-4cb4a3a50b48", "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Libraries = environment.Libraries{
	// 	CustomLibraries: &environment.CustomLibraries{
	// 		JarFiles: []string{
	// 			"samplejar.jar"},
	// 			PyFiles: []string{
	// 				"samplepython.py"},
	// 				RTarFiles: []string{
	// 					"sampleR.tar.gz"},
	// 					WheelFiles: []string{
	// 						"samplewheel-0.18.0-py2.py3-none-any.whl"},
	// 					},
	// 					EnvironmentYml: to.Ptr("dependencies:\r\n- pip:\r\n  - matplotlib==3.4.3"),
	// 				}
}

// Generated from example definition
func ExampleSparkLibrariesClient_PublishEnvironment() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := environment.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewSparkLibrariesClient().PublishEnvironment(ctx, "f089354e-8366-4e18-aea3-4cb4a3a50b48", "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.PublishInfo = environment.PublishInfo{
	// 	PublishDetails: &environment.PublishDetails{
	// 		ComponentPublishInfo: &environment.ComponentPublishInfo{
	// 			SparkLibraries: &environment.SparkLibraries{
	// 				State: to.Ptr(environment.PublishStateRunning),
	// 			},
	// 			SparkSettings: &environment.SparkSettings{
	// 				State: to.Ptr(environment.PublishStateRunning),
	// 			},
	// 		},
	// 		StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-03-29T14:17:09.069Z"); return t}()),
	// 		State: to.Ptr(environment.PublishStateRunning),
	// 		TargetVersion: to.Ptr("46838a80-5450-4414-bea0-40fb6f3e0c0d"),
	// 	},
	// }
}

// Generated from example definition
func ExampleSparkLibrariesClient_CancelPublish() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := environment.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewSparkLibrariesClient().CancelPublish(ctx, "f089354e-8366-4e18-aea3-4cb4a3a50b48", "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.PublishInfo = environment.PublishInfo{
	// 	PublishDetails: &environment.PublishDetails{
	// 		ComponentPublishInfo: &environment.ComponentPublishInfo{
	// 			SparkLibraries: &environment.SparkLibraries{
	// 				State: to.Ptr(environment.PublishStateCancelled),
	// 			},
	// 			SparkSettings: &environment.SparkSettings{
	// 				State: to.Ptr(environment.PublishStateCancelled),
	// 			},
	// 		},
	// 		EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-03-29T15:00:47.140Z"); return t}()),
	// 		StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-03-29T15:00:33.435Z"); return t}()),
	// 		State: to.Ptr(environment.PublishStateCancelled),
	// 		TargetVersion: to.Ptr("d9d95b01-248f-4ef4-bd7e-9d3f1f6447be"),
	// 	},
	// }
}
