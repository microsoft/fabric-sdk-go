// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package environment_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"
	"time"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/environment"
	"github.com/microsoft/fabric-sdk-go/fabric/environment/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *environment.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = environment.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestSparkCompute_GetStagingSettings() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get environment staging spark compute example"},
	})
	var exampleWorkspaceID string
	var exampleEnvironmentID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleEnvironmentID = "707cfd07-cbf1-41da-aad7-dd157ddb8c11"

	exampleRes := environment.SparkCompute{
		DriverCores:  to.Ptr[int32](4),
		DriverMemory: to.Ptr("56g"),
		DynamicExecutorAllocation: &environment.DynamicExecutorAllocationProperties{
			Enabled:      to.Ptr(false),
			MaxExecutors: to.Ptr[int32](1),
			MinExecutors: to.Ptr[int32](1),
		},
		ExecutorCores:  to.Ptr[int32](4),
		ExecutorMemory: to.Ptr("56g"),
		InstancePool: &environment.InstancePool{
			Name: to.Ptr("MyWorkspacePool"),
			Type: to.Ptr(environment.CustomPoolTypeWorkspace),
			ID:   to.Ptr("78942136-106c-4f3e-80fc-7ff4eae11603"),
		},
		RuntimeVersion: to.Ptr("1.2"),
		SparkProperties: map[string]any{
			"spark.acls.enable": "false",
		},
	}

	testsuite.serverFactory.SparkComputeServer.GetStagingSettings = func(ctx context.Context, workspaceID string, environmentID string, options *environment.SparkComputeClientGetStagingSettingsOptions) (resp azfake.Responder[environment.SparkComputeClientGetStagingSettingsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEnvironmentID, environmentID)
		resp = azfake.Responder[environment.SparkComputeClientGetStagingSettingsResponse]{}
		resp.SetResponse(http.StatusOK, environment.SparkComputeClientGetStagingSettingsResponse{SparkCompute: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewSparkComputeClient()
	res, err := client.GetStagingSettings(ctx, exampleWorkspaceID, exampleEnvironmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SparkCompute))
}

func (testsuite *FakeTestSuite) TestSparkCompute_UpdateStagingSettings() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update environment staging spark compute example"},
	})
	var exampleWorkspaceID string
	var exampleEnvironmentID string
	var exampleUpdateEnvironmentSparkComputeRequest environment.UpdateEnvironmentSparkComputeRequest
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleEnvironmentID = "707cfd07-cbf1-41da-aad7-dd157ddb8c11"
	exampleUpdateEnvironmentSparkComputeRequest = environment.UpdateEnvironmentSparkComputeRequest{
		DriverCores:  to.Ptr[int32](4),
		DriverMemory: to.Ptr("56g"),
		DynamicExecutorAllocation: &environment.DynamicExecutorAllocationProperties{
			Enabled:      to.Ptr(false),
			MaxExecutors: to.Ptr[int32](1),
			MinExecutors: to.Ptr[int32](1),
		},
		ExecutorCores:  to.Ptr[int32](4),
		ExecutorMemory: to.Ptr("56g"),
		InstancePool: &environment.InstancePool{
			Name: to.Ptr("MyWorkspacePool"),
			Type: to.Ptr(environment.CustomPoolTypeWorkspace),
		},
		RuntimeVersion: to.Ptr("1.2"),
		SparkProperties: map[string]any{
			"spark.acls.enable": "false",
			"spark.admin.acls":  nil,
		},
	}

	exampleRes := environment.SparkCompute{
		DriverCores:  to.Ptr[int32](4),
		DriverMemory: to.Ptr("56g"),
		DynamicExecutorAllocation: &environment.DynamicExecutorAllocationProperties{
			Enabled:      to.Ptr(false),
			MaxExecutors: to.Ptr[int32](1),
			MinExecutors: to.Ptr[int32](1),
		},
		ExecutorCores:  to.Ptr[int32](4),
		ExecutorMemory: to.Ptr("56g"),
		InstancePool: &environment.InstancePool{
			Name: to.Ptr("MyWorkspacePool"),
			Type: to.Ptr(environment.CustomPoolTypeWorkspace),
			ID:   to.Ptr("78942136-106c-4f3e-80fc-7ff4eae11603"),
		},
		RuntimeVersion: to.Ptr("1.2"),
		SparkProperties: map[string]any{
			"spark.acls.enable": "false",
		},
	}

	testsuite.serverFactory.SparkComputeServer.UpdateStagingSettings = func(ctx context.Context, workspaceID string, environmentID string, updateEnvironmentSparkComputeRequest environment.UpdateEnvironmentSparkComputeRequest, options *environment.SparkComputeClientUpdateStagingSettingsOptions) (resp azfake.Responder[environment.SparkComputeClientUpdateStagingSettingsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEnvironmentID, environmentID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateEnvironmentSparkComputeRequest, updateEnvironmentSparkComputeRequest))
		resp = azfake.Responder[environment.SparkComputeClientUpdateStagingSettingsResponse]{}
		resp.SetResponse(http.StatusOK, environment.SparkComputeClientUpdateStagingSettingsResponse{SparkCompute: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewSparkComputeClient()
	res, err := client.UpdateStagingSettings(ctx, exampleWorkspaceID, exampleEnvironmentID, exampleUpdateEnvironmentSparkComputeRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SparkCompute))
}

func (testsuite *FakeTestSuite) TestSparkCompute_GetPublishedSettings() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get environment Spark compute example"},
	})
	var exampleWorkspaceID string
	var exampleEnvironmentID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleEnvironmentID = "707cfd07-cbf1-41da-aad7-dd157ddb8c11"

	exampleRes := environment.SparkCompute{
		DriverCores:  to.Ptr[int32](4),
		DriverMemory: to.Ptr("56g"),
		DynamicExecutorAllocation: &environment.DynamicExecutorAllocationProperties{
			Enabled:      to.Ptr(false),
			MaxExecutors: to.Ptr[int32](1),
			MinExecutors: to.Ptr[int32](1),
		},
		ExecutorCores:  to.Ptr[int32](4),
		ExecutorMemory: to.Ptr("56g"),
		InstancePool: &environment.InstancePool{
			Name: to.Ptr("MyWorkspacePool"),
			Type: to.Ptr(environment.CustomPoolTypeWorkspace),
			ID:   to.Ptr("78942136-106c-4f3e-80fc-7ff4eae11603"),
		},
		RuntimeVersion: to.Ptr("1.2"),
		SparkProperties: map[string]any{
			"spark.acls.enable": "false",
		},
	}

	testsuite.serverFactory.SparkComputeServer.GetPublishedSettings = func(ctx context.Context, workspaceID string, environmentID string, options *environment.SparkComputeClientGetPublishedSettingsOptions) (resp azfake.Responder[environment.SparkComputeClientGetPublishedSettingsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEnvironmentID, environmentID)
		resp = azfake.Responder[environment.SparkComputeClientGetPublishedSettingsResponse]{}
		resp.SetResponse(http.StatusOK, environment.SparkComputeClientGetPublishedSettingsResponse{SparkCompute: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewSparkComputeClient()
	res, err := client.GetPublishedSettings(ctx, exampleWorkspaceID, exampleEnvironmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SparkCompute))
}

func (testsuite *FakeTestSuite) TestItems_ListEnvironments() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List environments in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := environment.Environments{
		Value: []environment.Environment{
			{
				Type:        to.Ptr(environment.ItemTypeEnvironment),
				Description: to.Ptr("A environment description."),
				DisplayName: to.Ptr("Environment_1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &environment.PublishInfo{
					PublishDetails: &environment.PublishDetails{
						ComponentPublishInfo: &environment.ComponentPublishInfo{
							SparkLibraries: &environment.SparkLibraries{
								State: to.Ptr(environment.PublishStateFailed),
							},
							SparkSettings: &environment.SparkSettings{
								State: to.Ptr(environment.PublishStateSuccess),
							},
						},
						EndTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-03-30T14:48:09.069Z"); return t }()),
						StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-03-30T14:17:09.069Z"); return t }()),
						State:         to.Ptr(environment.PublishStateFailed),
						TargetVersion: to.Ptr("14ece8b5-68a1-4130-a9e7-074c04537588"),
					},
				},
			},
			{
				Type:        to.Ptr(environment.ItemTypeEnvironment),
				Description: to.Ptr("A environment description."),
				DisplayName: to.Ptr("Environment_2"),
				ID:          to.Ptr("a8a1bffa-7eea-49dc-a1d2-6281c1d031f1"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &environment.PublishInfo{
					PublishDetails: &environment.PublishDetails{
						ComponentPublishInfo: &environment.ComponentPublishInfo{
							SparkLibraries: &environment.SparkLibraries{
								State: to.Ptr(environment.PublishStateSuccess),
							},
							SparkSettings: &environment.SparkSettings{
								State: to.Ptr(environment.PublishStateSuccess),
							},
						},
						EndTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-03-29T14:48:09.069Z"); return t }()),
						StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-03-29T14:17:09.069Z"); return t }()),
						State:         to.Ptr(environment.PublishStateSuccess),
						TargetVersion: to.Ptr("46838a80-5450-4414-bea0-40fb6f3e0c0d"),
					},
				},
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListEnvironmentsPager = func(workspaceID string, options *environment.ItemsClientListEnvironmentsOptions) (resp azfake.PagerResponder[environment.ItemsClientListEnvironmentsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[environment.ItemsClientListEnvironmentsResponse]{}
		resp.AddPage(http.StatusOK, environment.ItemsClientListEnvironmentsResponse{Environments: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListEnvironmentsPager(exampleWorkspaceID, &environment.ItemsClientListEnvironmentsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.Environments))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateEnvironment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a environment example"},
	})
	var exampleWorkspaceID string
	var exampleCreateEnvironmentRequest environment.CreateEnvironmentRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateEnvironmentRequest = environment.CreateEnvironmentRequest{
		Description: to.Ptr("An environment description"),
		DisplayName: to.Ptr("Environment_1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateEnvironment = func(ctx context.Context, workspaceID string, createEnvironmentRequest environment.CreateEnvironmentRequest, options *environment.ItemsClientBeginCreateEnvironmentOptions) (resp azfake.PollerResponder[environment.ItemsClientCreateEnvironmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateEnvironmentRequest, createEnvironmentRequest))
		resp = azfake.PollerResponder[environment.ItemsClientCreateEnvironmentResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, environment.ItemsClientCreateEnvironmentResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateEnvironment(ctx, exampleWorkspaceID, exampleCreateEnvironmentRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetEnvironment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Environment Item example"},
	})
	var exampleWorkspaceID string
	var exampleEnvironmentID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleEnvironmentID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := environment.Environment{
		Type:        to.Ptr(environment.ItemTypeEnvironment),
		Description: to.Ptr("An Environment description"),
		DisplayName: to.Ptr("Environment_1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		Properties: &environment.PublishInfo{
			PublishDetails: &environment.PublishDetails{
				ComponentPublishInfo: &environment.ComponentPublishInfo{
					SparkLibraries: &environment.SparkLibraries{
						State: to.Ptr(environment.PublishStateSuccess),
					},
					SparkSettings: &environment.SparkSettings{
						State: to.Ptr(environment.PublishStateSuccess),
					},
				},
				EndTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-03-29T14:48:09.069Z"); return t }()),
				StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-03-29T14:17:09.069Z"); return t }()),
				State:         to.Ptr(environment.PublishStateSuccess),
				TargetVersion: to.Ptr("46838a80-5450-4414-bea0-40fb6f3e0c0d"),
			},
		},
	}

	testsuite.serverFactory.ItemsServer.GetEnvironment = func(ctx context.Context, workspaceID string, environmentID string, options *environment.ItemsClientGetEnvironmentOptions) (resp azfake.Responder[environment.ItemsClientGetEnvironmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEnvironmentID, environmentID)
		resp = azfake.Responder[environment.ItemsClientGetEnvironmentResponse]{}
		resp.SetResponse(http.StatusOK, environment.ItemsClientGetEnvironmentResponse{Environment: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetEnvironment(ctx, exampleWorkspaceID, exampleEnvironmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Environment))
}

func (testsuite *FakeTestSuite) TestItems_UpdateEnvironment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a environment example"},
	})
	var exampleWorkspaceID string
	var exampleEnvironmentID string
	var exampleUpdateEnvironmentRequest environment.UpdateEnvironmentRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEnvironmentID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateEnvironmentRequest = environment.UpdateEnvironmentRequest{
		Description: to.Ptr("A new description for environment."),
		DisplayName: to.Ptr("Environment_New_Name"),
	}

	exampleRes := environment.Environment{
		Type:        to.Ptr(environment.ItemTypeEnvironment),
		Description: to.Ptr("A new description for environment."),
		DisplayName: to.Ptr("Environment_New_Name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateEnvironment = func(ctx context.Context, workspaceID string, environmentID string, updateEnvironmentRequest environment.UpdateEnvironmentRequest, options *environment.ItemsClientUpdateEnvironmentOptions) (resp azfake.Responder[environment.ItemsClientUpdateEnvironmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEnvironmentID, environmentID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateEnvironmentRequest, updateEnvironmentRequest))
		resp = azfake.Responder[environment.ItemsClientUpdateEnvironmentResponse]{}
		resp.SetResponse(http.StatusOK, environment.ItemsClientUpdateEnvironmentResponse{Environment: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateEnvironment(ctx, exampleWorkspaceID, exampleEnvironmentID, exampleUpdateEnvironmentRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Environment))
}

func (testsuite *FakeTestSuite) TestItems_DeleteEnvironment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a environment example"},
	})
	var exampleWorkspaceID string
	var exampleEnvironmentID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleEnvironmentID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteEnvironment = func(ctx context.Context, workspaceID string, environmentID string, options *environment.ItemsClientDeleteEnvironmentOptions) (resp azfake.Responder[environment.ItemsClientDeleteEnvironmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEnvironmentID, environmentID)
		resp = azfake.Responder[environment.ItemsClientDeleteEnvironmentResponse]{}
		resp.SetResponse(http.StatusOK, environment.ItemsClientDeleteEnvironmentResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteEnvironment(ctx, exampleWorkspaceID, exampleEnvironmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestSparkLibraries_GetStagingLibraries() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get environment staging libraries example"},
	})
	var exampleWorkspaceID string
	var exampleEnvironmentID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleEnvironmentID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := environment.Libraries{
		CustomLibraries: &environment.CustomLibraries{
			JarFiles: []string{
				"samplejar.jar"},
			PyFiles: []string{
				"samplepython.py"},
			RTarFiles: []string{
				"sampleR.tar.gz"},
			WheelFiles: []string{
				"samplewheel-0.18.0-py2.py3-none-any.whl"},
		},
		EnvironmentYml: to.Ptr("dependencies:\r\n- pip:\r\n  - matplotlib==3.4.3"),
	}

	testsuite.serverFactory.SparkLibrariesServer.GetStagingLibraries = func(ctx context.Context, workspaceID string, environmentID string, options *environment.SparkLibrariesClientGetStagingLibrariesOptions) (resp azfake.Responder[environment.SparkLibrariesClientGetStagingLibrariesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEnvironmentID, environmentID)
		resp = azfake.Responder[environment.SparkLibrariesClientGetStagingLibrariesResponse]{}
		resp.SetResponse(http.StatusOK, environment.SparkLibrariesClientGetStagingLibrariesResponse{Libraries: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewSparkLibrariesClient()
	res, err := client.GetStagingLibraries(ctx, exampleWorkspaceID, exampleEnvironmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Libraries))
}

func (testsuite *FakeTestSuite) TestSparkLibraries_UploadStagingLibrary() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Upload environment staging libraries example"},
	})
	var exampleWorkspaceID string
	var exampleEnvironmentID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleEnvironmentID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	testsuite.serverFactory.SparkLibrariesServer.UploadStagingLibrary = func(ctx context.Context, workspaceID string, environmentID string, options *environment.SparkLibrariesClientUploadStagingLibraryOptions) (resp azfake.Responder[environment.SparkLibrariesClientUploadStagingLibraryResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEnvironmentID, environmentID)
		resp = azfake.Responder[environment.SparkLibrariesClientUploadStagingLibraryResponse]{}
		resp.SetResponse(http.StatusOK, environment.SparkLibrariesClientUploadStagingLibraryResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewSparkLibrariesClient()
	_, err = client.UploadStagingLibrary(ctx, exampleWorkspaceID, exampleEnvironmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestSparkLibraries_DeleteStagingLibrary() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete environment staging libraries example"},
	})
	var exampleWorkspaceID string
	var exampleEnvironmentID string
	var exampleLibraryToDelete string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleEnvironmentID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"
	exampleLibraryToDelete = "samplelibrary.jar"

	testsuite.serverFactory.SparkLibrariesServer.DeleteStagingLibrary = func(ctx context.Context, workspaceID string, environmentID string, libraryToDelete string, options *environment.SparkLibrariesClientDeleteStagingLibraryOptions) (resp azfake.Responder[environment.SparkLibrariesClientDeleteStagingLibraryResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEnvironmentID, environmentID)
		testsuite.Require().Equal(exampleLibraryToDelete, libraryToDelete)
		resp = azfake.Responder[environment.SparkLibrariesClientDeleteStagingLibraryResponse]{}
		resp.SetResponse(http.StatusOK, environment.SparkLibrariesClientDeleteStagingLibraryResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewSparkLibrariesClient()
	_, err = client.DeleteStagingLibrary(ctx, exampleWorkspaceID, exampleEnvironmentID, exampleLibraryToDelete, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestSparkLibraries_GetPublishedLibraries() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get environment published libraries example"},
	})
	var exampleWorkspaceID string
	var exampleEnvironmentID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleEnvironmentID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := environment.Libraries{
		CustomLibraries: &environment.CustomLibraries{
			JarFiles: []string{
				"samplejar.jar"},
			PyFiles: []string{
				"samplepython.py"},
			RTarFiles: []string{
				"sampleR.tar.gz"},
			WheelFiles: []string{
				"samplewheel-0.18.0-py2.py3-none-any.whl"},
		},
		EnvironmentYml: to.Ptr("dependencies:\r\n- pip:\r\n  - matplotlib==3.4.3"),
	}

	testsuite.serverFactory.SparkLibrariesServer.GetPublishedLibraries = func(ctx context.Context, workspaceID string, environmentID string, options *environment.SparkLibrariesClientGetPublishedLibrariesOptions) (resp azfake.Responder[environment.SparkLibrariesClientGetPublishedLibrariesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEnvironmentID, environmentID)
		resp = azfake.Responder[environment.SparkLibrariesClientGetPublishedLibrariesResponse]{}
		resp.SetResponse(http.StatusOK, environment.SparkLibrariesClientGetPublishedLibrariesResponse{Libraries: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewSparkLibrariesClient()
	res, err := client.GetPublishedLibraries(ctx, exampleWorkspaceID, exampleEnvironmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Libraries))
}

func (testsuite *FakeTestSuite) TestSparkLibraries_PublishEnvironment() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Publish environment example"},
	})
	var exampleWorkspaceID string
	var exampleEnvironmentID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleEnvironmentID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := environment.PublishInfo{
		PublishDetails: &environment.PublishDetails{
			ComponentPublishInfo: &environment.ComponentPublishInfo{
				SparkLibraries: &environment.SparkLibraries{
					State: to.Ptr(environment.PublishStateRunning),
				},
				SparkSettings: &environment.SparkSettings{
					State: to.Ptr(environment.PublishStateRunning),
				},
			},
			StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-03-29T14:17:09.069Z"); return t }()),
			State:         to.Ptr(environment.PublishStateRunning),
			TargetVersion: to.Ptr("46838a80-5450-4414-bea0-40fb6f3e0c0d"),
		},
	}

	testsuite.serverFactory.SparkLibrariesServer.PublishEnvironment = func(ctx context.Context, workspaceID string, environmentID string, options *environment.SparkLibrariesClientPublishEnvironmentOptions) (resp azfake.Responder[environment.SparkLibrariesClientPublishEnvironmentResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEnvironmentID, environmentID)
		resp = azfake.Responder[environment.SparkLibrariesClientPublishEnvironmentResponse]{}
		resp.SetResponse(http.StatusOK, environment.SparkLibrariesClientPublishEnvironmentResponse{PublishInfo: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewSparkLibrariesClient()
	res, err := client.PublishEnvironment(ctx, exampleWorkspaceID, exampleEnvironmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PublishInfo))
}

func (testsuite *FakeTestSuite) TestSparkLibraries_CancelPublish() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Publish environment cancellation example"},
	})
	var exampleWorkspaceID string
	var exampleEnvironmentID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleEnvironmentID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := environment.PublishInfo{
		PublishDetails: &environment.PublishDetails{
			ComponentPublishInfo: &environment.ComponentPublishInfo{
				SparkLibraries: &environment.SparkLibraries{
					State: to.Ptr(environment.PublishStateCancelled),
				},
				SparkSettings: &environment.SparkSettings{
					State: to.Ptr(environment.PublishStateCancelled),
				},
			},
			EndTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-03-29T15:00:47.140Z"); return t }()),
			StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-03-29T15:00:33.435Z"); return t }()),
			State:         to.Ptr(environment.PublishStateCancelled),
			TargetVersion: to.Ptr("d9d95b01-248f-4ef4-bd7e-9d3f1f6447be"),
		},
	}

	testsuite.serverFactory.SparkLibrariesServer.CancelPublish = func(ctx context.Context, workspaceID string, environmentID string, options *environment.SparkLibrariesClientCancelPublishOptions) (resp azfake.Responder[environment.SparkLibrariesClientCancelPublishResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleEnvironmentID, environmentID)
		resp = azfake.Responder[environment.SparkLibrariesClientCancelPublishResponse]{}
		resp.SetResponse(http.StatusOK, environment.SparkLibrariesClientCancelPublishResponse{PublishInfo: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewSparkLibrariesClient()
	res, err := client.CancelPublish(ctx, exampleWorkspaceID, exampleEnvironmentID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PublishInfo))
}
