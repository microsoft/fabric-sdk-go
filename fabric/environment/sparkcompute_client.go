// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package environment

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
)

// SparkComputeClient contains the methods for the SparkCompute group.
// Don't use this type directly, use a constructor function instead.
type SparkComputeClient struct {
	internal *azcore.Client
	endpoint string
}

// GetPublishedSettings - PERMISSIONS Read permission to the environment item.
// REQUIRED DELEGATED SCOPES Environment.Read.All or Environment.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - environmentID - The environment ID.
//   - options - SparkComputeClientGetPublishedSettingsOptions contains the optional parameters for the SparkComputeClient.GetPublishedSettings
//     method.
func (client *SparkComputeClient) GetPublishedSettings(ctx context.Context, workspaceID string, environmentID string, options *SparkComputeClientGetPublishedSettingsOptions) (SparkComputeClientGetPublishedSettingsResponse, error) {
	var err error
	const operationName = "environment.SparkComputeClient.GetPublishedSettings"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getPublishedSettingsCreateRequest(ctx, workspaceID, environmentID, options)
	if err != nil {
		return SparkComputeClientGetPublishedSettingsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SparkComputeClientGetPublishedSettingsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return SparkComputeClientGetPublishedSettingsResponse{}, err
	}
	resp, err := client.getPublishedSettingsHandleResponse(httpResp)
	return resp, err
}

// getPublishedSettingsCreateRequest creates the GetPublishedSettings request.
func (client *SparkComputeClient) getPublishedSettingsCreateRequest(ctx context.Context, workspaceID string, environmentID string, _ *SparkComputeClientGetPublishedSettingsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/environments/{environmentId}/sparkcompute"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if environmentID == "" {
		return nil, errors.New("parameter environmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{environmentId}", url.PathEscape(environmentID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getPublishedSettingsHandleResponse handles the GetPublishedSettings response.
func (client *SparkComputeClient) getPublishedSettingsHandleResponse(resp *http.Response) (SparkComputeClientGetPublishedSettingsResponse, error) {
	result := SparkComputeClientGetPublishedSettingsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SparkCompute); err != nil {
		return SparkComputeClientGetPublishedSettingsResponse{}, err
	}
	return result, nil
}

// GetStagingSettings - PERMISSIONS Read permission to the environment item.
// REQUIRED DELEGATED SCOPES Environment.Read.All or Environment.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - environmentID - The environment ID.
//   - options - SparkComputeClientGetStagingSettingsOptions contains the optional parameters for the SparkComputeClient.GetStagingSettings
//     method.
func (client *SparkComputeClient) GetStagingSettings(ctx context.Context, workspaceID string, environmentID string, options *SparkComputeClientGetStagingSettingsOptions) (SparkComputeClientGetStagingSettingsResponse, error) {
	var err error
	const operationName = "environment.SparkComputeClient.GetStagingSettings"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getStagingSettingsCreateRequest(ctx, workspaceID, environmentID, options)
	if err != nil {
		return SparkComputeClientGetStagingSettingsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SparkComputeClientGetStagingSettingsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return SparkComputeClientGetStagingSettingsResponse{}, err
	}
	resp, err := client.getStagingSettingsHandleResponse(httpResp)
	return resp, err
}

// getStagingSettingsCreateRequest creates the GetStagingSettings request.
func (client *SparkComputeClient) getStagingSettingsCreateRequest(ctx context.Context, workspaceID string, environmentID string, _ *SparkComputeClientGetStagingSettingsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/environments/{environmentId}/staging/sparkcompute"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if environmentID == "" {
		return nil, errors.New("parameter environmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{environmentId}", url.PathEscape(environmentID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getStagingSettingsHandleResponse handles the GetStagingSettings response.
func (client *SparkComputeClient) getStagingSettingsHandleResponse(resp *http.Response) (SparkComputeClientGetStagingSettingsResponse, error) {
	result := SparkComputeClientGetStagingSettingsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SparkCompute); err != nil {
		return SparkComputeClientGetStagingSettingsResponse{}, err
	}
	return result, nil
}

// UpdateStagingSettings - PERMISSIONS Write permission to the environment item.
// REQUIRED DELEGATED SCOPES Environment.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - environmentID - The environment ID.
//   - updateEnvironmentSparkComputeRequest - Update environment spark compute request payload.
//   - options - SparkComputeClientUpdateStagingSettingsOptions contains the optional parameters for the SparkComputeClient.UpdateStagingSettings
//     method.
func (client *SparkComputeClient) UpdateStagingSettings(ctx context.Context, workspaceID string, environmentID string, updateEnvironmentSparkComputeRequest UpdateEnvironmentSparkComputeRequest, options *SparkComputeClientUpdateStagingSettingsOptions) (SparkComputeClientUpdateStagingSettingsResponse, error) {
	var err error
	const operationName = "environment.SparkComputeClient.UpdateStagingSettings"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateStagingSettingsCreateRequest(ctx, workspaceID, environmentID, updateEnvironmentSparkComputeRequest, options)
	if err != nil {
		return SparkComputeClientUpdateStagingSettingsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SparkComputeClientUpdateStagingSettingsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return SparkComputeClientUpdateStagingSettingsResponse{}, err
	}
	resp, err := client.updateStagingSettingsHandleResponse(httpResp)
	return resp, err
}

// updateStagingSettingsCreateRequest creates the UpdateStagingSettings request.
func (client *SparkComputeClient) updateStagingSettingsCreateRequest(ctx context.Context, workspaceID string, environmentID string, updateEnvironmentSparkComputeRequest UpdateEnvironmentSparkComputeRequest, _ *SparkComputeClientUpdateStagingSettingsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/environments/{environmentId}/staging/sparkcompute"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if environmentID == "" {
		return nil, errors.New("parameter environmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{environmentId}", url.PathEscape(environmentID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateEnvironmentSparkComputeRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateStagingSettingsHandleResponse handles the UpdateStagingSettings response.
func (client *SparkComputeClient) updateStagingSettingsHandleResponse(resp *http.Response) (SparkComputeClientUpdateStagingSettingsResponse, error) {
	result := SparkComputeClientUpdateStagingSettingsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SparkCompute); err != nil {
		return SparkComputeClientUpdateStagingSettingsResponse{}, err
	}
	return result, nil
}

// Custom code starts below
