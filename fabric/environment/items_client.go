// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package environment

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateEnvironment - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API does not support create a environment with definition.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Environment.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create an environment, the workspace must be on a supported Fabric capacity.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createEnvironmentRequest - Create item request payload.
//   - options - ItemsClientBeginCreateEnvironmentOptions contains the optional parameters for the ItemsClient.BeginCreateEnvironment
//     method.
func (client *ItemsClient) BeginCreateEnvironment(ctx context.Context, workspaceID string, createEnvironmentRequest CreateEnvironmentRequest, options *ItemsClientBeginCreateEnvironmentOptions) (*runtime.Poller[ItemsClientCreateEnvironmentResponse], error) {
	return client.beginCreateEnvironment(ctx, workspaceID, createEnvironmentRequest, options)
}

// CreateEnvironment - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API does not support create a environment with definition.
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Environment.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create an environment, the workspace must be on a supported Fabric capacity.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createEnvironment(ctx context.Context, workspaceID string, createEnvironmentRequest CreateEnvironmentRequest, options *ItemsClientBeginCreateEnvironmentOptions) (*http.Response, error) {
	var err error
	const operationName = "environment.ItemsClient.BeginCreateEnvironment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createEnvironmentCreateRequest(ctx, workspaceID, createEnvironmentRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createEnvironmentCreateRequest creates the CreateEnvironment request.
func (client *ItemsClient) createEnvironmentCreateRequest(ctx context.Context, workspaceID string, createEnvironmentRequest CreateEnvironmentRequest, _ *ItemsClientBeginCreateEnvironmentOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/environments"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createEnvironmentRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteEnvironment - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Environment.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - environmentID - The environment ID.
//   - options - ItemsClientDeleteEnvironmentOptions contains the optional parameters for the ItemsClient.DeleteEnvironment method.
func (client *ItemsClient) DeleteEnvironment(ctx context.Context, workspaceID string, environmentID string, options *ItemsClientDeleteEnvironmentOptions) (ItemsClientDeleteEnvironmentResponse, error) {
	var err error
	const operationName = "environment.ItemsClient.DeleteEnvironment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteEnvironmentCreateRequest(ctx, workspaceID, environmentID, options)
	if err != nil {
		return ItemsClientDeleteEnvironmentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteEnvironmentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteEnvironmentResponse{}, err
	}
	return ItemsClientDeleteEnvironmentResponse{}, nil
}

// deleteEnvironmentCreateRequest creates the DeleteEnvironment request.
func (client *ItemsClient) deleteEnvironmentCreateRequest(ctx context.Context, workspaceID string, environmentID string, _ *ItemsClientDeleteEnvironmentOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/environments/{environmentId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if environmentID == "" {
		return nil, errors.New("parameter environmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{environmentId}", url.PathEscape(environmentID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetEnvironment - REQUIRED DELEGATED SCOPES Environment.Read.All or Item.Read.All or Environment.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - environmentID - The environment ID.
//   - options - ItemsClientGetEnvironmentOptions contains the optional parameters for the ItemsClient.GetEnvironment method.
func (client *ItemsClient) GetEnvironment(ctx context.Context, workspaceID string, environmentID string, options *ItemsClientGetEnvironmentOptions) (ItemsClientGetEnvironmentResponse, error) {
	var err error
	const operationName = "environment.ItemsClient.GetEnvironment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getEnvironmentCreateRequest(ctx, workspaceID, environmentID, options)
	if err != nil {
		return ItemsClientGetEnvironmentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetEnvironmentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetEnvironmentResponse{}, err
	}
	resp, err := client.getEnvironmentHandleResponse(httpResp)
	return resp, err
}

// getEnvironmentCreateRequest creates the GetEnvironment request.
func (client *ItemsClient) getEnvironmentCreateRequest(ctx context.Context, workspaceID string, environmentID string, _ *ItemsClientGetEnvironmentOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/environments/{environmentId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if environmentID == "" {
		return nil, errors.New("parameter environmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{environmentId}", url.PathEscape(environmentID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getEnvironmentHandleResponse handles the GetEnvironment response.
func (client *ItemsClient) getEnvironmentHandleResponse(resp *http.Response) (ItemsClientGetEnvironmentResponse, error) {
	result := ItemsClientGetEnvironmentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Environment); err != nil {
		return ItemsClientGetEnvironmentResponse{}, err
	}
	return result, nil
}

// NewListEnvironmentsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListEnvironmentsOptions contains the optional parameters for the ItemsClient.NewListEnvironmentsPager
//     method.
func (client *ItemsClient) NewListEnvironmentsPager(workspaceID string, options *ItemsClientListEnvironmentsOptions) *runtime.Pager[ItemsClientListEnvironmentsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListEnvironmentsResponse]{
		More: func(page ItemsClientListEnvironmentsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListEnvironmentsResponse) (ItemsClientListEnvironmentsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "environment.ItemsClient.NewListEnvironmentsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listEnvironmentsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListEnvironmentsResponse{}, err
			}
			return client.listEnvironmentsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listEnvironmentsCreateRequest creates the ListEnvironments request.
func (client *ItemsClient) listEnvironmentsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListEnvironmentsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/environments"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listEnvironmentsHandleResponse handles the ListEnvironments response.
func (client *ItemsClient) listEnvironmentsHandleResponse(resp *http.Response) (ItemsClientListEnvironmentsResponse, error) {
	result := ItemsClientListEnvironmentsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Environments); err != nil {
		return ItemsClientListEnvironmentsResponse{}, err
	}
	return result, nil
}

// UpdateEnvironment - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Environment.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - environmentID - The environment ID.
//   - updateEnvironmentRequest - Update environment request payload.
//   - options - ItemsClientUpdateEnvironmentOptions contains the optional parameters for the ItemsClient.UpdateEnvironment method.
func (client *ItemsClient) UpdateEnvironment(ctx context.Context, workspaceID string, environmentID string, updateEnvironmentRequest UpdateEnvironmentRequest, options *ItemsClientUpdateEnvironmentOptions) (ItemsClientUpdateEnvironmentResponse, error) {
	var err error
	const operationName = "environment.ItemsClient.UpdateEnvironment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateEnvironmentCreateRequest(ctx, workspaceID, environmentID, updateEnvironmentRequest, options)
	if err != nil {
		return ItemsClientUpdateEnvironmentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateEnvironmentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateEnvironmentResponse{}, err
	}
	resp, err := client.updateEnvironmentHandleResponse(httpResp)
	return resp, err
}

// updateEnvironmentCreateRequest creates the UpdateEnvironment request.
func (client *ItemsClient) updateEnvironmentCreateRequest(ctx context.Context, workspaceID string, environmentID string, updateEnvironmentRequest UpdateEnvironmentRequest, _ *ItemsClientUpdateEnvironmentOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/environments/{environmentId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if environmentID == "" {
		return nil, errors.New("parameter environmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{environmentId}", url.PathEscape(environmentID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateEnvironmentRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateEnvironmentHandleResponse handles the UpdateEnvironment response.
func (client *ItemsClient) updateEnvironmentHandleResponse(resp *http.Response) (ItemsClientUpdateEnvironmentResponse, error) {
	result := ItemsClientUpdateEnvironmentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Environment); err != nil {
		return ItemsClientUpdateEnvironmentResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// CreateEnvironment - returns ItemsClientCreateEnvironmentResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// This API does not support create a environment with definition.
//
// PERMISSIONS THE CALLER MUST HAVE CONTRIBUTOR OR HIGHER WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES Environment.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create an environment, the workspace must be on a supported Fabric capacity.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createEnvironmentRequest - Create item request payload.
//   - options - ItemsClientBeginCreateEnvironmentOptions contains the optional parameters for the ItemsClient.BeginCreateEnvironment method.
func (client *ItemsClient) CreateEnvironment(ctx context.Context, workspaceID string, createEnvironmentRequest CreateEnvironmentRequest, options *ItemsClientBeginCreateEnvironmentOptions) (ItemsClientCreateEnvironmentResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateEnvironment(ctx, workspaceID, createEnvironmentRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateEnvironmentResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateEnvironmentResponse{}, err
	}
	return result, err
}

// beginCreateEnvironment creates the createEnvironment request.
func (client *ItemsClient) beginCreateEnvironment(ctx context.Context, workspaceID string, createEnvironmentRequest CreateEnvironmentRequest, options *ItemsClientBeginCreateEnvironmentOptions) (*runtime.Poller[ItemsClientCreateEnvironmentResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createEnvironment(ctx, workspaceID, createEnvironmentRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateEnvironmentResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateEnvironmentResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateEnvironmentResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateEnvironmentResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListEnvironments - returns array of Environment from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListEnvironmentsOptions contains the optional parameters for the ItemsClient.NewListEnvironmentsPager method.
func (client *ItemsClient) ListEnvironments(ctx context.Context, workspaceID string, options *ItemsClientListEnvironmentsOptions) ([]Environment, error) {
	pager := client.NewListEnvironmentsPager(workspaceID, options)
	mapper := func(resp ItemsClientListEnvironmentsResponse) []Environment {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Environment{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []Environment{}, err
	}
	return list, nil
}
