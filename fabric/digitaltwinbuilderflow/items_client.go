// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package digitaltwinbuilderflow

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateDigitalTwinBuilderFlow - > [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create Digital Twin Builder Flow with a public definition, refer to [/rest/api/fabric/articles/item-management/definitions/digital-twin-builder-flow-definition]
// article.
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilderFlow.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a Digital Twin Builder Flow the workspace must be on a supported Fabric capacity. For more information see:
// Microsoft Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createDigitalTwinBuilderFlowRequest - Create item request payload.
//   - options - ItemsClientBeginCreateDigitalTwinBuilderFlowOptions contains the optional parameters for the ItemsClient.BeginCreateDigitalTwinBuilderFlow
//     method.
func (client *ItemsClient) BeginCreateDigitalTwinBuilderFlow(ctx context.Context, workspaceID string, createDigitalTwinBuilderFlowRequest CreateDigitalTwinBuilderFlowRequest, options *ItemsClientBeginCreateDigitalTwinBuilderFlowOptions) (*runtime.Poller[ItemsClientCreateDigitalTwinBuilderFlowResponse], error) {
	return client.beginCreateDigitalTwinBuilderFlow(ctx, workspaceID, createDigitalTwinBuilderFlowRequest, options)
}

// CreateDigitalTwinBuilderFlow - > [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// To create Digital Twin Builder Flow with a public definition, refer to [/rest/api/fabric/articles/item-management/definitions/digital-twin-builder-flow-definition]
// article.
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilderFlow.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a Digital Twin Builder Flow the workspace must be on a supported Fabric capacity. For more information see:
// Microsoft Fabric license types
// [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createDigitalTwinBuilderFlow(ctx context.Context, workspaceID string, createDigitalTwinBuilderFlowRequest CreateDigitalTwinBuilderFlowRequest, options *ItemsClientBeginCreateDigitalTwinBuilderFlowOptions) (*http.Response, error) {
	var err error
	const operationName = "digitaltwinbuilderflow.ItemsClient.BeginCreateDigitalTwinBuilderFlow"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createDigitalTwinBuilderFlowCreateRequest(ctx, workspaceID, createDigitalTwinBuilderFlowRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createDigitalTwinBuilderFlowCreateRequest creates the CreateDigitalTwinBuilderFlow request.
func (client *ItemsClient) createDigitalTwinBuilderFlowCreateRequest(ctx context.Context, workspaceID string, createDigitalTwinBuilderFlowRequest CreateDigitalTwinBuilderFlowRequest, _ *ItemsClientBeginCreateDigitalTwinBuilderFlowOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/DigitalTwinBuilderFlows"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createDigitalTwinBuilderFlowRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteDigitalTwinBuilderFlow - > [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// PERMISSIONS The caller must have write permissions for the digital twin builder flow.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilderFlow.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitalTwinBuilderFlowID - The Digital Twin Builder Flow ID.
//   - options - ItemsClientDeleteDigitalTwinBuilderFlowOptions contains the optional parameters for the ItemsClient.DeleteDigitalTwinBuilderFlow
//     method.
func (client *ItemsClient) DeleteDigitalTwinBuilderFlow(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, options *ItemsClientDeleteDigitalTwinBuilderFlowOptions) (ItemsClientDeleteDigitalTwinBuilderFlowResponse, error) {
	var err error
	const operationName = "digitaltwinbuilderflow.ItemsClient.DeleteDigitalTwinBuilderFlow"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteDigitalTwinBuilderFlowCreateRequest(ctx, workspaceID, digitalTwinBuilderFlowID, options)
	if err != nil {
		return ItemsClientDeleteDigitalTwinBuilderFlowResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteDigitalTwinBuilderFlowResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteDigitalTwinBuilderFlowResponse{}, err
	}
	return ItemsClientDeleteDigitalTwinBuilderFlowResponse{}, nil
}

// deleteDigitalTwinBuilderFlowCreateRequest creates the DeleteDigitalTwinBuilderFlow request.
func (client *ItemsClient) deleteDigitalTwinBuilderFlowCreateRequest(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, _ *ItemsClientDeleteDigitalTwinBuilderFlowOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/DigitalTwinBuilderFlows/{digitalTwinBuilderFlowId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if digitalTwinBuilderFlowID == "" {
		return nil, errors.New("parameter digitalTwinBuilderFlowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{digitalTwinBuilderFlowId}", url.PathEscape(digitalTwinBuilderFlowID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetDigitalTwinBuilderFlow - > [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// PERMISSIONS The caller must have read permissions for the digital twin builder flow.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilderFlow.Read.All or DigitalTwinBuilderFlow.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitalTwinBuilderFlowID - The Digital Twin Builder Flow ID.
//   - options - ItemsClientGetDigitalTwinBuilderFlowOptions contains the optional parameters for the ItemsClient.GetDigitalTwinBuilderFlow
//     method.
func (client *ItemsClient) GetDigitalTwinBuilderFlow(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, options *ItemsClientGetDigitalTwinBuilderFlowOptions) (ItemsClientGetDigitalTwinBuilderFlowResponse, error) {
	var err error
	const operationName = "digitaltwinbuilderflow.ItemsClient.GetDigitalTwinBuilderFlow"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDigitalTwinBuilderFlowCreateRequest(ctx, workspaceID, digitalTwinBuilderFlowID, options)
	if err != nil {
		return ItemsClientGetDigitalTwinBuilderFlowResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetDigitalTwinBuilderFlowResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetDigitalTwinBuilderFlowResponse{}, err
	}
	resp, err := client.getDigitalTwinBuilderFlowHandleResponse(httpResp)
	return resp, err
}

// getDigitalTwinBuilderFlowCreateRequest creates the GetDigitalTwinBuilderFlow request.
func (client *ItemsClient) getDigitalTwinBuilderFlowCreateRequest(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, _ *ItemsClientGetDigitalTwinBuilderFlowOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/DigitalTwinBuilderFlows/{digitalTwinBuilderFlowId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if digitalTwinBuilderFlowID == "" {
		return nil, errors.New("parameter digitalTwinBuilderFlowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{digitalTwinBuilderFlowId}", url.PathEscape(digitalTwinBuilderFlowID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDigitalTwinBuilderFlowHandleResponse handles the GetDigitalTwinBuilderFlow response.
func (client *ItemsClient) getDigitalTwinBuilderFlowHandleResponse(resp *http.Response) (ItemsClientGetDigitalTwinBuilderFlowResponse, error) {
	result := ItemsClientGetDigitalTwinBuilderFlowResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DigitalTwinBuilderFlow); err != nil {
		return ItemsClientGetDigitalTwinBuilderFlowResponse{}, err
	}
	return result, nil
}

// BeginGetDigitalTwinBuilderFlowDefinition - > [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more
// [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a Digital Twin Builder Flow's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have read and write permissions for the digital twin builder flow.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilderFlow.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitalTwinBuilderFlowID - The Digital Twin Builder Flow ID.
//   - options - ItemsClientBeginGetDigitalTwinBuilderFlowDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetDigitalTwinBuilderFlowDefinition
//     method.
func (client *ItemsClient) BeginGetDigitalTwinBuilderFlowDefinition(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, options *ItemsClientBeginGetDigitalTwinBuilderFlowDefinitionOptions) (*runtime.Poller[ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse], error) {
	return client.beginGetDigitalTwinBuilderFlowDefinition(ctx, workspaceID, digitalTwinBuilderFlowID, options)
}

// GetDigitalTwinBuilderFlowDefinition - > [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a Digital Twin Builder Flow's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have read and write permissions for the digital twin builder flow.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilderFlow.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getDigitalTwinBuilderFlowDefinition(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, options *ItemsClientBeginGetDigitalTwinBuilderFlowDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "digitaltwinbuilderflow.ItemsClient.BeginGetDigitalTwinBuilderFlowDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDigitalTwinBuilderFlowDefinitionCreateRequest(ctx, workspaceID, digitalTwinBuilderFlowID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getDigitalTwinBuilderFlowDefinitionCreateRequest creates the GetDigitalTwinBuilderFlowDefinition request.
func (client *ItemsClient) getDigitalTwinBuilderFlowDefinitionCreateRequest(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, _ *ItemsClientBeginGetDigitalTwinBuilderFlowDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/DigitalTwinBuilderFlows/{digitalTwinBuilderFlowId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if digitalTwinBuilderFlowID == "" {
		return nil, errors.New("parameter digitalTwinBuilderFlowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{digitalTwinBuilderFlowId}", url.PathEscape(digitalTwinBuilderFlowID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListDigitalTwinBuilderFlowsPager - > [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have a viewer workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListDigitalTwinBuilderFlowsOptions contains the optional parameters for the ItemsClient.NewListDigitalTwinBuilderFlowsPager
//     method.
func (client *ItemsClient) NewListDigitalTwinBuilderFlowsPager(workspaceID string, options *ItemsClientListDigitalTwinBuilderFlowsOptions) *runtime.Pager[ItemsClientListDigitalTwinBuilderFlowsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListDigitalTwinBuilderFlowsResponse]{
		More: func(page ItemsClientListDigitalTwinBuilderFlowsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListDigitalTwinBuilderFlowsResponse) (ItemsClientListDigitalTwinBuilderFlowsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "digitaltwinbuilderflow.ItemsClient.NewListDigitalTwinBuilderFlowsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listDigitalTwinBuilderFlowsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListDigitalTwinBuilderFlowsResponse{}, err
			}
			return client.listDigitalTwinBuilderFlowsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listDigitalTwinBuilderFlowsCreateRequest creates the ListDigitalTwinBuilderFlows request.
func (client *ItemsClient) listDigitalTwinBuilderFlowsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListDigitalTwinBuilderFlowsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/DigitalTwinBuilderFlows"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listDigitalTwinBuilderFlowsHandleResponse handles the ListDigitalTwinBuilderFlows response.
func (client *ItemsClient) listDigitalTwinBuilderFlowsHandleResponse(resp *http.Response) (ItemsClientListDigitalTwinBuilderFlowsResponse, error) {
	result := ItemsClientListDigitalTwinBuilderFlowsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DigitalTwinBuilderFlows); err != nil {
		return ItemsClientListDigitalTwinBuilderFlowsResponse{}, err
	}
	return result, nil
}

// UpdateDigitalTwinBuilderFlow - > [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// PERMISSIONS The caller must have read and write permissions for the digital twin builder flow.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilderFlow.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitalTwinBuilderFlowID - The Digital Twin Builder Flow ID.
//   - updateDigitalTwinBuilderFlowRequest - Update Digital Twin Builder Flow request payload.
//   - options - ItemsClientUpdateDigitalTwinBuilderFlowOptions contains the optional parameters for the ItemsClient.UpdateDigitalTwinBuilderFlow
//     method.
func (client *ItemsClient) UpdateDigitalTwinBuilderFlow(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, updateDigitalTwinBuilderFlowRequest UpdateDigitalTwinBuilderFlowRequest, options *ItemsClientUpdateDigitalTwinBuilderFlowOptions) (ItemsClientUpdateDigitalTwinBuilderFlowResponse, error) {
	var err error
	const operationName = "digitaltwinbuilderflow.ItemsClient.UpdateDigitalTwinBuilderFlow"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateDigitalTwinBuilderFlowCreateRequest(ctx, workspaceID, digitalTwinBuilderFlowID, updateDigitalTwinBuilderFlowRequest, options)
	if err != nil {
		return ItemsClientUpdateDigitalTwinBuilderFlowResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateDigitalTwinBuilderFlowResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateDigitalTwinBuilderFlowResponse{}, err
	}
	resp, err := client.updateDigitalTwinBuilderFlowHandleResponse(httpResp)
	return resp, err
}

// updateDigitalTwinBuilderFlowCreateRequest creates the UpdateDigitalTwinBuilderFlow request.
func (client *ItemsClient) updateDigitalTwinBuilderFlowCreateRequest(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, updateDigitalTwinBuilderFlowRequest UpdateDigitalTwinBuilderFlowRequest, _ *ItemsClientUpdateDigitalTwinBuilderFlowOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/DigitalTwinBuilderFlows/{digitalTwinBuilderFlowId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if digitalTwinBuilderFlowID == "" {
		return nil, errors.New("parameter digitalTwinBuilderFlowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{digitalTwinBuilderFlowId}", url.PathEscape(digitalTwinBuilderFlowID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateDigitalTwinBuilderFlowRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateDigitalTwinBuilderFlowHandleResponse handles the UpdateDigitalTwinBuilderFlow response.
func (client *ItemsClient) updateDigitalTwinBuilderFlowHandleResponse(resp *http.Response) (ItemsClientUpdateDigitalTwinBuilderFlowResponse, error) {
	result := ItemsClientUpdateDigitalTwinBuilderFlowResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DigitalTwinBuilderFlow); err != nil {
		return ItemsClientUpdateDigitalTwinBuilderFlowResponse{}, err
	}
	return result, nil
}

// BeginUpdateDigitalTwinBuilderFlowDefinition - > [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more
// [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the Digital Twin Builder Flow's definition, does not affect its sensitivity label.
// PERMISSIONS The caller must have read and write permissions for the digital twin builder flow.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilderFlow.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitalTwinBuilderFlowID - The Digital Twin Builder Flow ID.
//   - updateDigitalTwinBuilderFlowDefinitionRequest - Update Digital Twin Builder Flow definition request payload.
//   - options - ItemsClientBeginUpdateDigitalTwinBuilderFlowDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateDigitalTwinBuilderFlowDefinition
//     method.
func (client *ItemsClient) BeginUpdateDigitalTwinBuilderFlowDefinition(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, updateDigitalTwinBuilderFlowDefinitionRequest UpdateDigitalTwinBuilderFlowDefinitionRequest, options *ItemsClientBeginUpdateDigitalTwinBuilderFlowDefinitionOptions) (*runtime.Poller[ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse], error) {
	return client.beginUpdateDigitalTwinBuilderFlowDefinition(ctx, workspaceID, digitalTwinBuilderFlowID, updateDigitalTwinBuilderFlowDefinitionRequest, options)
}

// UpdateDigitalTwinBuilderFlowDefinition - > [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more [/fabric/fundamentals/preview]).
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the Digital Twin Builder Flow's definition, does not affect its sensitivity label.
// PERMISSIONS The caller must have read and write permissions for the digital twin builder flow.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilderFlow.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateDigitalTwinBuilderFlowDefinition(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, updateDigitalTwinBuilderFlowDefinitionRequest UpdateDigitalTwinBuilderFlowDefinitionRequest, options *ItemsClientBeginUpdateDigitalTwinBuilderFlowDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "digitaltwinbuilderflow.ItemsClient.BeginUpdateDigitalTwinBuilderFlowDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateDigitalTwinBuilderFlowDefinitionCreateRequest(ctx, workspaceID, digitalTwinBuilderFlowID, updateDigitalTwinBuilderFlowDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateDigitalTwinBuilderFlowDefinitionCreateRequest creates the UpdateDigitalTwinBuilderFlowDefinition request.
func (client *ItemsClient) updateDigitalTwinBuilderFlowDefinitionCreateRequest(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, updateDigitalTwinBuilderFlowDefinitionRequest UpdateDigitalTwinBuilderFlowDefinitionRequest, options *ItemsClientBeginUpdateDigitalTwinBuilderFlowDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/DigitalTwinBuilderFlows/{digitalTwinBuilderFlowId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if digitalTwinBuilderFlowID == "" {
		return nil, errors.New("parameter digitalTwinBuilderFlowID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{digitalTwinBuilderFlowId}", url.PathEscape(digitalTwinBuilderFlowID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateDigitalTwinBuilderFlowDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateDigitalTwinBuilderFlow - returns ItemsClientCreateDigitalTwinBuilderFlowResponse in sync mode.
// >  [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more [/fabric/fundamentals/preview]).
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// To create Digital Twin Builder Flow with a public definition, refer to [/rest/api/fabric/articles/item-management/definitions/digital-twin-builder-flow-definition] article.
//
// PERMISSIONS THE CALLER MUST HAVE A CONTRIBUTOR WORKSPACE ROLE.
// REQUIRED DELEGATED SCOPES DigitalTwinBuilderFlow.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a Digital Twin Builder Flow the workspace must be on a supported Fabric capacity. For more information see: Microsoft Fabric license types
//     [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createDigitalTwinBuilderFlowRequest - Create item request payload.
//   - options - ItemsClientBeginCreateDigitalTwinBuilderFlowOptions contains the optional parameters for the ItemsClient.BeginCreateDigitalTwinBuilderFlow method.
func (client *ItemsClient) CreateDigitalTwinBuilderFlow(ctx context.Context, workspaceID string, createDigitalTwinBuilderFlowRequest CreateDigitalTwinBuilderFlowRequest, options *ItemsClientBeginCreateDigitalTwinBuilderFlowOptions) (ItemsClientCreateDigitalTwinBuilderFlowResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateDigitalTwinBuilderFlow(ctx, workspaceID, createDigitalTwinBuilderFlowRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateDigitalTwinBuilderFlowResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateDigitalTwinBuilderFlowResponse{}, err
	}
	return result, err
}

// beginCreateDigitalTwinBuilderFlow creates the createDigitalTwinBuilderFlow request.
func (client *ItemsClient) beginCreateDigitalTwinBuilderFlow(ctx context.Context, workspaceID string, createDigitalTwinBuilderFlowRequest CreateDigitalTwinBuilderFlowRequest, options *ItemsClientBeginCreateDigitalTwinBuilderFlowOptions) (*runtime.Poller[ItemsClientCreateDigitalTwinBuilderFlowResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createDigitalTwinBuilderFlow(ctx, workspaceID, createDigitalTwinBuilderFlowRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateDigitalTwinBuilderFlowResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateDigitalTwinBuilderFlowResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateDigitalTwinBuilderFlowResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateDigitalTwinBuilderFlowResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetDigitalTwinBuilderFlowDefinition - returns ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse in sync mode.
// >  [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more [/fabric/fundamentals/preview]).
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// When you get a Digital Twin Builder Flow's public definition, the sensitivity label is not a part of the definition.
//
// PERMISSIONS The caller must have read and write permissions for the digital twin builder flow.
//
// # REQUIRED DELEGATED SCOPES DigitalTwinBuilderFlow.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitalTwinBuilderFlowID - The Digital Twin Builder Flow ID.
//   - options - ItemsClientBeginGetDigitalTwinBuilderFlowDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetDigitalTwinBuilderFlowDefinition method.
func (client *ItemsClient) GetDigitalTwinBuilderFlowDefinition(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, options *ItemsClientBeginGetDigitalTwinBuilderFlowDefinitionOptions) (ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetDigitalTwinBuilderFlowDefinition(ctx, workspaceID, digitalTwinBuilderFlowID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse{}, err
	}
	return result, err
}

// beginGetDigitalTwinBuilderFlowDefinition creates the getDigitalTwinBuilderFlowDefinition request.
func (client *ItemsClient) beginGetDigitalTwinBuilderFlowDefinition(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, options *ItemsClientBeginGetDigitalTwinBuilderFlowDefinitionOptions) (*runtime.Poller[ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getDigitalTwinBuilderFlowDefinition(ctx, workspaceID, digitalTwinBuilderFlowID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateDigitalTwinBuilderFlowDefinition - returns ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse in sync mode.
// >  [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more [/fabric/fundamentals/preview]).
//
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// Updating the Digital Twin Builder Flow's definition, does not affect its sensitivity label.
//
// PERMISSIONS The caller must have read and write permissions for the digital twin builder flow.
//
// # REQUIRED DELEGATED SCOPES DigitalTwinBuilderFlow.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - digitalTwinBuilderFlowID - The Digital Twin Builder Flow ID.
//   - updateDigitalTwinBuilderFlowDefinitionRequest - Update Digital Twin Builder Flow definition request payload.
//   - options - ItemsClientBeginUpdateDigitalTwinBuilderFlowDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateDigitalTwinBuilderFlowDefinition method.
func (client *ItemsClient) UpdateDigitalTwinBuilderFlowDefinition(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, updateDigitalTwinBuilderFlowDefinitionRequest UpdateDigitalTwinBuilderFlowDefinitionRequest, options *ItemsClientBeginUpdateDigitalTwinBuilderFlowDefinitionOptions) (ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateDigitalTwinBuilderFlowDefinition(ctx, workspaceID, digitalTwinBuilderFlowID, updateDigitalTwinBuilderFlowDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateDigitalTwinBuilderFlowDefinition creates the updateDigitalTwinBuilderFlowDefinition request.
func (client *ItemsClient) beginUpdateDigitalTwinBuilderFlowDefinition(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, updateDigitalTwinBuilderFlowDefinitionRequest UpdateDigitalTwinBuilderFlowDefinitionRequest, options *ItemsClientBeginUpdateDigitalTwinBuilderFlowDefinitionOptions) (*runtime.Poller[ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateDigitalTwinBuilderFlowDefinition(ctx, workspaceID, digitalTwinBuilderFlowID, updateDigitalTwinBuilderFlowDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListDigitalTwinBuilderFlows - returns array of DigitalTwinBuilderFlow from all pages.
// >  [!NOTE] Digital Twin Builder Flow item is currently in Preview (learn more [/fabric/fundamentals/preview]).
//
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have a viewer workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListDigitalTwinBuilderFlowsOptions contains the optional parameters for the ItemsClient.NewListDigitalTwinBuilderFlowsPager method.
func (client *ItemsClient) ListDigitalTwinBuilderFlows(ctx context.Context, workspaceID string, options *ItemsClientListDigitalTwinBuilderFlowsOptions) ([]DigitalTwinBuilderFlow, error) {
	pager := client.NewListDigitalTwinBuilderFlowsPager(workspaceID, options)
	mapper := func(resp ItemsClientListDigitalTwinBuilderFlowsResponse) []DigitalTwinBuilderFlow {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []DigitalTwinBuilderFlow{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []DigitalTwinBuilderFlow{}, err
	}
	return list, nil
}
