// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package digitaltwinbuilderflow_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/digitaltwinbuilderflow"
	"github.com/microsoft/fabric-sdk-go/fabric/digitaltwinbuilderflow/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *digitaltwinbuilderflow.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = digitaltwinbuilderflow.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListDigitalTwinBuilderFlows() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Digital Twin Builder Flows in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := digitaltwinbuilderflow.DigitalTwinBuilderFlows{
		Value: []digitaltwinbuilderflow.DigitalTwinBuilderFlow{
			{
				Type:        to.Ptr(digitaltwinbuilderflow.ItemTypeDigitalTwinBuilderFlow),
				Description: to.Ptr("A Digital Twin Builder Flow description."),
				DisplayName: to.Ptr("DigitalTwinBuilderFlow Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &digitaltwinbuilderflow.Properties{
					DigitalTwinBuilderItemReference: &digitaltwinbuilderflow.ItemReferenceByID{
						ReferenceType: to.Ptr(digitaltwinbuilderflow.ItemReferenceTypeByID),
						ItemID:        to.Ptr("d96de2f4-7dd1-45ad-9ff6-37a2d6aa9861"),
						WorkspaceID:   to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
					},
				},
			},
			{
				Type:        to.Ptr(digitaltwinbuilderflow.ItemTypeDigitalTwinBuilderFlow),
				Description: to.Ptr("A Digital Twin Builder Flow description."),
				DisplayName: to.Ptr("DigitalTwinBuilderFlow Name 2"),
				ID:          to.Ptr("f697fb63-abd4-4399-9548-be7e3c3c0dac"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
				Properties: &digitaltwinbuilderflow.Properties{
					DigitalTwinBuilderItemReference: &digitaltwinbuilderflow.ItemReferenceByID{
						ReferenceType: to.Ptr(digitaltwinbuilderflow.ItemReferenceTypeByID),
						ItemID:        to.Ptr("d96de2f4-7dd1-45ad-9ff6-37a2d6aa9861"),
						WorkspaceID:   to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
					},
				},
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListDigitalTwinBuilderFlowsPager = func(workspaceID string, options *digitaltwinbuilderflow.ItemsClientListDigitalTwinBuilderFlowsOptions) (resp azfake.PagerResponder[digitaltwinbuilderflow.ItemsClientListDigitalTwinBuilderFlowsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[digitaltwinbuilderflow.ItemsClientListDigitalTwinBuilderFlowsResponse]{}
		resp.AddPage(http.StatusOK, digitaltwinbuilderflow.ItemsClientListDigitalTwinBuilderFlowsResponse{DigitalTwinBuilderFlows: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListDigitalTwinBuilderFlowsPager(exampleWorkspaceID, &digitaltwinbuilderflow.ItemsClientListDigitalTwinBuilderFlowsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DigitalTwinBuilderFlows))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateDigitalTwinBuilderFlow() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a Digital Twin Builder Flow example"},
	})
	var exampleWorkspaceID string
	var exampleCreateDigitalTwinBuilderFlowRequest digitaltwinbuilderflow.CreateDigitalTwinBuilderFlowRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateDigitalTwinBuilderFlowRequest = digitaltwinbuilderflow.CreateDigitalTwinBuilderFlowRequest{
		Description: to.Ptr("A Digital Twin Builder Flow description."),
		CreationPayload: &digitaltwinbuilderflow.CreationPayload{
			DigitalTwinBuilderItemReference: &digitaltwinbuilderflow.ItemReferenceByID{
				ReferenceType: to.Ptr(digitaltwinbuilderflow.ItemReferenceTypeByID),
				ItemID:        to.Ptr("d96de2f4-7dd1-45ad-9ff6-37a2d6aa9861"),
				WorkspaceID:   to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			},
		},
		DisplayName: to.Ptr("DigitalTwinBuilderFlow 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateDigitalTwinBuilderFlow = func(ctx context.Context, workspaceID string, createDigitalTwinBuilderFlowRequest digitaltwinbuilderflow.CreateDigitalTwinBuilderFlowRequest, options *digitaltwinbuilderflow.ItemsClientBeginCreateDigitalTwinBuilderFlowOptions) (resp azfake.PollerResponder[digitaltwinbuilderflow.ItemsClientCreateDigitalTwinBuilderFlowResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateDigitalTwinBuilderFlowRequest, createDigitalTwinBuilderFlowRequest))
		resp = azfake.PollerResponder[digitaltwinbuilderflow.ItemsClientCreateDigitalTwinBuilderFlowResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, digitaltwinbuilderflow.ItemsClientCreateDigitalTwinBuilderFlowResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateDigitalTwinBuilderFlow(ctx, exampleWorkspaceID, exampleCreateDigitalTwinBuilderFlowRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")

	// From example
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a Digital Twin Builder Flow with public definition example"},
	})
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateDigitalTwinBuilderFlowRequest = digitaltwinbuilderflow.CreateDigitalTwinBuilderFlowRequest{
		Description: to.Ptr("A Digital Twin Builder Flow description."),
		Definition: &digitaltwinbuilderflow.PublicDefinition{
			Parts: []digitaltwinbuilderflow.PublicDefinitionPart{
				{
					Path:        to.Ptr("definition.json"),
					Payload:     to.Ptr("eyJleGVjdXRhYmxlRm..OWRmNDhhY2ZmZTgifQ=="),
					PayloadType: to.Ptr(digitaltwinbuilderflow.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(digitaltwinbuilderflow.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("DigitalTwinBuilderFlow 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateDigitalTwinBuilderFlow = func(ctx context.Context, workspaceID string, createDigitalTwinBuilderFlowRequest digitaltwinbuilderflow.CreateDigitalTwinBuilderFlowRequest, options *digitaltwinbuilderflow.ItemsClientBeginCreateDigitalTwinBuilderFlowOptions) (resp azfake.PollerResponder[digitaltwinbuilderflow.ItemsClientCreateDigitalTwinBuilderFlowResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateDigitalTwinBuilderFlowRequest, createDigitalTwinBuilderFlowRequest))
		resp = azfake.PollerResponder[digitaltwinbuilderflow.ItemsClientCreateDigitalTwinBuilderFlowResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, digitaltwinbuilderflow.ItemsClientCreateDigitalTwinBuilderFlowResponse{}, nil)
		return
	}

	poller, err = client.BeginCreateDigitalTwinBuilderFlow(ctx, exampleWorkspaceID, exampleCreateDigitalTwinBuilderFlowRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetDigitalTwinBuilderFlow() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a Digital Twin Builder Flow example"},
	})
	var exampleWorkspaceID string
	var exampleDigitalTwinBuilderFlowID string
	exampleWorkspaceID = "f089354e-8366-4e18-aea3-4cb4a3a50b48"
	exampleDigitalTwinBuilderFlowID = "41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"

	exampleRes := digitaltwinbuilderflow.DigitalTwinBuilderFlow{
		Type:        to.Ptr(digitaltwinbuilderflow.ItemTypeDigitalTwinBuilderFlow),
		Description: to.Ptr("A Digital Twin Builder Flow description."),
		DisplayName: to.Ptr("DigitalTwinBuilderFlow 1"),
		ID:          to.Ptr("41ce06d1-d81b-4ea0-bc6d-2ce3dd2f8e87"),
		WorkspaceID: to.Ptr("f089354e-8366-4e18-aea3-4cb4a3a50b48"),
		Properties: &digitaltwinbuilderflow.Properties{
			DigitalTwinBuilderItemReference: &digitaltwinbuilderflow.ItemReferenceByID{
				ReferenceType: to.Ptr(digitaltwinbuilderflow.ItemReferenceTypeByID),
				ItemID:        to.Ptr("d96de2f4-7dd1-45ad-9ff6-37a2d6aa9861"),
				WorkspaceID:   to.Ptr("f089354e-8366-4e18-aea3-4cb4a3a50b48"),
			},
		},
	}

	testsuite.serverFactory.ItemsServer.GetDigitalTwinBuilderFlow = func(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, options *digitaltwinbuilderflow.ItemsClientGetDigitalTwinBuilderFlowOptions) (resp azfake.Responder[digitaltwinbuilderflow.ItemsClientGetDigitalTwinBuilderFlowResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDigitalTwinBuilderFlowID, digitalTwinBuilderFlowID)
		resp = azfake.Responder[digitaltwinbuilderflow.ItemsClientGetDigitalTwinBuilderFlowResponse]{}
		resp.SetResponse(http.StatusOK, digitaltwinbuilderflow.ItemsClientGetDigitalTwinBuilderFlowResponse{DigitalTwinBuilderFlow: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetDigitalTwinBuilderFlow(ctx, exampleWorkspaceID, exampleDigitalTwinBuilderFlowID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DigitalTwinBuilderFlow))
}

func (testsuite *FakeTestSuite) TestItems_UpdateDigitalTwinBuilderFlow() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a Digital Twin Builder Flow example"},
	})
	var exampleWorkspaceID string
	var exampleDigitalTwinBuilderFlowID string
	var exampleUpdateDigitalTwinBuilderFlowRequest digitaltwinbuilderflow.UpdateDigitalTwinBuilderFlowRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleDigitalTwinBuilderFlowID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateDigitalTwinBuilderFlowRequest = digitaltwinbuilderflow.UpdateDigitalTwinBuilderFlowRequest{
		Description: to.Ptr("DigitalTwinBuilderFlow's New description"),
		DisplayName: to.Ptr("DigitalTwinBuilderFlow's New name"),
	}

	exampleRes := digitaltwinbuilderflow.DigitalTwinBuilderFlow{
		Type:        to.Ptr(digitaltwinbuilderflow.ItemTypeDigitalTwinBuilderFlow),
		Description: to.Ptr("DigitalTwinBuilderFlow's New description"),
		DisplayName: to.Ptr("DigitalTwinBuilderFlow's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.UpdateDigitalTwinBuilderFlow = func(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, updateDigitalTwinBuilderFlowRequest digitaltwinbuilderflow.UpdateDigitalTwinBuilderFlowRequest, options *digitaltwinbuilderflow.ItemsClientUpdateDigitalTwinBuilderFlowOptions) (resp azfake.Responder[digitaltwinbuilderflow.ItemsClientUpdateDigitalTwinBuilderFlowResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDigitalTwinBuilderFlowID, digitalTwinBuilderFlowID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateDigitalTwinBuilderFlowRequest, updateDigitalTwinBuilderFlowRequest))
		resp = azfake.Responder[digitaltwinbuilderflow.ItemsClientUpdateDigitalTwinBuilderFlowResponse]{}
		resp.SetResponse(http.StatusOK, digitaltwinbuilderflow.ItemsClientUpdateDigitalTwinBuilderFlowResponse{DigitalTwinBuilderFlow: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateDigitalTwinBuilderFlow(ctx, exampleWorkspaceID, exampleDigitalTwinBuilderFlowID, exampleUpdateDigitalTwinBuilderFlowRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DigitalTwinBuilderFlow))
}

func (testsuite *FakeTestSuite) TestItems_DeleteDigitalTwinBuilderFlow() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a Digital Twin Builder Flow example"},
	})
	var exampleWorkspaceID string
	var exampleDigitalTwinBuilderFlowID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleDigitalTwinBuilderFlowID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteDigitalTwinBuilderFlow = func(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, options *digitaltwinbuilderflow.ItemsClientDeleteDigitalTwinBuilderFlowOptions) (resp azfake.Responder[digitaltwinbuilderflow.ItemsClientDeleteDigitalTwinBuilderFlowResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDigitalTwinBuilderFlowID, digitalTwinBuilderFlowID)
		resp = azfake.Responder[digitaltwinbuilderflow.ItemsClientDeleteDigitalTwinBuilderFlowResponse]{}
		resp.SetResponse(http.StatusOK, digitaltwinbuilderflow.ItemsClientDeleteDigitalTwinBuilderFlowResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteDigitalTwinBuilderFlow(ctx, exampleWorkspaceID, exampleDigitalTwinBuilderFlowID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetDigitalTwinBuilderFlowDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a Digital Twin Builder Flow public definition example"},
	})
	var exampleWorkspaceID string
	var exampleDigitalTwinBuilderFlowID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleDigitalTwinBuilderFlowID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := digitaltwinbuilderflow.DefinitionResponse{
		Definition: &digitaltwinbuilderflow.PublicDefinition{
			Parts: []digitaltwinbuilderflow.PublicDefinitionPart{
				{
					Path:        to.Ptr("definition.json"),
					Payload:     to.Ptr("ew0KICAiZXhlY3V0YW..OWRmNDhhY2ZmZTgifQ"),
					PayloadType: to.Ptr(digitaltwinbuilderflow.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(digitaltwinbuilderflow.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetDigitalTwinBuilderFlowDefinition = func(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, options *digitaltwinbuilderflow.ItemsClientBeginGetDigitalTwinBuilderFlowDefinitionOptions) (resp azfake.PollerResponder[digitaltwinbuilderflow.ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDigitalTwinBuilderFlowID, digitalTwinBuilderFlowID)
		resp = azfake.PollerResponder[digitaltwinbuilderflow.ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, digitaltwinbuilderflow.ItemsClientGetDigitalTwinBuilderFlowDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetDigitalTwinBuilderFlowDefinition(ctx, exampleWorkspaceID, exampleDigitalTwinBuilderFlowID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateDigitalTwinBuilderFlowDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a Digital Twin Builder Flow public definition example"},
	})
	var exampleWorkspaceID string
	var exampleDigitalTwinBuilderFlowID string
	var exampleUpdateDigitalTwinBuilderFlowDefinitionRequest digitaltwinbuilderflow.UpdateDigitalTwinBuilderFlowDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleDigitalTwinBuilderFlowID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateDigitalTwinBuilderFlowDefinitionRequest = digitaltwinbuilderflow.UpdateDigitalTwinBuilderFlowDefinitionRequest{
		Definition: &digitaltwinbuilderflow.PublicDefinition{
			Parts: []digitaltwinbuilderflow.PublicDefinitionPart{
				{
					Path:        to.Ptr("definition.json"),
					Payload:     to.Ptr("ew0KICAiZXhlY3V0YW..OWRmNDhhY2ZmZTgifQ=="),
					PayloadType: to.Ptr(digitaltwinbuilderflow.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(digitaltwinbuilderflow.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateDigitalTwinBuilderFlowDefinition = func(ctx context.Context, workspaceID string, digitalTwinBuilderFlowID string, updateDigitalTwinBuilderFlowDefinitionRequest digitaltwinbuilderflow.UpdateDigitalTwinBuilderFlowDefinitionRequest, options *digitaltwinbuilderflow.ItemsClientBeginUpdateDigitalTwinBuilderFlowDefinitionOptions) (resp azfake.PollerResponder[digitaltwinbuilderflow.ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleDigitalTwinBuilderFlowID, digitalTwinBuilderFlowID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateDigitalTwinBuilderFlowDefinitionRequest, updateDigitalTwinBuilderFlowDefinitionRequest))
		resp = azfake.PollerResponder[digitaltwinbuilderflow.ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, digitaltwinbuilderflow.ItemsClientUpdateDigitalTwinBuilderFlowDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateDigitalTwinBuilderFlowDefinition(ctx, exampleWorkspaceID, exampleDigitalTwinBuilderFlowID, exampleUpdateDigitalTwinBuilderFlowDefinitionRequest, &digitaltwinbuilderflow.ItemsClientBeginUpdateDigitalTwinBuilderFlowDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}
