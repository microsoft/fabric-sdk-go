// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package lakehouse

import "time"

// CSV format options for CSV files.
type CSV struct {
	// REQUIRED; Data file format name. Additional file format types may be added over time.
	Format *FileFormat

	// The delimiter of CSV file.
	Delimiter *string

	// This property indicates whether the CSV data file contains a header line or not.
	Header *bool
}

// GetFileFormatOptions implements the FileFormatOptionsClassification interface for type CSV.
func (c *CSV) GetFileFormatOptions() *FileFormatOptions {
	return &FileFormatOptions{
		Format: c.Format,
	}
}

// CreateLakehouseRefreshMaterializedLakeViewsScheduleRequest - Create lakehouse refresh materialized lake views schedule
// request payload.
type CreateLakehouseRefreshMaterializedLakeViewsScheduleRequest struct {
	// REQUIRED; The actual data contains the time/weekdays of this schedule.
	Configuration ScheduleConfigClassification

	// REQUIRED; Whether this schedule is enabled. True - Enabled, False - Disabled.
	Enabled *bool
}

// CreateLakehouseRequest - Create lakehouse request payload.
type CreateLakehouseRequest struct {
	// REQUIRED; The lakehouse display name. The display name must follow naming rules according to item type.
	DisplayName *string

	// The lakehouse creation payload.
	CreationPayload *CreationPayload

	// The lakehouse description. Maximum length is 256 characters.
	Description *string

	// The folder ID. If not specified or null, the lakehouse is created with the workspace as its folder.
	FolderID *string
}

// CreationPayload - (Preview) Lakehouse item payload. This property is currently required due to the schema enabled lakehouse
// being in preview. It might become redundant upon General Availability (GA).
type CreationPayload struct {
	// REQUIRED; Create a schema enabled lakehouse when set to true. Only 'true' is allowed.
	EnableSchemas *bool
}

type CronScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time interval in minutes. A number between 1 and 5270400 (10 years).
	Interval *int32

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type CronScheduleConfig.
func (c *CronScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     c.EndDateTime,
		LocalTimeZoneID: c.LocalTimeZoneID,
		StartDateTime:   c.StartDateTime,
		Type:            c.Type,
	}
}

type DailyScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; A list of time slots in the hh:mm format. The maximum time slots you can use is 100.
	Times []string

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type DailyScheduleConfig.
func (d *DailyScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     d.EndDateTime,
		LocalTimeZoneID: d.LocalTimeZoneID,
		StartDateTime:   d.StartDateTime,
		Type:            d.Type,
	}
}

// DayOfMonth - Specifies a date to trigger the job. The value must be a valid date. Otherwise, it will be skipped.
type DayOfMonth struct {
	// REQUIRED; Specifies a date to trigger the job, using a value between 1 and 31. For example, 2 means the second day of the
	// month. The date must be valid. If an invalid date is provided, such as February 31st, it
	// will automatically skip to the month that includes the 31st day.
	DayOfMonth *int32

	// REQUIRED; An enumerator that lists the day for triggering jobs. Additional types may be added over time.
	OccurrenceType *OccurrenceType
}

// GetMonthlyOccurrence implements the MonthlyOccurrenceClassification interface for type DayOfMonth.
func (d *DayOfMonth) GetMonthlyOccurrence() *MonthlyOccurrence {
	return &MonthlyOccurrence{
		OccurrenceType: d.OccurrenceType,
	}
}

// Duration - A duration.
type Duration struct {
	// REQUIRED; The unit of time for the duration. Additional duration types may be added over time.
	TimeUnit *TimeUnit

	// REQUIRED; The number of timeUnits in the duration.
	Value *float32
}

// FileFormatOptions - Abstract type of data file format options.
type FileFormatOptions struct {
	// REQUIRED; Data file format name. Additional file format types may be added over time.
	Format *FileFormat
}

// GetFileFormatOptions implements the FileFormatOptionsClassification interface for type FileFormatOptions.
func (f *FileFormatOptions) GetFileFormatOptions() *FileFormatOptions { return f }

// ItemReference - An item reference object.
type ItemReference struct {
	// REQUIRED; The item reference type.
	ReferenceType *ItemReferenceType
}

// GetItemReference implements the ItemReferenceClassification interface for type ItemReference.
func (i *ItemReference) GetItemReference() *ItemReference { return i }

// ItemReferenceByID - An item reference by ID object.
type ItemReferenceByID struct {
	// REQUIRED; The ID of the item.
	ItemID *string

	// REQUIRED; The item reference type.
	ReferenceType *ItemReferenceType

	// REQUIRED; The workspace ID of the item.
	WorkspaceID *string
}

// GetItemReference implements the ItemReferenceClassification interface for type ItemReferenceByID.
func (i *ItemReferenceByID) GetItemReference() *ItemReference {
	return &ItemReference{
		ReferenceType: i.ReferenceType,
	}
}

// ItemTag - Represents a tag applied on an item.
type ItemTag struct {
	// REQUIRED; The name of the tag.
	DisplayName *string

	// REQUIRED; The tag ID.
	ID *string
}

// Lakehouse - A lakehouse item.
type Lakehouse struct {
	// REQUIRED; The item type.
	Type *ItemType

	// The item description.
	Description *string

	// The item display name.
	DisplayName *string

	// The lakehouse properties.
	Properties *Properties

	// READ-ONLY; The folder ID.
	FolderID *string

	// READ-ONLY; The item ID.
	ID *string

	// READ-ONLY; List of applied tags.
	Tags []ItemTag

	// READ-ONLY; The workspace ID.
	WorkspaceID *string
}

// Lakehouses - A list of lakehouses.
type Lakehouses struct {
	// REQUIRED; A list of lakehouses.
	Value []Lakehouse

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// LivySession - The livy session response
type LivySession struct {
	// Current attempt number.
	AttemptNumber *int32

	// Reason for the job cancellation.
	CancellationReason *string

	// ID of the capacity.
	CapacityID *string

	// ID of the consumer.
	ConsumerID *Principal

	// ID of the item creator. When isHighConcurrency is set to true this value might be different than itemId.
	CreatorItem *ItemReferenceByID

	// Timestamp when the job ended in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// Flag indicating high concurrency.
	IsHighConcurrency *bool

	// ID of the item.
	Item *ItemReferenceByID

	// Name of the item.
	ItemName *string

	// The item type.
	ItemType *ItemType

	// ID of the job instance.
	JobInstanceID *string

	// Current state of the job.
	JobType *JobType

	// ID of the Livy session or Livy batch.
	LivyID *string

	// Name of the Livy session or Livy batch.
	LivyName *string

	// The URI used to retrieve all Livy sessions for a given item.
	LivySessionItemResourceURI *string

	// Maximum number of attempts.
	MaxNumberOfAttempts *int32

	// Name of the operation. Possible values include: Notebook run, Notebook HC run and Notebook pipeline run.
	OperationName *string

	// Origin of the job.
	Origin *Origin

	// Duration for which the job was queued.
	QueuedDuration *Duration

	// Time it took the job to run.
	RunningDuration *Duration

	// The fabric runtime version.
	RuntimeVersion *string

	// A Spark application ID is a unique identifier assigned to each Apache Spark application. It also appears in the Spark UI.
	SparkApplicationID *string

	// Timestamp when the job started in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// Current state of the job.
	State *State

	// Timestamp when the job was submitted in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	SubmittedDateTime *time.Time

	// ID of the submitter.
	Submitter *Principal

	// Total duration of the job.
	TotalDuration *Duration
}

// LivySessions - A paginated list of livy sessions.
type LivySessions struct {
	// REQUIRED; A list of livy sessions.
	Value []LivySession

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// LoadTableRequest - Represents a load table operation request.
type LoadTableRequest struct {
	// REQUIRED; The type of relativePath, either file or folder. Additional PathType types may be added over time.
	PathType *PathType

	// REQUIRED; The relative path of the data file or folder.
	RelativePath *string

	// The file extension of the data file.
	FileExtension *string

	// Abstract type of data file format options.
	FormatOptions FileFormatOptionsClassification

	// The load table operation mode, overwrite or append. Additional mode types may be added over time.
	Mode *ModeType

	// Indicates whether to search data files recursively or not, when loading a table from a folder.
	Recursive *bool
}

// MonthlyOccurrence - Specifies the day for triggering jobs
type MonthlyOccurrence struct {
	// REQUIRED; An enumerator that lists the day for triggering jobs. Additional types may be added over time.
	OccurrenceType *OccurrenceType
}

// GetMonthlyOccurrence implements the MonthlyOccurrenceClassification interface for type MonthlyOccurrence.
func (m *MonthlyOccurrence) GetMonthlyOccurrence() *MonthlyOccurrence { return m }

type MonthlyScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; A date for triggering the job.
	Occurrence MonthlyOccurrenceClassification

	// REQUIRED; Specifies the monthly job repeat interval. For example, when set to 1 the job is triggered every month.
	Recurrence *int32

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; A list of time slots in the hh:mm format. The maximum time slots you can use is 100.
	Times []string

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type MonthlyScheduleConfig.
func (m *MonthlyScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     m.EndDateTime,
		LocalTimeZoneID: m.LocalTimeZoneID,
		StartDateTime:   m.StartDateTime,
		Type:            m.Type,
	}
}

// OptimizeSettings - Table maintenance optimization settings.
type OptimizeSettings struct {
	// The V-Order [/fabric/data-engineering/delta-optimization-and-v-order#what-is-v-order] settings. True - Enabled, False -
	// Disabled.
	VOrder *bool

	// A list of column names to Z-Order the data by. If not provided, Z-Ordering isn't applied.
	ZOrderBy []string
}

// OrdinalWeekday - Specifies the ordinal week and weekday to trigger the job. The value must be a valid date. Otherwise,
// it will be skipped.
type OrdinalWeekday struct {
	// REQUIRED; An enumerator that lists the day for triggering jobs. Additional types may be added over time.
	OccurrenceType *OccurrenceType

	// REQUIRED; The week of the month.
	WeekIndex *WeekIndex

	// REQUIRED; Week day for triggering jobs.
	Weekday *DayOfWeek
}

// GetMonthlyOccurrence implements the MonthlyOccurrenceClassification interface for type OrdinalWeekday.
func (o *OrdinalWeekday) GetMonthlyOccurrence() *MonthlyOccurrence {
	return &MonthlyOccurrence{
		OccurrenceType: o.OccurrenceType,
	}
}

// Parquet - Format options for Parquet files.
type Parquet struct {
	// REQUIRED; Data file format name. Additional file format types may be added over time.
	Format *FileFormat
}

// GetFileFormatOptions implements the FileFormatOptionsClassification interface for type Parquet.
func (p *Parquet) GetFileFormatOptions() *FileFormatOptions {
	return &FileFormatOptions{
		Format: p.Format,
	}
}

// Principal - Represents an identity or a Microsoft Entra group.
type Principal struct {
	// REQUIRED; The principal's ID.
	ID *string

	// REQUIRED; The type of the principal. Additional principal types may be added over time.
	Type *PrincipalType

	// Group specific details. Applicable when the principal type is Group.
	GroupDetails *PrincipalGroupDetails

	// Service principal profile details. Applicable when the principal type is ServicePrincipalProfile.
	ServicePrincipalProfileDetails *PrincipalServicePrincipalProfileDetails

	// READ-ONLY; The principal's display name.
	DisplayName *string

	// READ-ONLY; Service principal specific details. Applicable when the principal type is ServicePrincipal.
	ServicePrincipalDetails *PrincipalServicePrincipalDetails

	// READ-ONLY; User principal specific details. Applicable when the principal type is User.
	UserDetails *PrincipalUserDetails
}

// PrincipalGroupDetails - Group specific details. Applicable when the principal type is Group.
type PrincipalGroupDetails struct {
	// The type of the group. Additional group types may be added over time.
	GroupType *GroupType
}

// PrincipalServicePrincipalDetails - Service principal specific details. Applicable when the principal type is ServicePrincipal.
type PrincipalServicePrincipalDetails struct {
	// READ-ONLY; The service principal's Microsoft Entra AppId.
	AADAppID *string
}

// PrincipalServicePrincipalProfileDetails - Service principal profile details. Applicable when the principal type is ServicePrincipalProfile.
type PrincipalServicePrincipalProfileDetails struct {
	// The service principal profile's parent principal.
	ParentPrincipal *Principal
}

// PrincipalUserDetails - User principal specific details. Applicable when the principal type is User.
type PrincipalUserDetails struct {
	// READ-ONLY; The user principal name.
	UserPrincipalName *string
}

// Properties - The lakehouse properties.
type Properties struct {
	// REQUIRED; OneLake path to the Lakehouse files directory.
	OneLakeFilesPath *string

	// REQUIRED; OneLake path to the Lakehouse tables directory.
	OneLakeTablesPath *string

	// Default schema of the lakehouse. This property is returned only for schema enabled lakehouse.
	DefaultSchema *string

	// An object containing the properties of the SQL endpoint.
	SQLEndpointProperties *SQLEndpointProperties
}

// RefreshMaterializedLakeViewsSchedule - Lakehouse refresh materialized lake views schedule.
type RefreshMaterializedLakeViewsSchedule struct {
	// REQUIRED; Whether this schedule is enabled. True - Enabled, False - Disabled.
	Enabled *bool

	// REQUIRED; The schedule ID.
	ID *string

	// The actual data contains the time/weekdays of this schedule.
	Configuration ScheduleConfigClassification

	// The created time stamp of this schedule in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	CreatedDateTime *time.Time

	// The user identity that created this schedule or last modified.
	Owner *Principal
}

// RunOnDemandTableMaintenanceRequest - Run on demand lakehouse table maintenance instance payload
type RunOnDemandTableMaintenanceRequest struct {
	// REQUIRED; Execution data to configure the table maintenance [/fabric/data-engineering/lakehouse-table-maintenance] job.
	ExecutionData *TableMaintenanceExecutionData
}

// SQLEndpointProperties - An object containing the properties of the SQL endpoint.
type SQLEndpointProperties struct {
	// REQUIRED; The SQL endpoint provisioning status.
	ProvisioningStatus *SQLEndpointProvisioningStatus

	// SQL endpoint connection string.
	ConnectionString *string

	// SQL endpoint ID.
	ID *string
}

// ScheduleConfig - Item schedule plan detail settings.
type ScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type ScheduleConfig.
func (s *ScheduleConfig) GetScheduleConfig() *ScheduleConfig { return s }

// Table information.
type Table struct {
	// REQUIRED; Table format.
	Format *string

	// REQUIRED; Table location.
	Location *string

	// REQUIRED; Table name.
	Name *string

	// REQUIRED; Table type.
	Type *TableType
}

// TableMaintenanceExecutionData - Run on demand lakehouse table maintenance instance payload
type TableMaintenanceExecutionData struct {
	// REQUIRED; Name of the table to run maintenance on. Max length of 256 character alphanumeric string with underscores.
	TableName *string

	// Configures the optimization settings of the maintenance job. To skip table optimization, leave this parameter empty.
	OptimizeSettings *OptimizeSettings

	// Name of the schema under which the table is created. This property is applicable only for a schema enabled Lakehouse. Max
	// length of 128 character alphanumeric string with underscores.
	SchemaName *string

	// Configures the vacuum [https://docs.delta.io/latest/delta-utility.html#-delta-vacuum] settings of the maintenance job.
	// To skip table vacuum, leave this parameter empty.
	VacuumSettings *VacuumSettings
}

// Tables - A paginated list of tables.
type Tables struct {
	// REQUIRED; List of tables.
	Data []Table

	// Token to get the next page of results.
	ContinuationToken *string

	// The URI of the next chunk in the result set.
	ContinuationURI *string
}

// UpdateLakehouseRefreshMaterializedLakeViewsScheduleRequest - Update lakehouse refresh materialized lake views schedule
// request payload.
type UpdateLakehouseRefreshMaterializedLakeViewsScheduleRequest struct {
	// REQUIRED; The actual data contains the time/weekdays of this schedule.
	Configuration ScheduleConfigClassification

	// REQUIRED; Whether this schedule is enabled. True - Enabled, False - Disabled.
	Enabled *bool
}

// UpdateLakehouseRequest - Update lakehouse request.
type UpdateLakehouseRequest struct {
	// The lakehouse description. Maximum length is 256 characters.
	Description *string

	// The lakehouse display name. The display name must follow naming rules according to item type.
	DisplayName *string
}

// VacuumSettings - Table maintenance vacuum [/fabric/data-engineering/lakehouse-table-maintenance#table-maintenance-operations]
// settings.
type VacuumSettings struct {
	// Overrides the default retention period. Unreferenced files or data files associated with delta table versions older than
	// the specified retention period are removed. This value should follow the
	// pattern of d:hh:mm:ss where d is the number of days, hh is the number of hours between 00 and 23, mm is the number of minutes
	// between 00 and 59, and ss is the number of seconds between 00 and 59.
	RetentionPeriod *string
}

type WeeklyScheduleConfig struct {
	// REQUIRED; The end time for this schedule. The end time must be later than the start time. It has to be in UTC, using the
	// YYYY-MM-DDTHH:mm:ssZ format.
	EndDateTime *time.Time

	// REQUIRED; The time zone identifier registry on local computer for windows, see Default Time Zones [/windows-hardware/manufacture/desktop/default-time-zones]
	LocalTimeZoneID *string

	// REQUIRED; The start time for this schedule. If the start time is in the past, it will trigger a job instantly. The time
	// is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
	StartDateTime *time.Time

	// REQUIRED; A list of time slots in the hh:mm format. The maximum time slots you can use is 100.
	Times []string

	// REQUIRED; The type of schedule configuration. Additional types may be added over time.
	Type *ScheduleType

	// REQUIRED; A list of weekdays, at most seven elements are allowed.
	Weekdays []DayOfWeek
}

// GetScheduleConfig implements the ScheduleConfigClassification interface for type WeeklyScheduleConfig.
func (w *WeeklyScheduleConfig) GetScheduleConfig() *ScheduleConfig {
	return &ScheduleConfig{
		EndDateTime:     w.EndDateTime,
		LocalTimeZoneID: w.LocalTimeZoneID,
		StartDateTime:   w.StartDateTime,
		Type:            w.Type,
	}
}
