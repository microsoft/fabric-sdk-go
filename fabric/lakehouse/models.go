// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package lakehouse

// CSV format options for CSV files.
type CSV struct {
	// REQUIRED; Data file format name. Additional file format types may be added over time.
	Format *FileFormat

	// The delimiter of CSV file.
	Delimiter *string

	// This property indicates whether the CSV data file contains a header line or not.
	Header *bool
}

// GetFileFormatOptions implements the FileFormatOptionsClassification interface for type CSV.
func (c *CSV) GetFileFormatOptions() *FileFormatOptions {
	return &FileFormatOptions{
		Format: c.Format,
	}
}

// CreateLakehouseRequest - Create lakehouse request payload.
type CreateLakehouseRequest struct {
	// REQUIRED; The lakehouse display name. The display name must follow naming rules according to item type.
	DisplayName *string

	// The lakehouse creation payload.
	CreationPayload *CreationPayload

	// The lakehouse description. Maximum length is 256 characters.
	Description *string
}

// CreationPayload - (Preview) Lakehouse item payload. This property is currently required due to the schema enabled lakehouse
// being in preview. It might become redundant upon General Availability (GA).
type CreationPayload struct {
	// REQUIRED; Create a schema enabled lakehouse when set to true. Only 'true' is allowed.
	EnableSchemas *bool
}

// FileFormatOptions - Abstract type of data file format options.
type FileFormatOptions struct {
	// REQUIRED; Data file format name. Additional file format types may be added over time.
	Format *FileFormat
}

// GetFileFormatOptions implements the FileFormatOptionsClassification interface for type FileFormatOptions.
func (f *FileFormatOptions) GetFileFormatOptions() *FileFormatOptions { return f }

// Lakehouse - A lakehouse item.
type Lakehouse struct {
	// REQUIRED; The item type.
	Type *ItemType

	// The item description.
	Description *string

	// The item display name.
	DisplayName *string

	// The lakehouse properties.
	Properties *Properties

	// READ-ONLY; The item ID.
	ID *string

	// READ-ONLY; The workspace ID.
	WorkspaceID *string
}

// Lakehouses - A list of lakehouses.
type Lakehouses struct {
	// REQUIRED; A list of lakehouses.
	Value []Lakehouse

	// The token for the next result set batch. If there are no more records, it's removed from the response.
	ContinuationToken *string

	// The URI of the next result set batch. If there are no more records, it's removed from the response.
	ContinuationURI *string
}

// LoadTableRequest - Represents a load table operation request.
type LoadTableRequest struct {
	// REQUIRED; The type of relativePath, either file or folder. Additional PathType types may be added over time.
	PathType *PathType

	// REQUIRED; The relative path of the data file or folder.
	RelativePath *string

	// The file extension of the data file.
	FileExtension *string

	// Abstract type of data file format options.
	FormatOptions FileFormatOptionsClassification

	// The load table operation mode, overwrite or append. Additional mode types may be added over time.
	Mode *ModeType

	// Indicates whether to search data files recursively or not, when loading a table from a folder.
	Recursive *bool
}

// OptimizeSettings - Table maintenance optimization settings.
type OptimizeSettings struct {
	// The V-Order [/fabric/data-engineering/delta-optimization-and-v-order#what-is-v-order] settings. True - Enabled, False -
	// Disabled.
	VOrder *bool

	// A list of column names to Z-Order the data by. If not provided, Z-Ordering isn't applied.
	ZOrderBy []string
}

// Parquet - Format options for Parquet files.
type Parquet struct {
	// REQUIRED; Data file format name. Additional file format types may be added over time.
	Format *FileFormat
}

// GetFileFormatOptions implements the FileFormatOptionsClassification interface for type Parquet.
func (p *Parquet) GetFileFormatOptions() *FileFormatOptions {
	return &FileFormatOptions{
		Format: p.Format,
	}
}

// Properties - The lakehouse properties.
type Properties struct {
	// REQUIRED; OneLake path to the Lakehouse files directory.
	OneLakeFilesPath *string

	// REQUIRED; OneLake path to the Lakehouse tables directory.
	OneLakeTablesPath *string

	// Default schema of the lakehouse. This property is returned only for schema enabled lakehouse.
	DefaultSchema *string

	// An object containing the properties of the SQL endpoint.
	SQLEndpointProperties *SQLEndpointProperties
}

// RunOnDemandTableMaintenanceRequest - Run on demand lakehouse table maintenance instance payload
type RunOnDemandTableMaintenanceRequest struct {
	// REQUIRED; Execution data to configure the table maintenance [/fabric/data-engineering/lakehouse-table-maintenance] job.
	ExecutionData *TableMaintenanceExecutionData
}

// SQLEndpointProperties - An object containing the properties of the SQL endpoint.
type SQLEndpointProperties struct {
	// REQUIRED; The SQL endpoint provisioning status.
	ProvisioningStatus *SQLEndpointProvisioningStatus

	// SQL endpoint connection string.
	ConnectionString *string

	// SQL endpoint ID.
	ID *string
}

// Table information.
type Table struct {
	// REQUIRED; Table format.
	Format *string

	// REQUIRED; Table location.
	Location *string

	// REQUIRED; Table name.
	Name *string

	// REQUIRED; Table type.
	Type *TableType
}

// TableMaintenanceExecutionData - Run on demand lakehouse table maintenance instance payload
type TableMaintenanceExecutionData struct {
	// REQUIRED; Name of the table to run maintenance on. Max length of 256 character alphanumeric string with underscores.
	TableName *string

	// Configures the optimization settings of the maintenance job. To skip table optimization, leave this parameter empty.
	OptimizeSettings *OptimizeSettings

	// Name of the schema under which the table is created. This property is applicable only for a schema enabled Lakehouse. Max
	// length of 128 character alphanumeric string with underscores.
	SchemaName *string

	// Configures the vacuum [https://docs.delta.io/latest/delta-utility.html#-delta-vacuum] settings of the maintenance job.
	// To skip table vacuum, leave this parameter empty.
	VacuumSettings *VacuumSettings
}

// Tables - A paginated list of tables.
type Tables struct {
	// REQUIRED; List of tables.
	Data []Table

	// Token to get the next page of results.
	ContinuationToken *string

	// The URI of the next chunk in the result set.
	ContinuationURI *string
}

// UpdateLakehouseRequest - Update lakehouse request.
type UpdateLakehouseRequest struct {
	// The lakehouse description. Maximum length is 256 characters.
	Description *string

	// The lakehouse display name. The display name must follow naming rules according to item type.
	DisplayName *string
}

// VacuumSettings - Table maintenance vacuum [/fabric/data-engineering/lakehouse-table-maintenance#table-maintenance-operations]
// settings.
type VacuumSettings struct {
	// Overrides the default retention period. Unreferenced files or data files associated with delta table versions older than
	// the specified retention period are removed. This value should follow the
	// pattern of d:hh:mm:ss where d is the number of days, hh is the number of hours between 00 and 23, mm is the number of minutes
	// between 00 and 59, and ss is the number of seconds between 00 and 59.
	RetentionPeriod *string
}
