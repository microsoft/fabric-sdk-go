// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package lakehouse

// BackgroundJobsClientCreateRefreshMaterializedLakeViewsScheduleOptions contains the optional parameters for the BackgroundJobsClient.CreateRefreshMaterializedLakeViewsSchedule
// method.
type BackgroundJobsClientCreateRefreshMaterializedLakeViewsScheduleOptions struct {
	// placeholder for future optional parameters
}

// BackgroundJobsClientDeleteRefreshMaterializedLakeViewsScheduleOptions contains the optional parameters for the BackgroundJobsClient.DeleteRefreshMaterializedLakeViewsSchedule
// method.
type BackgroundJobsClientDeleteRefreshMaterializedLakeViewsScheduleOptions struct {
	// placeholder for future optional parameters
}

// BackgroundJobsClientRunOnDemandRefreshMaterializedLakeViewsOptions contains the optional parameters for the BackgroundJobsClient.RunOnDemandRefreshMaterializedLakeViews
// method.
type BackgroundJobsClientRunOnDemandRefreshMaterializedLakeViewsOptions struct {
	// placeholder for future optional parameters
}

// BackgroundJobsClientRunOnDemandTableMaintenanceOptions contains the optional parameters for the BackgroundJobsClient.RunOnDemandTableMaintenance
// method.
type BackgroundJobsClientRunOnDemandTableMaintenanceOptions struct {
	// placeholder for future optional parameters
}

// BackgroundJobsClientUpdateRefreshMaterializedLakeViewsScheduleOptions contains the optional parameters for the BackgroundJobsClient.UpdateRefreshMaterializedLakeViewsSchedule
// method.
type BackgroundJobsClientUpdateRefreshMaterializedLakeViewsScheduleOptions struct {
	// placeholder for future optional parameters
}

// ItemsClientBeginCreateLakehouseOptions contains the optional parameters for the ItemsClient.BeginCreateLakehouse method.
type ItemsClientBeginCreateLakehouseOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// ItemsClientDeleteLakehouseOptions contains the optional parameters for the ItemsClient.DeleteLakehouse method.
type ItemsClientDeleteLakehouseOptions struct {
	// placeholder for future optional parameters
}

// ItemsClientGetLakehouseOptions contains the optional parameters for the ItemsClient.GetLakehouse method.
type ItemsClientGetLakehouseOptions struct {
	// placeholder for future optional parameters
}

// ItemsClientListLakehousesOptions contains the optional parameters for the ItemsClient.NewListLakehousesPager method.
type ItemsClientListLakehousesOptions struct {
	// A token for retrieving the next page of results.
	ContinuationToken *string
}

// ItemsClientUpdateLakehouseOptions contains the optional parameters for the ItemsClient.UpdateLakehouse method.
type ItemsClientUpdateLakehouseOptions struct {
	// placeholder for future optional parameters
}

// LivySessionsClientGetLivySessionOptions contains the optional parameters for the LivySessionsClient.GetLivySession method.
type LivySessionsClientGetLivySessionOptions struct {
	// placeholder for future optional parameters
}

// LivySessionsClientListLivySessionsOptions contains the optional parameters for the LivySessionsClient.NewListLivySessionsPager
// method.
type LivySessionsClientListLivySessionsOptions struct {
	// Token to retrieve the next page of results, if available.
	ContinuationToken *string
}

// TablesClientBeginLoadTableOptions contains the optional parameters for the TablesClient.BeginLoadTable method.
type TablesClientBeginLoadTableOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// TablesClientListTablesOptions contains the optional parameters for the TablesClient.NewListTablesPager method.
type TablesClientListTablesOptions struct {
	// Token to retrieve the next page of results, if available.
	ContinuationToken *string

	// The maximum number of results per page to return.
	MaxResults *int32
}
