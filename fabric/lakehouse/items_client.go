// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package lakehouse

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateLakehouse - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API does not support create a lakehouse with definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Lakehouse.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createLakehouseRequest - Create item request payload.
//   - options - ItemsClientBeginCreateLakehouseOptions contains the optional parameters for the ItemsClient.BeginCreateLakehouse
//     method.
func (client *ItemsClient) BeginCreateLakehouse(ctx context.Context, workspaceID string, createLakehouseRequest CreateLakehouseRequest, options *ItemsClientBeginCreateLakehouseOptions) (*runtime.Poller[ItemsClientCreateLakehouseResponse], error) {
	return client.beginCreateLakehouse(ctx, workspaceID, createLakehouseRequest, options)
}

// CreateLakehouse - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API does not support create a lakehouse with definition.
// PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Lakehouse.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createLakehouse(ctx context.Context, workspaceID string, createLakehouseRequest CreateLakehouseRequest, options *ItemsClientBeginCreateLakehouseOptions) (*http.Response, error) {
	var err error
	const operationName = "lakehouse.ItemsClient.BeginCreateLakehouse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createLakehouseCreateRequest(ctx, workspaceID, createLakehouseRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createLakehouseCreateRequest creates the CreateLakehouse request.
func (client *ItemsClient) createLakehouseCreateRequest(ctx context.Context, workspaceID string, createLakehouseRequest CreateLakehouseRequest, options *ItemsClientBeginCreateLakehouseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/lakehouses"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createLakehouseRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteLakehouse - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Lakehouse.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - lakehouseID - The lakehouse ID.
//   - options - ItemsClientDeleteLakehouseOptions contains the optional parameters for the ItemsClient.DeleteLakehouse method.
func (client *ItemsClient) DeleteLakehouse(ctx context.Context, workspaceID string, lakehouseID string, options *ItemsClientDeleteLakehouseOptions) (ItemsClientDeleteLakehouseResponse, error) {
	var err error
	const operationName = "lakehouse.ItemsClient.DeleteLakehouse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteLakehouseCreateRequest(ctx, workspaceID, lakehouseID, options)
	if err != nil {
		return ItemsClientDeleteLakehouseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteLakehouseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteLakehouseResponse{}, err
	}
	return ItemsClientDeleteLakehouseResponse{}, nil
}

// deleteLakehouseCreateRequest creates the DeleteLakehouse request.
func (client *ItemsClient) deleteLakehouseCreateRequest(ctx context.Context, workspaceID string, lakehouseID string, options *ItemsClientDeleteLakehouseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/lakehouses/{lakehouseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if lakehouseID == "" {
		return nil, errors.New("parameter lakehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{lakehouseId}", url.PathEscape(lakehouseID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetLakehouse - PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Lakehouse.Read.All or Lakehouse.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - lakehouseID - The lakehouse ID.
//   - options - ItemsClientGetLakehouseOptions contains the optional parameters for the ItemsClient.GetLakehouse method.
func (client *ItemsClient) GetLakehouse(ctx context.Context, workspaceID string, lakehouseID string, options *ItemsClientGetLakehouseOptions) (ItemsClientGetLakehouseResponse, error) {
	var err error
	const operationName = "lakehouse.ItemsClient.GetLakehouse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getLakehouseCreateRequest(ctx, workspaceID, lakehouseID, options)
	if err != nil {
		return ItemsClientGetLakehouseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetLakehouseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetLakehouseResponse{}, err
	}
	resp, err := client.getLakehouseHandleResponse(httpResp)
	return resp, err
}

// getLakehouseCreateRequest creates the GetLakehouse request.
func (client *ItemsClient) getLakehouseCreateRequest(ctx context.Context, workspaceID string, lakehouseID string, options *ItemsClientGetLakehouseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/lakehouses/{lakehouseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if lakehouseID == "" {
		return nil, errors.New("parameter lakehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{lakehouseId}", url.PathEscape(lakehouseID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getLakehouseHandleResponse handles the GetLakehouse response.
func (client *ItemsClient) getLakehouseHandleResponse(resp *http.Response) (ItemsClientGetLakehouseResponse, error) {
	result := ItemsClientGetLakehouseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Lakehouse); err != nil {
		return ItemsClientGetLakehouseResponse{}, err
	}
	return result, nil
}

// NewListLakehousesPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have viewer or higher workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListLakehousesOptions contains the optional parameters for the ItemsClient.NewListLakehousesPager
//     method.
func (client *ItemsClient) NewListLakehousesPager(workspaceID string, options *ItemsClientListLakehousesOptions) *runtime.Pager[ItemsClientListLakehousesResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListLakehousesResponse]{
		More: func(page ItemsClientListLakehousesResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListLakehousesResponse) (ItemsClientListLakehousesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "lakehouse.ItemsClient.NewListLakehousesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listLakehousesCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListLakehousesResponse{}, err
			}
			return client.listLakehousesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listLakehousesCreateRequest creates the ListLakehouses request.
func (client *ItemsClient) listLakehousesCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListLakehousesOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/lakehouses"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listLakehousesHandleResponse handles the ListLakehouses response.
func (client *ItemsClient) listLakehousesHandleResponse(resp *http.Response) (ItemsClientListLakehousesResponse, error) {
	result := ItemsClientListLakehousesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Lakehouses); err != nil {
		return ItemsClientListLakehousesResponse{}, err
	}
	return result, nil
}

// UpdateLakehouse - PERMISSIONS The caller must have contributor or higher workspace role.
// REQUIRED DELEGATED SCOPES Lakehouse.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - lakehouseID - The lakehouse ID.
//   - updateLakehouseRequest - Update lakehouse request payload.
//   - options - ItemsClientUpdateLakehouseOptions contains the optional parameters for the ItemsClient.UpdateLakehouse method.
func (client *ItemsClient) UpdateLakehouse(ctx context.Context, workspaceID string, lakehouseID string, updateLakehouseRequest UpdateLakehouseRequest, options *ItemsClientUpdateLakehouseOptions) (ItemsClientUpdateLakehouseResponse, error) {
	var err error
	const operationName = "lakehouse.ItemsClient.UpdateLakehouse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateLakehouseCreateRequest(ctx, workspaceID, lakehouseID, updateLakehouseRequest, options)
	if err != nil {
		return ItemsClientUpdateLakehouseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateLakehouseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateLakehouseResponse{}, err
	}
	resp, err := client.updateLakehouseHandleResponse(httpResp)
	return resp, err
}

// updateLakehouseCreateRequest creates the UpdateLakehouse request.
func (client *ItemsClient) updateLakehouseCreateRequest(ctx context.Context, workspaceID string, lakehouseID string, updateLakehouseRequest UpdateLakehouseRequest, options *ItemsClientUpdateLakehouseOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/lakehouses/{lakehouseId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if lakehouseID == "" {
		return nil, errors.New("parameter lakehouseID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{lakehouseId}", url.PathEscape(lakehouseID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateLakehouseRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateLakehouseHandleResponse handles the UpdateLakehouse response.
func (client *ItemsClient) updateLakehouseHandleResponse(resp *http.Response) (ItemsClientUpdateLakehouseResponse, error) {
	result := ItemsClientUpdateLakehouseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Lakehouse); err != nil {
		return ItemsClientUpdateLakehouseResponse{}, err
	}
	return result, nil
}

// Custom code starts below

// CreateLakehouse - returns ItemsClientCreateLakehouseResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// This API does not support create a lakehouse with definition.
//
// PERMISSIONS The caller must have contributor or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Lakehouse.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createLakehouseRequest - Create item request payload.
//   - options - ItemsClientBeginCreateLakehouseOptions contains the optional parameters for the ItemsClient.BeginCreateLakehouse method.
func (client *ItemsClient) CreateLakehouse(ctx context.Context, workspaceID string, createLakehouseRequest CreateLakehouseRequest, options *ItemsClientBeginCreateLakehouseOptions) (ItemsClientCreateLakehouseResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateLakehouse(ctx, workspaceID, createLakehouseRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateLakehouseResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateLakehouseResponse{}, err
	}
	return result, err
}

// beginCreateLakehouse creates the createLakehouse request.
func (client *ItemsClient) beginCreateLakehouse(ctx context.Context, workspaceID string, createLakehouseRequest CreateLakehouseRequest, options *ItemsClientBeginCreateLakehouseOptions) (*runtime.Poller[ItemsClientCreateLakehouseResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createLakehouse(ctx, workspaceID, createLakehouseRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateLakehouseResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateLakehouseResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateLakehouseResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateLakehouseResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListLakehouses - returns array of Lakehouse from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have viewer or higher workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] | Yes | | Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListLakehousesOptions contains the optional parameters for the ItemsClient.NewListLakehousesPager method.
func (client *ItemsClient) ListLakehouses(ctx context.Context, workspaceID string, options *ItemsClientListLakehousesOptions) ([]Lakehouse, error) {
	pager := client.NewListLakehousesPager(workspaceID, options)
	mapper := func(resp ItemsClientListLakehousesResponse) []Lakehouse {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []Lakehouse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []Lakehouse{}, err
	}
	return list, nil
}
