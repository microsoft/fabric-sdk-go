// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package lakehouse_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"

	"github.com/microsoft/fabric-sdk-go/fabric/lakehouse"
)

// Generated from example definition
func ExampleBackgroundJobsClient_RunOnDemandTableMaintenance_runTableMaintenanceWithOptimizeZOrderAndVacuumEnabled() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := lakehouse.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewBackgroundJobsClient().RunOnDemandTableMaintenance(ctx, "4b218778-e7a5-4d73-8187-f10824047715", "431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7", "TableMaintenance", lakehouse.RunOnDemandTableMaintenanceRequest{
		ExecutionData: &lakehouse.TableMaintenanceExecutionData{
			OptimizeSettings: &lakehouse.OptimizeSettings{
				VOrder: to.Ptr(true),
				ZOrderBy: []string{
					"tipAmount"},
			},
			TableName: to.Ptr("table1"),
			VacuumSettings: &lakehouse.VacuumSettings{
				RetentionPeriod: to.Ptr("7:01:00:00"),
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition
func ExampleBackgroundJobsClient_RunOnDemandTableMaintenance_runTableMaintenanceWithOptimizeEnabledAndVacuumDisabled() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := lakehouse.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewBackgroundJobsClient().RunOnDemandTableMaintenance(ctx, "4b218778-e7a5-4d73-8187-f10824047715", "431e8d7b-4a95-4c02-8ccd-6faef5ba1bd7", "TableMaintenance", lakehouse.RunOnDemandTableMaintenanceRequest{
		ExecutionData: &lakehouse.TableMaintenanceExecutionData{
			OptimizeSettings: &lakehouse.OptimizeSettings{},
			TableName:        to.Ptr("table1"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}
