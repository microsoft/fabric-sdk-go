// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package lakehouse_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"

	"github.com/microsoft/fabric-sdk-go/fabric/lakehouse"
)

// Generated from example definition
func ExampleItemsClient_NewListLakehousesPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := lakehouse.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewItemsClient().NewListLakehousesPager("cfafbeb1-8037-4d0c-896e-a46fb27ff229", &lakehouse.ItemsClientListLakehousesOptions{ContinuationToken: nil})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.Lakehouses = lakehouse.Lakehouses{
		// 	Value: []lakehouse.Lakehouse{
		// 		{
		// 			Type: to.Ptr(lakehouse.ItemTypeLakehouse),
		// 			Description: to.Ptr("A lakehouse description."),
		// 			DisplayName: to.Ptr("Lakehouse_1"),
		// 			ID: to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
		// 			WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		// 			Properties: &lakehouse.Properties{
		// 				OneLakeFilesPath: to.Ptr("https://onelake.dfs.fabric.microsoft.com/2382cdf5-d577-44d0-a1fc-42184f29a7eb/e5fb215b-1934-413e-b33a-debaf844afde/Files"),
		// 				OneLakeTablesPath: to.Ptr("https://onelake.dfs.fabric.microsoft.com/2382cdf5-d577-44d0-a1fc-42184f29a7eb/e5fb215b-1934-413e-b33a-debaf844afde/Tables"),
		// 				SQLEndpointProperties: &lakehouse.SQLEndpointProperties{
		// 					ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
		// 					ID: to.Ptr("37dc8a41-dea9-465d-b528-3e95043b2356"),
		// 					ProvisioningStatus: to.Ptr(lakehouse.SQLEndpointProvisioningStatusSuccess),
		// 				},
		// 			},
		// 		},
		// 		{
		// 			Type: to.Ptr(lakehouse.ItemTypeLakehouse),
		// 			Description: to.Ptr("A lakehouse description."),
		// 			DisplayName: to.Ptr("Lakehouse_2"),
		// 			ID: to.Ptr("a8a1bffa-7eea-49dc-a1d2-6281c1d031f1"),
		// 			WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
		// 			Properties: &lakehouse.Properties{
		// 				OneLakeFilesPath: to.Ptr("https://onelake.dfs.fabric.microsoft.com/fc5d0537-1b22-4de1-a5e9-9b8bb58ed1e1/6dc325f6-46f6-4a2a-930b-10b96a463566/Files"),
		// 				OneLakeTablesPath: to.Ptr("https://onelake.dfs.fabric.microsoft.com/fc5d0537-1b22-4de1-a5e9-9b8bb58ed1e1/6dc325f6-46f6-4a2a-930b-10b96a463566/Tables"),
		// 				SQLEndpointProperties: &lakehouse.SQLEndpointProperties{
		// 					ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
		// 					ID: to.Ptr("37dc8a41-dea9-465d-b528-3e95043b2356"),
		// 					ProvisioningStatus: to.Ptr(lakehouse.SQLEndpointProvisioningStatusSuccess),
		// 				},
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition
func ExampleItemsClient_BeginCreateLakehouse_createALakehouseExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := lakehouse.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewItemsClient().BeginCreateLakehouse(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", lakehouse.CreateLakehouseRequest{
		Description: to.Ptr("A lakehouse description"),
		DisplayName: to.Ptr("Lakehouse_1"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition
func ExampleItemsClient_BeginCreateLakehouse_createALakehouseWithSchemaExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := lakehouse.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewItemsClient().BeginCreateLakehouse(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", lakehouse.CreateLakehouseRequest{
		Description: to.Ptr("A schema enabled lakehouse."),
		CreationPayload: &lakehouse.CreationPayload{
			EnableSchemas: to.Ptr(true),
		},
		DisplayName: to.Ptr("Lakehouse_created_with_schema"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition
func ExampleItemsClient_GetLakehouse_getALakehouseExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := lakehouse.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewItemsClient().GetLakehouse(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", "5b218778-e7a5-4d73-8187-f10824047715", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Lakehouse = lakehouse.Lakehouse{
	// 	Type: to.Ptr(lakehouse.ItemTypeLakehouse),
	// 	Description: to.Ptr("A lakehouse description."),
	// 	DisplayName: to.Ptr("Lakehouse_1"),
	// 	ID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
	// 	WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	// 	Properties: &lakehouse.Properties{
	// 		OneLakeFilesPath: to.Ptr("https://onelake.dfs.fabric.microsoft.com/2382cdf5-d577-44d0-a1fc-42184f29a7eb/e5fb215b-1934-413e-b33a-debaf844afde/Files"),
	// 		OneLakeTablesPath: to.Ptr("https://onelake.dfs.fabric.microsoft.com/2382cdf5-d577-44d0-a1fc-42184f29a7eb/e5fb215b-1934-413e-b33a-debaf844afde/Tables"),
	// 		SQLEndpointProperties: &lakehouse.SQLEndpointProperties{
	// 			ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
	// 			ID: to.Ptr("37dc8a41-dea9-465d-b528-3e95043b2356"),
	// 			ProvisioningStatus: to.Ptr(lakehouse.SQLEndpointProvisioningStatusSuccess),
	// 		},
	// 	},
	// }
}

// Generated from example definition
func ExampleItemsClient_GetLakehouse_getALakehouseWithSchemaExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := lakehouse.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewItemsClient().GetLakehouse(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", "5b218778-e7a5-4d73-8187-f10824047715", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Lakehouse = lakehouse.Lakehouse{
	// 	Type: to.Ptr(lakehouse.ItemTypeLakehouse),
	// 	Description: to.Ptr("A schema enabled lakehouse."),
	// 	DisplayName: to.Ptr("Lakehouse_created_with_schema"),
	// 	ID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
	// 	WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	// 	Properties: &lakehouse.Properties{
	// 		DefaultSchema: to.Ptr("dbo"),
	// 		OneLakeFilesPath: to.Ptr("https://onelake.dfs.fabric.microsoft.com/2382cdf5-d577-44d0-a1fc-42184f29a7eb/e5fb215b-1934-413e-b33a-debaf844afde/Files"),
	// 		OneLakeTablesPath: to.Ptr("https://onelake.dfs.fabric.microsoft.com/2382cdf5-d577-44d0-a1fc-42184f29a7eb/e5fb215b-1934-413e-b33a-debaf844afde/Tables"),
	// 		SQLEndpointProperties: &lakehouse.SQLEndpointProperties{
	// 			ConnectionString: to.Ptr("qvrmbuxie7we7glrekxgy6npqu-6xgyei3x2xiejip4iime6knh5m.datawarehouse.fabric.microsoft.com"),
	// 			ID: to.Ptr("37dc8a41-dea9-465d-b528-3e95043b2356"),
	// 			ProvisioningStatus: to.Ptr(lakehouse.SQLEndpointProvisioningStatusSuccess),
	// 		},
	// 	},
	// }
}

// Generated from example definition
func ExampleItemsClient_UpdateLakehouse() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := lakehouse.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewItemsClient().UpdateLakehouse(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", "5b218778-e7a5-4d73-8187-f10824047715", lakehouse.UpdateLakehouseRequest{
		Description: to.Ptr("A new description for lakehouse."),
		DisplayName: to.Ptr("Lakehouse_New_Name"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Lakehouse = lakehouse.Lakehouse{
	// 	Type: to.Ptr(lakehouse.ItemTypeLakehouse),
	// 	Description: to.Ptr("A new description for lakehouse."),
	// 	DisplayName: to.Ptr("Lakehouse_New_Name"),
	// 	ID: to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
	// 	WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	// }
}

// Generated from example definition
func ExampleItemsClient_DeleteLakehouse() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := lakehouse.NewClientFactory(cred, nil, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewItemsClient().DeleteLakehouse(ctx, "cfafbeb1-8037-4d0c-896e-a46fb27ff229", "5b218778-e7a5-4d73-8187-f10824047715", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}
