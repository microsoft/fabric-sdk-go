// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package lakehouse

// BackgroundJobsClientCreateRefreshMaterializedLakeViewsScheduleResponse contains the response from method BackgroundJobsClient.CreateRefreshMaterializedLakeViewsSchedule.
type BackgroundJobsClientCreateRefreshMaterializedLakeViewsScheduleResponse struct {
	// Lakehouse refresh materialized lake views schedule.
	RefreshMaterializedLakeViewsSchedule

	// Location contains the information returned from the Location header response.
	Location *string
}

// BackgroundJobsClientDeleteRefreshMaterializedLakeViewsScheduleResponse contains the response from method BackgroundJobsClient.DeleteRefreshMaterializedLakeViewsSchedule.
type BackgroundJobsClientDeleteRefreshMaterializedLakeViewsScheduleResponse struct {
	// placeholder for future response values
}

// BackgroundJobsClientRunOnDemandRefreshMaterializedLakeViewsResponse contains the response from method BackgroundJobsClient.RunOnDemandRefreshMaterializedLakeViews.
type BackgroundJobsClientRunOnDemandRefreshMaterializedLakeViewsResponse struct {
	// Location contains the information returned from the Location header response.
	Location *string

	// RetryAfter contains the information returned from the Retry-After header response.
	RetryAfter *int32
}

// BackgroundJobsClientRunOnDemandTableMaintenanceResponse contains the response from method BackgroundJobsClient.RunOnDemandTableMaintenance.
type BackgroundJobsClientRunOnDemandTableMaintenanceResponse struct {
	// Location contains the information returned from the Location header response.
	Location *string

	// RetryAfter contains the information returned from the Retry-After header response.
	RetryAfter *int32
}

// BackgroundJobsClientUpdateRefreshMaterializedLakeViewsScheduleResponse contains the response from method BackgroundJobsClient.UpdateRefreshMaterializedLakeViewsSchedule.
type BackgroundJobsClientUpdateRefreshMaterializedLakeViewsScheduleResponse struct {
	// Lakehouse refresh materialized lake views schedule.
	RefreshMaterializedLakeViewsSchedule
}

// ItemsClientCreateLakehouseResponse contains the response from method ItemsClient.BeginCreateLakehouse.
type ItemsClientCreateLakehouseResponse struct {
	// A lakehouse item.
	Lakehouse
}

// ItemsClientDeleteLakehouseResponse contains the response from method ItemsClient.DeleteLakehouse.
type ItemsClientDeleteLakehouseResponse struct {
	// placeholder for future response values
}

// ItemsClientGetLakehouseResponse contains the response from method ItemsClient.GetLakehouse.
type ItemsClientGetLakehouseResponse struct {
	// A lakehouse item.
	Lakehouse
}

// ItemsClientListLakehousesResponse contains the response from method ItemsClient.NewListLakehousesPager.
type ItemsClientListLakehousesResponse struct {
	// A list of lakehouses.
	Lakehouses
}

// ItemsClientUpdateLakehouseResponse contains the response from method ItemsClient.UpdateLakehouse.
type ItemsClientUpdateLakehouseResponse struct {
	// A lakehouse item.
	Lakehouse
}

// LivySessionsClientGetLivySessionResponse contains the response from method LivySessionsClient.GetLivySession.
type LivySessionsClientGetLivySessionResponse struct {
	// The livy session response
	LivySession
}

// LivySessionsClientListLivySessionsResponse contains the response from method LivySessionsClient.NewListLivySessionsPager.
type LivySessionsClientListLivySessionsResponse struct {
	// A paginated list of livy sessions.
	LivySessions
}

// TablesClientListTablesResponse contains the response from method TablesClient.NewListTablesPager.
type TablesClientListTablesResponse struct {
	// A paginated list of tables.
	Tables
}

// TablesClientLoadTableResponse contains the response from method TablesClient.BeginLoadTable.
type TablesClientLoadTableResponse struct {
	// placeholder for future response values
}
