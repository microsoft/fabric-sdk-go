// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/lakehouse"
)

// ItemsServer is a fake server for instances of the lakehouse.ItemsClient type.
type ItemsServer struct {
	// BeginCreateLakehouse is the fake for method ItemsClient.BeginCreateLakehouse
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateLakehouse func(ctx context.Context, workspaceID string, createLakehouseRequest lakehouse.CreateLakehouseRequest, options *lakehouse.ItemsClientBeginCreateLakehouseOptions) (resp azfake.PollerResponder[lakehouse.ItemsClientCreateLakehouseResponse], errResp azfake.ErrorResponder)

	// DeleteLakehouse is the fake for method ItemsClient.DeleteLakehouse
	// HTTP status codes to indicate success: http.StatusOK
	DeleteLakehouse func(ctx context.Context, workspaceID string, lakehouseID string, options *lakehouse.ItemsClientDeleteLakehouseOptions) (resp azfake.Responder[lakehouse.ItemsClientDeleteLakehouseResponse], errResp azfake.ErrorResponder)

	// GetLakehouse is the fake for method ItemsClient.GetLakehouse
	// HTTP status codes to indicate success: http.StatusOK
	GetLakehouse func(ctx context.Context, workspaceID string, lakehouseID string, options *lakehouse.ItemsClientGetLakehouseOptions) (resp azfake.Responder[lakehouse.ItemsClientGetLakehouseResponse], errResp azfake.ErrorResponder)

	// NewListLakehousesPager is the fake for method ItemsClient.NewListLakehousesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListLakehousesPager func(workspaceID string, options *lakehouse.ItemsClientListLakehousesOptions) (resp azfake.PagerResponder[lakehouse.ItemsClientListLakehousesResponse])

	// UpdateLakehouse is the fake for method ItemsClient.UpdateLakehouse
	// HTTP status codes to indicate success: http.StatusOK
	UpdateLakehouse func(ctx context.Context, workspaceID string, lakehouseID string, updateLakehouseRequest lakehouse.UpdateLakehouseRequest, options *lakehouse.ItemsClientUpdateLakehouseOptions) (resp azfake.Responder[lakehouse.ItemsClientUpdateLakehouseResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of lakehouse.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                    srv,
		beginCreateLakehouse:   newTracker[azfake.PollerResponder[lakehouse.ItemsClientCreateLakehouseResponse]](),
		newListLakehousesPager: newTracker[azfake.PagerResponder[lakehouse.ItemsClientListLakehousesResponse]](),
	}
}

// ItemsServerTransport connects instances of lakehouse.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                    *ItemsServer
	beginCreateLakehouse   *tracker[azfake.PollerResponder[lakehouse.ItemsClientCreateLakehouseResponse]]
	newListLakehousesPager *tracker[azfake.PagerResponder[lakehouse.ItemsClientListLakehousesResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "ItemsClient.BeginCreateLakehouse":
			res.resp, res.err = i.dispatchBeginCreateLakehouse(req)
		case "ItemsClient.DeleteLakehouse":
			res.resp, res.err = i.dispatchDeleteLakehouse(req)
		case "ItemsClient.GetLakehouse":
			res.resp, res.err = i.dispatchGetLakehouse(req)
		case "ItemsClient.NewListLakehousesPager":
			res.resp, res.err = i.dispatchNewListLakehousesPager(req)
		case "ItemsClient.UpdateLakehouse":
			res.resp, res.err = i.dispatchUpdateLakehouse(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateLakehouse(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateLakehouse == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateLakehouse not implemented")}
	}
	beginCreateLakehouse := i.beginCreateLakehouse.get(req)
	if beginCreateLakehouse == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/lakehouses`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[lakehouse.CreateLakehouseRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateLakehouse(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateLakehouse = &respr
		i.beginCreateLakehouse.add(req, beginCreateLakehouse)
	}

	resp, err := server.PollerResponderNext(beginCreateLakehouse, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateLakehouse.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateLakehouse) {
		i.beginCreateLakehouse.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteLakehouse(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteLakehouse == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteLakehouse not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/lakehouses/(?P<lakehouseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	lakehouseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("lakehouseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteLakehouse(req.Context(), workspaceIDParam, lakehouseIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetLakehouse(req *http.Request) (*http.Response, error) {
	if i.srv.GetLakehouse == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetLakehouse not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/lakehouses/(?P<lakehouseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	lakehouseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("lakehouseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetLakehouse(req.Context(), workspaceIDParam, lakehouseIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Lakehouse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListLakehousesPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListLakehousesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListLakehousesPager not implemented")}
	}
	newListLakehousesPager := i.newListLakehousesPager.get(req)
	if newListLakehousesPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/lakehouses`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *lakehouse.ItemsClientListLakehousesOptions
		if continuationTokenParam != nil {
			options = &lakehouse.ItemsClientListLakehousesOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListLakehousesPager(workspaceIDParam, options)
		newListLakehousesPager = &resp
		i.newListLakehousesPager.add(req, newListLakehousesPager)
		server.PagerResponderInjectNextLinks(newListLakehousesPager, req, func(page *lakehouse.ItemsClientListLakehousesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListLakehousesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListLakehousesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListLakehousesPager) {
		i.newListLakehousesPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateLakehouse(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateLakehouse == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateLakehouse not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/lakehouses/(?P<lakehouseId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[lakehouse.UpdateLakehouseRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	lakehouseIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("lakehouseId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateLakehouse(req.Context(), workspaceIDParam, lakehouseIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Lakehouse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
