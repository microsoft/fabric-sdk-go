// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/datapipeline"
)

// ItemsServer is a fake server for instances of the datapipeline.ItemsClient type.
type ItemsServer struct {
	// BeginCreateDataPipeline is the fake for method ItemsClient.BeginCreateDataPipeline
	// HTTP status codes to indicate success: http.StatusCreated, http.StatusAccepted
	BeginCreateDataPipeline func(ctx context.Context, workspaceID string, createDataPipelineRequest datapipeline.CreateDataPipelineRequest, options *datapipeline.ItemsClientBeginCreateDataPipelineOptions) (resp azfake.PollerResponder[datapipeline.ItemsClientCreateDataPipelineResponse], errResp azfake.ErrorResponder)

	// DeleteDataPipeline is the fake for method ItemsClient.DeleteDataPipeline
	// HTTP status codes to indicate success: http.StatusOK
	DeleteDataPipeline func(ctx context.Context, workspaceID string, dataPipelineID string, options *datapipeline.ItemsClientDeleteDataPipelineOptions) (resp azfake.Responder[datapipeline.ItemsClientDeleteDataPipelineResponse], errResp azfake.ErrorResponder)

	// GetDataPipeline is the fake for method ItemsClient.GetDataPipeline
	// HTTP status codes to indicate success: http.StatusOK
	GetDataPipeline func(ctx context.Context, workspaceID string, dataPipelineID string, options *datapipeline.ItemsClientGetDataPipelineOptions) (resp azfake.Responder[datapipeline.ItemsClientGetDataPipelineResponse], errResp azfake.ErrorResponder)

	// NewListDataPipelinesPager is the fake for method ItemsClient.NewListDataPipelinesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListDataPipelinesPager func(workspaceID string, options *datapipeline.ItemsClientListDataPipelinesOptions) (resp azfake.PagerResponder[datapipeline.ItemsClientListDataPipelinesResponse])

	// UpdateDataPipeline is the fake for method ItemsClient.UpdateDataPipeline
	// HTTP status codes to indicate success: http.StatusOK
	UpdateDataPipeline func(ctx context.Context, workspaceID string, dataPipelineID string, updateDataPipelineRequest datapipeline.UpdateDataPipelineRequest, options *datapipeline.ItemsClientUpdateDataPipelineOptions) (resp azfake.Responder[datapipeline.ItemsClientUpdateDataPipelineResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of datapipeline.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                       srv,
		beginCreateDataPipeline:   newTracker[azfake.PollerResponder[datapipeline.ItemsClientCreateDataPipelineResponse]](),
		newListDataPipelinesPager: newTracker[azfake.PagerResponder[datapipeline.ItemsClientListDataPipelinesResponse]](),
	}
}

// ItemsServerTransport connects instances of datapipeline.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                       *ItemsServer
	beginCreateDataPipeline   *tracker[azfake.PollerResponder[datapipeline.ItemsClientCreateDataPipelineResponse]]
	newListDataPipelinesPager *tracker[azfake.PagerResponder[datapipeline.ItemsClientListDataPipelinesResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ItemsClient.BeginCreateDataPipeline":
		resp, err = i.dispatchBeginCreateDataPipeline(req)
	case "ItemsClient.DeleteDataPipeline":
		resp, err = i.dispatchDeleteDataPipeline(req)
	case "ItemsClient.GetDataPipeline":
		resp, err = i.dispatchGetDataPipeline(req)
	case "ItemsClient.NewListDataPipelinesPager":
		resp, err = i.dispatchNewListDataPipelinesPager(req)
	case "ItemsClient.UpdateDataPipeline":
		resp, err = i.dispatchUpdateDataPipeline(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (i *ItemsServerTransport) dispatchBeginCreateDataPipeline(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateDataPipeline == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateDataPipeline not implemented")}
	}
	beginCreateDataPipeline := i.beginCreateDataPipeline.get(req)
	if beginCreateDataPipeline == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataPipelines`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[datapipeline.CreateDataPipelineRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateDataPipeline(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateDataPipeline = &respr
		i.beginCreateDataPipeline.add(req, beginCreateDataPipeline)
	}

	resp, err := server.PollerResponderNext(beginCreateDataPipeline, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateDataPipeline.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateDataPipeline) {
		i.beginCreateDataPipeline.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteDataPipeline(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteDataPipeline == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteDataPipeline not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataPipelines/(?P<dataPipelineId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	dataPipelineIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataPipelineId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteDataPipeline(req.Context(), workspaceIDParam, dataPipelineIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetDataPipeline(req *http.Request) (*http.Response, error) {
	if i.srv.GetDataPipeline == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDataPipeline not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataPipelines/(?P<dataPipelineId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	dataPipelineIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataPipelineId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetDataPipeline(req.Context(), workspaceIDParam, dataPipelineIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DataPipeline, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListDataPipelinesPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListDataPipelinesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListDataPipelinesPager not implemented")}
	}
	newListDataPipelinesPager := i.newListDataPipelinesPager.get(req)
	if newListDataPipelinesPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataPipelines`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *datapipeline.ItemsClientListDataPipelinesOptions
		if continuationTokenParam != nil {
			options = &datapipeline.ItemsClientListDataPipelinesOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListDataPipelinesPager(workspaceIDParam, options)
		newListDataPipelinesPager = &resp
		i.newListDataPipelinesPager.add(req, newListDataPipelinesPager)
		server.PagerResponderInjectNextLinks(newListDataPipelinesPager, req, func(page *datapipeline.ItemsClientListDataPipelinesResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListDataPipelinesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListDataPipelinesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListDataPipelinesPager) {
		i.newListDataPipelinesPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateDataPipeline(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateDataPipeline == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateDataPipeline not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataPipelines/(?P<dataPipelineId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[datapipeline.UpdateDataPipelineRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	dataPipelineIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataPipelineId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateDataPipeline(req.Context(), workspaceIDParam, dataPipelineIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DataPipeline, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
