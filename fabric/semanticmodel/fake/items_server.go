// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/microsoft/fabric-sdk-go/fabric/semanticmodel"
)

// ItemsServer is a fake server for instances of the semanticmodel.ItemsClient type.
type ItemsServer struct {
	// BeginCreateSemanticModel is the fake for method ItemsClient.BeginCreateSemanticModel
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateSemanticModel func(ctx context.Context, workspaceID string, createSemanticModelRequest semanticmodel.CreateSemanticModelRequest, options *semanticmodel.ItemsClientBeginCreateSemanticModelOptions) (resp azfake.PollerResponder[semanticmodel.ItemsClientCreateSemanticModelResponse], errResp azfake.ErrorResponder)

	// DeleteSemanticModel is the fake for method ItemsClient.DeleteSemanticModel
	// HTTP status codes to indicate success: http.StatusOK
	DeleteSemanticModel func(ctx context.Context, workspaceID string, semanticModelID string, options *semanticmodel.ItemsClientDeleteSemanticModelOptions) (resp azfake.Responder[semanticmodel.ItemsClientDeleteSemanticModelResponse], errResp azfake.ErrorResponder)

	// GetSemanticModel is the fake for method ItemsClient.GetSemanticModel
	// HTTP status codes to indicate success: http.StatusOK
	GetSemanticModel func(ctx context.Context, workspaceID string, semanticModelID string, options *semanticmodel.ItemsClientGetSemanticModelOptions) (resp azfake.Responder[semanticmodel.ItemsClientGetSemanticModelResponse], errResp azfake.ErrorResponder)

	// BeginGetSemanticModelDefinition is the fake for method ItemsClient.BeginGetSemanticModelDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetSemanticModelDefinition func(ctx context.Context, workspaceID string, semanticModelID string, options *semanticmodel.ItemsClientBeginGetSemanticModelDefinitionOptions) (resp azfake.PollerResponder[semanticmodel.ItemsClientGetSemanticModelDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListSemanticModelsPager is the fake for method ItemsClient.NewListSemanticModelsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListSemanticModelsPager func(workspaceID string, options *semanticmodel.ItemsClientListSemanticModelsOptions) (resp azfake.PagerResponder[semanticmodel.ItemsClientListSemanticModelsResponse])

	// UpdateSemanticModel is the fake for method ItemsClient.UpdateSemanticModel
	// HTTP status codes to indicate success: http.StatusOK
	UpdateSemanticModel func(ctx context.Context, workspaceID string, semanticModelID string, updateSemanticModelRequest semanticmodel.UpdateSemanticModelRequest, options *semanticmodel.ItemsClientUpdateSemanticModelOptions) (resp azfake.Responder[semanticmodel.ItemsClientUpdateSemanticModelResponse], errResp azfake.ErrorResponder)

	// BeginUpdateSemanticModelDefinition is the fake for method ItemsClient.BeginUpdateSemanticModelDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateSemanticModelDefinition func(ctx context.Context, workspaceID string, semanticModelID string, updateSemanticModelDefinitionRequest semanticmodel.UpdateSemanticModelDefinitionRequest, options *semanticmodel.ItemsClientBeginUpdateSemanticModelDefinitionOptions) (resp azfake.PollerResponder[semanticmodel.ItemsClientUpdateSemanticModelDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewItemsServerTransport creates a new instance of ItemsServerTransport with the provided implementation.
// The returned ItemsServerTransport instance is connected to an instance of semanticmodel.ItemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewItemsServerTransport(srv *ItemsServer) *ItemsServerTransport {
	return &ItemsServerTransport{
		srv:                                srv,
		beginCreateSemanticModel:           newTracker[azfake.PollerResponder[semanticmodel.ItemsClientCreateSemanticModelResponse]](),
		beginGetSemanticModelDefinition:    newTracker[azfake.PollerResponder[semanticmodel.ItemsClientGetSemanticModelDefinitionResponse]](),
		newListSemanticModelsPager:         newTracker[azfake.PagerResponder[semanticmodel.ItemsClientListSemanticModelsResponse]](),
		beginUpdateSemanticModelDefinition: newTracker[azfake.PollerResponder[semanticmodel.ItemsClientUpdateSemanticModelDefinitionResponse]](),
	}
}

// ItemsServerTransport connects instances of semanticmodel.ItemsClient to instances of ItemsServer.
// Don't use this type directly, use NewItemsServerTransport instead.
type ItemsServerTransport struct {
	srv                                *ItemsServer
	beginCreateSemanticModel           *tracker[azfake.PollerResponder[semanticmodel.ItemsClientCreateSemanticModelResponse]]
	beginGetSemanticModelDefinition    *tracker[azfake.PollerResponder[semanticmodel.ItemsClientGetSemanticModelDefinitionResponse]]
	newListSemanticModelsPager         *tracker[azfake.PagerResponder[semanticmodel.ItemsClientListSemanticModelsResponse]]
	beginUpdateSemanticModelDefinition *tracker[azfake.PollerResponder[semanticmodel.ItemsClientUpdateSemanticModelDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ItemsServerTransport.
func (i *ItemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	parts := strings.Split(method, ".")
	method = parts[1] + "." + parts[2]
	return i.dispatchToMethodFake(req, method)
}

func (i *ItemsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "ItemsClient.BeginCreateSemanticModel":
			res.resp, res.err = i.dispatchBeginCreateSemanticModel(req)
		case "ItemsClient.DeleteSemanticModel":
			res.resp, res.err = i.dispatchDeleteSemanticModel(req)
		case "ItemsClient.GetSemanticModel":
			res.resp, res.err = i.dispatchGetSemanticModel(req)
		case "ItemsClient.BeginGetSemanticModelDefinition":
			res.resp, res.err = i.dispatchBeginGetSemanticModelDefinition(req)
		case "ItemsClient.NewListSemanticModelsPager":
			res.resp, res.err = i.dispatchNewListSemanticModelsPager(req)
		case "ItemsClient.UpdateSemanticModel":
			res.resp, res.err = i.dispatchUpdateSemanticModel(req)
		case "ItemsClient.BeginUpdateSemanticModelDefinition":
			res.resp, res.err = i.dispatchBeginUpdateSemanticModelDefinition(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *ItemsServerTransport) dispatchBeginCreateSemanticModel(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateSemanticModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateSemanticModel not implemented")}
	}
	beginCreateSemanticModel := i.beginCreateSemanticModel.get(req)
	if beginCreateSemanticModel == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/semanticModels`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[semanticmodel.CreateSemanticModelRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginCreateSemanticModel(req.Context(), workspaceIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateSemanticModel = &respr
		i.beginCreateSemanticModel.add(req, beginCreateSemanticModel)
	}

	resp, err := server.PollerResponderNext(beginCreateSemanticModel, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateSemanticModel.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateSemanticModel) {
		i.beginCreateSemanticModel.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchDeleteSemanticModel(req *http.Request) (*http.Response, error) {
	if i.srv.DeleteSemanticModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteSemanticModel not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/semanticModels/(?P<semanticModelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	semanticModelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("semanticModelId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.DeleteSemanticModel(req.Context(), workspaceIDParam, semanticModelIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchGetSemanticModel(req *http.Request) (*http.Response, error) {
	if i.srv.GetSemanticModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetSemanticModel not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/semanticModels/(?P<semanticModelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	semanticModelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("semanticModelId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetSemanticModel(req.Context(), workspaceIDParam, semanticModelIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SemanticModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginGetSemanticModelDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginGetSemanticModelDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetSemanticModelDefinition not implemented")}
	}
	beginGetSemanticModelDefinition := i.beginGetSemanticModelDefinition.get(req)
	if beginGetSemanticModelDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/semanticModels/(?P<semanticModelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		semanticModelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("semanticModelId")])
		if err != nil {
			return nil, err
		}
		formatUnescaped, err := url.QueryUnescape(qp.Get("format"))
		if err != nil {
			return nil, err
		}
		formatParam := getOptional(formatUnescaped)
		var options *semanticmodel.ItemsClientBeginGetSemanticModelDefinitionOptions
		if formatParam != nil {
			options = &semanticmodel.ItemsClientBeginGetSemanticModelDefinitionOptions{
				Format: formatParam,
			}
		}
		respr, errRespr := i.srv.BeginGetSemanticModelDefinition(req.Context(), workspaceIDParam, semanticModelIDParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetSemanticModelDefinition = &respr
		i.beginGetSemanticModelDefinition.add(req, beginGetSemanticModelDefinition)
	}

	resp, err := server.PollerResponderNext(beginGetSemanticModelDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginGetSemanticModelDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetSemanticModelDefinition) {
		i.beginGetSemanticModelDefinition.remove(req)
	}

	return resp, nil
}

func (i *ItemsServerTransport) dispatchNewListSemanticModelsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListSemanticModelsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListSemanticModelsPager not implemented")}
	}
	newListSemanticModelsPager := i.newListSemanticModelsPager.get(req)
	if newListSemanticModelsPager == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/semanticModels`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *semanticmodel.ItemsClientListSemanticModelsOptions
		if continuationTokenParam != nil {
			options = &semanticmodel.ItemsClientListSemanticModelsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := i.srv.NewListSemanticModelsPager(workspaceIDParam, options)
		newListSemanticModelsPager = &resp
		i.newListSemanticModelsPager.add(req, newListSemanticModelsPager)
		server.PagerResponderInjectNextLinks(newListSemanticModelsPager, req, func(page *semanticmodel.ItemsClientListSemanticModelsResponse, createLink func() string) {
			page.ContinuationURI = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListSemanticModelsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListSemanticModelsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListSemanticModelsPager) {
		i.newListSemanticModelsPager.remove(req)
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchUpdateSemanticModel(req *http.Request) (*http.Response, error) {
	if i.srv.UpdateSemanticModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateSemanticModel not implemented")}
	}
	const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/semanticModels/(?P<semanticModelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[semanticmodel.UpdateSemanticModelRequest](req)
	if err != nil {
		return nil, err
	}
	workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
	if err != nil {
		return nil, err
	}
	semanticModelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("semanticModelId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.UpdateSemanticModel(req.Context(), workspaceIDParam, semanticModelIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SemanticModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ItemsServerTransport) dispatchBeginUpdateSemanticModelDefinition(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateSemanticModelDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateSemanticModelDefinition not implemented")}
	}
	beginUpdateSemanticModelDefinition := i.beginUpdateSemanticModelDefinition.get(req)
	if beginUpdateSemanticModelDefinition == nil {
		const regexStr = `/v1/workspaces/(?P<workspaceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/semanticModels/(?P<semanticModelId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDefinition`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[semanticmodel.UpdateSemanticModelDefinitionRequest](req)
		if err != nil {
			return nil, err
		}
		workspaceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceId")])
		if err != nil {
			return nil, err
		}
		semanticModelIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("semanticModelId")])
		if err != nil {
			return nil, err
		}
		updateMetadataUnescaped, err := url.QueryUnescape(qp.Get("updateMetadata"))
		if err != nil {
			return nil, err
		}
		updateMetadataParam, err := parseOptional(updateMetadataUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *semanticmodel.ItemsClientBeginUpdateSemanticModelDefinitionOptions
		if updateMetadataParam != nil {
			options = &semanticmodel.ItemsClientBeginUpdateSemanticModelDefinitionOptions{
				UpdateMetadata: updateMetadataParam,
			}
		}
		respr, errRespr := i.srv.BeginUpdateSemanticModelDefinition(req.Context(), workspaceIDParam, semanticModelIDParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateSemanticModelDefinition = &respr
		i.beginUpdateSemanticModelDefinition.add(req, beginUpdateSemanticModelDefinition)
	}

	resp, err := server.PollerResponderNext(beginUpdateSemanticModelDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginUpdateSemanticModelDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateSemanticModelDefinition) {
		i.beginUpdateSemanticModelDefinition.remove(req)
	}

	return resp, nil
}
