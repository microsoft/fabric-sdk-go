// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package semanticmodel

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"github.com/microsoft/fabric-sdk-go/fabric/core"
	"github.com/microsoft/fabric-sdk-go/internal/iruntime"
	"github.com/microsoft/fabric-sdk-go/internal/pollers/locasync"
)

// ItemsClient contains the methods for the Items group.
// Don't use this type directly, use a constructor function instead.
type ItemsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateSemanticModel - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API requires a definition [/rest/api/fabric/articles/item-management/definitions/semantic-model-definition].
// PERMISSIONS The caller must have a contributor workspace role.
// REQUIRED DELEGATED SCOPES SemanticModel.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a semantic model, the user must have the appropriate license. For more information see: Microsoft Fabric license
// types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createSemanticModelRequest - Create item request payload.
//   - options - ItemsClientBeginCreateSemanticModelOptions contains the optional parameters for the ItemsClient.BeginCreateSemanticModel
//     method.
func (client *ItemsClient) BeginCreateSemanticModel(ctx context.Context, workspaceID string, createSemanticModelRequest CreateSemanticModelRequest, options *ItemsClientBeginCreateSemanticModelOptions) (*runtime.Poller[ItemsClientCreateSemanticModelResponse], error) {
	return client.beginCreateSemanticModel(ctx, workspaceID, createSemanticModelRequest, options)
}

// CreateSemanticModel - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// This API requires a definition [/rest/api/fabric/articles/item-management/definitions/semantic-model-definition].
// PERMISSIONS The caller must have a contributor workspace role.
// REQUIRED DELEGATED SCOPES SemanticModel.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS
// * To create a semantic model, the user must have the appropriate license. For more information see: Microsoft Fabric license
// types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) createSemanticModel(ctx context.Context, workspaceID string, createSemanticModelRequest CreateSemanticModelRequest, options *ItemsClientBeginCreateSemanticModelOptions) (*http.Response, error) {
	var err error
	const operationName = "semanticmodel.ItemsClient.BeginCreateSemanticModel"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createSemanticModelCreateRequest(ctx, workspaceID, createSemanticModelRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createSemanticModelCreateRequest creates the CreateSemanticModel request.
func (client *ItemsClient) createSemanticModelCreateRequest(ctx context.Context, workspaceID string, createSemanticModelRequest CreateSemanticModelRequest, _ *ItemsClientBeginCreateSemanticModelOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/semanticModels"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createSemanticModelRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteSemanticModel - PERMISSIONS The caller must have write permissions for the semantic model.
// REQUIRED DELEGATED SCOPES SemanticModel.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - semanticModelID - The semantic model ID.
//   - options - ItemsClientDeleteSemanticModelOptions contains the optional parameters for the ItemsClient.DeleteSemanticModel
//     method.
func (client *ItemsClient) DeleteSemanticModel(ctx context.Context, workspaceID string, semanticModelID string, options *ItemsClientDeleteSemanticModelOptions) (ItemsClientDeleteSemanticModelResponse, error) {
	var err error
	const operationName = "semanticmodel.ItemsClient.DeleteSemanticModel"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteSemanticModelCreateRequest(ctx, workspaceID, semanticModelID, options)
	if err != nil {
		return ItemsClientDeleteSemanticModelResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientDeleteSemanticModelResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientDeleteSemanticModelResponse{}, err
	}
	return ItemsClientDeleteSemanticModelResponse{}, nil
}

// deleteSemanticModelCreateRequest creates the DeleteSemanticModel request.
func (client *ItemsClient) deleteSemanticModelCreateRequest(ctx context.Context, workspaceID string, semanticModelID string, _ *ItemsClientDeleteSemanticModelOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/semanticModels/{semanticModelId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if semanticModelID == "" {
		return nil, errors.New("parameter semanticModelID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{semanticModelId}", url.PathEscape(semanticModelID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetSemanticModel - PERMISSIONS The caller must have read permissions for the semantic model.
// REQUIRED DELEGATED SCOPES SemanticModel.Read.All or SemanticModel.ReadWrite.All or Item.Read.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - semanticModelID - The semantic model ID.
//   - options - ItemsClientGetSemanticModelOptions contains the optional parameters for the ItemsClient.GetSemanticModel method.
func (client *ItemsClient) GetSemanticModel(ctx context.Context, workspaceID string, semanticModelID string, options *ItemsClientGetSemanticModelOptions) (ItemsClientGetSemanticModelResponse, error) {
	var err error
	const operationName = "semanticmodel.ItemsClient.GetSemanticModel"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getSemanticModelCreateRequest(ctx, workspaceID, semanticModelID, options)
	if err != nil {
		return ItemsClientGetSemanticModelResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientGetSemanticModelResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientGetSemanticModelResponse{}, err
	}
	resp, err := client.getSemanticModelHandleResponse(httpResp)
	return resp, err
}

// getSemanticModelCreateRequest creates the GetSemanticModel request.
func (client *ItemsClient) getSemanticModelCreateRequest(ctx context.Context, workspaceID string, semanticModelID string, _ *ItemsClientGetSemanticModelOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/semanticModels/{semanticModelId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if semanticModelID == "" {
		return nil, errors.New("parameter semanticModelID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{semanticModelId}", url.PathEscape(semanticModelID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSemanticModelHandleResponse handles the GetSemanticModel response.
func (client *ItemsClient) getSemanticModelHandleResponse(resp *http.Response) (ItemsClientGetSemanticModelResponse, error) {
	result := ItemsClientGetSemanticModelResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SemanticModel); err != nil {
		return ItemsClientGetSemanticModelResponse{}, err
	}
	return result, nil
}

// BeginGetSemanticModelDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a semantic model's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have read and write permissions for the semantic model.
// REQUIRED DELEGATED SCOPES SemanticModel.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS This API is blocked for a semantic model with an encrypted sensitivity label.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - semanticModelID - The semantic model ID.
//   - options - ItemsClientBeginGetSemanticModelDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetSemanticModelDefinition
//     method.
func (client *ItemsClient) BeginGetSemanticModelDefinition(ctx context.Context, workspaceID string, semanticModelID string, options *ItemsClientBeginGetSemanticModelDefinitionOptions) (*runtime.Poller[ItemsClientGetSemanticModelDefinitionResponse], error) {
	return client.beginGetSemanticModelDefinition(ctx, workspaceID, semanticModelID, options)
}

// GetSemanticModelDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// When you get a semantic model's public definition, the sensitivity label is not a part of the definition.
// PERMISSIONS The caller must have read and write permissions for the semantic model.
// REQUIRED DELEGATED SCOPES SemanticModel.ReadWrite.All or Item.ReadWrite.All
// LIMITATIONS This API is blocked for a semantic model with an encrypted sensitivity label.
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) getSemanticModelDefinition(ctx context.Context, workspaceID string, semanticModelID string, options *ItemsClientBeginGetSemanticModelDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "semanticmodel.ItemsClient.BeginGetSemanticModelDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getSemanticModelDefinitionCreateRequest(ctx, workspaceID, semanticModelID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// getSemanticModelDefinitionCreateRequest creates the GetSemanticModelDefinition request.
func (client *ItemsClient) getSemanticModelDefinitionCreateRequest(ctx context.Context, workspaceID string, semanticModelID string, options *ItemsClientBeginGetSemanticModelDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/semanticModels/{semanticModelId}/getDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if semanticModelID == "" {
		return nil, errors.New("parameter semanticModelID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{semanticModelId}", url.PathEscape(semanticModelID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("format", *options.Format)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewListSemanticModelsPager - This API supports pagination [/rest/api/fabric/articles/pagination].
// PERMISSIONS The caller must have a viewer workspace role.
// REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListSemanticModelsOptions contains the optional parameters for the ItemsClient.NewListSemanticModelsPager
//     method.
func (client *ItemsClient) NewListSemanticModelsPager(workspaceID string, options *ItemsClientListSemanticModelsOptions) *runtime.Pager[ItemsClientListSemanticModelsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ItemsClientListSemanticModelsResponse]{
		More: func(page ItemsClientListSemanticModelsResponse) bool {
			return page.ContinuationURI != nil && len(*page.ContinuationURI) > 0
		},
		Fetcher: func(ctx context.Context, page *ItemsClientListSemanticModelsResponse) (ItemsClientListSemanticModelsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "semanticmodel.ItemsClient.NewListSemanticModelsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.ContinuationURI
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listSemanticModelsCreateRequest(ctx, workspaceID, options)
			}, nil)
			if err != nil {
				return ItemsClientListSemanticModelsResponse{}, err
			}
			return client.listSemanticModelsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listSemanticModelsCreateRequest creates the ListSemanticModels request.
func (client *ItemsClient) listSemanticModelsCreateRequest(ctx context.Context, workspaceID string, options *ItemsClientListSemanticModelsOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/semanticModels"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listSemanticModelsHandleResponse handles the ListSemanticModels response.
func (client *ItemsClient) listSemanticModelsHandleResponse(resp *http.Response) (ItemsClientListSemanticModelsResponse, error) {
	result := ItemsClientListSemanticModelsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SemanticModels); err != nil {
		return ItemsClientListSemanticModelsResponse{}, err
	}
	return result, nil
}

// UpdateSemanticModel - PERMISSIONS The caller must have read and write permissions for the semantic model.
// REQUIRED DELEGATED SCOPES SemanticModel.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - semanticModelID - The semantic model ID.
//   - updateSemanticModelRequest - Update semantic model request payload.
//   - options - ItemsClientUpdateSemanticModelOptions contains the optional parameters for the ItemsClient.UpdateSemanticModel
//     method.
func (client *ItemsClient) UpdateSemanticModel(ctx context.Context, workspaceID string, semanticModelID string, updateSemanticModelRequest UpdateSemanticModelRequest, options *ItemsClientUpdateSemanticModelOptions) (ItemsClientUpdateSemanticModelResponse, error) {
	var err error
	const operationName = "semanticmodel.ItemsClient.UpdateSemanticModel"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateSemanticModelCreateRequest(ctx, workspaceID, semanticModelID, updateSemanticModelRequest, options)
	if err != nil {
		return ItemsClientUpdateSemanticModelResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ItemsClientUpdateSemanticModelResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = core.NewResponseError(httpResp)
		return ItemsClientUpdateSemanticModelResponse{}, err
	}
	resp, err := client.updateSemanticModelHandleResponse(httpResp)
	return resp, err
}

// updateSemanticModelCreateRequest creates the UpdateSemanticModel request.
func (client *ItemsClient) updateSemanticModelCreateRequest(ctx context.Context, workspaceID string, semanticModelID string, updateSemanticModelRequest UpdateSemanticModelRequest, _ *ItemsClientUpdateSemanticModelOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/semanticModels/{semanticModelId}"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if semanticModelID == "" {
		return nil, errors.New("parameter semanticModelID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{semanticModelId}", url.PathEscape(semanticModelID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateSemanticModelRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// updateSemanticModelHandleResponse handles the UpdateSemanticModel response.
func (client *ItemsClient) updateSemanticModelHandleResponse(resp *http.Response) (ItemsClientUpdateSemanticModelResponse, error) {
	result := ItemsClientUpdateSemanticModelResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SemanticModel); err != nil {
		return ItemsClientUpdateSemanticModelResponse{}, err
	}
	return result, nil
}

// BeginUpdateSemanticModelDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the semantic model's definition, does not affect its sensitivity label.
// PERMISSIONS The caller must have read and write permissions for the semantic model.
// REQUIRED DELEGATED SCOPES SemanticModel.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - semanticModelID - The semantic model ID.
//   - updateSemanticModelDefinitionRequest - Update semantic model definition request payload.
//   - options - ItemsClientBeginUpdateSemanticModelDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateSemanticModelDefinition
//     method.
func (client *ItemsClient) BeginUpdateSemanticModelDefinition(ctx context.Context, workspaceID string, semanticModelID string, updateSemanticModelDefinitionRequest UpdateSemanticModelDefinitionRequest, options *ItemsClientBeginUpdateSemanticModelDefinitionOptions) (*runtime.Poller[ItemsClientUpdateSemanticModelDefinitionResponse], error) {
	return client.beginUpdateSemanticModelDefinition(ctx, workspaceID, semanticModelID, updateSemanticModelDefinitionRequest, options)
}

// UpdateSemanticModelDefinition - This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
// Updating the semantic model's definition, does not affect its sensitivity label.
// PERMISSIONS The caller must have read and write permissions for the semantic model.
// REQUIRED DELEGATED SCOPES SemanticModel.ReadWrite.All or Item.ReadWrite.All
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support]
// listed in this section.
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object]
// and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
// INTERFACE
// If the operation fails it returns an *core.ResponseError type.
//
// Generated from API version v1
func (client *ItemsClient) updateSemanticModelDefinition(ctx context.Context, workspaceID string, semanticModelID string, updateSemanticModelDefinitionRequest UpdateSemanticModelDefinitionRequest, options *ItemsClientBeginUpdateSemanticModelDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "semanticmodel.ItemsClient.BeginUpdateSemanticModelDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateSemanticModelDefinitionCreateRequest(ctx, workspaceID, semanticModelID, updateSemanticModelDefinitionRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = core.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateSemanticModelDefinitionCreateRequest creates the UpdateSemanticModelDefinition request.
func (client *ItemsClient) updateSemanticModelDefinitionCreateRequest(ctx context.Context, workspaceID string, semanticModelID string, updateSemanticModelDefinitionRequest UpdateSemanticModelDefinitionRequest, options *ItemsClientBeginUpdateSemanticModelDefinitionOptions) (*policy.Request, error) {
	urlPath := "/v1/workspaces/{workspaceId}/semanticModels/{semanticModelId}/updateDefinition"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	if semanticModelID == "" {
		return nil, errors.New("parameter semanticModelID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{semanticModelId}", url.PathEscape(semanticModelID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.UpdateMetadata != nil {
		reqQP.Set("updateMetadata", strconv.FormatBool(*options.UpdateMetadata))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateSemanticModelDefinitionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Custom code starts below

// CreateSemanticModel - returns ItemsClientCreateSemanticModelResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// This API requires a definition [/rest/api/fabric/articles/item-management/definitions/semantic-model-definition].
//
// PERMISSIONS The caller must have a contributor workspace role.
//
// # REQUIRED DELEGATED SCOPES SemanticModel.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS
//
//   - To create a semantic model, the user must have the appropriate license. For more information see: Microsoft Fabric license types [/fabric/enterprise/licenses#microsoft-fabric-license-types].
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - createSemanticModelRequest - Create item request payload.
//   - options - ItemsClientBeginCreateSemanticModelOptions contains the optional parameters for the ItemsClient.BeginCreateSemanticModel method.
func (client *ItemsClient) CreateSemanticModel(ctx context.Context, workspaceID string, createSemanticModelRequest CreateSemanticModelRequest, options *ItemsClientBeginCreateSemanticModelOptions) (ItemsClientCreateSemanticModelResponse, error) {
	result, err := iruntime.NewLRO(client.BeginCreateSemanticModel(ctx, workspaceID, createSemanticModelRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientCreateSemanticModelResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientCreateSemanticModelResponse{}, err
	}
	return result, err
}

// beginCreateSemanticModel creates the createSemanticModel request.
func (client *ItemsClient) beginCreateSemanticModel(ctx context.Context, workspaceID string, createSemanticModelRequest CreateSemanticModelRequest, options *ItemsClientBeginCreateSemanticModelOptions) (*runtime.Poller[ItemsClientCreateSemanticModelResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createSemanticModel(ctx, workspaceID, createSemanticModelRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientCreateSemanticModelResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientCreateSemanticModelResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientCreateSemanticModelResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientCreateSemanticModelResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// GetSemanticModelDefinition - returns ItemsClientGetSemanticModelDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// When you get a semantic model's public definition, the sensitivity label is not a part of the definition.
//
// PERMISSIONS The caller must have read and write permissions for the semantic model.
//
// # REQUIRED DELEGATED SCOPES SemanticModel.ReadWrite.All or Item.ReadWrite.All
//
// LIMITATIONS This API is blocked for a semantic model with an encrypted sensitivity label.
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - semanticModelID - The semantic model ID.
//   - options - ItemsClientBeginGetSemanticModelDefinitionOptions contains the optional parameters for the ItemsClient.BeginGetSemanticModelDefinition method.
func (client *ItemsClient) GetSemanticModelDefinition(ctx context.Context, workspaceID string, semanticModelID string, options *ItemsClientBeginGetSemanticModelDefinitionOptions) (ItemsClientGetSemanticModelDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginGetSemanticModelDefinition(ctx, workspaceID, semanticModelID, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientGetSemanticModelDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientGetSemanticModelDefinitionResponse{}, err
	}
	return result, err
}

// beginGetSemanticModelDefinition creates the getSemanticModelDefinition request.
func (client *ItemsClient) beginGetSemanticModelDefinition(ctx context.Context, workspaceID string, semanticModelID string, options *ItemsClientBeginGetSemanticModelDefinitionOptions) (*runtime.Poller[ItemsClientGetSemanticModelDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getSemanticModelDefinition(ctx, workspaceID, semanticModelID, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientGetSemanticModelDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientGetSemanticModelDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientGetSemanticModelDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientGetSemanticModelDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// UpdateSemanticModelDefinition - returns ItemsClientUpdateSemanticModelDefinitionResponse in sync mode.
// This API supports long running operations (LRO) [/rest/api/fabric/articles/long-running-operation].
//
// Updating the semantic model's definition, does not affect its sensitivity label.
//
// PERMISSIONS The caller must have read and write permissions for the semantic model.
//
// # REQUIRED DELEGATED SCOPES SemanticModel.ReadWrite.All or Item.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - semanticModelID - The semantic model ID.
//   - updateSemanticModelDefinitionRequest - Update semantic model definition request payload.
//   - options - ItemsClientBeginUpdateSemanticModelDefinitionOptions contains the optional parameters for the ItemsClient.BeginUpdateSemanticModelDefinition method.
func (client *ItemsClient) UpdateSemanticModelDefinition(ctx context.Context, workspaceID string, semanticModelID string, updateSemanticModelDefinitionRequest UpdateSemanticModelDefinitionRequest, options *ItemsClientBeginUpdateSemanticModelDefinitionOptions) (ItemsClientUpdateSemanticModelDefinitionResponse, error) {
	result, err := iruntime.NewLRO(client.BeginUpdateSemanticModelDefinition(ctx, workspaceID, semanticModelID, updateSemanticModelDefinitionRequest, options)).Sync(ctx)
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return ItemsClientUpdateSemanticModelDefinitionResponse{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return ItemsClientUpdateSemanticModelDefinitionResponse{}, err
	}
	return result, err
}

// beginUpdateSemanticModelDefinition creates the updateSemanticModelDefinition request.
func (client *ItemsClient) beginUpdateSemanticModelDefinition(ctx context.Context, workspaceID string, semanticModelID string, updateSemanticModelDefinitionRequest UpdateSemanticModelDefinitionRequest, options *ItemsClientBeginUpdateSemanticModelDefinitionOptions) (*runtime.Poller[ItemsClientUpdateSemanticModelDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateSemanticModelDefinition(ctx, workspaceID, semanticModelID, updateSemanticModelDefinitionRequest, options)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateSemanticModelDefinitionResponse](client.internal.Pipeline(), resp, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ItemsClientUpdateSemanticModelDefinitionResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Handler:       handler,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		handler, err := locasync.NewPollerHandler[ItemsClientUpdateSemanticModelDefinitionResponse](client.internal.Pipeline(), nil, runtime.FinalStateViaAzureAsyncOp)
		if err != nil {
			var azcoreRespError *azcore.ResponseError
			if errors.As(err, &azcoreRespError) {
				return nil, core.NewResponseError(azcoreRespError.RawResponse)
			}
			return nil, err
		}
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ItemsClientUpdateSemanticModelDefinitionResponse]{
			Handler: handler,
			Tracer:  client.internal.Tracer(),
		})
	}
}

// ListSemanticModels - returns array of SemanticModel from all pages.
// This API supports pagination [/rest/api/fabric/articles/pagination].
//
// PERMISSIONS The caller must have a viewer workspace role.
//
// # REQUIRED DELEGATED SCOPES Workspace.Read.All or Workspace.ReadWrite.All
//
// MICROSOFT ENTRA SUPPORTED IDENTITIES This API supports the Microsoft identities [/rest/api/fabric/articles/identity-support] listed in this section.
//
// | Identity | Support | |-|-| | User | Yes | | Service principal [/entra/identity-platform/app-objects-and-service-principals#service-principal-object] and Managed identities
// [/entra/identity/managed-identities-azure-resources/overview] | Yes |
//
// INTERFACE
// Generated from API version v1
//   - workspaceID - The workspace ID.
//   - options - ItemsClientListSemanticModelsOptions contains the optional parameters for the ItemsClient.NewListSemanticModelsPager method.
func (client *ItemsClient) ListSemanticModels(ctx context.Context, workspaceID string, options *ItemsClientListSemanticModelsOptions) ([]SemanticModel, error) {
	pager := client.NewListSemanticModelsPager(workspaceID, options)
	mapper := func(resp ItemsClientListSemanticModelsResponse) []SemanticModel {
		return resp.Value
	}
	list, err := iruntime.NewPageIterator(ctx, pager, mapper).Get()
	if err != nil {
		var azcoreRespError *azcore.ResponseError
		if errors.As(err, &azcoreRespError) {
			return []SemanticModel{}, core.NewResponseError(azcoreRespError.RawResponse)
		}
		return []SemanticModel{}, err
	}
	return list, nil
}
