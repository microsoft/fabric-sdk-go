// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// SPDX-License-Identifier: MIT

package semanticmodel_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"reflect"

	"github.com/stretchr/testify/suite"

	"github.com/microsoft/fabric-sdk-go/fabric/semanticmodel"
	"github.com/microsoft/fabric-sdk-go/fabric/semanticmodel/fake"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx  context.Context
	cred azcore.TokenCredential

	serverFactory *fake.ServerFactory
	clientFactory *semanticmodel.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &azfake.TokenCredential{}

	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = semanticmodel.NewClientFactory(testsuite.cred, nil, &azcore.ClientOptions{
		Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestItems_ListSemanticModels() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List semantic models in workspace example"},
	})
	var exampleWorkspaceID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := semanticmodel.SemanticModels{
		Value: []semanticmodel.SemanticModel{
			{
				Type:        to.Ptr(semanticmodel.ItemTypeSemanticModel),
				Description: to.Ptr("A semantic model description."),
				DisplayName: to.Ptr("SemanticModel Name 1"),
				ID:          to.Ptr("3546052c-ae64-4526-b1a8-52af7761426f"),
				WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
			}},
	}

	testsuite.serverFactory.ItemsServer.NewListSemanticModelsPager = func(workspaceID string, options *semanticmodel.ItemsClientListSemanticModelsOptions) (resp azfake.PagerResponder[semanticmodel.ItemsClientListSemanticModelsResponse]) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		resp = azfake.PagerResponder[semanticmodel.ItemsClientListSemanticModelsResponse]{}
		resp.AddPage(http.StatusOK, semanticmodel.ItemsClientListSemanticModelsResponse{SemanticModels: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	pager := client.NewListSemanticModelsPager(exampleWorkspaceID, &semanticmodel.ItemsClientListSemanticModelsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example ")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SemanticModels))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestItems_CreateSemanticModel() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a semantic model example"},
	})
	var exampleWorkspaceID string
	var exampleCreateSemanticModelRequest semanticmodel.CreateSemanticModelRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleCreateSemanticModelRequest = semanticmodel.CreateSemanticModelRequest{
		Description: to.Ptr("A semantic model description."),
		Definition: &semanticmodel.Definition{
			Parts: []semanticmodel.DefinitionPart{
				{
					Path:        to.Ptr("model.bim"),
					Payload:     to.Ptr("ew0KICAiY29tcGF0a..GVzIjogWyBdDQogIH0NCn0="),
					PayloadType: to.Ptr(semanticmodel.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("definition.pbism"),
					Payload:     to.Ptr("ewogICJ2ZXJzaW9uI..NldHRpbmdzIjoge30KfQ=="),
					PayloadType: to.Ptr(semanticmodel.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(semanticmodel.PayloadTypeInlineBase64),
				}},
		},
		DisplayName: to.Ptr("SemanticModel 1"),
	}

	testsuite.serverFactory.ItemsServer.BeginCreateSemanticModel = func(ctx context.Context, workspaceID string, createSemanticModelRequest semanticmodel.CreateSemanticModelRequest, options *semanticmodel.ItemsClientBeginCreateSemanticModelOptions) (resp azfake.PollerResponder[semanticmodel.ItemsClientCreateSemanticModelResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().True(reflect.DeepEqual(exampleCreateSemanticModelRequest, createSemanticModelRequest))
		resp = azfake.PollerResponder[semanticmodel.ItemsClientCreateSemanticModelResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, semanticmodel.ItemsClientCreateSemanticModelResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginCreateSemanticModel(ctx, exampleWorkspaceID, exampleCreateSemanticModelRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetSemanticModel() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a semantic model example"},
	})
	var exampleWorkspaceID string
	var exampleSemanticModelID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleSemanticModelID = "5b218778-e7a5-4d73-8187-f10824047715"

	exampleRes := semanticmodel.SemanticModel{
		Type:        to.Ptr(semanticmodel.ItemTypeSemanticModel),
		Description: to.Ptr("A semantic model description."),
		DisplayName: to.Ptr("SemanticModel 1"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047715"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff229"),
	}

	testsuite.serverFactory.ItemsServer.GetSemanticModel = func(ctx context.Context, workspaceID string, semanticModelID string, options *semanticmodel.ItemsClientGetSemanticModelOptions) (resp azfake.Responder[semanticmodel.ItemsClientGetSemanticModelResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSemanticModelID, semanticModelID)
		resp = azfake.Responder[semanticmodel.ItemsClientGetSemanticModelResponse]{}
		resp.SetResponse(http.StatusOK, semanticmodel.ItemsClientGetSemanticModelResponse{SemanticModel: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.GetSemanticModel(ctx, exampleWorkspaceID, exampleSemanticModelID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SemanticModel))
}

func (testsuite *FakeTestSuite) TestItems_UpdateSemanticModel() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a semantic model example"},
	})
	var exampleWorkspaceID string
	var exampleSemanticModelID string
	var exampleUpdateSemanticModelRequest semanticmodel.UpdateSemanticModelRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff255"
	exampleSemanticModelID = "5b218778-e7a5-4d73-8187-f10824047751"
	exampleUpdateSemanticModelRequest = semanticmodel.UpdateSemanticModelRequest{
		Description: to.Ptr("A new description for semantic model."),
		DisplayName: to.Ptr("Semantic models's New name"),
	}

	exampleRes := semanticmodel.SemanticModel{
		Type:        to.Ptr(semanticmodel.ItemTypeSemanticModel),
		Description: to.Ptr("A new description for semantic model."),
		DisplayName: to.Ptr("Semantic models's New name"),
		ID:          to.Ptr("5b218778-e7a5-4d73-8187-f10824047751"),
		WorkspaceID: to.Ptr("cfafbeb1-8037-4d0c-896e-a46fb27ff255"),
	}

	testsuite.serverFactory.ItemsServer.UpdateSemanticModel = func(ctx context.Context, workspaceID string, semanticModelID string, updateSemanticModelRequest semanticmodel.UpdateSemanticModelRequest, options *semanticmodel.ItemsClientUpdateSemanticModelOptions) (resp azfake.Responder[semanticmodel.ItemsClientUpdateSemanticModelResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSemanticModelID, semanticModelID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateSemanticModelRequest, updateSemanticModelRequest))
		resp = azfake.Responder[semanticmodel.ItemsClientUpdateSemanticModelResponse]{}
		resp.SetResponse(http.StatusOK, semanticmodel.ItemsClientUpdateSemanticModelResponse{SemanticModel: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	res, err := client.UpdateSemanticModel(ctx, exampleWorkspaceID, exampleSemanticModelID, exampleUpdateSemanticModelRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SemanticModel))
}

func (testsuite *FakeTestSuite) TestItems_DeleteSemanticModel() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete a semantic model example"},
	})
	var exampleWorkspaceID string
	var exampleSemanticModelID string
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleSemanticModelID = "5b218778-e7a5-4d73-8187-f10824047715"

	testsuite.serverFactory.ItemsServer.DeleteSemanticModel = func(ctx context.Context, workspaceID string, semanticModelID string, options *semanticmodel.ItemsClientDeleteSemanticModelOptions) (resp azfake.Responder[semanticmodel.ItemsClientDeleteSemanticModelResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSemanticModelID, semanticModelID)
		resp = azfake.Responder[semanticmodel.ItemsClientDeleteSemanticModelResponse]{}
		resp.SetResponse(http.StatusOK, semanticmodel.ItemsClientDeleteSemanticModelResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	_, err = client.DeleteSemanticModel(ctx, exampleWorkspaceID, exampleSemanticModelID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example ")
}

func (testsuite *FakeTestSuite) TestItems_GetSemanticModelDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a semantic model definition example"},
	})
	var exampleWorkspaceID string
	var exampleSemanticModelID string
	exampleWorkspaceID = "6e335e92-a2a2-4b5a-970a-bd6a89fbb765"
	exampleSemanticModelID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"

	exampleRes := semanticmodel.DefinitionResponse{
		Definition: &semanticmodel.Definition{
			Parts: []semanticmodel.DefinitionPart{
				{
					Path:        to.Ptr("definition/database.tmdl"),
					Payload:     to.Ptr("<base64 encoded string>"),
					PayloadType: to.Ptr(semanticmodel.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("definition/model.tmdl"),
					Payload:     to.Ptr("<base64 encoded string>"),
					PayloadType: to.Ptr(semanticmodel.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("definition/tables/Table1.tmdl"),
					Payload:     to.Ptr("<base64 encoded string>"),
					PayloadType: to.Ptr(semanticmodel.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("definition.pbism"),
					Payload:     to.Ptr("<base64 encoded string>"),
					PayloadType: to.Ptr(semanticmodel.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(semanticmodel.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginGetSemanticModelDefinition = func(ctx context.Context, workspaceID string, semanticModelID string, options *semanticmodel.ItemsClientBeginGetSemanticModelDefinitionOptions) (resp azfake.PollerResponder[semanticmodel.ItemsClientGetSemanticModelDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSemanticModelID, semanticModelID)
		resp = azfake.PollerResponder[semanticmodel.ItemsClientGetSemanticModelDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, semanticmodel.ItemsClientGetSemanticModelDefinitionResponse{DefinitionResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginGetSemanticModelDefinition(ctx, exampleWorkspaceID, exampleSemanticModelID, &semanticmodel.ItemsClientBeginGetSemanticModelDefinitionOptions{Format: nil})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DefinitionResponse))
}

func (testsuite *FakeTestSuite) TestItems_UpdateSemanticModelDefinition() {
	// From example
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a semantic model definition example"},
	})
	var exampleWorkspaceID string
	var exampleSemanticModelID string
	var exampleUpdateSemanticModelDefinitionRequest semanticmodel.UpdateSemanticModelDefinitionRequest
	exampleWorkspaceID = "cfafbeb1-8037-4d0c-896e-a46fb27ff229"
	exampleSemanticModelID = "5b218778-e7a5-4d73-8187-f10824047715"
	exampleUpdateSemanticModelDefinitionRequest = semanticmodel.UpdateSemanticModelDefinitionRequest{
		Definition: &semanticmodel.Definition{
			Parts: []semanticmodel.DefinitionPart{
				{
					Path:        to.Ptr("model.bim"),
					Payload:     to.Ptr("ewogICJjb21wYXRpYmlsaXR5TGV2ZW..GVzIjogWyBdDQogIH0NCn0"),
					PayloadType: to.Ptr(semanticmodel.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr("definition.pbism"),
					Payload:     to.Ptr("ewogICJ2ZXJzaW9uIjogIjQuMC..HRpbmdzIjoge30KfQ=="),
					PayloadType: to.Ptr(semanticmodel.PayloadTypeInlineBase64),
				},
				{
					Path:        to.Ptr(".platform"),
					Payload:     to.Ptr("ZG90UGxhdGZvcm1CYXNlNjRTdHJpbmc="),
					PayloadType: to.Ptr(semanticmodel.PayloadTypeInlineBase64),
				}},
		},
	}

	testsuite.serverFactory.ItemsServer.BeginUpdateSemanticModelDefinition = func(ctx context.Context, workspaceID string, semanticModelID string, updateSemanticModelDefinitionRequest semanticmodel.UpdateSemanticModelDefinitionRequest, options *semanticmodel.ItemsClientBeginUpdateSemanticModelDefinitionOptions) (resp azfake.PollerResponder[semanticmodel.ItemsClientUpdateSemanticModelDefinitionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleWorkspaceID, workspaceID)
		testsuite.Require().Equal(exampleSemanticModelID, semanticModelID)
		testsuite.Require().True(reflect.DeepEqual(exampleUpdateSemanticModelDefinitionRequest, updateSemanticModelDefinitionRequest))
		resp = azfake.PollerResponder[semanticmodel.ItemsClientUpdateSemanticModelDefinitionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, semanticmodel.ItemsClientUpdateSemanticModelDefinitionResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewItemsClient()
	poller, err := client.BeginUpdateSemanticModelDefinition(ctx, exampleWorkspaceID, exampleSemanticModelID, exampleUpdateSemanticModelDefinitionRequest, &semanticmodel.ItemsClientBeginUpdateSemanticModelDefinitionOptions{UpdateMetadata: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example ")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example ")
}
